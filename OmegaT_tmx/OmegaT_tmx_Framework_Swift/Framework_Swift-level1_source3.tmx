<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="5.3.0_0_2fd7a9ecc" segtype="sentence" srclang="en-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="en-US">
        <seg>(Irreflexivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（非反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Reflexivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（反射性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Symmetry)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（対称性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Transitive comparability)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（推移的比較性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Transitive incomparability)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（推移的比較不能性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Transitivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（推移性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>*</seg>
      </tuv>
      <tuv lang="ja">
        <seg>*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>CheckedContinuation performs runtime checks for missing or multiple resume operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CheckedContinuationは、見つからないまたは複数の再開操作に対する実行時検査を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>StaticString provides only low-level access to its contents, unlike Swift’s more commonly used String type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StaticStringは、それの内容への低レベルアクセスのみを提供します、Swiftのもつより一般的に使われるString型とは違って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SystemRandomNumberGenerator is automatically seeded, is safe to use in multiple threads, and uses a cryptographically secure algorithm whenever possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SystemRandomNumberGeneratorは、自動的にシードをえらびます、複数のスレッドにおける使用を安全にします、そして可能な時はいつでも暗号化保安アルゴリズムを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>T.min.isMultiple(of: -1) is true for signed integer T, even though the quotient T.min / -1 isn’t representable in type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>T.min.isMultiple(of: -1)はtrueです、符号付き整数Tに対して、たとえ商T.min / -1が型Tで表現可能でなくてさえ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task also provides appropriate context-sensitive static functions which operate on the “current” task, which might either be a detached task or a child task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Taskはまた、“現在の” タスク上で作動する適切な文脈依存の静的関数いくつかを提供します、それは分離タスクまたは子タスクのどちらかかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>\(foo: x) translates to appendInterpolation(foo: x)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>\(foo: x)はappendInterpolation(foo: x)に翻訳されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>\(x) translates to appendInterpolation(x)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>\(x)はappendInterpolation(x)に翻訳されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>\(x, foo: y) translates to appendInterpolation(x, foo: y)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>\(x, foo: y)はappendInterpolation(x, foo: y)に翻訳されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>\(x, y) translates to appendInterpolation(x, y)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>\(x, y)はappendInterpolation(x, y)に翻訳されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>alignment must be a whole power of 2.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>alignmentは２の整冪でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>appendInterpolation methods support virtually all features of methods: they can have any number of parameters, can specify labels for any or all of their parameters, can provide default values, can have variadic parameters, and can have parameters with generic types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>appendInterpolationメソッドそれらは、メソッドの全ての機能を事実上サポートします：それらは、どんな数のパラメータでも持つことができます、それらのパラメータのいくらかまたは全てにラベルを指定できます、省略時の値を提供できます、可変長引数を持つことができます、そして総称体型をもつパラメータを持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>areEquivalent(a, a) is always true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>areEquivalent(a, a)は常にtrueである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>areEquivalent(a, b) implies areEquivalent(b, a).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>areEquivalent(a, b)はareEquivalent(b, a)を意味する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>areInIncreasingOrder(a, a) is always false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>areInIncreasingOrder(a, a)は常にfalseである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>areInIncreasingOrder must be a strict weak ordering over the elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>areInIncreasingOrderは、それら要素に対して厳密弱順序でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>as, as?, and as!</seg>
      </tuv>
      <tuv lang="ja">
        <seg>as, as?, および as!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>byteCount must not be negative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>byteCountは、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>count must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>countは、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>count must not be negative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>countは負数であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>elements must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>elementsは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>end must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>endはコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hashValue is deprecated as a Hashable requirement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>hashValueは、Hashable要件として非推奨にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>i must be a valid index of the string that is not equal to the string’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iは、この文字列の有効なインデックスでなければなりません、そしてこの文字列の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>i must be greater than startIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iはstartIndexより大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>i must be in the range 0..&lt;count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iは、範囲0..&lt;countの中でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>i must be less than endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iはendIndexより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>i must be less than the string’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iは文字列の末尾インデックスより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>index must be a valid index into the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>indexはコレクションに対する有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>index must be a valid index of the collection that is not equal to the collection’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>indexは、このコレクションの有効なインデックスでなければなりません、そしてこのコレクションの持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>index must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>indexはコレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>index must be in the range 0..&lt;scalarCount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>indexは、範囲0..&lt;scalarCountの中になければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>initialResult is passed to nextPartialResult the first time the closure is executed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>initialResultはnextPartialResultに、クロージャが実行される最初の時に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>input must be the same iterator instance in repeated calls to this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>inputは、このメソッドに対して繰り返される呼び出しにおいて同じイテレータでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>k must be greater than or equal to zero and must not exceed the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>kは、ゼロより大きいか等しくなければなりません、そしてコレクションの中の要素の数を越えてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>kは、ゼロより大きいか等しくなければなりません、そしてコレクションの要素数より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>k must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>kは、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>length is the number of underlying code units consumed by this error, guaranteed to be greater than 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>lengthは、このエラーによって消費される、基礎をなすコード単位の数です、０より大きいことを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maxLength must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>maxLengthは、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>n must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nは、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>offset must be nonnegative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>offsetは、非負でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>position must be a valid index of the collection that is not equal to the endIndex property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>positionはコレクションの有効なインデックスで、endIndexプロパティと等しくないものでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>position must be a valid index of the collection that is not equal to the collection’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>positionは、このコレクションの有効なインデックスでなければなりません、そしてこのコレクションの持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>position must be less than the view’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>positionはこのビューの末尾インデックスより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>radix must be at least 2 and at most 36.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>radix基数は少なくとも２そして多くて36でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>range must not be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rangeは空であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scalars must have the same number of elements as the vector type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>scalarsは、ベクター型と同じ数の要素を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source must be representable in this type after rounding toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceは、ゼロへの丸め後にこの型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source.count must be less than or equal to this buffer’s count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>source.countは、このバッファのもつcountより少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>start must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>startはコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>transformはこのシーケンスのひとつの要素をそれのパラメータとして受け取り、同じもしくは異なる型の変換された値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>transform accepts an element of this sequence as its parameter and returns an AsyncSequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>transformはこのシーケンスのある要素をそれのパラメータとして受け取り、そしてAsyncSequenceを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if byte is a continuation byte; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>byteが継続バイトならばtrue；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if i has been offset by exactly distance steps without going beyond limit; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、もしiが正確にdistance幅だけlimitを越えていくことなく補われたならば；そうでなければ、falseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if lhs is greater than or equal to rhs; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>trueを、lhsがrhsより大きいか等しいならば返します；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if x is a high-surrogate code unit; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>xが高位サロゲートコード単位ならばtrue；そうでなけれぱfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if x is a low-surrogate code unit; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>xが低位サロゲートコード単位ならばtrue；そうでなけれぱfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the element was found in the sequence; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素がシーケンスにおいて見つけられなかったならば、true；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the group has no pending tasks; otherwise false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、もしグループが未解決タスクを持たないならば；そうでなければfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、もしシーケンスの冒頭の要素がpossiblePrefixの要素と等しいならば；そうでなければfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、もしシーケンスの冒頭の要素がpossiblePrefixの要素と同じならば；そうでなければfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the method found the element in the asynchronous sequence; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、もしメソッドがその要素をこの非同期シーケンスの中で見つけたならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the operation was added to the group successfully, false otherwise (e.g. because the group isCancelled)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算がグループにうまく加えられたならば、true、そうでなければfalse（たとえば、グループがisCancelledされたから）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the sequence contains an element that satisfies predicate; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスがpredicateを満たす要素を含むならばtrue；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the sequence contains an element that satisfies predicate; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、もしシーケンスが述部を満足させる要素を含むならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the sequence contains only elements that satisfy predicate; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、もしシーケンスがpredicateを満たす要素のみを含むならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the string begins with prefix; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、文字列がprefixで始まるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if the string ends with suffix; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、もし文字列がsuffixで終わるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、このシーケンスとotherがareEquivalentを同等性テストとして使って同じ要素らを含むならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if this sequence and other contain the same elements in the same order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスとotherが同じ要素を同じ順序で含んでいるならば、true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>true、もしこのシーケンスがotherに、areInIncreasingOrderによって並べられる通りの字典順序において先行するならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true if this sequence precedes other in a dictionary ordering; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスがotherに、ある字典順序において先行するならば、true；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>v must be a valid Unicode scalar value, in the ranges 0...0xD7FF or 0xE000...0x10FFFF.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>vは、有効なユニコードスカラー値、0...0xD7FFおよび0xE000...0x10FFFFの範囲でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>x must be represented by a surrogate pair when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>xは、UTF-16でエンコードされる時あるサロゲートペアで表現されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>x.isMultiple(of: 0) is true if x is zero and false otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>x.isMultiple(of: 0)はtrueです、もしxがゼロであるならば、そしてそうでなければfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>count must be zero or greater.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>countは、ゼロまたはより大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>count must not be negative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>countは負数であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>distanceは、そのコレクションがBidirectionalCollectionプロトコルに準拠するのでない限り、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>n must not be negative unless the collection conforms to the BidirectionalCollection protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nは、そのコレクションがBidirectionalCollectionプロトコルに準拠するのでない限り、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>radix must be in the range 2...36.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>radixは、範囲2...36の中でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rhs must not be zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rhsは、ゼロではなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source.count must be less than or equal to this buffer’s count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>source.countは、このバッファのもつcountより少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourcePosition must be a valid index of at least one of the views of target.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourcePositionは、targetの少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>transform can also throw an error, which ends the transformed sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>transformはまたエラーをスローできます、それは変換されたシーケンスを終わらせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>utf16Index must be an element of String(unicodeScalars).utf16.indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>utf16Indexは、String(unicodeScalars).utf16.indicesの要素でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>DefaultPrecedence has no associativity and a precedence immediately higher than TernaryPrecedence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>DefaultPrecedenceは、TernaryPrecedenceのすぐ上の結合性と優先順位を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeContinuation avoids enforcing these invariants at runtime because it aims to be a low-overhead mechanism for interfacing Swift tasks with event loops, delegate methods, callbacks, and other non-async scheduling mechanisms.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeContinuationは、それら不変式を実行時に遵守させることを避けます、なぜならそれはイベントループを備えるSwiftタスク、委任メソッド、コールバック、そして他の非asyncスケジューリング機構を取り持つことに対して低オーバーヘッド機構であるように努力するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>count must not be negative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>countは負数であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maxSplits must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>maxSplitsは、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafePointer provides no automated memory management or alignment guarantees.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafePointerは、自動メモリ管理またはアラインメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>n may be positive, negative, or zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nは、正、負、またはゼロが許されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeMutablePointer provides no automated memory management or alignment guarantees.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutablePointerは、自動メモリ管理またはアラインメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initialized memory has a value that can be read using a pointer’s pointee property or through subscript notation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化済メモリは、pointeeプロパティまたは添え字表記法を使って読み出し可能な値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String interpolations are string literals that evaluate any included expressions and convert the results to string form.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列補間は文字列リテラルです、それは、何らかの含まれた式を評価して、その結果を文字列形式へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Required. Default implementation provided.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必須。 省略時の実装の提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Required. Default implementations provided.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必須。 いくつかの省略時の実装の提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See Also </seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 16-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 16-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 32-bit floating point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビット浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 32-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 32-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 64-bit floating point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64ビット浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 64-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64ビット符号付き整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 64-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Collection that provides its own implementation of this method must also guarantee that an equivalent buffer of its SubSequence can be generated by advancing the pointer by the distance to the slice’s startIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドのそれ独自の実装を提供するCollectionはまた、それのSubSequenceの同等のバッファが、スライスのもつstartIndexへの隔たりだけポインタを前進することによって生成されることを保証しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Collection whose elements consist of those in a Base Collection passed through a transform function returning Element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるCollection、その要素はBase Collectionの中のものから成り、Elementを返す変換関数を通して渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Result.success value containing the value that the child task returned, or a Result.failure value containing the error that the child task threw.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>子タスクが返した値を含んでいるResult.success値、または子タスクがスローしたエラーを含んでいるResult.failure値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Sequence that can contain the same elements as this one, possibly with a simpler type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このものと同じ要素を、できる限りより簡単な型で、含むSequence。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Sequence whose elements consist of those in a Base Sequence passed through a transform function returning Element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるSequence、その要素はBase Sequencellectionの中のものから成り、Elementを返す変換関数を通して渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A String value, if Type is Int8 or UInt8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>String値、もしTypeがInt8またはUInt8ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A T was parsed successfully</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Tがうまく構文解析された</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UnicodeDecodingResult instance, representing the next Unicode scalar, an indication of an error, or an indication that the UTF sequence has been fully decoded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次のユニコードスカラー、エラーの症状、またはUTFシーケンスが完全にデコードされた徴を表している、あるUnicodeDecodingResultインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A [Type] value, which is passed as a pointer to the start of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>[Type]値、それは配列の始まりへのポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A ReversedCollection instance wraps an underlying collection and provides access to its elements in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ReversedCollectionインスタンスは、基礎をなすコレクションをラップして、それの要素へのアクセスを逆順で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A continuation is an opaque representation of program state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある継続は、プログラム状態の不透明表現です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string literal is a series of characters enclosed in quotes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列リテラルは、引用符に囲まれた一連の文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A trivial type can be copied bit for bit with no indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明な型は、ビット対ビットでコピーされることが、何らかの間接参照または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether a string has no characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列が文字をひとつも持たないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the Unicode scalar is an ASCII character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このユニコードスカラーがあるASCII文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the collection is empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar has a “soft dot” that disappears when a diacritic is placed over the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>区別的発音符がスカラーにかぶせて置かれる時に姿を消す “ソフトドット” を、このスカラーが持つかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar has an emoji presentation, whether or not it is the default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがemoji提示物を持つかどうか、それが初期設定であるかそうでないか、を指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a default-ignorable code point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがある省略時無視可能なコード点かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a diacritic.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが区別的発音符であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a format control character that has a specific function in controlling cursive joining and ligation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのスカラーが特定の機能を筆記体の結合と合字の制御において持つ書式制御文字かどうかを指し示しているあるブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a format control character that has a specific function in the Unicode Bidrectional Algorithm.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがある特定の機能を「ユニコード双方向アルゴリズム」において持つ書式制御文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a grapheme base.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このユニコードスカラーがある書記素基底であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a grapheme extender.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが書記素拡張かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a punctuation mark that generally marks the end of a sentence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが一般的に文の終わりを印する句読点符号であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a punctuation symbol explicitly called out as a dash in the Unicode Standard or a compatibility equivalent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがユニコード標準またはある互換相当物においてダッシュとして明示的に召集される句読点シンボルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a punctuation symbol that typically marks the end of a textual unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが概してテキスト単位の終わりを印する句読点シンボルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a radical component of CJK characters, Tangut characters, or Yi syllables.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがCJK文字、西夏（タングート）文字、またはイ文字音節の根本的な構成要素かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a variation selector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが異体字セレクタであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a whitespace character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが空白文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is alphabetic.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがアルファベットであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is an ASCII character commonly used for the representation of hexadecimal numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが16進数の表現に一般に使われるASCII文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is an ideographic description character that determines how the three ideographic characters or ideographic description sequences that follow it are to be combined to form a single character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが３つの表意文字またはそれに続く表意文字記述シーケンスが結び付けられて単一の文字を形成する方法を決定する表意文字記述文字かどうかを指し示すブール値。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is an ideographic description character that determines how the two ideographic characters or ideographic description sequences that follow it are to be combined to form a single character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが２つの表意文字またはそれに続く表意文字記述シーケンスが結び付けられて単一の文字を形成する方法を決定する表意文字記述文字かどうかを指し示すブール値。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is considered to be a CJKV (Chinese, Japanese, Korean, and Vietnamese) or other siniform (Chinese writing-related) ideograph.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのスカラーが、CJKV（中国語、日本語、朝鮮語、そしてベトナム語）または他のスィーニー体（中国語筆記関連）表意文字であると考えられるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is considered to be either lowercase, uppercase, or titlecase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがローワーケース、アッパーケース、またはタイトルケースのどれかであると考えられるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is deprecated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが非推奨であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is excluded from composition when performing Unicode normalization.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがユニコード正規化を実行する時に構成から除外されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is ignored for casing purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがケーシング意図に対して無視されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is mirrored in bidirectional text.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが双方向テキストにおいて正確に映し出されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one of the unified CJK ideographs in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがユニコード標準における統一CJK表意文字の１つであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that can modify a base emoji that precedes it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがそれに先行するある基底emojiを修正できるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that is commonly used for the representation of hexadecimal numbers or a compatibility equivalent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが16進数の表現またはある互換相当物に一般に使われるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that is not identical to its NFKC case-fold mapping.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのスカラーが、それのNFKCケースフォルド・マッピングと同一ではないものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that is used in writing to surround quoted text.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが引用テキストを囲むために筆記において使われるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that naturally appears in mathematical contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが数学的文脈において自然に現れるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that should be rendered with an emoji presentation, rather than a text presentation, by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが初期状態で、テキスト提示物ではなく、emoji提示物で描出されるべきものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one which is recommended to be allowed to appear in a non-starting position in a programming language identifier, with adjustments made for NFKC normalized form.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがプログラム言語識別子において始まりでない位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブール値、NFKC正規化形式に対する調整がなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one which is recommended to be allowed to appear in a non-starting position in a programming language identifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがプログラム言語識別子において始まりでない位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one which is recommended to be allowed to appear in a starting position in a programming language identifier, with adjustments made for NFKC normalized form.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがプログラム言語識別子において始まりの位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブール値、NFKC正規化形式に対する調整がなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one which is recommended to be allowed to appear in a starting position in a programming language identifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがプログラム言語識別子において始まりの位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one whose appearance can be changed by an emoji modifier that follows it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがそれに続くあるemoji修飾子によってそれの外観が変更可能なものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is permanently reserved for internal use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが内部的な利用に対して永続的に予約されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is recommended to be treated as whitespace when parsing patterns represented in source code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがソースコードにおいて表されるパターンを構文解析する時に空白として扱われることを推奨されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is recommended to have syntactic usage in patterns represented in source code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがソースコードにおいて表されるパターンで統語論的な利用法を持つことを推奨されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar may change when it undergoes case mapping.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがケースマッピングを受ける時に変化するかもしれないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar requires special handling for operations involving ordering, such as sorting and searching.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがソートおよび検索のような順序付けを発動する演算に対して特別な取り扱いを要求するかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s letterform is considered lowercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ字形がローワーケースと考えられるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s letterform is considered uppercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ字形がアップケースと考えられるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s normalized form differs from the lowercaseMapping of each constituent scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ正規化形式が、各構成スカラーのlowercaseMappingと異なるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s normalized form differs from the titlecaseMapping of each constituent scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ正規化形式が、各構成スカラーのtitlecaseMappingと異なるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s normalized form differs from the uppercaseMapping of each constituent scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ正規化形式が、各構成スカラーのuppercaseMappingと異なるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s normalized form differs from the case-fold mapping of each constituent scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ正規化形式が各構成スカラーのケースフォルド・マッビングと異なるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s principal function is to extend the value or shape of a preceding alphabetic scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ主要機能が先行するアルファベットのスカラーの値や形状を拡張することであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether there are no more elements left to be decoded in the container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンテナの中にデコードされるための要素がこれ以上残ってないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this type is a signed integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型が符号付き整数型であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value that indicates whether the group has any remaining tasks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値、それはグループが何か残っているタスクを持つかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value that indicates whether the group was canceled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値、それはグループが取り消されたかどうかを指し示す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value that indicates whether the static string represents only ASCII code units (or an ASCII scalar value).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値、それはその静的文字列がASCIIコード単位（またはASCIIスカラー値）だけを表すかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value that indicates whether the static string stores a pointer to a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値、それはその静的文字列があるnull終端された一連のUTF-8コード単位へのあるポインタを格納するかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A C0 or C1 control code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C0 または C1 制御コード。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A SIMD vector of a fixed number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>固定された数の要素のSIMDベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UTF-16 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つのUTF-16コード単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UTF-16 encoding of self.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>selfのUTF-16符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UTF-8 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つのUTF-8コード単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UTF-8 encoding of self.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>selfのUTF-8符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Unicode encoding form that translates between Unicode scalar values and form-specific code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコード符号化形式、それはユニコードスカラー値と形式特有のコード単位の間で翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Unicode string value that is a collection of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコード文字列値、それは、いくらかの文字からなる１つのコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bit pattern to use for the address of the new pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいポインタのアドレスのために使われるビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bitwise AND operation results in a value that has each bit set to 1 where both of its arguments have that bit set to 1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位AND演算は、ある値という結果になります、それが各ビットを1に設定するのは、両方のそれの引数が、そのビットを1に設定するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bitwise OR operation results in a value that has each bit set to 1 where one or both of its arguments have that bit set to 1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位OR演算は、ある値という結果になります、それが各ビットを1に設定するのは、一方または両方のそれの引数が、そのビットを1に設定するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bitwise XOR operation, also known as an exclusive OR operation, results in a value that has each bit set to 1 where one or the other but not both of its arguments had that bit set to 1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位XOR演算、または排他的OR演算として知られるものは、１つの値という結果になり、それは各ビットが1に設定されます、そこにおいて一方または他方しかし両方でなくそれの引数がそのビットを1に設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A buffer of raw bytes from which to copy.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のバイトのバッファで、それからコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A buffer pointer to a newly allocated region of memory aligned to alignment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>alignmentにアラインされた新規割り当てのメモリ領域へのバッファポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A cancelled group will not will create new tasks when the asyncUnlessCancelled, function is used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取り消されたグループは、asyncUnlessCancelled関数が使われる場合は新しいタスクを作成しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A class instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクラスインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A class of types whose instances hold the value of an entity with stable identity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらのインスタンスはある登録項目の値を安定した同一性で保持するところの型それらのクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A class whose instances contain a property of type Header and raw storage for an array of Element, whose size is determined at instance creation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクラス、そのインスタンスは型Headerのプロパティと、そのサイズがインスタンス作成時に決められる、Element配列の生のストレージを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closing punctuation mark of a pair.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある対のある閉じ句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that accepts a buffer covering uninitialized memory with room for capacity UTF-8 code units, initializes that memory, and returns the number of initialized elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはcapacityのUTF-8単位に対する空き場所をもつ初期化されないメモリを扱うバッファを受け入れ、そのメモリを初期化し、そして初期化された要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that accepts an element of this sequence as its argument and returns a sequence or collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスのひとつの要素をそれの引数として受け取って、あるシーケンスまたはコレクションを返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that accepts an element of this sequence as its argument and returns an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスのひとつの要素をそれの引数として受け取って、ひとつのオプショナルの値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは蓄積値と非同期シーケンスのいち要素を新しい蓄積値へと結合します、nextPartialResultクロージャの次の呼び出しにおいて使うためにまたは呼び出し側に返されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは蓄積値をシーケンスのいち要素と結合して新しい蓄積値とし、nextPartialResultクロージャの次の呼び出しにおいて使われるか、呼び出し側に返されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that processes one code unit argument at a time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは一度に１つのコードユニット引数を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that returns true if its argument should be used to split the sequence; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つのクロージャ、それはそれの引数が使われてシーケンスを分割するならばtrueを；そうでなければ、falseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that returns a Boolean value indicating whether two elements are equivalent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの要素が等しいかどうかを指し示しているブール値を返すクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a buffer pointer to the static string’s UTF-8 code unit sequence as its sole argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは静的文字列のもつUTF-8コード単位シーケンスへのバッファポインタをそれの唯一の引数として取るものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a mutable typed buffer to the same memory as this buffer, only bound to type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは、型Tに束縛しただけの、このバッファと同じメモリに対する可変の型付バッファをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a mutable typed pointer to the same memory as this pointer, only bound to type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは、型Tに束縛しただけの、このポインタと同じメモリへの可変の型付ポインタをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a typed buffer to the same memory as this buffer, only bound to type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは、型Tに束縛しただけの、このバッファと同じメモリに対する型付バッファをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a typed pointer to the same memory as this pointer, only bound to type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは、型Tに束縛しただけの、このポインタと同じメモリへの型付ポインタをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはある要素をパラメータとして取り、その要素がこの修正後のシーケンスに含まれるべきかどうかを指し示すブール値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはある要素をパラメータとして取り、その要素をこの修正後のシーケンスから抜かすことになるかどうかを指し示すブール値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは１つの要素を引数として取り、コレクションがその要素で分割されるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは１つの要素をそれの引数として取り、渡された要素が合致するものであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは非同期シーケンスの１つの要素をそれの引数として取り、その要素があるマッチであるかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこの非同期シーケンスの１つの要素をそれの引数として取り、渡された要素があるマッチを表すかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこの非同期シーケンスの１つの要素をそれの引数として取り、渡された要素がある条件を満たすかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは非同期シーケンスの１つの要素をそれの引数として取り、その要素をこの平坦化されたシーケンスに含むことになるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as a parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１要素を引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が含まれるべきならばtrueをまたはそれが除外されるべきならばfalseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が省かれるべきならばtrueをまたはそれが含まれるべきならばfalseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が合致するものかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が結果に含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が返される配列に含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が返されるコレクションに含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素がコレクションから除去されるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスの１つの要素をそれの引数として取り、渡された要素が合致するものであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスの１つの要素をそれの引数として取り、渡された要素がある条件を満たすかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that updates the accumulating value with an element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>蓄積される値をこのシーケンスのある要素を使って更新するクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure with a pointer parameter that points to a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8コード単位のnull終端シーケンスを指し示すポインタパラメータを持つクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure with a pointer parameter that points to a null-terminated sequence of code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コード単位からなるnull終端シーケンスを指し示すポインタパラメータを持つクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection containing a single element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一の要素を含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection containing the same elements as a Base collection, but on which some operations such as map and filter are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Baseコレクションと同じ要素を含んでいるあるコレクション、しかしそれの上で何らかの演算、例えばmapやfilterが遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection containing the words of this value’s binary representation, in order from the least significant to most significant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の持つバイナリ表現の単語いくらかを含んでいるコレクション、最下位から最上位への順番で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of Character elements to insert into the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列へ挿入されることになるCharacter要素からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of UInt8 elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt8要素からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値のコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of code units encoded in the encoding specified in sourceEncoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceEncodingにおいて指定されたエンコーディングでエンコードされたコード単位からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of indices for an arbitrary collection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不定なコレクションのためのインデックスのコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of insertions and removals that describe the difference between two ordered collection states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの順序付きコレクション状態の間の差異を記述するいくらかの挿入と除去からなるあるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of the elements that isIncluded allowed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>isIncludedを認められた要素それらからなるあるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection on which normally-eager operations such as map and filter are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション、それにおいては通常は先行な演算、例えばmapやfilterは、遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection or finite sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションまたは有限のシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that presents the elements of its base collection in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション、それは、それの基盤コレクションの要素を逆順で提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that supports backward as well as forward traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前方にだけでなく後方へ辿っていくこともサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that supports efficient random-access index traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>効率のよい無作為アクセスのインデックス探査をサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that supports replacement of an arbitrary subrange of elements with the elements of another collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>随意の下位範囲の要素を別のコレクションの要素で置き換えることをサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that supports subscript assignment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字を使った代入をサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection whose element type is Element but that is always empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの要素型はElementである、しかし常に空であるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection whose elements are all identical.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション、その要素は全て同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection whose elements are key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの要素がキー値ペアであるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection’s indices property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションのindicesプロパティは、そのコレクション自身に対する強い参照を保持でき、そのコレクションが特有にでなくとも参照されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションのindicesプロパティは、そのコレクション自身に対する強い参照を保持でき、そのコレクションが非特有に参照されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A concrete container that provides a view into a decoder’s storage, making the encoded properties of a decodable type accessible by keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある具体的なコンテナで、あるデコーダの持つストレージへのビューを提供します、デコーダ可能型のエンコードされたプロパティをキーによってアクセス可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A concrete container that provides a view into an encoder’s storage, making the encoded properties of an encodable type accessible by keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある具体的なコンテナで、あるエンコーダの持つストレージへのビューを提供します、エンコード可能型のエンコードされたプロパティをキーによってアクセス可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A connecting punctuation mark, like a tie.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>連結句読点符号、tieのような。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A container that can support the storage and direct decoding of a single nonkeyed value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一非キー値のストレージおよび直接デコーディングをサポートできるコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A container that can support the storage and direct encoding of a single non-keyed value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一非キー値のストレージおよび直接エンコーディングをサポートできるコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A contiguously stored null-terminated UTF-8 representation of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>隣接格納されるヌル終端UTF-8表現のこの文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A continuation must be resumed exactly once.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続は、厳密に一度だけ再開されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A currency sign.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>通貨符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the String instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Stringインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the UInt16 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt16インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the UInt32 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt32インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the UInt64 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt64インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the UInt8 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt8インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the UInt instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UIntインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the Unicode.Scalar instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Unicode.Scalarインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dash or hyphen punctuation mark.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ダッシュまたはハイフン句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A decimal digit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある10進法数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A decoded Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコードされたユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要求された型にデコード済みの値、またはnil、もしその値がnull値ならば、またはもしデコードする要素がそれ以上ないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A default implementation of this method will be provided automatically for any conforming type that does not implement one.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドの省略時の実装は、それを実装していないあらゆる準拠している型に対して自動的に提供されるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A detached task always runs to completion unless it is explicitly cancelled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>分離されたタスクは、常に完了まで動作します、それが明示的に取り消されない限り。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A digit that does not meet the requirements of the decimal numeric type or a non-digit numeric value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>decimal数値型の要件を満たさない桁または非桁数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A digit that does not meet the requirements of the decimal numeric type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>decimal数値型の要件を満たさない桁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A digit that is commonly understood to form base-10 numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般に底10の数の形式に理解される桁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A digraph character whose first part is uppercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの最初の部分が大文字である連字文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A double-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>倍精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dynamic plain-text Unicode string object, for use instead of a String variable in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>動的なプレーンテキストユニコード文字列オブジェクト、参照意味論を必要とする場合にString変数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A final quotation mark.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後の引用符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A flattened view of the elements of this sequence of sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複数のシーケンスからなるこのシーケンスの要素のある平坦なビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point numeric type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point value to convert to an integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数へと変換する浮動小数点値．</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A format control character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書式制御文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A grapheme base can be thought of as a space-occupying glyph above or below which other non-spacing modifying glyphs can be applied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書記素基底は、それの上または下に他の無間隔修飾字体が適用できる場所取り字体として考えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A grapheme extender can be thought of primarily as a non-spacing glyph that is applied above or below another glyph.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期素拡張は概ね別の字体の上または下に適用される無間隔字体として考えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A half-open interval from a lower bound up to, but not including, an upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下側の境界から、上側の境界まで、しかしそれを含んでいない、半開間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A half-precision (16b), floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>半精度（16b）、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path from a specific root type to a specific resulting value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特定の根本の型から特定の結果値の型へのキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path is a string of dot-separated keys that specifies a sequence of object properties to traverse.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパスは、辿っていく一連のオブジェクトプロパティを指定する、ドット区切りのキーの文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path that supports reading from and writing to the resulting value with reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果値からのよみ出し及びそれへの書き込みを参照意味論でサポートするキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path that supports reading from and writing to the resulting value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果値からのよみ出し及びそれへの書き込みをサポートするキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A keyed decoding container view into self.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>selfへのキー付きデコーディングコンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lazy Collection wrapper that includes the elements of an underlying collection that satisfy a predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延なCollectionラッパー、それは根底にあるコレクションの要素のうち、ある述部を満足させるものを含めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lazy collection wrapper that includes the initial consecutive elements of an underlying collection that satisfy a predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延collectionラッパー、それは根底にあるコレクションのうち、ある述部を満足させる、最初の連続した要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lazy wrapper that includes the elements of an underlying collection after any initial consecutive elements that satisfy a predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延なラッパー、それは根底にあるコレクションのうち、ある述部を満足させる何らかの最初の連続した要素の後ろの要素らを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A letter-like numeric character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字のような数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lightweight collection of key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値ペアの軽量コレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A line separator, which is specifically (and only) U+2028 LINE SEPARATOR.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行分離子、それは具体的には（そして唯一）U+2028 LINE SEPARATOR です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lookup made from the context of a synchronous function, that is not called from an asynchronous function (!), will immediately return the task-local’s default value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同期関数の文脈から作られた検索は、それは非同期関数から呼び出されません（！）、直ぐにタスクローカルのもつ省略時の値を返すでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lowercase copy of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の小文字でのコピー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lowercase letter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>小文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mapping closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マップを行うクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mechanism to interface between synchronous and asynchronous code, logging correctness violations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同期と非同期のコードの間を取り持つためのある仕組み、それは正確さ侵害を記録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mechanism to interface between synchronous and asynchronous code, without correctness checking.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同期と非同期のコードの間を取り持つための仕組み、正確さ検査なしで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A memory location may only be bound to one type at a time, so accessing the same memory as an unrelated type without first rebinding the memory is undefined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるメモリ位置は一度に１つの型へとバインド（束縛）されるだけでしょう、なので同じメモリに関連のない型として最初にメモリ再バインドすることなしにアクセスすることは、未定義となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A memory location may only be bound to one type at a time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるメモリ位置は、一度に１つの型に束縛されるだけでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the String instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Stringインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the UInt16 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt16インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the UInt32 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt32インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the UInt64 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt64インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the UInt8 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt8インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the UInt instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UIntインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the Unicode.Scalar instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Unicode.Scalarインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A modifier letter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>修飾文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mutable nonowning collection interface to the bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリのいち領域中のバイトに対する可変の非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mutable pointer addressing an Objective-C reference that doesn’t own its target.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのターゲットを所有しないObjective-C参照をアドレス指定している可変ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mutable pointer to the elements of an array is implicitly created when you pass the array using inout syntax.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の要素への可変ポインタは、あなたが配列をinout構文を使って渡す時に暗黙的に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A namespace for Unicode utilities.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードユーティリティのための名前空間。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new Decoder to pass to super.init(from:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>super.init(from:)に渡すための新しいDecoder。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new encoder to pass to super.encode(to:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>super.encode(to:)に渡すための新しいエンコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new instance initialized with rawValue will be equivalent to this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rawValueで初期化された新しいインスタンスは、このインスタンスに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new instance of type T, copied from the buffer pointer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型Tの新しいインスタンス、バッファポインタのもつメモリからコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new instance of type T, read from the raw bytes at offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型Tの新しいインスタンス、offsetで生のバイトから読み込んだもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new keyed encoding container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいキー付けされるエンコーディングコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new unkeyed encoding container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいキー付けされないエンコーディングコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A non-letterlike modifier symbol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字でないような修飾記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A non-spacing combining mark with zero advance width (abbreviated Mn).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロ送り幅をもつ非空白結合記号（省略してMn）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A nonowning collection interface to a buffer of elements stored contiguously in memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中に隣接して格納された、いくらかの要素からなるあるバッファに対する非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A nonowning collection interface to a buffer of mutable elements stored contiguously in memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中に隣接して格納された、いくらかの可変の要素からなるあるバッファに対する非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A nonowning collection interface to the bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリのいち領域中のバイトに対する非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A numeric character of another type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の型の数字文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A numeric representation of the Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーの数値表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A numeric value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A paragraph separator, which is specifically (and only) U+2029 PARAGRAPH SEPARATOR.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>段落分離子、それは具体的には（そして唯一）U+2029 PARAGRAPH SEPARATOR です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A partial half-open interval up to, but not including, an upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上側の境界までの、しかしそれを含まない部分的半開間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A partial interval extending upward from a lower bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある下側の境界から上向きに拡張する部分的な間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A partial interval up to, and including, an upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある上側の境界までの、そしてそれを含んでいる部分的な間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A partially type-erased key path, from a concrete root type to any resulting value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある部分的な型消去キーパス、具体的な根本の型から何らかの結果値の型への。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer advanced from this pointer by MemoryLayout&lt;Pointee&gt;.stride bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタからMemoryLayout&lt;Pointee&gt;.strideバイトだけ繰り上げられるポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer for accessing and manipulating data of a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある特定の型のデータにアクセスおよび操作するためのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer for accessing data of a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある特定の型の日付にアクセスするためのボインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer offset from this pointer by n instances of the Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタからn個のPointee型のインスタンス分だけ補われたポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer shifted backward from this pointer by MemoryLayout&lt;Pointee&gt;.stride bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから後ろへMemoryLayout&lt;Pointee&gt;.strideバイトだけずらされるポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a newly allocated region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しくアロケートされたメモリ領域へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a null-terminated UTF-8 code sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ヌル終端のコードシーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a null-terminated code sequence encoded in encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>encodingでエンコードされたヌル終端のコードシーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるnull終端された一連のUTF-8コード単位へのあるポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a sequence of contiguous code units in the encoding specified in sourceEncoding, ending just before the first zero code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceEncodingで指定のエンコーディングでの、最初のゼロコード単位の直前で終わっている隣接コード単位シーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a sequence of contiguous, UTF-8 encoded bytes ending just before the first zero byte.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のゼロバイト直前で終わっている、隣接の、UTF-8エンコードされた幾らかのバイトに対するポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to at least count initialized instances of type Pointee.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>少なくともcount個の初期化された型Pointeeのインスタンスに対するポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to the first byte of the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファへの最初のバイトへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to the first element of the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの最初の要素へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to the memory to copy bytes from.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこからバイトをコピーすることになるメモリへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to the start of the buffer, or nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの始まりへのポインタ、またはnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to the values to copy.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コピーされる値に対するポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in a String or one of its views.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるStringまたはそれのビューの１つの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in a view of the target parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>targetパラメータのあるビューの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in at least one of the views of the string shared by target.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>targetによって共有される文字列のいくつかのビューのうち少なくとも１つにおけるある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in the utf16 view of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のutf16の中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position of a character or code unit in a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の中のある文字またはコード単位の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A possible prefix to test against this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列に対してテストすることになる可能性のある接頭辞。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A possible suffix to test against this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列に対してテストすることになる可能性のある接尾辞。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある述部、それはそれの最初の引数がそれの２番目の引数の前に並べられるべきならばtrueを返します；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A predicate that returns true if its two arguments are equivalent; otherwise, false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある述部、それはそれの２つの引数が等しいならばtrueを返します；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A predicate used to partition the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションに仕切りをするのに使われる述部。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A private-use character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>私用面の文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A punctuation mark of another type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の型の句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A radix-2 (binary) floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるradix-2（バイナリ）浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A random element from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションからのある無作為の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A random value of T in the range 0..&lt;upperBound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある無作為なTの値で範囲0..&lt;upperBoundの中のもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A random value of T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある無作為なTの値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A random value within the bounds of range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rangeの境界内のある無作為な値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range expression that represents the entire range of a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションの全体の範囲を表す範囲式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range of the buffer’s indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつインデックスの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range of the collection’s indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのもつインデックスのある範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range-replaceable collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲置換可能なコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A raw pointer for accessing and manipulating untyped data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付けされないデータにアクセスおよび操作するための生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A raw pointer for accessing untyped data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付けされないデータにアクセスするための生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A raw pointer to the same address as this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタと同じアドレスに対する生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A representation of the string that is suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その文字列のひとつの表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A representation of the substructure and display style of an instance of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位構造体の表現と何らかの型のインスタンスの表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A representation of this integer with the byte order swapped.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のバイト順交換した表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A reserved unassigned code point or a non-character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>予約済み未割り当てコード点または非文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence built around an iterator of type Base.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型Baseのイテレータに基づいて構築されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence consisting of all the elements contained in each segment contained in some Base sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかのBaseシーケンスに含まれる各断片の中に含まれるいくらかの要素から成るシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence containing the same elements as a Base sequence, but on which some operations such as map and filter are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Baseシーケンスと同じ要素を含んでいるシーケンス、しかしそれの上で何らかの演算、例えばmapやfilterが遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスと同じ要素を含んでいるシーケンス、しかしそれの上で何らかの演算、例えばmapやfilterが遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence leaving off the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素を取り除いたあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値のシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの文字からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of elements with which to initialize the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>幾らかの要素からなるシーケンス、それに対してバッファを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of elements with which to initializer the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの要素からなるシーケンス、それを使ってバッファを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of pairs built out of two underlying sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの根底にあるシーケンスから組み立てられるペアからなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of pairs enumerating the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスを列挙している、ペアからなるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of the initial, consecutive elements that satisfy predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>predicateを満たす冒頭の、隣接する要素からなるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of values formed by striding over a closed interval.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある完結間隔の全体をまたぐことで形成されるいくつかの値からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of values formed by striding over a half-open interval.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある半開間隔の全体をまたぐことで形成されるいくつかの値からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence on which normally-eager sequence operations are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それにおいては通常は先行な演算は、遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence starting after the initial, consecutive elements that satisfy predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>predicateを満たす冒頭の、隣接する要素の後で始まるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence starting after the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素の後で始まるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence starting at the beginning of this sequence with at most maxLength elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの先端で始まる多くともmaxLength要素のあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that lazily consumes and drops n elements from an underlying Base iterator before possibly returning the first available element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>おそらくは最初の利用可能な要素が返る前にn個の要素をある基礎をなすBaseイテレータから遅延に消費して落とすあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that only consumes up to n elements from an underlying Base iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大でn個の要素まで基礎をなすBaseイテレータからただ消費しきるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that presents the elements of a base sequence of sequences concatenated using a given separator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それはいくらかのシーケンスからなるある基盤となるシーケンスの要素らを、与えられた分離子を使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that represents a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素の隣接下位範囲を表すシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence to compare to this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、このシーケンスと比べることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence to insert between each of this sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素それぞれの間に挿入されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements are produced via repeated applications of a closure to some mutable state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャをある何らかの可変の状態へ繰り返し適用することでその要素が生み出されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それの要素は複数回探査されることが非破壊的に可能です、そしてある添え字で指し示すことによってアクセスされることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements consist of the elements of some base sequence that also satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それは何らかの基盤シーケンスの要素でさらにまた与えられた述部を満足させるものから成る要素たちです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements consist of the elements that follow the initial consecutive elements of some base sequence that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それの要素は何らかの基盤シーケンスの、ある与えられた述部を満足させる最初の隣接要素の後に続く要素それらから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements consist of the initial consecutive elements of some base sequence that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それの要素は何かの基盤シーケンスのもので、与えられた述部を満足させる最初の連続した要素から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A service which can execute jobs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ジョブを遂行できるあるサービス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A set of Unicode character values for use in search operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>検索操作において使うための一揃いのユニコード文字値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A shuffled array of this sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの持つ要素からなる、あるシャッフルされた配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一のユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single extended grapheme cluster that approximates a user-perceived character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一の拡張書記素クラスタで、１つのユーザ知覚文字におおよそ相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single string can have greatly differing lengths when measured by its different views.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一の文字列は、それの異なるビューによって測られる時に大きく違っていることがありえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single, concatenated string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一の、連結された文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single, flattened asynchronous sequence that contains all elements in all the asychronous sequences produced by transform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一の、平坦にされた非同期シーケンス、それはtransformによって生み出される全ての非同期シーケンスの中の全ての要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A singleton actor whose executor is equivalent to the main dispatch queue.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシングルトンアクター、それのエグゼキュータはメインディスパッチキューと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice inherits the value or reference semantics of its base collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスは、それの基盤コレクションのもつ値意味論もしくは参照意味論を継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice may hold a reference to the entire storage of a larger collection, not just to the portion it presents, even after the base collection’s lifetime ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライスは、単にそれが提示する一部分に対してではなく、より大きなコレクションのストレージ全体への参照を保持します、元のコレクションの寿命が終わった後でさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のスライス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice stores a base collection and the start and end indices of the view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライス（切り取り）は、基盤コレクションおよびビューの始まりと終わりのインデックスを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sorted array of the sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンス要素のソート済み配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A source of text-streaming operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テキストストリーミング操作のソース。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A space character of non-zero width.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非ゼロ幅の空白文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A spacing combining mark with positive advance width.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の送り幅をもつ空白結合記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>安定ソートは、それに対してareInIncreasingOrderが順序を確立しない要素らの相対順序を保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A stable sort preserves the relative order of elements that compare equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>安定ソートは、等しいと比較される要素それらの相対順序を保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A static string can use either of the following as its storage:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>静的文字列は、以下のどちらかをそれのストレージとして使用できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A static, plain-text Unicode string object that bridges to String; use NSString when you need reference semantics or other Foundation-specific behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>静的な、プレーンテキストのユニコード文字列オブジェクト、それはStringにブリッジされます；あなたが参照意味論または他のFoundation特有の挙動を必要とする時はNSStringを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string instance or another sequence of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列インスタンスまたは別のいくらかの文字からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string is a collection of extended grapheme clusters, which approximate human-readable characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列は、拡張書記素クラスタのコレクションです、それらはだいたいは人間が読むことができる文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string is a series of characters, such as "Swift", that forms a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列は一続きの文字です、例えば"Swift"など、それはあるコレクションを形成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string literal containing the characters that appear next in the string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次にこの文字列リテラルにおいて現れる文字を含んでいる文字列リテラル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string representation of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーの文字列表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string to append.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加される文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string to insert between each of the elements in this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素のそれぞれの間に挿入されることになる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string type designed to represent text that is known at compile time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパイル時に知られるテキストを表現するために設計される文字列型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string value converts to an MLDataValue.ValueType.string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列値は、MLDataValue.ValueType.stringに変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s unicodeScalars property is a collection of Unicode scalar values, the 21-bit codes that are the basic unit of Unicode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のもつunicodeScalarsプロパティは、ユニコードの基本単位である21ビットコード、ユニコードスカラー値いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s utf16 property is a collection of UTF-16 code units, the 16-bit encoding form of the string’s Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のもつutf16プロパティは、その文字列のもつユニコードスカラー値の16ビット符号化形式、UTF-16コード単位いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s utf8 property is a collection of UTF-8 code units, the 8-bit encoding form of the string’s Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のもつutf8プロパティは、その文字列のもつユニコードスカラー値の８ビット符号化形式、UTF-８コード単位いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s UTF-16 view encodes the string’s Unicode scalar values as 16-bit integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列のもつUTF-16ビューは、文字列のもつユニコードスカラー値を16ビット整数として符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s UTF-8 view encodes the string’s Unicode scalar values as 8-bit integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の持つUTF-8ビューは、文字列の持つユニコードスカラー値を8ビット整数として符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s Unicode scalar values can be up to 21 bits in length.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の持つユニコードスカラー値は、長さが21ビットに至るまで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s data is only copied lazily, upon mutation, when more than one string instance is using the same buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つ以上の文字列インスタンスが同じバッファを使っている時、変化において、ある文字列の持つデータは遅延にのみコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence starting after the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素の後から始まる下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence starting at the start position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>start位置から始まる下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence starting at the beginning of this collection with at most maxLength elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの先端で始まる多くともmaxLength要素の下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence terminating at the end of the collection with at most maxLength elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの末端で終わっていて多くともmaxLengthの要素を持つ下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence that leaves off k elements from the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>k個の要素を終わりから取り除いた下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence that leaves off the specified number of elements at the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素が末尾から無くなっているシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence up to, and including, the end position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>end位置に至るまでの、そしてそれを含む、下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence up to, but not including, the end position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>end位置に至るまでの、しかしそれを含まないシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A substring holds a reference to the entire storage of the string it comes from, not just to the portion it presents, even when there is no other reference to the original string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列はそれが由来する文字列のストレージ全体への参照を保持します、それが存在する部分に対してだけではなく、たとえ本来の文字列への他の参照が存在しないときでさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A substring to convert to a standalone String instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある下位文字列を独立したStringインスタンスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A surrogate code point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるサロケートコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A symbol of another type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の型のシンボル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A symbol of mathematical use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数学的利用の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A task can voluntarily suspend itself in the middle of a long-running operation that doesn’t contain any suspension points, to let other tasks run for a while before execution returns back to this task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるタスクは、自発的にそれ自身を一時停止することが、どのような一時停止地点も含まないある長く動作する演算の最中に可能です、そうしてしばらく他のタスクに動作させます、遂行がこのタスクに戻る前に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A task group must be used only within the task where it was created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクグループは。それが作成されたところのタスク内でのみ使われなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A task group serves as storage for dynamically created child tasks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるタスクグループ、それは動的に作成される子タスクそれらに対するストレージとして利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A task group serves as storage for dynamically created, potentially throwing, child tasks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるタスクグループ、それは動的に作成される、潜在的にスローする、子タスクそれらに対するストレージとして利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A task-local value is a value that can be bound and read in the context of a Task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカルな値は、あるTaskの文脈においてバインド（束縛）および読み出しされることが可能な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A task’s execution can be seen as a series of periods where the task ran.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクのもつ遂行は、そこにおいてタスクが動作したところの一連の期間として見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual description of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターのテキスト記述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the buffer, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのバッファのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the pointer, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのポインタのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the static string, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>静的文字列のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the static string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その静的文字列のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this instance, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのインスタンスのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A trivial type can be copied bit for bit with no indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明な型は、ビット対ビットでコピーされることが、何らかの間接参照または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A trivial type can be copied with just a bit-for-bit copy without any indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明な型は、単にビット対ビットコピーでコピーされることが、何らかの間接的または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A true value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるtrue値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the high and low parts of a double-width integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２倍幅整数の高および低部分を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the high and low parts of the result of multiplying this value and other.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値とotherを乗算する結果の高および低部分を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the number of UTF-16 code units required to encode input and a Boolean value that indicates whether the input contained only ASCII characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>inputをエンコードするのに必要とされるUTF-16コード単位の数とinputがASCII文字だけを含んでいるかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the quotient and remainder of dividend divided by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>dividendをこの値で除算した商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the quotient and remainder of this value divided by rhs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rhsによって除算されたこの値の商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算の結果とそれだけでなくオーバーフローがその演算において起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the division along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算の結果とそれだけでなくオーバーフローがその演算において起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple with the new string and a Boolean value that indicates whether any repairs were made.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列と、あらゆる修復がなされたかどうかを指し示すブール値を持つタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type for propagating an unmanaged object reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある管理されないオブジェクト参照を伝達するための型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing an error value that can be thrown.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スローされることが可能なあるエラー値を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing continuous, one-dimensional values that can be offset and measured.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オフセットできて計測できる、連続的な、一次元の値を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing the sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの持つ要素を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be compared for value equality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の同等性について比較されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be compared using the relational operators &lt;, &lt;=, &gt;=, and &gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関係演算子&lt;、&lt;=、&gt;=、そして&gt;を使って比較されるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be converted to and from an associated raw value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある結び付けられた生の値へおよびそれから変換できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be hashed into a Hasher to produce an integer hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Hasherへとハッシュ化されることで整数ハッシュ値を生成することが可能な型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized by string interpolation with a string literal that includes expressions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの式を含むある文字列リテラルを使う文字列補間によって初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized using a dictionary literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized using an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized using the nil literal, nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nilリテラル、nilを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a floating-point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある浮動小数点リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a string literal containing a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一のユニコードスカラー値を含んでいるある文字列リテラルで初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a string literal containing a single extended grapheme cluster.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ただ１つの拡張書記素クラスタを含んでいるある文字列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with an integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数リテラルで初期化できるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with the Boolean literals true and false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブールリテラルのtrueとfalseを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be represented as a string in a lossless, unambiguous way.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるロスレスの、曖昧さのない方法で、文字列として表現できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be the target of text-streaming operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テキストストリーミング操作のターゲットであることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used as a key for encoding and decoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングとデコーディングのためのキーとして使われる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used as an element in a SIMD vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMDベクターにおける要素として使用できるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used to parse CodeUnits into EncodedScalars.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それはCodeUnitsをEncodedScalarそれらへと構文解析するのに使用可能なものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used to parse a reversed sequence of CodeUnits into EncodedScalars.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それはCodeUnitsの逆の並びをEncodedScalarそれらへと構文解析するのに使用可能なものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used to slice a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをスライスするために使われる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can convert itself into and out of an external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身を外部表現へとそしてそれをもとに変換できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can decode itself from an external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身が外部表現からデコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can decode values from a native format into in-memory representations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値をネイティブ形式からインメモリ表現へとデコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can encode itself to an external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身を外部表現へとエンコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can encode values into a native format for external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を外部表現のためにネイティブ形式へとエンコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can function as storage for a SIMD vector type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それは、SIMDベクター型に対するストレージとして機能できるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent a string as a collection of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を文字のコレクションとして表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent both positive and negative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正と負の値の両方を表せる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent the absolute value of any possible value of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の何らかの可能な値の絶対値を表すことのできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that conforms to RangeReplaceableCollection can choose how to respond when this method is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>RangeReplaceableCollectionに準拠する型は、このメソッドが呼ばれた時どのような応答をするか選ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that explicitly supplies its own mirror, but whose descendant classes are not represented in the mirror unless they also override customMirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>明示的にそれ独自のMirrorを提供するある型、しかしそれの子孫クラスはそれらがまたcustomMirrorをオーバーライドしない限りはMirrorで表現されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that explicitly supplies its own mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>明示的にそれ自身のMirrorを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that iterates over a collection using its indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション全体に渡ってそれのインデックスを使って繰り返し処理する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that presents a mathematical set interface to a bit set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数学的なセットインターフェイスをビットセットに与える型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a collection of all of its values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの値の全てからなるコレクションを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a view into a decoder’s storage and is used to hold the encoded properties of a decodable type in a keyed manner.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型で、あるデコーダの持つストレージへのビューを提供し、そしてデコーダ可能型のエンコードされたプロパティをキー流儀で保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a view into a decoder’s storage and is used to hold the encoded properties of a decodable type sequentially, without keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型で、あるデコーダの持つストレージへのビューを提供し、そしてデコーダ可能型のエンコードされたプロパティを順次的に、キーなしで保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a view into an encoder’s storage and is used to hold the encoded properties of an encodable type in a keyed manner.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型で、あるエンコーダの持つストレージへのビューを提供し、そしてエンコード可能型のエンコードされたプロパティをキー流儀で保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a view into an encoder’s storage and is used to hold the encoded properties of an encodable type sequentially, without keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型で、あるエンコーダの持つストレージへのビューを提供し、そしてエンコード可能型のエンコードされたプロパティを順次的に、キーなしで保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides an iteration interface over the results of tasks added to the group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それはグループに追加されたタスクの結果それらすべてにわたる反復インターフェイスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides asynchronous, sequential, iterated access to its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それはそれの要素それらに対して非同期の、順次的な、反復したアクセスを提供するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides mathematical set operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数学的な集合演算を提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides sequential, iterated access to its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>順次的な、繰り返されるアクセスをそれの要素に提供するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides the collection’s iteration interface and encapsulates its iteration state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションの持つ反復インターフェイスを提供してそれの反復状態をカプセル化するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides the sequence’s iteration interface and encapsulates its iteration state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのシーケンスの持つ反復インターフェイスを提供してそれの反復状態をカプセル化するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides uniformly distributed random data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一様分布無作為データを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a Unicode scalar literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーリテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a globally-unique actor that can be used to isolate various declarations anywhere in the program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それはあるグローバルに特有なアクターを表します、それはさまざまな宣言をどこでもプログラムの中で分離するために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a position in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中のある位置を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents an extended grapheme cluster literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>拡張書記素クラスタリテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents an integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数リテラルを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents either a wrapped value or nil, the absence of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ラップされた値または、値の不在であるnil、どちらかを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the distance between two pointers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのポインタの間の隔たりを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the distance between two values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値の間の隔たりを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the indices that are valid for subscripting the collection, in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>昇順での、コレクションの添え字として有効なインデックスを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the number of steps between two String.Index values, where one value is reachable from the other.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一方の値が他方から到達可能であるところの２つのString.Index値の間の段階数を表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the words of this integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のワードを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that supplies a custom description for playground logging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドログのためにあつらえの記述を提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that supplies the values of a sequence one at a time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスに属する値を一度に１つ提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type whose instances can be encoded, and appropriately passed, as elements of a C va_list.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのインスタンスが、符号化されること、そして適切に渡されることが、C va_listの要素として可能である型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with a customized textual representation suitable for debugging purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デバッグ目的に都合がよいようにカスタマイズされた原文の表現を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with a customized textual representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>カスタマイズされた原文の表現を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with values that support addition and subtraction.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算と減算をサポートする値を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with values that support multiplication.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算をサポートする値をもつ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased hashable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去ハッシュ可能値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased iterator of Element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Elementの型消去イテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased key path, from any root type to any resulting value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去キーパス、何らかの根本の型から何らかの結果値の型への。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased wrapper over any collection with indices that support bidirectional traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２方向に辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased wrapper over any collection with indices that support forward traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前へ辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased wrapper over any collection with indices that support random access traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為アクセスで辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typed buffer of the memory referenced by this raw buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この生のバッファによって参照されるメモリの型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typed buffer of the newly bound memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しく束縛されたメモリの型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typed pointer to the memory referenced by this raw pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この生のポインタによって参照されるメモリへの型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typed pointer to the newly bound memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しく束縛されたメモリへの型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typed pointer to the same memory as this raw pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この生のポインタと同じメモリに対する型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A unicode scalar value to be used when repairing encoding/decoding errors, as represented in this encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号化／復号エラーを修復している時に使われるあるユニコードスカラー値、この符号化において表現されるとおりに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A unique identifier for a class instance or metatype.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクラスインスタンスまたはメタタイプのための固有な識別子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A unit of asynchronous work.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期作業のある単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A unit of scheduleable work.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>予定可能な仕事の単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A user-defined key for providing context during encoding and decoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングおよびデコーディングの間にコンテキストを提供するためのユーザ定義のキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この配列の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the character view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字ビューの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the collection to use as a limit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>限度として使うためのそのコレクションの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このビューの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid scalar value as represented in this encoding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この符号化において表現されるある有効なスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value less than or equal to the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの中の要素の数より少ないか等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value less than or equal to the number of elements in the sequence, calculated nondestructively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの要素数より少ないか等しい値、非破壊的に計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value of the requested type, if present for the given key and convertible to the requested type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要請された型の値、もし与えられたキーに対して存在して要請された型に変換可能ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value of the requested type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要請された型の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value that is offset from this value by n.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値からnをオフセットされる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value that provides access to properties of a Unicode scalar that are defined by the Unicode standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード標準によって定義されるユニコードスカラーのプロパティに対するアクセスを提供する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value that represents either a success or a failure, including an associated value in each case.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>成功または失敗のどちらかを表すある値、それぞれの場合での関連値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to convert to this type of integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の整数へと変換される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to either return or throw from the continuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その継続から返すまたはスローするどちらかの値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to use as the big-endian representation of the new integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい整数のビッグエンディアン表現として使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to use as the little-endian representation of the new integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい整数のリトルエンディアン表現として使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to use as the source of the new instance’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスの持つバイナリ表現のソースとして使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value type whose instances are either true or false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値型、そのインスタンスはtrueかfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector mask that is the pointwise exclusive or of the inputs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入力それらのポイント単位排他的論理和であるベクターマスク。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector mask that is the pointwise logical conjunction of the inputs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この入力のポイント単位論理積であるベクターマスク。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector mask that is the pointwise logical disjunction of the inputs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この入力のポイント単位論理和であるベクターマスク。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector mask that is the pointwise logical negation of the input.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この入力のポイント単位論理否定であるベクターマスク。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector mask with the result of a pointwise equality comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるポイント単位同等比較の結果を持つベクターマスク。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector mask with the result of a pointwise inequality comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるポイント単位不等比較の結果をもつベクターマスク。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of 16 scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16スカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of 32 scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32スカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of 64 scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64スカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of eight scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>８つのスカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of four scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>４つのスカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of three scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>３つのスカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of two scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのスカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector with the specified value in all lanes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全てのレーンでこの指定された値を持つベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A version of the Unicode Standard represented by its major and minor components.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのメジャーおよびマイナー部分によって表されるユニコード標準のあるバージョン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view into a subsequence of elements of another collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある見方、別のコレクションのいくらかの要素からなる下位シーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view of a string’s contents as a collection of UTF-16 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の内容のひとつの見方、いくらかのUTF-16コード単位のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view of a string’s contents as a collection of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の内容のひとつの見方、いくらかのUTF-8コード単位のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view of a string’s contents as a collection of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の内容のひとつの見方、いくらかのユニコードスカラー値のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A wrapper around a C va_list pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C va_listポインタの周りのラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A wrapper around an opaque C pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不透明Cポインターの周りのラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A wrapper over an underlying index that hides the specific underlying type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>根底にあるインデックスを覆うラッパー、根底にある特定の型を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ASCII characters have a scalar value between 0 and 127, inclusive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ASCII文字は、０と127の間の、それらを含む、スカラー値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access a pointer to a variable in memory for explicit passing to C functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中のある変数へのポインタに明示的にC関数を渡すためにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses a contiguous subrange of the buffer’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの持つ要素の隣接下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのもついくらかの要素からなるある連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the Unicode scalar value at the given position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置でユニコードスカラーにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the byte at the given offset in the memory region as a UInt8 value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオフセットでメモリ領域においてUInt8値としてバイトにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the bytes in the specified memory region.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたメモリ領域においてバイトにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the character at the given position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた位置で文字にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the code unit at the given position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた位置でのコード単位にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the code unit at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置でのコード単位にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the contiguous subrange of the collection’s elements specified by a range expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式によって指定される、コレクションの要素からなる連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたインデックスでの要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置で要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the instance referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるインスタンスにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the pointee at the specified offset from this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから指定されたオフセットでPointeeにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Individual Results</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個々の結果にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Results</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing String Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing String View Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列ビュー要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing a Pointer’s Memory as a Different Type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタのもつメモリに異なる型としてアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing a String’s Unicode Representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列のユニコード表現にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing an Asynchronous Sequence of Results</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果それらからなるある非同期シーケンスにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing memory as a type T requires that the memory be bound to that type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリにある型Tとしてアクセスすることは、メモリがその型に束縛されることを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing memory as type T requires that the memory be bound to that type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリに型Tとしてアクセスすることは、メモリがその型に束縛されることを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing memory through the returned pointer is undefined if the memory has not been bound to T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるポインタによってメモリにアクセスすることは、メモリがTに束縛されていないならば未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing the utf8 view with these indices yields the first and second code UTF-8 units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>utf8ビューにそれらのインデックスでアクセスすることは、１番目と２番目のUTF-8コード単位を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing this collection’s bytes does not bind the underlying memory to UInt8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつバイトにアクセスすることは、基礎をなすメモリをUInt8へとバインドしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing this property when hasPointerRepresentation is false triggers a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>hasPointerRepresentationがfalseである時にこのプロパティにアクセスすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing this property when hasPointerRepresentation is true triggers a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>hasPointerRepresentationがtrueである時にこのプロパティにアクセスすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Actors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクター</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add a child task to the group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある子タスクをグループに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add one or more drinks using the app’s main view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つ以上の飲み物を、アプリのメインビューを使って加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add with overflow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー加算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add with overflow and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算、オーバーフローと割り当てとともに</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding Tasks to a Task Group</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクそれらをあるタスクグループに加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding Tasks to a Throwing Task Group</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクそれらをあるスローするタスクグループに加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds an element to the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある要素をコレクションの終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the elements of a sequence or collection to the end of this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスまたコレクションに属するいくつかの要素をこのコレクションの終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and produces their sum.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算してそれらの合計を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and stores the result in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算して結果を左手側の変数に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算して、結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adopt and interoperate with Cocoa design patterns in your Swift apps.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CocoaデザインパターンをあなたのSwiftアプリにおいて採用および相互運用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Advanced Collection Topics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>先進のコレクション話題</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Advanced Numerics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>先進の数値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Advances to the next byte and returns it, or nil if no next byte exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次のバイトへ進んでそれを返します、または次のバイトが存在しないならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Advances to the next element and returns it, or nil if no next element exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の要素へ進んでそれを返します、または次の要素が存在しないならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Advances to the result of the next child task, or nil if there are no remaining child tasks, rethrowing an error if the child task threw.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の子タスクの結果に進みます、または残っている子タスクがないならばnil、子タスクがスローしたならばエラーを再スローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After a call to initialize(repeating:), the entire region of memory referenced by this buffer is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>initialize(repeating:)の呼び出しの後、このバッファによって参照されるメモリの全領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After a call to initialize(repeating:count:), the memory referenced by this pointer is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>initialize(repeating:count:)の呼び出しの後、このポインタによって参照されるメモリは初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After a call to initialize(to:), the memory referenced by this pointer is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>initialize(to:)の呼び出しの後、このポインタによって参照されるメモリは初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After adding CustomDebugStringConvertible conformance by implementing the debugDescription property, Point provides its own custom debugging representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CustomDebugStringConvertible準拠をdebugDescriptionプロパティを実装することによって追加後は、Pointはそれ独自のあつらえのデバッグ表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After adding CustomStringConvertible conformance by implementing the description property, Point provides its own custom representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CustomStringConvertible準拠をdescriptionプロパティの実装によって加えた後、Pointはそれ独自のあつらえの表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling bindMemory(to:capacity:), the first four bytes of the memory referenced by bytesPointer are bound to the Int8 type, though they remain uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bindMemory(to:capacity:)を呼んだ後、bytesPointerによって参照されるメモリの最初の４バイトはInt8型に束縛されます、もっともそれらは未初期化のままであるけれども。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling copyBytes(from:), the source.count bytes of memory referenced by this buffer are initialized to raw bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>copyBytes(from:)を呼び出した後、このバッファによって参照されるメモリのsource.countバイトは生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling copyMemory(from:), the first source.count bytes of memory referenced by this buffer are initialized to raw bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>copyMemory(from:)を呼び出した後、このバッファによって参照されるメモリの最初のsource.countバイトは生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling copyMemory(from:byteCount:), the byteCount bytes of memory referenced by this pointer are initialized to raw bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>copyMemory(from:byteCount:)を呼び出した後、このポインタによって参照されるメモリのbyteCountバイトは生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling move(), the memory is uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>move()の呼び出しの後、メモリは初期化されない状態です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling storeBytes(of:toByteOffset:as:), the memory is initialized to the raw bytes of value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>storeBytes(of:toByteOffset:as:)を呼び出した後、メモリはvalueの生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling deinitialize(count:), the memory is uninitialized, but still bound to the Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>deinitialize(count:)の呼び出しの後、メモリは初期化されない状態です、しかし依然としてPointeeへの境界です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling assign(from:count:), the region is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>assign(from:count:)の呼び出し後、この領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling assign(repeating:count:), the region is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>assign(repeating:count:)の呼び出し後、この領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling initialize(from:count:), the region is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>initialize(from:count:)の呼び出し後、この領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling initializeMemory(as:from:), the memory referenced by the returned UnsafeMutableBufferPointer instance is bound and initialized to type S.Element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>initializeMemory(as:from:)呼び出しの後、UnsafeMutableBufferPointerインスタンスによって参照されるメモリは、型S.Elementに束縛され初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling moveAssign(from:count:), the region is initialized and the memory region source..&lt;(source + count) is uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>moveAssign(from:count:)の呼び出し後、この領域は初期化されます、そしてメモリ領域source..&lt;(source + count)は未初期化状態にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling moveInitialize(from:count:), the region is initialized and the memory region source..&lt;(source + count) is uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>moveInitialize(from:count:)の呼び出し後、この領域は初期化されます、そしてメモリ領域source..&lt;(source + count)は未初期化状態にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling this method on a raw buffer with non-nil baseAddress b, the region starting at b and continuing up to b + self.count - self.count % MemoryLayout&lt;T&gt;.stride is bound to type T and initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを生のバッファ上で非nilのbaseAddress bを使って呼び出した後、bで始まってb + self.count - self.count % MemoryLayout&lt;T&gt;.strideまで続く領域は、型Tに束縛されて初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling this method on a raw pointer p, the region starting at p and continuing up to p + count * MemoryLayout&lt;T&gt;.stride is bound to type T and initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを生のポインタp上で呼び出した後、pで始まってp + count * MemoryLayout&lt;T&gt;.strideまで続く領域は、型Tに束縛されて初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling this method on a raw pointer p, the region starting at self and continuing up to p + count * MemoryLayout&lt;T&gt;.stride is bound to type T and initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを生のポインタp上で呼び出した後、selfで始まってp + count * MemoryLayout&lt;T&gt;.strideまで続く領域は、型Tに束縛されて初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling this method, control immediately returns to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出した後、制御はすぐに呼び出し側に返ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After canceling a group, adding a new task to it always fails.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるグループを取り消した後、新しいタスクをそれに加えることは、常に失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After configuring and running the Coffee Tracker app, you can test the background updates.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Coffee Trackerアプリを構成設定および実行した後、あなたはバックグラウンド更新をテストできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After executing body, this method rebinds memory back to the original Element type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyの実行の後、このメソッドはメモリを元々のElement型に再束縛します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After executing body, this method rebinds memory back to the original Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>body実行の後、このメソッドは、オリジナルのPointee型へとメモリを再束縛し戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションを仕切った後、あるピボットインデックスpがあります、そこでpの前の要素は１つもbelongsInSecondPartition述部を満たさず、そしてpでのまたは後のあらゆる要素はbelongsInSecondPartitionを満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After rebasing slice as the rebased buffer, the following are true:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sliceをrebasedバッファとして再構築した後、以下のことが当てはまります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After rebinding the memory referenced by uint8Pointer to UInt64, accessing that pointer’s referenced memory as a UInt8 instance is undefined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>uint8Pointerによって参照されるメモリをUInt64に再束縛する後、そのポインタの参照したメモリにUInt8インスタンスとしてアクセスすることは未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the call, the memory referenced by this buffer up to, but not including, the returned index is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この呼び出しの後、返されるインデックスまでの、しかしそれを含んでいない、このバッファによって参照されるメモリは、初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部がfalseを返した後、シーケンスはそれを決して再び遂行しません、そしてそれからシーケンス上では、要素それらをそれの基礎をなすシーケンスからそのままでずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After this code has executed, the following are true:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコードが実行された後、以下は真です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After this method returns nil, this iterater is guaranteed to never produce more values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドがnilを返した後、このイテレータはそれ以上の値を決して生み出さないことを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>firstIndex(of:)を使って特定の要素の位置をあるコレクションの中で見つけた後、あなたは添え字によって要素にアクセスするのにそれを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After using lastIndex(of:) to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>lastIndex(of:)を使って特定の要素の最後のインスタンスの位置をあるコレクションの中で見つけた後、あなたは添え字によって要素にアクセスするのにそれを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Algebraic Sets</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代数的集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Aliases for Imported C Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC型に対するエイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All 100 bytes of memory must eventually be deallocated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリの100バイトすべては、そのうち割り当てられなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All elements satisfying this predicate are ordered after all elements not satisfying it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この述部を満たす全ての要素は、それを満たさない全ての要素の後に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All the elements following i are moved to close the gap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iに続く要素すべては、隙間を埋めるように移動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All the elements following the specified position are moved to close the gap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置に続く要素すべては、隙間を埋めるように移動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allocate and manage memory manually.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリを手動でアロケートして管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allocates uninitialized memory for the specified number of instances of type Element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の型Elementのインスタンスに対して未初期化メモリを割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allocates uninitialized memory for the specified number of instances of type Pointee.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型Pointeeの指定された数のインスタンスに対して初期化されないメモリをアロケートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allocates uninitialized memory with the specified size and alignment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリをこの指定された大きさとアライメントでアロケートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allow values of your type to be expressed using different kinds of literals.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型の値に異なる種類のリテラルを使って表されることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allow your custom types to be used with simple collection operations, such as contains(_:), and standard comparison operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえの型を、単純なコレクション演算、例えばcontains(_:)など、そして標準比較演算子とともに使われるようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows a nonescaping closure to temporarily be used as if it were allowed to escape.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非脱出クロージャに、一時的にそれが脱出することを許可されたかのように使われることを許可します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alphabetic scalars are the primary units of alphabets and/or syllabaries.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アルファベットのスカラーは、アルファベットおよび／または音節文字の主要な単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>また、辞書は4に対するキーを提供しません、そしてクロージャはそれが見つけることが出来ない何らかのキーに対してエラーをスローします、それでこの値をCounterから受け取ることはこの修正されたシーケンスをエラーで終わらせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, a predicate can be satisfied by a range of Equatable elements or a general condition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいは、述部は、Equatable要素のある範囲またはある一般的条件によって満たされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, use this method to sort a collection of elements that do conform to Comparable when you want the sort to be descending instead of ascending.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうではなくて、あなたが昇順ではなく降順でソートしたい場合は、このメソッドを使ってComparableに準拠する要素からなるコレクションをソートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can access the same memory as a different type without rebinding through untyped memory access, so long as the bound type and the destination type are trivial types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その代わりに、あなたは同じメモリに異なる型として再束縛することなしにアクセスすることが型なしメモリアクセスを通して可能です、束縛される型と行き先の型が自明型である限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can convert the function that takes a String to one that is generic over the StringProtocol protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいは、あなたはStringをとる関数をStringProtocolプロトコルを越えて総称体であるものに変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can use Swift’s implicit bridging to pass a pointer to an instance or to the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいはまた、あなたはSwiftの暗黙的ブリッジを使ってポインタをインスタンスへまたは配列の要素へと渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although strings in Swift have value semantics, strings use a copy-on-write strategy to store their data in a buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftにおける文字列は値意味論を持ちますが、文字列はコピーオンライト戦略を使ってそれらのデータをバッファに格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although the Swift overlay updates many Objective-C methods to return native Swift indices and index ranges, some still return instances of NSRange.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftオーバーレイが多くのObjective-Cメソッドを更新してSwift生来のインデックスおよびインデックス範囲を返すとはいえ、いくつかはまだNSRangeインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always remember to deallocate any memory that you allocate yourself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなた自身でアロケートするメモリは何であれデアロケートするのを必ず忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always use the slice’s startIndex property instead of assuming that its indices start at a particular value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常にスライスのstartIndexプロパティを使ってください、それのインデックスが特定の値で始まると決めてかかるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always zero, which is the index of the first byte in a nonempty buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常にゼロ、それはある「空でない」バッファにおける最初のバイトのインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An 8-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>8ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An 8-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>8ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An AutoreleasingUnsafeMutablePointer&lt;Type&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AutoreleasingUnsafeMutablePointer&lt;Type&gt;値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An UnsafeBufferPointer instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeBufferPointerインスタンスは、メモリに対するあるビューであり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An UnsafeMutableBufferPointer instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableBufferPointerインスタンスは、メモリに対するある見方（ビュー）であり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An UnsafeMutablePointer&lt;Type&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutablePointer&lt;Type&gt;値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An UnsafeMutablePointer instance allocated with eight bytes of memory, uint8Pointer, will be used for the examples below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>8バイトのメモリデアロケートされるUnsafeMutablePointerインスタンス、uint8Pointerは、下の例で使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An UnsafeMutableRawBufferPointer instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableRawBufferPointerインスタンスは、メモリに対するある見方（ビュー）であり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An UnsafeMutableRawBufferPointer instance is a view of the raw bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableRawBufferPointerインスタンスは、メモリのある領域の中の生のバイトのある見方（ビュー）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An UnsafePointer&lt;Type&gt;, UnsafeMutablePointer&lt;Type&gt;, or AutoreleasingUnsafeMutablePointer&lt;Type&gt; value, which is implicitly cast to UnsafePointer&lt;Type&gt; as necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafePointer&lt;Type&gt;、UnsafeMutablePointer&lt;Type&gt;、またはAutoreleasingUnsafeMutablePointer&lt;Type&gt;値、それは暗黙的にUnsafePointer&lt;Type&gt;へと必要に応じてキャストされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An UnsafePointer instance allocated with eight bytes of memory, uint8Pointer, will be used for the examples below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>8バイトのメモリデアロケートされるUnsafePointerインスタンス、uint8Pointerは、下の例で使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An UnsafeRawBufferPointer instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeRawBufferPointerインスタンスは、メモリに対するある見方（ビュー）であり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An UnsafeRawBufferPointer instance is a view of the raw bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeRawBufferPointerインスタンスは、メモリのある領域の中の生のバイトのある見方（ビュー）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An async function can also be a throwing function, which you call by prepending try await to the function call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>async関数はまた、あるスロー関数であることが可能です、それはあなたがtry awaitをその関数呼び出しの前に付けることによって呼び出すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An appendInterpolation method can also throw; when a user writes a literal with one of these interpolations, they must mark the string literal with try or one of its variants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>appendInterpolationメソッドはまたスローできます；ユーザがあるリテラルをそれら補間の１つで書く場合、それらはその文字列リテラルをtryまたはそれの変種の１つで印しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array containing the elements of this sequence in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素を逆順に含んでいる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array containing the transformed elements of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの変換済み要素を含んでいる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of subsequences, split from this collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの要素を分割した、下位シーケンスいくらかからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of subsequences, split from this sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素を分割した、下位シーケンスいくらかからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of the elements that isIncluded allowed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>isIncludedが許可する要素からなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of the non-nil results of calling transform with each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの各要素でtransformを呼ぶことの非nilの結果の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of this sequence’s elements in a shuffled order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの持つ要素からなる配列、シャッフルされた順番で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence called RankCounter produces all elements of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>RankCounterと呼ばれる非同期シーケンスは、その配列のすべての要素を取り出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence of the initial, consecutive elements that satisfy predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>冒頭の、predicateを満たす連続した要素それらからなるある非同期シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence starting at the beginning of the base sequence with at most count elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基底シーケンスの先端で始まる多くともcount要素の非同期シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは基底シーケンスの要素それらを、順番に含みます、それらは与えられた述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that contains, in order, the elements produced by the transform closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それはtransformクロージャによって生み出された要素それらを、順番に含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それはtransformクロージャによって生み出された非nil要素それらを、順番に含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that drops the first count elements from the base sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは最初のcount要素を基底シーケンスから抜かします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that skips over values from the base sequence until the provided closure returns false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは基底シーケンスから値それらを、この提供されたクロージャがfalseを返すまで飛び越えるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element of a slice is located under the same index in the slice and in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスの要素は、スライスにおいてそして基盤コレクションにおいて同じインデックス下に位置します、コレクションもスライスもスライスが作成されてから変化させられない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element to search for in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションにおいて捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An enclosing combining mark.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>囲み結合符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An encoding error was detected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングエラーが検知された。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An enumeration of the elements of a sequence or collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスまたはコレクションの要素の列挙。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An error that occurs during the decoding of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のデコーディングの間に起こるエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An error that occurs during the encoding of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のエンコーディングの間に起こるエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An error-throwing mapping closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるエラースローマッピングクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An escaped textual representation of the Unicode scalar, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーのエスケープされたテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An executor MAY utilize priority information to attempt running higher priority tasks first, and then continuing to serve lower priority tasks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エグゼキュータ（遂行者）は、優先度情報を活用して、より高い優先度のタスクを最初に実行する、そしてそれから引き続きより低い優先度のタスクのために働く「かもしれません」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An extended-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>拡張倍精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An immutable pointer to the elements of an array is implicitly created when you pass the array as an argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の要素への不変ポインタは、あなたが配列を引数として渡す時に暗黙的に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An implementation detail of key path expressions; do not use this protocol directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス式の実装詳細；このプロトコルを直接に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An in-out expression of type Type that contains a mutable variable, property, or subscript reference, which is passed as a pointer to the address of the mutable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの可変変数、プロパティ、または添え字参照を含んでいる、型Typeのin-out式、それはその可変値のアドレスに対するポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An in-out expression of type [Type] that contains a mutable variable, property, or subscript reference, which is passed as a pointer to the start of the array, and is lifetime-extended for the duration of the call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変の変数、プロパティ、または添え字参照を含んでいる、型[Type]のin-out式、それはその配列の始まりへのポインタとして渡されます、そして呼び出しの間は寿命延長されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An in-out expression that contains a mutable variable, property, or subscript reference of type Type, which is passed as a pointer to the address of the left-hand side identifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型Typeの可変変数、プロパティ、または添え字参照を含むインアウト式、それは左手側識別子のアドレスへのポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An in-out expression that contains a mutable variable, property, or subscript reference of type Type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型Typeの可変変数、プロパティ、または添え字参照を含むインアウト式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by distance from the index i, unless that index would be beyond limit in the direction of movement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>distanceだけインデックスiから補われたインデックス、そのインデックスがlimitを移動方向において越える場合を除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by distance from the index i.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>distanceだけインデックスiから補われるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by n from the index i, unless that index would be beyond limit in the direction of movement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスiからnだけ補われたインデックス、そのインデックスがlimitを移動方向において越えない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by n from the index i.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスiからnだけ補われるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An indication of a decoding error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコードエラーのしるし。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An indication that no more Unicode scalars are available in the input.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この入力の中にこれ以上利用可能なユニコードスカラーがないしるし。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An initial quotation mark.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引用符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of Task always represents a top-level task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Taskのあるインスタンスは、常にトップレベルタスクを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of the AsyncIterator type used to produce elements of the asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスの要素それらを生み出すために使われるAsyncIterator型のインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance representing the state of the receiver with the difference applied, or nil if the difference is incompatible with the receiver’s state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>適用された差異をもつレシーバの状態を表しているインスタンス、またはnil、もし差異がレシーバのもつ状態と相容れないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer to convert to this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型へと変換する整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type that can represent both positive and negative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正および負の値の両方を表すことができる整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type that can represent only nonnegative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非負値だけを表すことができる整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type that uses a fixed size for every instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆるインスタンスに対して固定された大きさを使う整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type with a binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ表現での整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An interval from a lower bound up to, and including, an upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下側の境界から、上側の境界までの、そしてそれを含む、間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator for Zip2Sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Zip2Sequenceのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator for a StrideThrough instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StrideThroughインスタンスのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator for a StrideTo instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StrideToインスタンスのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator for the elements in the buffer referenced by an UnsafeBufferPointer or UnsafeMutableBufferPointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeBufferPointerまたはUnsafeMutableBufferPointerによって参照されるバッファの中の要素のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator of code units to be decoded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコードされることになるいくらかのコード単位のイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator of code units to be translated, encoded as sourceEncoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>翻訳されることになるいくらかのコード単位からなるあるイテレータ、sourceEncodingとしてエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator over the bytes viewed by a raw buffer pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある生のバッファポインタによるビューでのバイトすべてに対するイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator over the elements of this buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの要素すべてを対象としたイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator to any elements of source that didn’t fit in the buffer, and a typed buffer of the written elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファに収まらないsourceの何らかの要素に対するイテレータ、そして書き出される要素の型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator to any elements of source that didn’t fit in the buffer, and an index to the point in the buffer one past the last element written.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceの何らかの要素で、バッファの中にぴったり合わないものに対するイテレータ、そして書かれた最後の要素を１つすぎたバッファの中の地点に対するインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An offset in UTF-16 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16コード単位におけるあるオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An offset in code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コード単位でのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An opaque C pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不透明Cポインター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An opaque pointer to the value of this unmanaged reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この管理されない参照の値への不透明ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An opening punctuation mark of a pair.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある対のある開き句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An ordered, random-access collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>順序付けられた、無作為アクセスのコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある出力ストリーム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An overshift results in -1 for a negative value of lhs or 0 for a nonnegative value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーシフトは、負の値のlhsに対して-1または非負値に対して0という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unkeyed decoding container view into self.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>selfへのキー無しデコーディングコンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unmanaged class reference to value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>valueへの管理されないクラス参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unmanaged reference to the object passed as value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>valueとして渡されるオブジェクトへの管理されない参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unordered collection of unique elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特有な要素いくつかからなるある順番付けられないコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unowned reference to a serial executor (a SerialExecutor value).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある直列遂行者（シリアルエグゼキュータ）への非所有参照（SerialExecutor値）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unsafe task handle for the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクに対する非安全タスクハンドラ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unsigned 64-bit random value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし64ビット無作為値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unsigned integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unspecified result is supplied automatically by the Swift standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未指定の結果はSwift標準ライブラリによって自動的に提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An uppercase copy of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列の大文字でのコピー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An uppercase letter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>大文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another integer to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較するもう一方の整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう１つの整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another range-replaceable collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の範囲置換可能なコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの別の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another value to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any String instance can be bridged to NSString using the type-cast operator (as), and any String instance that originates in Objective-C may use an NSString instance as its storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかのStringインスタンスは、NSStringへブリッジされることが型キャスト演算子（as）を使って行えます、そして何らかのStringインスタンスでObjective-C起源のものはNSStringインスタンスをそれのストレージとして使っても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any fractional part of the value passed as source is removed, rounding the value toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceとして渡される値の小数部分は何であれ取り除かれます、値はゼロへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any fractional part of the value passed as source is removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceとして渡される値の小数部分は何であれ取り除かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any memory in the region source..&lt;(source + count) that does not overlap with the destination region is returned to an uninitialized state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域source..&lt;(source + count)の中の何らかのメモリで行き先の領域と重ならないものは、未初期化状態に戻されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any results, including errors thrown by tasks affected by this cancellation, are silently discarded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる結果は、この取り消しで影響を受けるタスクによってスローされるエラーを含めて、黙って廃棄されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appending Strings and Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列と文字を追加する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends a literal segment to the interpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるリテラル文節をその補間に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the Unicode scalar values in the given sequence to the view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの中のユニコードスカラー値をビューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the characters in the given sequence to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの中の文字を文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the elements of a sequence to a range-replaceable collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスの要素を範囲置換コレクションに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the given Unicode scalar to the view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラーをビューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the given character to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字を文字列へ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the given string to the stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列をストリームへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the given string to this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列をこの文字列へ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Apple platforms use arc4random_buf(3).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Appleプラットホームは、arc4random_buf(3)を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applications that store identifiers in NFKC normalized form should instead use isXIDContinue to check whether a scalar is a valid identifier character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NFKC正規化形式で識別子を格納するアプリケーションは、代わりにisXIDContinueを使って、あるスカラーが有効な識別子文字であるかどうかを調べるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applications that store identifiers in NFKC normalized form should instead use isXIDStart to check whether a scalar is a valid identifier character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NFKC正規化形式で識別子を格納するアプリケーションは、代わりにisXIDStartを使って、あるスカラーが有効な識別子文字であるかどうかを調べるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applies the given difference to this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた差異をこのコレクションに適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Apply macros to your Objective-C APIs to customize how they're imported into Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マクロをあなたのObjective-C APIに適用して、それらがSwiftにインポートされる方法をカスタマイズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Are you measuring the number of characters that will be displayed on the screen, or are you measuring the amount of storage needed for the string in a particular encoding?</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが画面上に表示される文字の数を数えているのか、またはあなたはある特定の符号化での文字列に必要とされるストレージの量を測っているのか？。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Arrays and Dictionaries</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列と辞書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, different representations of a string compare as being equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、ある文字列の異なる表現は等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, each view of the string "🇵🇷" reports a different length.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、文字列"🇵🇷"の各ビューは異なる長さを報告します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example, here’s an implementation of an output stream that converts any input to its plain ASCII representation before sending it to standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一例として、ここに出力ストリームの実装があります、それは何らかの入力を標準出力に送る前にそれの標準ASCII表現に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As is typical in Swift, you can call the print(address:as:) function with an UnsafeMutableRawPointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは普通であるように、あなたはprint(address:as:)関数をUnsafeMutableRawPointerインスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As is typical in Swift, you can call the print(address:as:) function with an UnsafeRawPointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは普通であるように、あなたはprint(address:as:)関数をUnsafeRawPointerインスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As is typical in Swift, you can call the printInt(atAddress:) function with an UnsafeMutablePointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは普通であるように、あなたはprintInt(atAddress:)関数をUnsafeMutablePointerインスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As is typical in Swift, you can call the printInt(atAddress:) function with an UnsafePointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは普通であるように、あなたはprintInt(atAddress:)関数をUnsafePointerインスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As of Unicode 6.3, any new scalars that represent numbers but do not meet the requirements of decimal will have numeric type numeric, and programs can treat digit and numeric equivalently.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Unicode 6.3現在、数を表すしかしdecimalの要件を満たさないいくらかの新しいスカラーが数値型numericを持ちます、そしてプログラムはdigitとnumericを等価に扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As soon as the sequence has run out of elements, all subsequent calls return nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが要素を使い果たすやいなや、全てのその後の呼び出しはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As such, this method isn’t necessarily a way to avoid resource starvation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そういうものとして、このメソッドは必ずしもリソース欠乏を防ぐ方法ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assigning into a ranged subscript of an UnsafeMutableRawBufferPointer instance copies bytes into the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableRawBufferPointerインスタンスの範囲指定された添え字に対してアサインすることは、それらバイトをメモリにコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assigning to part of the buffer must be done using the assign(repeating:count:) method on the buffer’s baseAddress.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの一部に対するアサインは、assign(repeating:count:)メソッドをバッファのもつbaseAddress上で使って終わっていなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assigns every element in this buffer’s memory to a copy of the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのもつメモリの中の全ての要素をこの与えられた値のあるコピーに割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Associated Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな関連型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Asynchronous Sequences</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At least one of the sequences must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>少なくともシーケンスのうちの一方は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At the start of the body of a withTaskGroup(of:returning:body:) call, the task group is always empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>withTaskGroup(of:returning:body:)呼び出しの本体の始まりでは、タスクグループは常に空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At the start of the body of a withThrowingTaskGroup(of:returning:body:) call, the task group is always empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>withThrowingTaskGroup(of:returning:body:)呼び出しの本体の始まりでは、タスクグループは常に空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempt to cancel the task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクの取り消しを試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to access an element by using an index outside the bounds of the slice may result in a runtime error, even if that index is valid for the original collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある要素にスライスの境界外のインデックスを使ってアクセスを試みることは、実行時エラーという結果になるでしょう、たとえそのインデックスが元々のコレクションに対して有効であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある要素にスライスのもつインデックスの境界外のインデックスを使ってアクセスを試みることは、実行時エラーという結果になるでしょう、たとえそのインデックスが元々のコレクションに対して有効であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to remove more elements than exist in the collection triggers a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中に存在するより多くの要素の削除を試みることは実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base conforms to BidirectionalCollection and RangeReplaceableCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがBidirectionalCollectionとRangeReplaceableCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがBidirectionalCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base conforms to ContiguousBytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがContiguousBytesに準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base conforms to DataProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがDataProtocolに準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base conforms to LazySequenceProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがLazySequenceProtocolに準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base conforms to MutableCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがMutableCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base conforms to RangeReplaceableCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがRangeReplaceableCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base.Element conforms to Comparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Base.ElementがComparableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base.Element conforms to Equatable and Base conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Base.ElementがEquatableに準拠するそしてBaseがBidirectionalCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base.Element conforms to Equatable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Base.ElementがEquatableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base.Element conforms to Sequence and Base conforms to LazySequenceProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Base.ElementがSequenceに準拠するそしてBaseがLazySequenceProtocolに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base.Element conforms to Sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Base.ElementがSequenceに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base.Element conforms to StringProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Base.ElementがStringProtocolに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base.Element is String and Base conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Base.ElementがStringであるそしてBaseがBidirectionalCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base.Index conforms to Strideable, Base.Indices is Range&lt;Base.Index&gt;, Base.Index.Stride is Int, and Base conforms to RandomAccessCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Base.IndexがStrideableに準拠する、Base.IndicesがRange&lt;Base.Index&gt;である、Base.Index.StrideがIntである、そしてBaseがRandomAccessCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Base.Indices is DefaultIndices&lt;Slice&lt;Base&gt;&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Base.IndicesがDefaultIndices&lt;Slice&lt;Base&gt;&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when ChildTaskResult conforms to Comparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ChildTaskResultがComparableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when ChildTaskResult conforms to Equatable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ChildTaskResultがEquatableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Element conforms to Comparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ElementがComparableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Element conforms to Equatable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ElementがEquatableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Element conforms to Sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ElementがSequenceに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Element conforms to StringProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ElementがStringProtocolに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Element is String.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ElementがStringである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Element is UInt8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ElementがUInt8である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Failure is Error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>FailureがErrorである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Failure is Never.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>FailureがNeverである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Pointee is MIDIEventList.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>PointeeがMIDIEventListである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Pointee is MIDIEventPacket.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>PointeeがMIDIEventPacketである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Pointee is MIDIPacket.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>PointeeがMIDIPacketである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Pointee is MIDIPacketList.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>PointeeがMIDIPacketListである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Self conforms to FixedWidthInteger.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SelfがFixedWidthIntegerに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Self conforms to _Pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Selfが_Pointerに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD16&lt;Int16&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD16&lt;Int16&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD16&lt;Int32&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD16&lt;Int32&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD16&lt;Int64&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD16&lt;Int64&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD16&lt;Int8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD16&lt;Int8&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD16&lt;Int&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD16&lt;Int&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD2&lt;Int16&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD2&lt;Int16&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD2&lt;Int32&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD2&lt;Int32&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD2&lt;Int64&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD2&lt;Int64&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD2&lt;Int8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD2&lt;Int8&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD2&lt;Int&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD2&lt;Int&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD32&lt;Int16&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD32&lt;Int16&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD32&lt;Int32&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD32&lt;Int32&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD32&lt;Int64&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD32&lt;Int64&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD32&lt;Int8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD32&lt;Int8&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD32&lt;Int&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD32&lt;Int&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD3&lt;Int16&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD3&lt;Int16&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD3&lt;Int32&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD3&lt;Int32&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD3&lt;Int64&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD3&lt;Int64&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD3&lt;Int8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD3&lt;Int8&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD3&lt;Int&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD3&lt;Int&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD4&lt;Int16&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD4&lt;Int16&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD4&lt;Int32&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD4&lt;Int32&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD4&lt;Int64&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD4&lt;Int64&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD4&lt;Int8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD4&lt;Int8&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD4&lt;Int&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD4&lt;Int&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD64&lt;Int16&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD64&lt;Int16&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD64&lt;Int32&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD64&lt;Int32&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD64&lt;Int64&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD64&lt;Int64&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD64&lt;Int8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD64&lt;Int8&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD64&lt;Int&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD64&lt;Int&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD8&lt;Int16&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD8&lt;Int16&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD8&lt;Int32&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD8&lt;Int32&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD8&lt;Int64&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD8&lt;Int64&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD8&lt;Int8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD8&lt;Int8&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Storage is SIMD8&lt;Int&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StorageがSIMD8&lt;Int&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when Success is Never and Failure is Never.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SuccessがNeverであるそしてFailureがNeverである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Await a resume from a call to a yielding function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生成関数へのある呼び出しからの再開を待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Awaiting on an empty group immediate returns nil without suspending.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空グループを待つことは、一時停止なしにnilを直ぐに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Base glyphs that occupy their own space and do not combine with others.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら独自の空間を占有するそして他のものと結合していない基底字体。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Behaviors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本の挙動</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic string operations are not sensitive to locale settings, ensuring that string comparisons and other operations always have a single, stable result, allowing strings to be used as keys in Dictionary instances and for other purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本的な文字列演算はロケール設定に影響を受けず、文字列比較および他の演算が常にある単一の、安定した結果を持つことを保証して、文字列がDictionaryインスタンスにおけるキーとしておよび他の目的のために使われることを可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Be sure to deallocate any memory that you manually allocate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが手動でアロケートするあらゆるメモリをデアロケートするのを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because print(address:as:) requires an immutable pointer, although this is syntactically valid, it isn’t necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>print(address:as:)が不変ポインタを要求することから、これは構文的には有効ですが、必要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because printInt(atAddress:) requires an immutable pointer, although this is syntactically valid, it isn’t necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>printInt(atAddress:)が不変ポインタを要求することから、これは構文的には有効ですが、必要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because NSString is immutable, it is just as though the storage was shared by a copy.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NSStringは不変であることから、まるでまさにストレージがコピーによって共有されたかのようです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a Unicode scalar value can require more than a single ASCII character’s worth of storage, additional allocation may be necessary when adding to a Unicode scalar view after a call to reserveCapacity(_:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコードスカラー値が単一ASCII文字相当のストレージより多く要求する可能性があることから、reserveCapacity(_:)への呼び出しの後に文字ビューにあるユニコードスカラー値を追加する場合は、追加割り当てが必要かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a Unicode scalar value can require up to 21 bits to store its value, some Unicode scalars are represented in UTF-16 by a pair of 16-bit code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコードスカラー値はそれの値を格納するのに21ビットに至るまで要求できるので、いくつかのユニコードスカラーはUTF-16ではペア（一対）の16ビットコード単位によって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a Unicode scalar value can require up to 21 bits to store its value, some Unicode scalars are represented in UTF-8 by a sequence of up to 4 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコードスカラー値はそれの値を格納するのに21ビットに至るまで要求できるので、いくつかのユニコードスカラーはUTF-8では４コード単位までのシーケンスによって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a mutable typed pointer can be implicitly cast to an immutable pointer with the same Pointee type when passed as a parameter, you can also call printInt(atAddress:) with an UnsafeMutablePointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変の型付ポインタは同じPointee型を持つ不変のポインタに暗黙的にキャストされることがパラメータとして渡される時に可能なことから、あなたはまたprintInt(atAddress:)をUnsafeMutablePointerインスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because all such functions are async they can only be invoked as part of an existing task, and therefore are guaranteed to be effective.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのような関数すべてがasyncであることからそれらは既存のタスクの一部として発動されることだけが可能です、そしてそれゆえ有効であることを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because any arbitrary subclass of NSString can become a String instance, there are no guarantees about representation or efficiency when a String instance is backed by NSString storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NSStringの随意のサブクラスは何であれStringインスタンスになれるので、StringインスタンスがNSStringストレージによって裏打ちされる場合、表現または効率についての保証はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because both types have the same interface, you can replace one with the other in most circumstances, without making other changes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方の型は同じインターフェイスを持つため、あなたは多くの状況で一方を他方で置き換えることが、他の変更をすることなく可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because each character in a string can require more than a single ASCII character’s worth of storage, additional allocation may be necessary when adding characters to a string after a call to reserveCapacity(_:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列中の各文字が単一ASCII文字相当のストレージより多く要求する可能性があることから、reserveCapacity(_:)への呼び出しの後に文字列に文字を追加する場合は、追加割り当てが必要かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because of buffering, it is impossible to find the corresponding position in the iterator for a given returned Unicode.Scalar or an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファを行うことのため、ある指定の戻り値Unicode.Scalarやエラーに対して対応する位置をイテレータにおいて見つけることは不可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because of this behavior, testing isEmoji alone on a single scalar is insufficient to determine if a unit of text is rendered as an emoji; a correct test requires inspecting multiple scalars in a Character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この挙動のために、isEmoji単独で単一のスカラー上でテストすることは、あるテキスト単位がemojiとして描出されるかを判定するには不十分です；正確なテストはあるCharacterの中の複数のスカラーを検査することを要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because of this, the index is always in-range and no trap can occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このために、インデックスは常に範囲内です、そしてトラップは起こりえません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the Int8 type can represent 127 at maximum, the attempt to create z with a value of 1000 results in a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Int8型は、最大で127を表せることから、zを1000の値で作成する試みは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the strings are identical up to the 14th character, comparing only those characters results in a return value of 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これら文字列が14番目の文字に至るまで全く同じなので、それらの文字だけ比較することは0の値を返す結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>4に対するキーがないことから、クロージャはnilをその場合には返します、それはcompactMap(_:)がこの変換された非同期シーケンスから省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because this buffer’s memory is no longer bound to its Element type while the body closure executes, do not access memory using the original buffer from within body.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのもつメモリがそれのElement型にはbodyクロージャの実行の間はもはや束縛されないことから、メモリにオリジナルのバッファを使ってbody内からアクセスしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because this pointer’s memory is no longer bound to its Pointee type while the body closure executes, do not access memory using the original pointer from within body.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタのメモリがそれのPointee型にはbodyクロージャの実行の間はもはや束縛されないことから、メモリにオリジナルのポインタを使ってbody内からアクセスしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because typed pointers can be implicitly cast to raw pointers when passed as a parameter, you can also call print(address:as:) with any mutable or immutable typed pointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタは暗黙的に生のポインタにキャストされることがパラメータとして渡される時に可能なことから、あなたはまたprint(address:as:)を何らかの可変または不変の型付ポインタとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because typed pointers can be implicitly cast to raw pointers when passed as a parameter, you can also call print(address:as:) with any mutable typed pointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタは暗黙的に生のポインタにキャストされることがパラメータとして渡される時に可能なことから、あなたはまたprint(address:as:)を何らかの可変の型付ポインタとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before shifting, the masking left shift operator masks the shift to this range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトする前に、マスク左シフト演算子は、シフトをマスクしてこの範囲にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before shifting, the masking right shift operator masks the shift to this range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトする前に、マスク右シフト演算子は、シフトをマスクしてこの範囲にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>BinaryInteger Implementations </seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ整数の実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binding task-local values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカル値のバインド（束縛）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binds the memory to the specified type and returns a typed pointer to the bound memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリを指定された型へ束縛して、束縛されたメモリに対する型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binds the task-local to the specific value for the duration of the synchronous operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカルを特定の値へとこの非同期演算の持続期間に対してバインドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binds this buffer’s memory to the specified type and returns a typed buffer of the bound memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの持つメモリを指定された型へ束縛して、束縛されたメモリに対する型付バッファを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bits are randomly distributed so that every value of T is equally likely to be returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらビットは無作為に分布します、それでTの全ての値は等しく返される可能性をもちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise AND</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の積</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise AND and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の積と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise NOT</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise OR</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise OR and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の和と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise XOR</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の排他的和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise XOR and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の排他的和と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise left shift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の左シフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise left shift, ignoring overflow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の左シフト、オーバーフローを無視します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise right shift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の右シフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise right shift, ignoring overflow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の右シフト、オーバーフローを無視します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both parameters must be valid indices of the buffer, and not equal to endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方のパラメータは、バッファの有効なインデックスであり、そしてendIndexと等しくてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both parameters must be valid indices of the collection that are not equal to endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方のパラメータは、このコレクションの有効なインデックスで、endIndexと等しくない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bounds checks are always performed in debug mode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>境界検査は、デバッグモードにおいて常に実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bounds checks for bounds are performed only in debug mode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bounに対する境界検査は、デバッグモードでのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bounds checks for i are performed only in debug mode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iに対する境界検査は、デバッグモードでのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bridging Between String and NSString</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StringとNSStringの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Buffer Implementation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Buffer 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build your own buffer-backed collection types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自のバッファ裏付けのコレクション型を組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態で、あるコレクションはSequenceプロトコルに、IndexingIteratorをそれの関連Iterator型として提供することによって準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By sending the output of the print(_:to:) function to an instance of ASCIILogger, you invoke its write(_:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>print(_:to:)関数の出力をASCIILoggerのインスタンスに送ることによって、あなたはそれのwrite(_:)メソッドを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C Interoperability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C互換性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C Variadic Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C可変長引数関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C and Objective-C Pointers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CおよびObjective-Cポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を計算します、シフト量をその型のもつビット幅にマスクしています、そして結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call body(p), where p is a pointer to the collection’s contiguous storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>body(p)を呼び出します、ここでpはコレクションのもつ隣接ストレージへのポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call body(p), where p is a pointer to the collection’s mutable contiguous storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>body(p)を呼び出します、ここでpはコレクションのもつ可変の隣接ストレージへのポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call randomElement() to select a random element from an array or another collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>randomElement()を呼び出して、ある無作為な要素を配列または別のコレクションから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>randomElement(using:)を呼び出して、あなたがあつらえの無作為数生成子を使っている場合に、ある無作為な要素を配列または別のコレクションから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call hasher.combine(_:) with each of these components.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>hasher.combine(_:)をそれら構成要素とともに呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call the drinksUpdated after any code that sets the currentDrinks property, using an await call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drinksUpdatedを、currentDrinksプロパティを設定するあらゆるコードの後に呼び出してください、await呼出を使って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call the given output stream’s write(_:) method in your implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた出力ストリームのもつwrite(_:)メソッドをあなたの実装において呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling flatMap(_:) on a sequence s is equivalent to calling s.map(transform).joined().</seg>
      </tuv>
      <tuv lang="ja">
        <seg>flatMap(_:)をあるシーケンスs上で呼び出すことは、s.map(transform).joined()を呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling storeBytes(of:toByteOffset:as:) does not change the bound type of the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>storeBytes(of:toByteOffset:as:)を呼び出すことは、そのメモリの束縛される型を変更しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling swapAt(_:_:) with the same index as both i and j has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>swapAt(_:_:)をiとj両方で同じインデックスで呼び出すことは、効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling Functions With Pointer Parameters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数をポインタパラメータで呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling Objective-C APIs Asynchronously</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C APIを非同期に呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling other APIs from another task is undefined behavior, breaks invariants in other parts of the program running on this task, and may lead to crashes or data loss.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その他のAPIを別のタスクから呼び出すことは、未定義挙動になります、このタスク上で動作しているプログラムの他の部分における不変式を壊します、そしてクラッシュまたはデータ損失に至らしめるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the move() method on a pointer p that references memory of type T is equivalent to the following code, aside from any cost and incidental side effects of copying and destroying the value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>move()メソッドを、型Tのメモリを参照するポインタp上で呼び出すことは、その値のコピーおよび破棄のあらゆるコストと付随する副作用を除いて、以下のコードと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the removeSubrange(_:) method instead is preferred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>removeSubrange(_:)メソッドを代わりに呼ぶことが好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the insert(contentsOf:at:) method instead is preferred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>insert(contentsOf:at:)メソッドを代わりに呼ぶことが好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the related sorted() method is equivalent to calling this method and passing the less-than operator (&lt;) as the predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連したsorted()メソッドを呼び出すことは、このメソッドを呼び出して、より小さい演算子（&lt;）を述部として渡すことと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this initializer copies the contents of the substring to a new string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを呼ぶことは、下位文字列の内容を新しい文字列にコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method invalidates any existing indices for use with this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、この文字列で使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method is roughly equivalent to calling initialize(repeating:count:) with a count of 1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、おおよそinitialize(repeating:count:)を１のcountで呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method may invalidate all saved indices of this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、このコレクションの全ての保存されたインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method may invalidate any existing indices for use with this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、このコレクションで使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this property directly is discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティを直接に呼び出すことは、推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure on each element in the sequence in the same order as a for-in loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたクロージャをそのシーケンスの各要素上でfor-inループと同じ順番で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with a mutable pointer to the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを与えられた引数に対する可変ポインタを使って呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with a pointer to the contents of the string, represented as a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>null終端のUTF-8コード単位シーケンスとして表される、文字列の内容へのポインタとともに与えられたクロージャを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with a pointer to the contents of the string, represented as a null-terminated sequence of code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>null終端のコード単位シーケンスとして表される、文字列の内容へのポインタとともに与えられたクロージャを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with the with the “current” task in which this function was invoked.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、それにおいてこの関数が発動されたところの “現在の” タスクで呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls to async functions from synchronous functions are made by creating new asynchronous tasks, which can use await to wait for completion:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>async関数への非同期関数からの呼び出しは、新しい非同期タスクを作成することによって作られます、それらは awaitを使うことで完了に対して待機できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls to the CoffeeData object from SwiftUI views don’t require any use of await as these views are also on the main actor due to their use of @EnvironmentObject.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CoffeeDataオブジェクトへのSwiftUIビューそれらからの呼び出しは、awaitのどのような利用も必要としません、それらのビューがまたメインアクター上で@EnvironmentObjectのそれらの使用によってするのと同じく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cancel all of the remaining tasks in the group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グループの中の残っているタスクの全てを取り消します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cancel all the remaining, and future, tasks in the group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グループの中の全ての残っている、そして将来の、タスクを取り消します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cancel the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを取り消します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Canceling Tasks</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクの取り消し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cancellation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取り消し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cancellation is a purely Boolean state; there’s no way to include additional information like the reason for cancellation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取り消しはある純粋なブール状態です；取り消しの理由のような追加的情報を含める方法はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cancelling a task must be performed explicitly via cancel().</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるタスクの取り消しは、明示的にcancel()経由で実行されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cancelling a task must be performed explicitly via handle.cancel().</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるタスクの取り消しは、明示的にhandle.cancel()経由で実行されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Canonical combining classes are defined in the Unicode Standard as integers in the range 0...254.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正準結合クラスは、「ユニコード標準」において整数として範囲0...254の中で定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Canonical combining classes are used by the ordering algorithm to determine if two sequences of combining marks should be considered canonically equivalent (that is, identical in interpretation).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正準結合クラスは、順序アルゴリズムによって使われて、２つの結合記号シーケンスが正準的に等しい（すなわち、解釈において同一）と考えられるべきかを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cast instances of the Objective-C id type to a specific Swift type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C idのインスタンスをSwift型にキャストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Casting Between Integer Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数型の間でキャストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Changing Case</seg>
      </tuv>
      <tuv lang="ja">
        <seg>大文字小文字の変更</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Check if the task is cancelled and throw an CancellationError if it was.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクが取り消されるかどうか確認します、そしてそれがそうであったならばCancellationErrorをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checking that the iterator was exhausted is not sufficient, because the decoder can store buffered data from the input iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータが使い尽くされてしまったことの確認は十分とは言えません、デコーダが入力イテレータからのバッファ済みデータを格納できるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checks a necessary condition for making forward progress.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは進捗を前へ進めるために必要な条件を確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Child tasks automatically carry priorities, task-local state, deadlines and have other benefits resulting from the structured concurrency concepts that they model.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>子タスクそれらは、プロパティ、タスクにローカルな状態、最終期限を自動的に持ち運びます、そしてそれらを形作る構造化された並行性概念からの結果である他の利益を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Child tasks automatically inherit their parent task’s priority.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>子タスクそれらは、自動的にそれらの親タスクのもつ優先度を継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Choosing the Smallest and Largest Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最小および最大値を選ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Click Delete Caffeine Data to clear all of the caffeine samples from HealthKit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Delete Caffeine Data をクリックして、カフェイン見本の全てを HealthKit から消去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Click the Digital Crown to exit the app and return to the watch face.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Digital Crownをクリックして、アプリを出て、ウォッチフェイスに戻ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Click the Digital Crown to send the app to the background.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Digital Crownをクリックして、アプリをバックグラウンドに送ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Closed range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Closure Casting</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャのキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cocoa Design Patterns</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cocoaデザインパターン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Coffee Tracker updates the complication within 15 minutes; however, the update may be delayed based on the system’s current state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Coffee Tracker は、コンプリケーションを 15 分以内に更新します；しかしながら、更新はシステムの現在の状態に依存して遅れるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collection Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションリテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collection Mutability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの可変性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collection Traversal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクション横断</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまなコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collections of Indices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスのコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Combine strings using the concatenation operator (+).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>連結演算子（+）を使って文字列を結合してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Combining Unicode scalars do not have their own position in a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結合ユニコードスカラーは、それら自身の位置を文字列において持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Combining marks that are attached to hiragana and katakana to indicate voicing changes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ひらがなとカタカナに付けられて発声変化を指し示す結合記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Command Line Input</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コマンドライン入力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Command-line arguments for the current process.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のプロセスに対するコマンドライン引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Common data structures such as Array, Dictionary, and Set</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般的なデータ構造体、例えばArray、Dictionary、そしてSetなど</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Common protocol to which all actors conform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それへと全てのアクターが準拠する共通プロコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Identity</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一性の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Scalars</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーを比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Strings Using Operators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を演算子を使って比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Tasks</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクを比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing strings for equality using the equal-to operator (==) or a relational operator (like &lt; or &gt;=) is always performed using Unicode canonical representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等演算子（==）または関係演算子（&lt;や&gt;=のような）を使って同等性について文字列を比較することは、常にユニコード正準表現を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing strings using the equal-to operator (==) or a relational operator (like &lt; and &gt;=) is always performed using the Unicode canonical representation, so that different representations of a string compare as being equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を同等演算子（==）または関係演算子（&lt;および&gt;=）を使って比較することは、常にユニコード正準表現を使って実行されます、そのためある文字列の異なる表現は同等であると比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compile-Time Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパイル時文字列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションがRandomAccessCollectionに準拠するならば、O(1)；そうでなければ、O(k)、そこでkはmaxLengthに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：もしコレクションがRandomAccessCollectionに準拠するならば、O(1)；そうでなければ、O(k)、そこでkはdistanceの値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションがRandomAccessCollectionに準拠するならば、O(1)；そうでなければ、O(k)、そこでkはコレクションの冒頭から除外する要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションがRandomAccessCollectionに準拠するならば、O(1)；そうでなければ、O(k)、そこでkは除外される要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(k)、そこでkは除去される要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションがRandomAccessCollectionに準拠するならば、O(1)；そうでなければ、O(k)、そこでkはコレクションの冒頭から選択する要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(k)、そこでkは結果の隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(k)、そこでkは指定した要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the absolute value of n.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(n)、そこでnはnの値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(n)、そこでnはコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) on average, over many calls to append(_:) on the same collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：同じコレクション上でのappend(_:)への多くの呼び出しに対して、均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1), except if the sequence also conforms to Collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、例外としてシーケンスが同様にCollectionに準拠する場合を除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、結果の各反復に対してO(k)延期されて、ここでkはシーケンスの冒頭から除かれる要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(k), where k is the length of the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(k)、ここでkは結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(k), where k is the number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(k)、ここでkはシーケンスの冒頭から除かれる要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(k), where k is the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(k)、ここでkは指定された要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(m + n), where m is the length of this sequence and n is the length of the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(m + n)、ここでmはこのシーケンスの長さで、nは結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(m + n), where n is the length of this sequence and m is the length of the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(m + n)、ここでnはこのシーケンスの長さで、mは結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(m), where m is the combined length of the string and newElements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(m)、ここでmは文字列とnewElementsを合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(m), where m is the combined length of the view and newElements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(m)、ここでmはビューとnewElementsを合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(m), where m is the length of newElements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(m)、ここでmはnewElementsの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(m), where m is the length of the right-hand-side argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(m)、ここでmは右手側の引数の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(m), where m is the lesser of the length of the sequence and the length of other.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(m)、ここでmはシーケンスの長さとotherの長さのより短い方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(m)、ここでmはシーケスの長さとpossiblePrefixの長さのより短い方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n + c), where n is self.count and c is the number of changes contained by the parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n + c)、ここでnはself.countです、そしてcはパラメータによって含まれる変更の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n + m), where n is length of this collection and m is the length of newElements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n + m)、ここでnは配列の長さです、そしてmはnewElementsの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n log n), where n is the length of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n log n)、ここでnはコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n log n), where n is the length of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n log n)、ここでnはシーケンスの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n), where n is the absolute value of n.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、そこでnはnの値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n), where n is the capacity being reserved.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、ここでnは確保されている容量です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n), where n is the combined length of the string and newElements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、ここでnは文字列とnewElementsを合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n), where n is the length of substring.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、ここでnはsubstringの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n), where n is the length of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、ここでnはコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n), where n is the length of the resulting view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、ここでnは結果となるビューの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n), where n is the length of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、ここでnはシーケンスの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n), where n is the length of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、ここでnは文字列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n), where n is the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、ここでnはコレクションの中の要素数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n), where n is the resulting distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、ここでnは結果となる隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(N), where N is the length of the resulting String’s UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(N)、ここでNは結果となるStringの持つUTF-16の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n) if non-contiguous, O(1) if already contiguous</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、もし非隣接ならば、O(1)、もしすでに隣接ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: Worst case performance is O(n * m), where n is the count of this collection and m is other.count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：最悪の場合の性能は、O(n * m)です、ここでnはこのコレクションの総数です、そしてmはother.countです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Computational operations are defined on the SIMD protocol, which refines this protocol, and on the concrete types that conform to SIMD.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算関係演算は、SIMDプロトコル上で、それはこのプロトコルを洗練させたものです、そしてSIMDに準拠する具象型上で、定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configure the Sample Code Project</seg>
      </tuv>
      <tuv lang="ja">
        <seg>見本コードプロジェクトを構成設定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの型が準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Strideable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Strideableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the TextOutputStream Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>TextOutputStreamプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the TextOutputStreamable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>TextOutputStreamableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms To</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when Base conforms to AccelerateBuffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがAccelerateBufferに準拠する場合に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when Base conforms to AccelerateMutableBuffer and MutableCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがAccelerateMutableBufferとMutableCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when Base conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがBidirectionalCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when Base conforms to ContiguousBytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがContiguousBytesに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when Base conforms to DataProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがDataProtocolに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when Base conforms to LazySequenceProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがLazySequenceProtocolに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when Base conforms to MutableCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがMutableCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when Base conforms to RangeReplaceableCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BaseがRangeReplaceableCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when Element is UInt8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ElementがUInt8である場合に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider using detached tasks only when strictly necessary and impossible to model operations otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>分離されたタスクの使用は、厳密に必要なそしてそれ以外では演算を形作るのが不可能な場合にのみ考慮してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Construct a YieldingContinuation with a specific Element type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたElement型をバッファするAsyncStreamを組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Construct a YieldingContinuation with specific types including a failure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>YieldingContinuationを特定の型それらで、ある失敗を含めて組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Construct a YieldingContinuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>YieldingContinuationを組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Construct with value v.value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値v.valueを使って組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Constructs an instance that can be used to begin parsing CodeUnits at any Unicode scalar boundary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるインスタンスを組み立てます、それはCodeUnitの構文解析を何らかのユニコードスカラー境界で開始するのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Contains a buffer object, and provides access to an instance of Header and contiguous storage for an arbitrary number of Element instances stored in that buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファオブジェクトを収容します、そしてHeaderのインスタンスへのアクセスおよびそのバッファに格納される随意の数のElementインスタンスの隣接保管を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Contiguous strings also benefit from fast-paths and better optimizations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>隣接文字列はまた、高速パスそしてより良い最適化から利益を得ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Contiguous strings always operate in O(1) time for withUTF8 and always give a result for String.UTF8View.withContiguousStorageIfAvailable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>隣接文字列は常に O(1) 時間で withUTF8 に対して作動します、そして常に String.UTF8View.withContiguousStorageIfAvailable に対して結果を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Continuation bytes take the form 0b10xxxxxx.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続バイトは、形式0b10xxxxxxを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Continuations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな継続</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convert Completion Handlers to Use Asynchronous Methods</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完了ハンドラを変換して非同期メソッドを使うようにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convert your pointer to an UnsafeMutableRawPointer instance and then use the raw pointer’s load(fromByteOffset:as:) and storeBytes(of:toByteOffset:as:) methods to read and write values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのポインタをUnsafeMutableRawPointerインスタンスに変換して、それから生のポインタのもつload(fromByteOffset:as:)とstoreBytes(of:toByteOffset:as:)メソッドを使って値を読み書きしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convert your pointer to an UnsafeRawPointer instance and then use the raw pointer’s load(fromByteOffset:as:) method to read values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのポインタをUnsafeRawPointerインスタンスに変換して、それから生のポインタのもつload(fromByteOffset:as:)メソッドを使って値を読みだしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Numeric Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数値を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Other Types to Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他の型を文字列に変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting a C String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C文字列を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting a Substring to a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SubstringをStringに変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converts a scalar from another encoding’s representation, returning nil if the scalar can’t be represented in this encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーを別の符号化のもつ表現から変換します、nilを返します、もしそのスカラーがこの符号化で表現されることができないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converts from encoded to encoding-independent representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号化から符号化独立の表現へと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converts from encoding-independent to encoded representation, returning nil if the scalar can’t be represented in this encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号化独立から符号化表現へと変換します、nilを返します、もしそのスカラーがこの符号化で表現されることができないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copies from a collection of UInt8 into this buffer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt8からなるコレクションからこのバッファのメモリにコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copies the bytes from the given buffer to this buffer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたバッファからバイトをこのバッファの持つメモリにコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copies the specified number of bytes from the given raw pointer’s memory into this pointer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた生のポインタの持つメモリからこのポインタの持つメモリに指定されたバイト数をコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying a value of type UnsafeBufferPointer does not copy the instances stored in the underlying memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型UnsafeBufferPointerの値をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying a value of type UnsafeMutableBufferPointer does not copy the instances stored in the underlying memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型UnsafeMutableBufferPointerの値をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying a variable or constant of type UnsafeRawBufferPointer does not copy the underlying memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型UnsafeRawBufferPointerの変数や定数をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying a variable or constant of type UnsafeMutableRawBufferPointer does not copy the underlying memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型UnsafeMutableRawBufferPointerの変数や定数をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying bytes directly from nontrivial, in-memory values does not produce valid copies and can only be done by calling a C API, such as memmove().</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明でない、メモリ中の値から直接にバイトをコピーすることは、有効なコピーを生成しません、そしてmemmove()のようなC APIを呼び出すことでのみ可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying memory that contains values of nontrivial types can only be done safely with a typed pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明でない型の値を含むメモリをコピーすることは、型付ポインタでのみ安全になされることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a collection of all the values in a range by using the half-open (..&lt;) and closed (...) range operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲の中のすべての値からなる１つのコレクションを半開（..&lt;）および完結（...）範囲演算子を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a slice of the absences array that holds the second half of the days.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>学期後半の日付を保持する、absences配列のスライスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a stride that steps over values between two boundaries using the stride(from:to:by:) and stride(from:through:by:) functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの境界の間の値をまたぐストライドをstride(from:to:by:)およびstride(from:through:by:)関数を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a String having the given content.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた内容を持っているあるStringを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a Substring having the given content.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた内容を持っているSubstringを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a Unicode scalar with the specified numeric value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数値を使ってユニコードスカラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a Unicode scalar with the specified value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値を使ってユニコードスカラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a buffer over the same memory as the given buffer slice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたバッファスライスと同じメモリのすべてを覆うバッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a buffer over the specified number of contiguous bytes starting at the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の隣接バイトすべてを覆うバッファを、与えられたポインタで開始して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a collection containing the specified number of the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の与えられた要素を含んでいるコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a duplicate of the given Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラーの複製を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a mutable typed buffer pointer referencing the same memory as the given immutable buffer pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変の型付バッファポインタを作成します、与えられた不変バッファポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a mutable typed pointer referencing the same memory as the given immutable pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変の型付ポインタを作成します、与えられた不変ポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new buffer over the same memory as the given buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたバッファと同じメモリのすべてを覆う新しいバッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new buffer pointer over the specified number of contiguous instances beginning at the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたポインタで始まっている指定された数の隣接インスタンスすべてを覆う新しいバッファポインタを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new canonical combining class with the given raw integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい正準結合クラスをこの与えられた生の整数値で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection by concatenating the elements of a collection and a sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションとあるシーケンスの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection by concatenating the elements of a sequence and a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスとあるコレクションの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection by concatenating the elements of two collections.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのコレクションの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection containing the specified number of a single, repeated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の、ある単一の値の繰り返しを含んでいる新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new index at the specified UTF-16 code unit offset</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインデックスをこの指定されたUTFー16コード単位オフセットで作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new index at the specified code unit offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインデックスをこの指定されたコード単位オフセットで作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型のもつRawValueがUInt8である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたデコーダからデコードすることで新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from an interpolated string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスを補間文字列リテラルから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もしこの型に適合するのに必要ならば切り詰めるか符号拡張によって、指定インスタンスのビットパターンから新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given integer, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数から新しいインスタンスを作成します、もしそれが正確に表現できるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数から新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance of a collection containing the elements of a sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスの要素を含んでいるあるコレクションの新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance of the system’s default random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>システムの持つ省略時の無作為数生成子の新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the representable value that’s closest to the given integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数に最も近い表現可能な値を使って新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the same memory representation as the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値と同じメモリ表現で新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the specified raw value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された生の値を持つ新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new integer value from the given string and radix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列と基数から新しい整数値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new integer value from the given string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列から新しい整数値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new mutable buffer over the same memory as the given buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたバッファと同じメモリを覆う新しい可変バッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new mutable raw pointer from the given immutable raw pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい可変の生のポインタを与えられた不変の生のポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new pointer from the given address, specified as a bit pattern.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいポインタをこの与えられたアドレスから作成します、ビットパターンとして指定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new pointer from the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいボインタをこの与えられたポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new raw pointer from an AutoreleasingUnsafeMutablePointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい生のポインタをAutoreleasingUnsafeMutablePointerインスタンスから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new raw pointer from the given mutable raw pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい生のポインタを与えられた可変の生のポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new raw pointer from the given typed pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい生のポインタを与えられた型付ポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string by copying and validating the null-terminated UTF-8 data referenced by the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のUTF-8データをコピーして検証することによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string by copying the null-terminated UTF-8 data referenced by the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のUTF-8データをコピーすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string by copying the null-terminated data referenced by the given pointer using the specified encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のデータをコピーすることによって作成します、指定された符号化を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string containing the characters in the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの中のそれら文字を含んでいるある新しい文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string from the given substring.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列を与えられた下位文字列から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string representing the given string repeated the specified number of times.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された回数繰り返された与えられた文字列を表している新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string with the specified capacity in UTF-8 code units, and then calls the given closure with a buffer covering the string’s uninitialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列をUTF-8コード単位でのこの指定された収納能力で作成します、それから与えられたクロージャを、文字列のもつ初期化されないメモリを扱うバッファで呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new typed pointer from the given opaque pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた不透明ポインタから新しい型付ポインタを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロに等しい新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value with the bit pattern of the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたポインタのビットパターンで新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new vector by decoding scalars from the given decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しいベクターをこの与えられたデコーダからスカラーをデコードすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new, empty collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい、空のコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a raw buffer over the contiguous bytes in the given typed buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された型付バッファの中の隣接バイトすべてを覆う生のバッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a raw buffer over the same memory as the given raw buffer slice, with the indices rebased to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた生のバッファスライスと同じメモリのすべてを覆う生のバッファを作成します、ゼロに再配置されたインデックスを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a sequence of pairs built out of two underlying sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの根底にあるシーケンスから組み立てられるペアからなるシーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string by interpreting the file path’s content as UTF-8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファイルパスのもつ内容をUTF-8として解釈することによってある文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string containing the given character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字を含んでいる文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string corresponding to the given collection of Unicode scalars.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたユニコードスカラーのコレクションに対応する文字列を組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string corresponding to the given sequence of UTF-16 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたUTF-16コード単位の連続に対応する文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string corresponding to the given sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたUTF-8コード単位の連続に対応する文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string from a file path, validating its UTF-8 contents.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファイルパスからある文字列を作成します、それのUTF-8内容を検証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string from another string wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列をデータ値の中にラップされる別の文字列から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string from the given Unicode code units in the specified encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコード単位から指定されたエンコーディングで文字列を作成する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string from the null-terminated sequence of bytes at the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたポインタでのnull終端のバイトシーケンスから文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string from the null-terminated, UTF-8 encoded sequence of bytes at the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたポインタでの、null終端の、UTF-8エンコードされたバイトシーケンスから文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string representing the given character repeated the specified number of times.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された回数繰り返された与えられた文字を表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string representing the given value in base 10, or some other specified base.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値を底10、または何か他の指定の底で表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string representing the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値を表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string with a detailed representation of the given value, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値の詳細な表現での文字列を作成します、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a vector from the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるベクターをこの与えられたシーケンスから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a vector from the specified elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるベクターをこの指定された要素それらから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a vector with zero in all lanes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるベクターを全レーンにおいてゼロで作成します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a view into the given collection that allows access to elements within the specified range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたコレクションに関するあるビューを作成します、それは指定された範囲の内の要素にアクセスを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは与えられたエラースロー変換をこのシーケンスの各要素で呼び出すことの結果を連結します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは与えられた変換をこのシーケンスの各要素で呼び出すことの結果を連結します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは基底シーケンスの要素それらを、順番に含みます、それらは与えられた述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それはあるエラースロークロージャを基底シーケンスのもつ要素のすべてにわたってマップします、値を返さない結果を省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは与えられたクロージャを非同期シーケンスのもつ要素のすべてにわたってマップします、値を返さない結果を省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは与えられたクロージャを非同期シーケンスのもつ要素のすべてにわたってマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは与えられたエラースロークロージャを非同期シーケンスのもつ要素のすべてにわたってマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty instance ready to be filled with string literal content.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列リテラル内容で満たされる準備ができている空のインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty static string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の静的文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty substring.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の下位文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty view instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のビューインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an immutable typed buffer pointer referencing the same memory as the given mutable buffer pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不変の型付バッファポインタを作成します、与えられた可変バッファポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an immutable typed pointer referencing the same memory as the given mutable pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不変の型付ポインタを作成します、与えられた可変ポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an index in the given UTF-16 view that corresponds exactly to the specified string position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたUTF-16ビューの中のあるインデックスを作成します、それは指定された文字列位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an index in the given UTF-8 view that corresponds exactly to the specified UTF16View position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたUTF-8ビューの中のあるインデックスを作成します、それは指定されたUTF16View位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an index in the given Unicode scalars view that corresponds exactly to the specified UTF16View position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラービューの中のあるインデックスを作成します、それは指定されたUTF16View位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an index in the given string that corresponds exactly to the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列の中のあるインデックスを作成します、それは指定された位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance from the description of a given LosslessStringConvertible instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたLosslessStringConvertibleインスタンスの叙述からインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to a single Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一のユニコードスカラーへと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to a single character that is made up of one or more Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ひとつ以上のユニコードスカラー値でできているある単一の文字へと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the given string value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列値へ初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the specified integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された整数値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the value of a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルの値へと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance of the UTF-16 codec.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance of the UTF-32 codec.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-32コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance of the UTF-8 codec.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance of the codec.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from its big-endian representation, changing the byte order if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのビッグエンディアン表現から整数を作成します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from its little-endian representation, changing the byte order if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのリトルエンディアン表現から整数を作成します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from the given floating-point value, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた浮動小数点値から整数を作成します、もしそれが正確に表現可能ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from the given floating-point value, rounding toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた浮動小数点値から整数を作成します、ゼロへの丸めを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer that captures the full value of the given object identifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクト識別子の完全な値を捕獲する整数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an unbounded range expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無境界範囲式を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an unmanaged reference with an unbalanced retain.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>管理されない参照を不均衡なリテイン（保持）で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an unmanaged reference without performing an unbalanced retain.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>管理されない参照を不均衡なリテイン（保持）を実行することなしに作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates the asynchronous iterator that produces elements of this asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期イテレータを作成します、それはこの非同期シーケンスの要素を取り出すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating Ranges of Scalars</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーの範囲を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Generator</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生成子を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Range Expression</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Scalar</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a String Using Formats</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を様々な形式を使って作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a String from Unicode Data</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列をユニコードデータから作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a String from a File or URL</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファイルまたはURLから文字列を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Task</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Task Group</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクグループを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Throwing Task Group</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スローするタスクグループを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating an Unbounded Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無境界範囲の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating and Applying Differences</seg>
      </tuv>
      <tuv lang="ja">
        <seg>差異の作成と適用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating detached tasks should, generally, be avoided in favor of using async functions, async let declarations and await expressions - as those benefit from structured, bounded concurrency which is easier to reason about, as well as automatically inheriting the parent tasks priority, task-local storage, deadlines, as well as being cancelled automatically when their parent task is cancelled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>分離されたタスクの作成は、一般的には回避されるべきで、async関数、async let宣言とawait式を使う方を支持します - 構造化された、境界を定められた並行性からの利益それらとしては、それについて論理的に判断するのがより簡単であること、それだけでなく自動的に親タスクの優先度、タスクローカルストレージ、最終期限を継承すること、それだけでなくそれらの親タスクが取り消される時に自動的に取り消されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Custom Encoding and Decoding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>カスタムエンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing Your Type's Reflection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のリフレクションのカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deallocates the memory block previously allocated at this buffer pointer’s base address.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファポインタのもつベースアドレスで以前に割り当てられたメモリブロックを割り当て解除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deallocates the memory block previously allocated at this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで以前に割り当てられたメモリブロックを割り当て解除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deallocates the previously allocated memory block referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照された以前に割り当てられたメモリブロックを割り当て解除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Debugging and Reflection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デバッグとリフレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaration</seg>
      </tuv>
      <tuv lang="ja">
        <seg>宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decoders should provide types conforming to UnkeyedDecodingContainer for their format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらデコーダーは、それらの形式に対してUnkeyedDecodingContainerに準拠する型を提供すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a nested container and returns a Decoder instance for decoding super from that container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入れ子にされたコンテナをデコードして、デコードするsuperに対するDecoderインスタンスをそのコンテナから返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a nested container keyed by the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型によってキー付けされる入れ子にされたコンテナをデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a null value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>null値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a single value of the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の単一の値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a value of the given type, if present.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の値をデコードします、もし存在するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a value of the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes an unkeyed nested container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー付けされない入れ子にされたコンテナをデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decoding Containers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコーディングコンテナ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default Literal Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時のリテラル型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default Types for Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リラテルのための省略時の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default-ignorable code points are those that should be ignored by default in rendering (unless explicitly supported).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時無視可能なコード点は、初期状態では描画において無視されるべきです（明示的にサポートされる場合を除いて）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deinitializes the specified number of values starting at this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで開始して、指定された数の値をデイニシャライズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deinitializing typed memory does not unbind that memory’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付メモリのデイニシャライズは、そのメモリの型を束縛解除しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depending on the type, it may make sense to allocate more or less storage than requested or to take no action at all.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型によって、要請されたよりも多くまたは少なく割り当てるまたは全く行動を起こさないことが道理にかなっているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depending on the work you’re doing in the task, the correct way to stop that work varies.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがそのタスクにおいて行っている仕事に依存して、その仕事を止める正しい方法は様々です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deprecated</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非推奨</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Description</seg>
      </tuv>
      <tuv lang="ja">
        <seg>説明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Detached tasks (created by Task.detached) DO NOT inherit task priority, as they are “detached” from their parent tasks after all.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>切り離された（Task.detachedによって作成された）タスクは、タスク優先度を継承「しません」、結局それらはそれらの親タスクから “分離される” ので。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Detached tasks do not get any of those benefits, and thus should only be used when an operation is impossible to be modelled with child tasks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>分離されたタスクは、それらの利益のどれも得られません、したがって演算が子タスクで形作られるのが不可能である時にのみ使われるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Detached tasks do not inherit task-local values, however tasks created using the Task { ... } initializer do inherit task-locals by copying them to the new asynchronous task, even though it is an un-structured task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>分離されたタスクは、タスクローカル値を継承しません、しかしながらTask { ... }イニシャライザを使って作成されたタスクは、タスクローカルをそれらを新しい非同期タスクにコビーすることによって継承します、たとえそれが構造化されないタスクであっても。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Diacritic nukta marks in Brahmi-derived scripts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブラーフミー派生書体における発音区別ヌクタ記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Diacritic virama marks in Brahmi-derived scripts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブラーフミー派生書体における発音区別ヴィラーマ記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Diacritics are scalars that linguistically modify the meaning of another scalar to which they apply.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら区別的発音符は、それに対してそれらが適用される、別のスカラーの意味を言語学的に修正するスカラーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Discussion</seg>
      </tuv>
      <tuv lang="ja">
        <seg>解説</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks at the bottom left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左下での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks at the bottom right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右下での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks at the top left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左上での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks at the top right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右上での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks directly above.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>直上の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks directly below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>直下の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks extending above two bases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの基盤の上に延びる別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks subtending two bases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの基盤に対する別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks to the left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks to the right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divide</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divide and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divides the first value by the second and stores the quotient in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算して、商を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divides the first value by the second and stores the remainder in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算して、余りを左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dividing by zero is not an error when using this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロによる除算は、このメソッドを使う場合はエラーではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not advance the iterator or any copies of the iterator outside this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータやなんらかのイテレータのなんらかのコピーをこのメソッドの外側で前進させないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not assign an instance of a nontrivial type through pointee to uninitialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明でない型のインスタンスを、未初期化メモリへのpointeeを通してアサインしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not assign an instance of a nontrivial type through the subscript to uninitialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明でない型のインスタンスを未初期化メモリへの添え字を通してアサインしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not call this initializer directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを直接に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not declare new conformances to StringProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい準拠事項をStringProtocolに宣言しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not persist the pointer and access it after the function has returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのポインタに固執すること、そして関数が返った後でそれにアクセスしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not rely on a previously stored index value after altering a collection with any operation that can change its length.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションをそれの長さを変える何らかの演算で手直し後に、以前に格納されたインデックス値を当てにしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not save hash values to use during a future execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>将来の実行の間に使うためにハッシュ値を保存しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not store or return the pointer for later use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>後で使うためにポインタを格納したり返したりしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Doing so may become a compile-time error in the future.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうすることは、コンパイル時エラーに将来はなるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t call this initializer directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを直に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t call this method directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを直に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t call this method from outside the task where this task group was created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを、このタスクグループが作成されたところのタスクの外側から呼び出さないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t store substrings longer than you need them to perform a specific operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列を、あなたが特定の演算の実行にそれらを必要とするより長く、貯蔵しておかないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t try to store an unsafe task handle for use outside that method’s closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非安全タスクハンドルをそのメソッドのもつクロージャの外側で使うために格納しようとしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Download the playground below to get started.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドを下でダウンロードして始めましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dumps the given object’s contents using its mirror to standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクトの内容をそれのミラーを使って標準出力にダンプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dumps the given object’s contents using its mirror to the specified output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクトの内容をそれのミラーを使って指定出力ストリームにダンプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dynamic Sequences</seg>
      </tuv>
      <tuv lang="ja">
        <seg>動的なシーケンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each ExpressibleByStringInterpolation type has an associated StringInterpolation type which conforms to StringInterpolationProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それぞれのExpressibleByStringInterpolation型は、ある結び付けられたStringInterpolation型を持ちそれはStringInterpolationProtocolに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each UnicodeDecodingResult instance can represent a Unicode scalar value, an indication that no more Unicode scalars are available, or an indication of a decoding error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各UnicodeDecodingResultインスタンスは、ユニコードスカラー値、これ以上利用可能なユニコードスカラーがないしるし、またはデコードエラーのしるしとして表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each byte in memory is viewed as a UInt8 value independent of the type of values held in that memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中の各バイトは、そのメモリ中に保持される値の型に影響を受けないUInt8値として眺められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each byte in memory is viewed as a UInt8 value independent of the type of values held in that memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中の各バイトは、そのメモリ中に保持される値の型に影響を受けないUInt8値として眺められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each call to the yielding functions will resume any awaiter on the next function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数それらを生み出すための各呼び出しは、次の関数に関する何らかの待機者を再開するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each code unit is stored as a UInt16 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各コード単位はUInt16インスタンスとして格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each code unit is stored as a UInt8 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各コード単位はUInt8インスタンスとして格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each element of a string is represented by a Character instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の各要素は、あるCharacterインスタンスによって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each ill-formed sequence is replaced with a Unicode replacement character ("\u{FFFD}") and is measured as such.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各誤形式シーケンスは、ユニコード代替文字（"\u{FFFD}"）で置き換えられます、そしてそういったものとして測られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each of these scalar values, in turn, is too large to fit into a single UTF-16 or UTF-8 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらスカラー値のそれぞれは、今度は、ある単一のUTF-16またはUTF-8コード単位にぴったり合うには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each property provides access to a view of the string as a series of code units, each encoded in a different Unicode encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各プロパティは、文字列のあるビューへのアクセスを一続きのコード単位として提供し、それぞれが異なるユニコードエンコーディングにおいてエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each scalar value is represented by a Unicode.Scalar instance and is equivalent to a UTF-32 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各スカラー値は、Unicode.Scalarインスタンスによって表されて、ひとつのUTF-32コード単位と同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each such period ends at a suspension point or the completion of the task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのような期間のそれぞれは、一時停止地点またはタスクの完了で終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements are sorted in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素は昇順にソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements that are used to split the collection are not returned as part of any subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションを分割するのに使われる要素らは、どれかの下位シーケンスの一部として返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements that are used to split the sequence are not returned as part of any subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスを分割するのに使われる要素らは、どれかの下位シーケンスの一部として返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoders and Decoders</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーダとデコーダ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoders should provide types conforming to UnkeyedEncodingContainer for their format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーダは、それらの形式に対してUnkeyedEncodingContainerに準拠する型を提供するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a Unicode scalar as a UTF-32 code unit by calling the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-32コード単位としてのユニコードスカラーを与えられたクロージャを呼び出すことによってエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a Unicode scalar as a series of code units by calling the given closure on each code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを各コード単位上で呼び出すことによって、ユニコードスカラーを一連のコード単位としてエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a nested container and returns an Encoder instance for encoding super into that container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入れ子にされたコンテナをエンコードして、superをそのコンテナへとエンコードするためのEncoderインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a nested container keyed by the given type and returns it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型によってキー付けされる入れ子にされたコンテナをエンコードしてそれを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a null value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>null値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a reference to the given object only if it is encoded unconditionally elsewhere in the payload (previously, or in the future).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクトへの参照をエンコードします、それがそのペイロードの中のどこか他の所で無条件にエンコードをされる（以前に、またはこの先に）場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a single value of the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の単一の値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes an unkeyed encoding container and returns it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー付けされないエンコーディングコンテナをエンコードしてそれを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the elements of the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスに属する要素をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the scalars of this vector into the given encoder in an unkeyed container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターのスカラーそれらをこの与えられたエンコーダへとキー付けされないコンテナの中に符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is UInt8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、その型のもつRawValueがUInt8である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を与えられたエンコーダにエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding Containers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングコンテナ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Decoding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Decoding Custom Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえの型のエンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Storage</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコードとストレージ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding, Decoding, and Serialization</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコード、デコード、そしてシリアライズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumeration Case</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumeration Cases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equality and Ordering</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等性と順序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equality is the inverse of inequality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等性は、不等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equivalent to a ? .!b : b.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に相当します、a ? .!b : b。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equivalent to a ? SIMDMask(repeating: true) : b.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に相当します、a ? SIMDMask(repeating: true) : b。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equivalent to a ? b : SIMDMask(repeating: false).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に相当します、a ? b : SIMDMask(repeating: false)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equivalent to b ? .!a : a.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に相当します、b ? .!a : a。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equivalent to b ? SIMDMask(repeating: true) : a</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に相当します、b ? SIMDMask(repeating: true) : a。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equivalent to b ? a : SIMDMask(repeating: false).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に相当します、b ? a : SIMDMask(repeating: false)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equivalent to:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に等しい：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Error handling</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラー処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Errors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Escaping the pointer to use after the execution of the function is undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数の実行の後に使うためにポインタを脱出させることは、未定義の挙動となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Essentials</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Evaluates a closure while ensuring that the given instance is not destroyed before the closure returns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャを評価する一方で与えられたインスタンスがそのクロージャが返る前に破棄されないことを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型のすべての個々の値は、RawValue型の対応する特有な値を持ちます、しかし準拠する型の値に対応しないRawValue型の値があっても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every element of numbers up to, but not including, the first negative value is included in the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の負の値までの、しかしそれを含まない、numbersのすべての要素は、この結果の中に含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every unsigned integer is its own magnitude, so for any value x, x == x.magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべての符号なし整数は、それ自身が規模（magnitude）です、それで何らかの値xにとって、x == x.magnitudeです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every value in the range 0..&lt;upperBound is equally likely to be returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲0..&lt;upperBoundの中の全ての値は、等しく返される可能性をもちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Examples</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exchanges the byte values at the specified indices in this buffer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの持つメモリの中の指定インデックスでの値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exchanges the values at the specified indices of the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのバッファの指定インデックスでの値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exchanges the values at the specified indices of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションの指定インデックスでの値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exchanges the values of the two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Execute an operation with a cancellation handler that’s immediately invoked if the current task is canceled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクが取り消されるならば直ちに発動されるある取り消しハンドラを備えた操作を遂行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Executes the given closure while temporarily binding the memory referenced by this buffer to the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを実行します、その間はこのバッファによって参照されるメモリを与えられた型に一時的に束縛しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Executes the given closure while temporarily binding the specified number of instances to the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを実行します、その間は指定された数のインスタンスを与えられた型に一時的に束縛しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Execution resumes after the await completes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遂行は、awaitが完了した後に再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Executors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エグゼキュータ（遂行者）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Existential Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>存在型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exiting a Program</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プログラムの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Experiment with Swift standard library types and learn high-level concepts using visualizations and practical examples.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いろいろなSwift標準ライブラリ型を試したり、視覚化や実践例を使うことで高水準概念を学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Explore the Standard Library</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリ探索</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extending the compared character count to 15 includes the differing characters, so a nonzero result is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する文字を15を数えるまで広げることは異なる文字を含みます、それで非ゼロの結果が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD16への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD2.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD2への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD3.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD3への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD32.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD32への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD4.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD4への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD64.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD64への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD8への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, memory that was allocated previously may have been deallocated, leaving existing pointers referencing unallocated memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結局、以前にアロケートされたメモリはデアロケートされるかもしれません、アロケートされないメモリを参照している既存のポインタはそのままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding Substrings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding the Absolute Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>絶対値を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First Steps</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初歩</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, retrieve a sequence’s iterator, and then call the iterator’s next() method until it returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>まず、あるシーケンスのもつイテレータを見つけて取ってきてください、そしてそのイテレータの持つnext()メソッドを、それがnilを返すまで呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating Point</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-Point Type Aliases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-Point Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a pointer p, the memory at p + i must be initialized when reading the value by using the subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるポインタpに対して、p + iでのメモリは、添え字を使うことで値を読み出すとき初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a pointer p, the memory at p + i must be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるポインタpに対して、p + iでのメモリは、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a task to respect cancellation it must cooperatively check for it while running.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取り消しを遵守するタスクに対してそれは動作している間に協力してそれを確認しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value x, a distance n, and a value y = x.advanced(by: n), x.distance(to: y) == n.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値x、隔たりn、および値y = x.advanced(by: n)に対して、x.distance(to: y) == n。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value x, the result of x.dividedReportingOverflow(by: 0) is (x, true).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値xに対して、x.dividedReportingOverflow(by: 0)の結果は(x, true)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value x, the result of x.remainderReportingOverflow(dividingBy: 0) is (x, true).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値xに対して、x.remainderReportingOverflow(dividingBy: 0)の結果は(x, true)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For all other scalars, this property is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての他のスカラーに対して、このプロパティはnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an index i into a collection c, calling c.index(after: i) returns the same index every time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションcへのインデックスiに対して、c.index(after: i)を呼び出すことはいつでも同じインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any two integers a and b, their quotient q, and their remainder r, a == b * q + r.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの２つの整数aとb、それらの商q、そしてそれらの余りrに対して、a == b * q + r。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any value, x + .zero == x and .zero + x == x.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる値に対して、x + .zero == xかつ.zero + x == x。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any values a and b, a != b implies that a == b is false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかのaとbに対して、a != bはa == bがfalseであることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any values a and b, a == b implies that a != b is false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの値aとbに対して、a == bはa != bがfalseであることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>RandomAccessCollectionに準拠しないコレクションに対して、countプロパティにアクセスすることはコレクションの要素を始めから終わりまで反復します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For convenience, the standard assigns symbolic names to a subset of these combining classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>利便性のため、この標準は象徴名をそれら結合クラスのサブセットに割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For encoders which don’t support this feature, the default implementation encodes the given object unconditionally.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この機能をサポートしないエンコーダに対して、省略時の実装は与えられたオブジェクトを無条件にエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, 6 is a multiple of 3 because 6 = 2*3.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、6は3の倍数です、なぜなら6 = 2*3なので。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a call to init(type:predicate:anchor:limit:resultsHandler:) takes a completion handler, but the call that needs to await is the call to execute(_:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、init(type:predicate:anchor:limit:resultsHandler:)への呼び出しは完了ハンドラをとります、しかしawaitする必要がある呼び出しは、execute(_:)への呼び出しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a lowercase “e” with an acute accent above it ("é") uses 2 bytes for its UTF-8 representation: 0b11000011 (195) and 0b10101001 (169).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、それの上に鋭アクセントを持つ小文字の“e”（"é"）は、それのUTF-8表現のために２バイト使います：0b11000011（195）と0b10101001（169）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a rendering engine might display “fl” in English as a connected glyph; inserting the zero width non-joiner would force them to be rendered as disconnected glyphs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あるレンダリングエンジンは “fl” を英語において１つの結合される字体として表示するかもしれません；ゼロ幅非接合子を挿入することは、それらを分離した字体それらとして描出される様に強制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an ASCII character like the capital letter A is represented by a single element in each of its four views.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、大文字のAのようなあるひとつのASCII文字は、それの４つのビューのそれぞれにおいて単一の要素で表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of a UTF-16 trailing surrogate returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-16の後続サロゲートの位置を変換する試みはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of a UTF-16 trailing surrogate returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-16の後続サロゲートの位置を変換する試みはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of a UTF-8 continuation byte results in nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-8継続バイトの位置を変換しようとする試みは、nilという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of a UTF-8 continuation byte returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-8の継続バイトの位置を変換する試みはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of the combining acute accent ("\u{0301}") fails.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、結合文字のアキュートアクセント（"\u{0301}"）の位置を変換する試みは失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of the trailing surrogate of a UTF-16 surrogate pair results in nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-16のサロゲートペアの後続サロゲートの位置を変換する試みはnilという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, because UTF-8 and UTF-16 represent high Unicode code points differently, an attempt to convert the position of the trailing surrogate of a UTF-16 surrogate pair fails.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-8とUTF-16は高位ユニコードコード点を異なって表すので、UTF-16のサロゲートペアの後続サロゲートの位置を変換する試みは失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider Core Foundation’s CFArrayCreateMutable(_:_:_:) function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、Core FoundationのCFArrayCreateMutable(_:_:_:)関数を考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider the sequence "\u{0041}\u{0301}\u{0316}" (LATIN CAPITAL LETTER A, COMBINING ACUTE ACCENT, COMBINING GRAVE ACCENT BELOW).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このシーケンス"\u{0041}\u{0301}\u{0316}" (LATIN CAPITAL LETTER A, COMBINING ACUTE ACCENT, COMBINING GRAVE ACCENT BELOW) を考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if you update the last element of the absences array from 0 to 2, the secondHalf slice is unchanged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたがabsences配列の最後の要素を0から2に更新する場合、secondHalfスライスは変化していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in a fixed-width integer type with a bitWidth value of 8, the number 31 has five bits equal to 1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、８のbitWidth値を持つ固定長整数型において、数31は1に等しいビットを５つ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in an integer type with a bitWidth value of 8, the number 31 has three leading zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、８のbitWidth値を持つ整数型において、数31は３つの先頭のゼロを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, keeping an actor alive must also keep the actor’s associated executor alive; if they are different objects, the executor must be referenced strongly by the actor.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あるアクターを生かし続けることはまた、そのアクターのもつ関連エグゼキュータも生かし続ける必要があります； それらが異なるオブジェクトであるならば、エグゼキュータはアクターによって強く参照されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, like every Unicode scalar, the musical fermata symbol (“𝄐”) can be represented in UTF-32 as a single code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、すべてのユニコードスカラーのように、音楽のフェルマータ符号（“𝄐”）はUTF-32において単一のコード単位として表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, strings of up to 15 UTF-8 code units in length may be represented in a small-string representation, and thus will be spilled into temporary stack space which is invalid after withUTF8 finishes execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、長さで15 UTF-8コード単位までの文字列は、ある小さな文字列表現で表されるかもしれません、そしてそれゆえ一時スタック空間へとこぼされるでしょう、それはwithUTF8が遂行を終了する後に無効にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, suppose you have an array holding the number of absences from each class during a session.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたがある学期（２学期制）の各クラスの欠席者数が入った配列を持つと考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the flag string declared above comprises a single character, but is composed of eight code units when encoded as UTF-8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、上で宣言されるflag文字列はある単一の文字で構成されます、しかしUTF-8としてエンコードされる時は８つのコード単位から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the print(address:as:) function in the following code sample takes an UnsafeMutableRawPointer instance as its first parameter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、print(address:as:)関数は以下のコード例において、UnsafeMutableRawPointerインスタンスをそれの最初のパラメータとして取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the print(address:as:) function in the following code sample takes an UnsafeRawPointer instance as its first parameter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、print(address:as:)関数は以下のコード例において、UnsafeRawPointerインスタンスをそれの最初のパラメータとして取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the printInt(atAddress:) function in the following code sample expects an UnsafeMutablePointer&lt;Int&gt; instance as its first parameter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、printInt(atAddress:)関数は以下のコード例において、UnsafeMutablePointer&lt;Int&gt;インスタンスをそれの最初のパラメータとして期待します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the printInt(atAddress:) function in the following code sample expects an UnsafePointer&lt;Int&gt; instance as its first parameter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、printInt(atAddress:)関数は以下のコード例において、UnsafePointer&lt;Int&gt;インスタンスをそれの最初のパラメータとして期待します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the name of U+FE18 is “PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRACKET” (note that “BRACKET” is misspelled).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>たとえば、U+FE18 のnameは “PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET” です（ “BRACKET” に綴り間違いがあるのに注意してください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the German letter “ß” (U+00DF LATIN SMALL LETTER SHARP S) becomes “SS” (U+0053 LATIN CAPITAL LETTER S, U+0053 LATIN CAPITAL LETTER S) when converted to uppercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ドイツ語文字 “ß” (U+00DF LATIN SMALL LETTER SHARP S) は、アッパーケースに変換される場合は “SS” (U+0053 LATIN CAPITAL LETTER S, U+0053 LATIN CAPITAL LETTER S) になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the Latin small capitals that are used by the International Phonetic Alphabet have a case, but do not change when they are mapped to any of the other cases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、国際音声記号に使われるラテンスモールキャピタルはあるケースを持ちます、しかしそれらが何らかの他のケースにマップされる時に変更を行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the character “İ” (U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE) becomes two scalars (U+0069 LATIN SMALL LETTER I, U+0307 COMBINING DOT ABOVE) when converted to lowercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、文字 “İ” (U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE) は、ローワーケースに変換される場合は２つのスカラー (U+0069 LATIN SMALL LETTER I, U+0307 COMBINING DOT ABOVE) になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code declares countLetterChanges(_:_:), a function that finds the number of changes required to change one word or phrase into another.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコードはcountLetterChanges(_:_:)、ある単語または語句を別のものへ変更するのに必要とされる変更の数を見つける関数、を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code sample creates a Unicode.Scalar instance with a value of "7":</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコード見本はUnicode.Scalarインスタンスを"7"の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code sample creates a Unicode.Scalar instance with a value of "밥", the Korean word for rice:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコード見本はUnicode.Scalarインスタンスをコリアン単語での米、"밥"の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code sample creates a Unicode.Scalar instance with a value of an emoji character:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコード見本はUnicode.Scalarインスタンスをあるemoji文字の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following conversions result in nil:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、次の変換はnilという結果になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following conversions result in nil:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の変換はnilという結果になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the ligature “ﬁ” (U+FB01 LATIN SMALL LIGATURE FI) becomes “Fi” (U+0046 LATIN CAPITAL LETTER F, U+0069 LATIN SMALL LETTER I) when converted to titlecase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、合字 “ﬁ” (U+FB01 LATIN SMALL LIGATURE FI) は、タイトルケースに変換される場合は “Fi” (U+0046 LATIN CAPITAL LETTER F, U+0069 LATIN SMALL LETTER I) になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the musical fermata symbol (“𝄐”) is a single Unicode scalar value (\u{1D110}) but requires four code units for its UTF-8 representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、音楽のフェルマータ符号（“𝄐”）は単一のユニコードスカラー値（\u{1D110}）ですが４つのコード単位をそれのUTF-8表現のために必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the musical fermata symbol (“𝄐”) is a single Unicode scalar value (\u{1D110}) but requires two code units for its UTF-16 representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、音楽のフェルマータ符号（“𝄐”）は単一のユニコードスカラー値（\u{1D110}）ですが２つのコード単位をそれのUTF-16表現のために必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the number -8 has three trailing zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、数-8は後に続くゼロを３つ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the two method calls in this example are equivalent:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、この例での２つのメソッド呼び出しは同等です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the various “family” emoji are encoded as sequences of man, woman, or child emoji that are interleaved with zero width joiners.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、様々な「家族」絵文字は、一連の男の人、女の人、または子供の絵文字として符号化されます、それらはゼロ幅接合子で綴じられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, this code finds the first letter after the first space:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このコードは最初の空白の後で最初の文字を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, this custom Point struct uses the default representation supplied by the standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このあつらえのPoint structは、標準ライブラリによって提供される省略時の表現を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, this hypothetical Date type stores its value as the number of days before or after January 1, 2000:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、この仮説上のDate型は、それの値を2000年１月１日の前または後の日数として格納します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to get the reversed version of a string, reverse its characters and initialize a new String instance from the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある文字列の逆版を得るには、それの文字を逆にして、新しいStringインスタンスをその結果から初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to replace a value stored in a raw pointer p, where U is the current type and T is the new type, use a typed pointer to access and deinitialize the current value before initializing the memory with a new value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、生のポインタpに格納される値を置き換えるには、そこでUは現在の型でTは新しい型です、型付ポインタを使ってアクセスして現在の値をデイニシャライズしてください、新しい値でメモリを初期化する前にです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to retrieve the first word of a longer string, you can search for a space and then create a substring from a prefix of the string up to that point:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある長い文字列の最初の単語を取り出すには、あなたは空白を捜してから、その文字列の前の部分からその地点までの下位文字列を作成できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to retrieve the first word of a longer string, you can search the string for a space and then create a new string from a prefix of the string up to that point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある長い文字列の最初の単語を取り出すには、あなたはその文字列を空白について調査して、それからその文字列の前の部分からその地点までの新しい文字列を作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, use this initializer to create a string with ten "0" characters in a row.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このイニシャライザを使うことで、10個の"0"文字を１行に持つ文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、PartialRangeFrom範囲式をある配列で使うことは、その下位範囲に範囲式の始まりから配列の終わりまでにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, when converting a 16-bit value to an 8-bit type, only the lower 8 bits of source are used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、16bit値を8bit型へ変換する場合、sourceの最も下位の8ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, when the character é is represented in its decomposed form, the grapheme base is “e” (U+0065 LATIN SMALL LETTER E) and it is followed by a single grapheme extender, U+0301 COMBINING ACUTE ACCENT.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、文字éがそれの分解形式で表現されるならば、書記素基底は “e” (U+0065 LATIN SMALL LETTER E) です、そしてそれは後に単一の書記素拡張、U+0301 COMBINING ACUTE ACCENTが続きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、変換が3を基底シーケンスから受け取る場合、それは新しいCounterを作成します、そしてそれが値1、2、そして3を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can concatenate the elements of a Range&lt;Int&gt; instance and an integer array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはあるRange&lt;Int&gt;インスタンスとある整数配列とに属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can concatenate the elements of an integer array and a Range&lt;Int&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある整数配列とあるRange&lt;Int&gt;インスタンスとに属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can concatenate the elements of two integer arrays.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは２つの整数配列に属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can iterate over a range of Int and use sequence and collection methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある範囲のIntのすべてに反復してシーケンスおよびコレクションのメソッドを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can replace an element of an array by using its subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは配列の中のある要素をそれの添え字を使うことによって置き換えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは0と9の間の数をシャッフルすることが、shuffled()メソッドをその範囲上で呼び出すことによって可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは0と9の間の数をシャッフルすることが、shuffled(using:)メソッドをその範囲上で呼び出すことによって可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can test whether the first UInt8 value in a string’s UTF-8 encoding is equal to the first UInt32 value in its Unicode scalar view:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある文字列のUTF-8符号化の中の最初のUInt8値が、それのユニコードスカラー値での最初のUInt32と等しいかどうかを試験できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can test whether the first UInt8 value in a string’s UTF-8 encoding is not equal to the first UInt32 value in its Unicode scalar view:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある文字列のUTF-8符号化の中の最初のUInt8値が、それのユニコードスカラー値での最初のUInt32と等しくないかどうかを試験できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use stride(from:to:by:) to iterate over an interval of floating-point values:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはstride(from:to:by:)を使って浮動小数点値のある間隔のすべてにわたって反復できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use the shuffle(using:) method to randomly reorder the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはshuffle(using:)メソッドを使って、配列の要素を無作為に再配列することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this initializer to create a string with ten "ab" strings in a row.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのイニシャライザを使うことで、10個の"ab"文字列をひとつの行に持つ文字列を作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method on a sequence of numbers to find their sum or product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを数値からなるシーケンス上で使うことで、それらの和または積を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを整数からなる配列で使うことで、隣接する同等の項目をフィルタしたり頻度を数えたりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method on an array of numbers to find their sum or product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを数値いくつかからなる配列で使うことで、それらの和または積を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method on an sequence of numbers to find their sum or product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを数値からなるシーケンス上で使うことで、それらの和または積を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method to call an API that expects a pointer to a different type that is layout compatible with your pointer’s Pointee.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを使うことで、異なる型へのポインタを期待するもので、あなたのポインタのもつPointeeと互換のレイアウトである、あるAPIを呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, “i” is soft dotted because the dot disappears when adding an accent mark, as in “í”.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>たとえば、 “i” は、ソフトドットを持ちます、なぜならそのドットはアクセント符号を、“í” でのように、加えられる時に見えなくなるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For formats which don’t support this feature, the default implementation encodes the given object unconditionally.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この機能性をサポートしない形式に対して、省略時の実装は与えられたオブジェクトを無条件にエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For information about key-path expressions, see Key-Path Expression in The Swift Programming Language (Swift 4.1).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス式についての情報として、キーパス式をSwiftプログラミング言語 (Swift 4.1)で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For integer types, any remainder of the division is discarded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数型に対して、除算の余りは何であれ破棄されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more about arithmetic with overflow operators, see Overflow Operators in The Swift Programming Language.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー演算子を使う算術についてさらには、オーバーフロー演算子をSwiftプログラミング言語で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more detail, see the documentation for the APIs used by each platform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>詳細として、各プラットホームで使われるAPIの文書を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about operation declarations, see Operator Declaration in The Swift Programming Language.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子宣言についての更なる情報として、演算子宣言をSwiftプログラミング言語で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about the Unicode terms used in this discussion, see the Unicode.org glossary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この解説において使われるユニコード用語についてのさらなる情報は、Unicode.org用語集を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about the iteration order and semantics, see TaskGroup.next().</seg>
      </tuv>
      <tuv lang="ja">
        <seg>反復順序と意味論についてのさらなる情報として、TaskGroup.next()を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about the iteration order and semantics, see ThrowingTaskGroup.next()</seg>
      </tuv>
      <tuv lang="ja">
        <seg>反復順序と意味論についてのさらなる情報として、ThrowingTaskGroup.next()を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information on setting up watch faces, see Change the watch face on your Apple Watch.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ウォッチフェイスを設定することに関するさらなる情報として、Change the watch face on your Apple Watchを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information on the original version, see Creating and Updating a Complication’s Timeline.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オリジナルバージョンに関するさらなる情報として、Creating and Updating a Complication’s Timelineを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information, see the top-level StringInterpolationProtocol documentation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>更なる情報として、トップレベルのStringInterpolationProtocolを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For other collections the counters may be out of range or of the wrong type to use as an index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他のコレクションに対してこれらのカウンタは、インデックスとして使うのには範囲外または間違った型になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For scalars that represent a number, numericType is the numeric type of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある数を表すスカラーに対して、numericTypeはそのスカラーの数値型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For scalars that represent a numeric value, numericValue is the whole or fractional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある数に関する値を表すスカラーに対して、numericValueは全体のまたは断片的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For such scalars, this property is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのようなスカラーに対して、このプロパティはnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two integers a and b, a is a multiple of b if there exists a third integer q such that a = q*b.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの整数aとbに対して、aはbの倍数です、もし第３の整数qが存在して、a = q*bであるようなところでは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values x and y, and a distance n = x.distance(to: y), x.advanced(by: n) == y.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値xとy、そして隔たりn = x.distance(to: y)に対して、x.advanced(by: n) == y。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For unsigned integer types, this value is (2 ** bitWidth) - 1, where ** is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし整数型に対して、この値は(2 ** bitWidth) - 1です、そこで**は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For unsigned integer types, this value is always 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし整数型に対して、この値は常に0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fortify your code with runtime checks, and examine your values' runtime representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコードを実行時チェックで強化し、そしてあなたの値の実行時表現を検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Foundation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファウンデーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Framework</seg>
      </tuv>
      <tuv lang="ja">
        <seg>フレームワーク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>由来プロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Functions that use a TextOutputStream target may call write(_:) multiple times per writing operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>TextOutputStreamターゲットを使う関数は、write(_:)を書き込み操作のたびに複数回呼び出すでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fundamental data types such as Int, Double, and String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本的なデータ型、例えばInt、Double、そしてStringなど</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally there are extra constraints imposed on core operations in order to allow this.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般的にこれを可能にするためにコア演算上で課せられる余分な制約があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally, native Swift types that do not contain strong or weak references or other forms of indirection are trivial, as are imported C structs and enumerations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般に、生粋のSwift型で強いまたは弱い参照または他形式の間接参照を含まないものは自明です、インポートされたCの構造体と列挙のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally, native Swift types that do not contain strong or weak references or other forms of indirection are trivial, as are imported C structs and enums.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般に、生粋のSwift型で強いまたは弱い参照または他形式の間接参照を含まないものは自明です、インポートされたCのstructとenumのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generating Random Binary Data</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為なバイナリデータを生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generic Instance Method</seg>
      </tuv>
      <tuv lang="ja">
        <seg>総称体インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generic Type Alias</seg>
      </tuv>
      <tuv lang="ja">
        <seg>総称体型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gets the value currently bound to this task-local from the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在このタスクローカルへと現在のタスクからバインドされる値を取得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gets the value of this unmanaged reference as a managed reference and consumes an unbalanced retain of it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この管理されない参照の値を管理された参照として取得します、そしてそれのある不均衡なリテイン（保持）を使い果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gets the value of this unmanaged reference as a managed reference without consuming an unbalanced retain of it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この管理されない参照の値を管理された参照として取得します、それのある不均衡なリテイン（保持）を使い果たすことなしにです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting C Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C文字列を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting Characters and Bytes</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字とバイトを取得する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting Substrings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列を取得する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting an Offset Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オフセット値の取得</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting an Unsafe Reference to the Current Task</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクへの非安全参照を取得する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Global Numeric Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グローバルな数値関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Global functions such as print(_:separator:terminator:) and abs(_:)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グローバル関数、print(_:separator:terminator:)そしてabs(_:)など</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Greater than</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より大きい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Greater than or equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より大きいか、等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Greek iota subscript only (U+0345 COMBINING GREEK YPOGEGRAMMENI).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ギリシャ語下付き文字イオタのみ (U+0345 COMBINING GREEK YPOGEGRAMMENI)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Half-open range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>半開範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Handling Dynamically Typed Methods and Objects in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>動的に型付メソッドとオブジェクトをSwiftにおいて取り扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Handling String Interpolations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列補間を取り扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hash values are not guaranteed to be equal across different executions of your program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ値は、あなたのプログラムの異なる実行をまたいで等しいことを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hashes the elements of the vector using the given hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの要素をこの与えられたハーシャーを使ってハッシュ化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hashes the essential components of this value by feeding them into the given hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の本質的な構成要素を、それらをその与えられたhasherへと与えることによって、ハッシュ化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, the assignment to destBytes creates a new, nonowning buffer pointer covering the first n bytes of the memory that someBytes references—nothing is copied:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここで、destBytesへの割り当ては、someBytesが参照するメモリの最初のnバイトを変換して、新しい、非所有のバッファポインタを作成します — コピーされるものは何もありません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, the assignment to destBytes creates a new, nonowning buffer pointer covering the first n bytes of the memory that someBytes references—nothing is copied:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここで、destBytesへの割り当ては、someBytesが参照するメモリの最初のnバイトを変換して、新しい、非所有のバッファポインタを作成します — コピーされるものは何もありません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, we find the length of the first sentence and create an uppercase version.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここで、私たちは最初の文の長さを見つけます、そして大文字バージョンを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of checking whether each code unit in a string’s utf16 view is a lead surrogate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、ある文字列のもつutf16ビューの中の各コード単位が先頭サロゲートを持つかどうか調べる例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of checking whether each code unit in a string’s utf16 view is a trailing surrogate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、ある文字列のもつutf16ビューの中の各コード単位が後続サロゲートを持つかどうか調べる例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of creating an array initialized with five strings containing the letter Z.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、字Zを含んでいる５つの文字列で初期化される配列を作成する例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of inserting a range of integers into an array of the same type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに整数の範囲を同じ型の配列へ挿入する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of sorting a list of students’ names.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、生徒名のリストをソートする例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of transforming a string to all lowercase letters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、ある文字列を小文字の文字に変換する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example that finds a student name that begins with the letter “A”:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、文字「A」で始まる生徒名を見つける例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an implementation of those steps:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにこれらの手順の実装があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However if there are no potential awaiting calls to next this function will return false, indicating that the caller needs to decide how the behavior should be handled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら潜在的に待機しているnextへの呼び出しがないならばこの関数はfalseを返すでしょう、それは呼び出し側がどのように挙動が取り扱われるべきか決定する必要があることを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, count may be zero even for a non-nil start.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、countは非nilのstartに対してもゼロであるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, count may be zero even for a non-nil start.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、countは非nilのstartに対してもゼロであるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, a buffer can have a count of zero even with a non-nil base address.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、バッファはゼロのcountを非nilに基づくアドレスでも持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, during development, the ability to verify that the invariants are being upheld in testing is important.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、開発の間は、試験することで不変式それらが支持されていることを検証できることは重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if you pass 19 as rhs, the method first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが19をrhsとして渡すならば、このメソッドは最初にrhsを3にビットマスクして、それからそのマスクされた値をビット数として使うことでlhsをシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if you use 19 as rhs, the operation first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが19をrhsとして使うならば、この演算は最初にrhsを3にビットマスクして、それからそのマスクされた値をビット数として使うことでlhsをシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if you use 8 as the shift amount, the method first masks the shift amount to zero, and then performs the shift, resulting in no change to the original value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが8をシフト量として使うならば、メソッドは最初にそのシフト量をマスクしてゼロにして、それからシフトを実行して、元の値に対して変更しないという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, initializing another collection with an UnsafeMutableRawBufferPointer instance copies bytes out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、別のコレクションをUnsafeMutableRawBufferPointerインスタンスで初期化することは、バイトを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, initializing another collection with an UnsafeBufferPointer instance copies the instances out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、別のコレクションをUnsafeBufferPointerインスタンスで初期化することは、インスタンスを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, initializing another collection with an UnsafeMutableBufferPointer instance copies the instances out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、別のコレクションをUnsafeMutableBufferPointerインスタンスで初期化することは、インスタンスを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, initializing another collection with an UnsafeRawBufferPointer instance copies bytes out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、別のコレクションをUnsafeRawBufferPointerインスタンスで初期化することは、バイトを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, it’s valid to make a new iterator for the task group, which you can use to continue iterating over the group’s results.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、新しいイテレータをタスクグループに対して作ることは有効です、それはあなたがグループのもつ結果それらのすべてにわたって反復することを継続するために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, the type of a function, method, or closure always includes a return type, which is Void if otherwise unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、関数、メソッド、またはクロージャは、常に戻り型を含みます、それは指定されないならばVoidです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, when the closure receives 4, it throws an error, terminating the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、クロージャが4を受け取る場合、それはシーケンスを終端して、エラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, you may already have an existing project built with concurrency that uses other frameworks and techniques.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたは既に、他のフレームワークと技法を使う並行性でビルドされた既存のプロジェクトを持っているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identical</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一である</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identical to self.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>selfと同一。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ideographic description characters are technically printable characters, but advanced rendering engines may use them to approximate ideographs that are otherwise unrepresentable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>表意文字記述文字は技術的には印刷に適した文字です、しかし先進のレンダリングエンジンは、それを使うことでそうしなければ表現できない表意文字の近似を得るかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>areEquivalent(a, b)とareEquivalent(b, c)が両方ともtrueならば、そのときareEquivalent(a, c)もまたtrueである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>areInIncreasingOrder(a, b)とareInIncreasingOrder(b, c)が両方ともtrueならば、そのときareInIncreasingOrder(a, c)もまたtrueである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If bitPattern is zero, the result is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bitPatternがゼロならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If body has a return value, that value is also used as the return value for the withCString(_:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyが戻り値を持つならば、その値はまたwithCString(_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If body has a return value, that value is also used as the return value for the withCString(encodedAs:_:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyが戻り値を持つならば、その値はまたwithCString(encodedAs:_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If cString contains ill-formed UTF-8 code unit sequences, this initializer replaces them with the Unicode replacement character ("\u{FFFD}").</seg>
      </tuv>
      <tuv lang="ja">
        <seg>cStringが文法的に正しくないUTF-8コードユニットシーケンスを含むならば、それらをある代替文字（"\u{FFFD}"）で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If codeUnits is an ill-formed code unit sequence, the result is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>codeUnitsが文法的に正しくないコード単位シーケンスを含むならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If description is in an invalid format, or if the value it denotes in base 10 is not representable, the result is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>descriptionが無効な形式になっているならば、またはそれが底10で示す値が表現可能でないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If distance &gt; 0, limit should be greater than i to have any effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>distance &gt; 0ならば、limitが何らかの効果を持つにはiより大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If distance &gt; 0, a limit that is less than i has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>distance &gt; 0ならば、iより少ない限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If end is equal to start, the result is zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>endがstartに等しいならば、結果はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>falseならば、このコレクション中の連続するseparator要素の対それぞれに、そしてコレクションの始めと終わりのseparatorインスタンスそれぞれに、１つの空の下位シーケンスが結果において返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>falseならば、このシーケンス中の連続するseparator要素の対それぞれに、そしてシーケンスの始めと終わりのseparatorインスタンスそれぞれに、１つの空の下位シーケンスが結果において返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>falseならば、結果においてisSeparator述部を満たす隣接する要素のペアそれぞれに対しておよびisSeparator述部を満たすコレクションの始まりまたは終わりでの要素それぞれに対して１つの空の下位シーケンスが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the sequence satisfying the isSeparator predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>falseならば、結果においてisSeparator述部を満たす隣接する要素のペアそれぞれに対しておよびisSeparator述部を満たすシーケンスの始まりまたは終わりでの要素それぞれに対して１つの空の下位シーケンスが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If from is nil, the result of this initializer is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>fromがnilならば、このイニシャライザの結果は、nilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If hasPointerRepresentation is false, the static string stores a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>hasPointerRepresentationがfalseならば、静的文字列は単一のユニコードスカラー値を格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If i is equal to the string’s end index, this methods appends newElement to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iが文字列の末尾インデックスと等しいならば、このメソッドはnewElementを文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If i is equal to the string’s end index, this methods appends the contents of newElements to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iが文字列の末尾インデックスと等しいならば、このメソッドはnewElementsの内容を文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If instance conforms to the CustomDebugStringConvertible protocol, the result is instance.debugDescription.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>instanceが準拠するのがCustomDebugStringConvertibleプロトコルならば、結果はinstance.debugDescriptionです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If instance conforms to the CustomStringConvertible protocol, the result is instance.description.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>instanceが準拠するのがCustomStringConvertibleプロトコルならば、結果はinstance.descriptionです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If instance conforms to the TextOutputStreamable protocol, the result is obtained by calling instance.write(to: s) on an empty string s.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>instanceが準拠するのがTextOutputStreamableプロトコルならば、結果はinstance.write(to: s)を空の文字列s上で呼び出すことによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If isRepairing is false and an ill-formed sequence is detected, this method returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>isRepairingがfalseで誤形式シーケンスが検出されるならば、このメソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>maxSplits + 1の下位シーケンスが返されるならば、最後のものは、残りの要素を含んでいる元コレクションの後ろ部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>maxSplits + 1の下位シーケンスが返されるならば、最後のものは、残りの要素を含んでいる元シーケンスの後ろ部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If n &gt; 0, a limit that is less than i has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>n &gt; 0ならば、iより少ない限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If other is nil, the result is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>otherがnilならば、結果は、nilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If predicate matches every element in the sequence, the result is an empty sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>predicateがシーケンスの中のすべての要素に合致するならば、結果は空のシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If predicate matches every element in the sequence, the resulting sequence contains every element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>predicateがシーケンスの中のすべての要素に合致するならば、結果のシーケンスはそのシーケンスのすべての要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If source contains no elements, the returned index is equal to the buffer’s startIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceが全く要素を含まないならば、返されるインデックスはバッファの持つstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If source is outside the bounds of this type after rounding toward zero, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceがゼロへの丸め後にこの型の境界の外側ならば、実行時エラーが起こるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If starts is nil, count must be zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>startsがnilならば、countはゼロでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If subject conforms to the CustomDebugStringConvertible protocol, the result is subject.debugDescription.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>subjectが準拠するのがCustomDebugStringConvertibleプロトコルならば、結果はsubject.debugDescriptionです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If subject conforms to the CustomStringConvertible protocol, the result is subject.description.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>subjectが準拠するのがCustomStringConvertibleプロトコルならば、結果はsubject.descriptionです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If subject conforms to the TextOutputStreamable protocol, the result is obtained by calling subject.write(to: s) on an empty string s.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>subjectが準拠するのがTextOutputStreamableプロトコルならば、結果はsubject.write(to: s)を空の文字列s上で呼び出すことによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If text is in an invalid format or contains characters that are out of bounds for the given radix, or if the value it denotes in the given radix is not representable, the result is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>text が無効な形式になっているか指定radixの領域外の文字列を含むならば、または指定radixにおいてそれが意味する値が表現可能でないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If baseAddress is nil, this function does nothing and returns an empty buffer pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>baseAddressがnilならば、この関数は何もしません、そして空のバッファポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>aとbが比較できないならば、そしてbとcが比較できないならば、そのときaとcもまた比較できない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If body has a return value, that value is also used as the return value for the withMemoryRebound(to:capacity:_:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyが戻り値を持つならば、その値はまたwithMemoryRebound(to:capacity:_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If element is not found in the collection, returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>elementがコレクションの中に見つけられないならば、nilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If element is not found in the collection, this method returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>elementがコレクションの中に見つけられないならば、このメソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If pointer is nil, the result is 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>pointerがnilならば、結果は0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If rhs is outside the range 0..&lt;lhs.bitWidth, it is masked to produce a value within that range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rhsが範囲0..&lt;lhs.bitWidthの外側ならば、それはマスクされてその範囲内の値を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If start is nil, count must be zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>startがnilならば、countはゼロでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If transform throws an error, the sequence ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>transformがエラーをスローするならば、そのシーケンスは終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If areInIncreasingOrder throws an error during the sort, the elements may be in a different order, but none will be lost.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>areInIncreasingOrderがエラーをソートの間にスローするならば、要素は異なる順番になるかもしれません、しかし何１つとしてなくさないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If distance is positive, this is the same value as the result of distance calls to index(after:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>distanceが正ならば、これはdistanceでindex(after:)を呼び出す結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If i == endIndex, this method is equivalent to append(_:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>i == endIndexならば、このメソッドはappend(_:)に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If n is positive, this is the same value as the result of n calls to index(after:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nが正ならば、これはnでindex(after:)を呼び出すの結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If repairingIllFormedSequences is false and an ill-formed sequence is detected, this method returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>repairingIllFormedSequencesがfalseで誤形式シーケンスが検出されるならば、このメソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If repairingIllFormedSequences is true, the entire iterator will be exhausted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>repairingIllFormedSequencesがtrueならば、イテレータ全体が使い尽くされることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If source is less than the smallest representable value in this type, the result is the type’s min value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceがこの型の最も小さい表現可能な値より小さいならば、結果はこの型のもつmin値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If sourcePosition does not have an exact corresponding position in target, then the result is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourcePositionがtargetの中に正確に対応する位置を持たないならば、そのとき結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If baseAddress is nil, this function does nothing.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>baseAddressがnilならば、この関数は何もしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If body has a return value, that value is also used as the return value for the withMemoryRebound(to:_:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyが戻り値を持つならば、その値はまたwithMemoryRebound(to:_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If source contains an equal or greater number of elements than the buffer can hold, the returned index is equal to the buffer’s endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceがバッファが保持できるのと同じまたはより多い数の要素を含むならば、返されるインデックスはバッファの持つendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If transform throws an error, the sequence ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>transformがエラーをスローするならば、そのシーケンスは終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If true, only nonempty subsequences are returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>trueならば、空でない下位シーケンスだけが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If possiblePrefix has no elements, the return value is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>possiblePrefixが１つも要素を持たないならば、戻り値はtrueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If T is a nontrivial type, you must eventually deinitialize or move from the values in this region to avoid leaks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Tが非自明型ならば、あなたはゆくゆくはデイニシャライズするかまたはこの領域の値から移動してリークを防がなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>distanceが負ならば、これはabs(distance)でindex(before:)を呼び出す結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If n is negative, this is the same value as the result of -n calls to index(before:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nが負ならば、これは-nがindex(before:)を呼び出すの結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If true, only nonempty subsequences are returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>trueならば、空でない下位シーケンスだけが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If v is an invalid unicode scalar value, the result is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>vが無効なユニコードスカラー値であるならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If i == endIndex, this method is equivalent to append(contentsOf:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>i == endIndexならば、このメソッドはappend(contentsOf:)に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If v is an invalid Unicode scalar value, the result is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>vが無効なユニコードスカラー値であるならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If T is a nontrivial type, you must eventually deinitialize or move the values in this region to avoid leaks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Tが非自明型ならば、あなたはゆくゆくはデイニシャライズするかまたはこの領域の値を移動してリークを防がなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a scalar has no alias, this property is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーがエイリアスを持たないならば、このプロパティはnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a task completes by throwing an error, no further task results are returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクがエラーをスローすることによって完了するならば、その先のタスク結果は返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a type conforming to Strideable is its own Stride type, it must provide concrete implementations of the two operators to avoid infinite recursion.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Strideableに準拠する型は独自のStride型です、それは２つの演算子の具体的な実装を提供して無限再帰を防止しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If any are found, the result of the initializer is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何か見つけられるならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If it contains a .success value, the continuation returns that value; otherwise, it throws the .error value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それが.success値を含むならば、継続はその値を返します；そうでなければ、それは.error値をスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If mutations need to invalidate indices in your custom collection type, don’t use Slice as its subsequence type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変異体がインデックスを無効にすることがあなたのあつらえのコレクション型において必要ならば、Sliceをそれの下位シーケンス型として使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If necessary, the byte order of this value is reversed from the typical byte order of this integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必要ならば、この値のバイト順はこの整数型の典型的なバイト順からひっくり返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If nil, the priority will come from Task.currentPriority.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil ならば、優先度は Task.currentPriority からくるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no current Task is available, queries the system to determine the priority at which the current function is running.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のTaskが利用可能でないならば、システムに問いただして、それで現在の関数が動作しているところの優先度を決定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no current Task is available, returns false, as outside of a task context no task cancellation may be observed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のTaskが利用可能でないならば、falseを返します、タスク文脈の範囲を越えるときタスク取り消しは監視されないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no current task is available in the context where this call is made, or if the task-local has no value bound, this will return the defaultValue of the task local.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクがこの呼び出しが作られるところの文脈において利用可能でないならば、またはタスクローカルが値をバインドされないならば、これはタスクローカルのdefaultValueを返すでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中の要素が１つもbelongsInSecondPartitionに一致しないならば、返されるインデックスはコレクションのendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no elements in the collection satisfy the given predicate, returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素が与えられた述部を満たすことがないならば、nilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no such storage exists, it is first created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのようなストレージが存在しないならば、それが最初に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the baseAddress of this buffer is nil, the count is zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのbaseAddressがnilならば、総数はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the byteCount bytes of memory referenced by this pointer are bound to a type T, then T must be a trivial type, this pointer and source must be properly aligned for accessing T, and byteCount must be a multiple of MemoryLayout&lt;T&gt;.stride.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリのbyteCountバイトが型Tに束縛されるならば、そのときTは自明型でなければならず、このポインタとsourceはTにアクセスするために適切にアラインされなければならず、そしてbyteCountはMemoryLayout&lt;T&gt;.strideの倍数でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the overflow component is false, the partialValue component contains the entire difference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>overflow構成部分がfalseならば、partialValue構成部分は差そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the overflow component is false, the partialValue component contains the entire product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>overflow構成部分がfalseならば、partialValue構成部分は積そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the overflow component is false, the partialValue component contains the entire quotient.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>overflow構成部分がfalseならば、partialValue構成部分は全体の商を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the overflow component is false, the partialValue component contains the entire remainder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>overflow構成部分がfalseならば、partialValue構成部分は余りそのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the overflow component is false, the partialValue component contains the entire sum.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>overflow構成部分がfalseならば、partialValue構成部分は合計そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the source.count bytes of memory referenced by this buffer are bound to a type T, then T must be a trivial type, the underlying pointer must be properly aligned for accessing T, and source.count must be a multiple of MemoryLayout&lt;T&gt;.stride.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファによって参照されるメモリのsource.countバイトが型Tに束縛されるならば、そのときTは自明型でなければならず、基盤となるポインタはTにアクセスするために適切にアラインされなければならず、そしてsource.countはMemoryLayout&lt;T&gt;.strideの倍数でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>overflow構成部分がtrueであるならば、オーバーフローが起こった、そしてpartialValue構成部分は切り詰められた商または、商が未定義ならば、被除数のどちらかを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>overflow構成部分がtrueであるならば、オーバーフローが起こるとpartialValue構成部分はこの値とrhsの積の切り詰められたものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the overflow component is true, an overflow occurred and the partialValue component contains the truncated result of rhs subtracted from this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>overflow構成部分がtrueであるならば、オーバーフローが起こるとpartialValue構成部分はこの値からrhsを減算した結果の切り詰められたもの含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the overflow component is true, an overflow occurred and the partialValue component contains the truncated sum of this value and rhs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>overflow構成部分がtrueであるならば、オーバーフローが起こるとpartialValue構成部分はこの値とrhsの合計の切り詰められたものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the overflow component is true, an overflow occurred during division and the partialValue component contains either the entire remainder or, if the remainder is undefined, the dividend.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>overflow構成部分がtrueであるならば、除算の間にオーバーフローが起こった、そしてpartialValue構成部分は余りそのまままたは、余りが未定義ならば、被除数のどちらかを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the UTF-8 view is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8ビューが空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the Unicode replacement character U+FFFD is representable in this encoding, encodedReplacementCharacter encodes that scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード代用文字 U+FFFD がこの符号化で表現可能ならば、encodedReplacementCharacterがこのスカラー値を符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the asynchronous sequence is empty, this method returns true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスが空ならば、このメソッドはtrueを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the awaited on task gets cancelled externally the get() will throw a cancellation error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに関して待機されるところのタスクが外部的に取り消されるならばget()は取り消しエラーをスローするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the bit width of the shifted integer type is a power of two, masking is performed using a bitmask; otherwise, masking is performed using a modulo operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトされる整数型のビット幅が２の冪ならば、マスクはビットマスクを使って実行されます；そうでなければ、マスクはモジュロ演算を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the call to replaceSubrange(_:with:) simply removes elements at the end of the string, the complexity is O(n), where n is equal to bounds.count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>replaceSubrange(_:with:)への呼び出しが単に要素を文字列の終わりから削除するだけならば、計算量はO(n)です、ここでnはbounds.countと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the call to replaceSubrange(_:with:) simply removes text at the end of the string, the complexity is O(n), where n is equal to bounds.count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>replaceSubrange(_:with:)への呼び出しが単にテキストを文字列の終わりから削除するだけならば、計算量はO(n)です、ここでnはbounds.countと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the call to this method simply appends the contents of newElements to the collection, the complexity is O(m).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドへの呼び出しが単にnewElementsの内容をコレクションに追加するだけならば、計算量はO(m)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the call to this method simply appends the contents of newElements to the collection, this method is equivalent to append(contentsOf:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドへの呼び出しが単にnewElementsの内容をコレクションに追加するだけならば、このメソッドはappend(contentsOf:)と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the closure has a return value, that value is also used as the return value of the withUTF8Buffer(_:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャが戻り値を持つならば、その値はまたwithUTF8Buffer(_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection does not have sufficient capacity for another element, additional storage is allocated before appending newElement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが別の要素に対して十分な容量を持たないならば、追加のストレージがnewElementを追加する前に割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection does not support an internal representation in a form of contiguous storage, body is not called and nil is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションがある内部表現を隣接ストレージの形式でサポートしないならば、bodyは呼び出されません、そしてnilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection does not support an internal representation in a form of mutable contiguous storage, body is not called and nil is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションがある内部表現を可変の隣接ストレージの形式でサポートしないならば、bodyは呼び出されません、そしてnilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, the method returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、このメソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, the value of this property is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空であるならば、このプロパティはnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the content of the file path isn’t a well-formed UTF-8 string, this initializer removes invalid bytes or replaces them with U+FFFD.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファイルパスの内容が整形式UTF-8文字列でないならば、このイニシャライザは不正なバイトそれらを取り除きます、またはそれらをU+FFFDと置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the contents of the file path isn’t a well-formed UTF-8 string, this initializer returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファイルパスの内容が整形式UTF-8文字列でないならば、このイニシャライザはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the continuation has already resumed, then calling this method results in undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続が既に再開してしまっているならば、そのときこの関数を呼び出すことは未定義の挙動という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefix(_:)に渡されるcountが基底シーケンスの中の要素の数を越えるならば、結果はそのシーケンスの要素のすべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the index passed as sourcePosition doesn’t have an exact corresponding position in target, the result of the initializer is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourcePositionとして渡されたインデックスがまさにその対応する位置をtargetにおいて持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the index passed as sourcePosition doesn’t have an exact corresponding position in unicodeScalars, the result of the initializer is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourcePositionとして渡されたインデックスがまさにその対応する位置をunicodeScalarsにおいて持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the index passed as sourcePosition represents either the start of a Unicode scalar value or the position of a UTF-16 trailing surrogate, then the initializer succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourcePositionとして渡されるインデックスがユニコードスカラー値の始まりまたはUTF-16後続サロゲートの位置のどちらかを表すならば、イニシャライザはうまくいきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the index passed as sourcePosition represents the start of an extended grapheme cluster—the element type of a string—then the initializer succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourcePositionとして渡されるインデックスが拡張書記素クラスタ — ある文字列の要素型 — の始まりを表すならば、そのときイニシャライザは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大長がコレクションの要素の数を越えるならば、結果はコレクションの要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the maximum length exceeds the number of elements in the collection, the result contains the entire collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大長がコレクションの要素の数を越えるならば、結果はコレクション全体を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大長がシーケンスの要素の数を越えるならば、結果はシーケンスの要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the memory is bound to a type U that is layout compatible with T, then it contains a value of type U.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリが型UでTとレイアウト互換であるものに束縛されるならば、そのときそれは型Uの値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the memory is bound to type T, then it contains values of type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリが型Tに束縛されるならば、そのときそれは型Tの値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the memory is bound to type T, then it contains values of type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリが型Tに束縛されるならば、そのときそれは型Tの値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the memory is uninitialized, it is still uninitialized after being bound to T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリが未初期化であるならば、それはTに束縛された後も依然として未初期化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the memory is uninitialized, it is still uninitialized after being bound to T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリが未初期化であるならば、それはTに束縛された後も依然として未初期化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the next child task throws an error and you propagate that error from this method out of the body of a TaskGroup.withThrowingTaskGroup(of:returning:body:) call, then all remaining child tasks in that group are implicitly canceled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の子タスクがエラーをスローするそしてあなたがそのエラーをこのメソッドからTaskGroup.withThrowingTaskGroup(of:returning:body:)呼び出しの本体の外に伝播するならば、そのときそのグループの中の全ての残っている子タスクは暗黙的に取り消されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the next child task throws an error and you propagate that error from this method out of the body of a ThrowingTaskGroup.withThrowingTaskGroup(of:returning:body:) call, then all remaining child tasks in that group are implicitly canceled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の子タスクがエラーをスローするそしてあなたがそのエラーをこのメソッドからThrowingTaskGroup.withThrowingTaskGroup(of:returning:body:)呼び出しの本体の外に伝播するならば、そのときそのグループの中の全ての残っている子タスクは暗黙的に取り消されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the number of elements is unknown, the value is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の数が未知ならば、値はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省かれることになる要素の数がコレクションの要素の数を越えるならば、結果は空の下位シーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取り除く要素の数がシーケンスの要素数を越えるならば、結果は空のシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the operation fails the handle will throw the error the operation has thrown when awaited on.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算が失敗するならばこのハンドルは、演算は待機される時にスローしたというエラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the position passed in utf16Index doesn’t have an exact corresponding position in utf8, the result of the initializer is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>utf16Indexに渡された位置がまさにその対応する位置をutf8において持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the quotient of dividing dividend by this value is too large to represent in the type, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>dividendをこの値で除算した商がこの型で表すのに大きすぎるならば、実行時エラーが起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the result of advancing by n is not representable as a value of this type, then a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nだけ前進する結果がこの型の値として表現可能でないならば、実行時エラーが起こるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the same task-local is bound multiple times, be it in the same task, or in specific child tasks, the “more specific” binding is returned when the value is read.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じタスクローカルが複数回バインドされる、それが同じタスクにおいてする、または特定の子タスクにおいて、ならば、“より具体的な” バインディングが値が読み出される時に返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが１つも要素を持たないならば、nextPartialResultは決して実行されません、そしてinitialResultはreduce(_:_:)への呼び出しの結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが１つも要素を持たないならば、updateAccumulatingResultは決して実行されません、そしてinitialResultはreduce(into:_:)への呼び出しの結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが要素を持たないならば、nilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが要素を持たないならば、nilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, the result is initialResult.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが１つも要素を持たないならば、結果はinitialResultです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence is empty, this method returns true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが空ならば、このメソッドはtrueを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the string is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列が空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the system cannot provide an appropriate priority, returns Priority.default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>システムが適切な優先度を提供できないならば、Priority.defaultを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the task gets cancelled internally – for example, by checking for cancellation and throwing a specific error, or by calling checkCancellation(), then the error thrown by the task is rethrown here.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクが内部的に取り消されるならば – 例えば、取り消しを調べるそして特定のエラーをスローすることによって、またはcheckCancellation()を呼び出すことによって、そのときタスクによってスローされるエラーはここで再スローされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the task gets cancelled internally – for example, by checking for cancellation and throwing a specific error, or by calling checkCancellation(), then the error thrown by the task is returned here.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクが内部的に取り消されるならば – 例えば、取り消しを調べるそして特定のエラーをスローすることによって、またはcheckCancellation()を呼び出すことによって、そのときタスクによってスローされるエラーはここで返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the task has not completed yet, its priority will be elevated to the priority of the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクがまだ完了しないならば、それの優先度は現在のタスクの優先度まで昇進させられるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the task hasn’t completed, its priority increases to that of the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクが完了していないならば、それの優先度は現在のタスクのものまで増大します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the task is cancelled, throws \c CancellationError without waiting for the duration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクが取り消されるならば、CancellationErrorエラーをその期間を待つことなくスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the task that’s currently running this group is canceled, the group is also implicitly canceled, which is also reflected in this property’s value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在このグループを実行しているタスクが取り消されるならば、そのグループもまた暗黙的に取り消されます、それはまたこのプロパティの持つ値に反映されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value is a reference type, it will be retained for the duration of the operation closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値が参照型であるならば、それは演算クロージャの持続期間に対して保持されるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value is not null, does not increment currentIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値がnullでないならば、currentIndexは増加しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value passed as source is greater than the maximum representable value in this type, the result is the type’s max value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceとして渡された値がこの型において最大限の表現可能な値より大きいならば、結果はこの型のもつmax値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value passed as source is not representable exactly, the result is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceとして渡された値が正確に表現可能でないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there aren’t any pending tasks in the task group, this method returns nil, which lets you write like the following to wait for a single task to complete:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何ら未解決タスクがタスクグループの中にないならば、このメソッドはnilを返します、それはあなたにある単一のタスクが完了するのを待つために以下のように書かせます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there aren’t any pending tasks in the task group, this method returns nil, which lets you write the following to wait for a single task to complete:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何ら未解決タスクがタスクグループの中にないならば、このメソッドはnilを返します、それはあなたにある単一のタスクが完了するのを待つ以下を書かせます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there is no value of the type that corresponds with the specified raw value, this initializer returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された生の値に対応する型の値が１つもないならば、このイニシャライザはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this index does not have an exact corresponding position in characters, this method returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスがまさにその対応する位置をcharactersにおいて持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this index does not have an exact corresponding position in utf16, this method returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスがまさにその対応する位置をutf16において持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this index does not have an exact corresponding position in utf8, this method returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスがまさにその対応する位置をutf8において持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this index does not have an exact corresponding position in unicodeScalars, this method returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスがまさにその対応する位置をunicodeScalarsにおいて持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this mutates the string, it will invalidate any pre-existing indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これが文字列を変化させるならば、それはあらゆる前から存在するインデックスを無効にするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this mutates the substring, it will invalidate any pre-existing indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これが下位文字列を変化させるならば、それはあらゆる前から存在するインデックスを無効にするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this string is not contiguous, make it so.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列が隣接しないならば、それをそうします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this string is not contiguous, this will first make it contiguous, which will also speed up subsequent access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列が隣接しないならば、これは最初にそれを隣接させます、それはまた後に続くアクセスの速度を上げるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this substring is not contiguous, this will first make it contiguous, which will also speed up subsequent access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この下位文字列が隣接しないならば、これは最初にそれを隣接させます、それはまた後に続くアクセスの速度を上げるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this task is the highest-priority task in the system, the executor immediately resumes execution of the same task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このタスクがシステムにおいて最も高い優先度のタスクであるならば、エグセキュータは直ぐに同じタスクの遂行を再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type has value semantics, the PlaygroundQuickLook instance should be unaffected by subsequent mutations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型が値意味論を持つならば、PlaygroundQuickLookはその後の変化によって影響を受けないべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type has value semantics, the mirror should be unaffected by subsequent mutations of the instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型が値意味論を持つならば、ミラーはインスタンスのその後の変化によって影響を受けないべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type’s Stride type conforms to BinaryInteger, then for a value x, a distance n, and a value y = x.advanced(by: n), x.distance(to: y) == n.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型のもつStride型がBinaryIntegerに準拠するならば、そのとき値x、隔たりn、そして値y = x.advanced(by: n)に対して、x.distance(to: y) == n。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type’s Stride type conforms to BinaryInteger, then for two values x and y, and a distance n = x.distance(to: y), x.advanced(by: n) == y.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型のもつStride型がBinaryIntegerに準拠するならば、そのとき２つの値xとy、そして隔たりn = x.distance(to: y)に対して、x.advanced(by: n) == y。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが文字列をソートしてエンドユーザに提供するならば、代わりにString APIを使うべきです、それはローカライズされた比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are sorting strings to present to the end user, use String APIs that perform localized comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが文字列をソートしてエンドユーザに提供するならば、String APIを使うべきです、それはローカライズされた比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are using the memory for a specific type, allocate memory using the UnsafeMutablePointer.allocate(capacity:) static method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがメモリを特定の型に対して使っているならば、メモリを代わりにUnsafeMutablePointer.allocate(capacity:)静的メソッドを使ってアロケートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are using the memory for a specific type, allocate memory using the UnsafeMutablePointerBuffer.allocate(capacity:) static method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが特定の型のためのメモリを使っているならば、代わりにメモリをUnsafeMutablePointerBuffer.allocate(capacity:)静的メソッドを使ってアロケートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you declare a new operator without specifying a precedence group, it is a member of the DefaultPrecedence precedence group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが新しい演算子を優先順位グループを指定せずに宣言するならば、それはDefaultPrecedence優先順位グループのメンバです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you do need to access memory that is bound to one type as a different type, Swift’s pointer types provide type-safe ways to temporarily or permanently change the bound type of the memory, or to load typed instances directly from raw memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある型に束縛されるメモリに異なる型としてアクセスする必要があるならば、Swiftのポインタ型は型安全な方法を提供することで、一時的にまたは永続的にメモリの束縛される型を変更します、または型付インスタンスを直接に生のメモリからロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションをそれのインデックス全体に反復している間に変化させるならば、ある強い参照はそのコレクションの予期されない複製の原因となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションをそれのインデックス全体に反復している間に変化させるならば、ある強い参照はそのコレクションの予期しない複製という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが同じ型での逆にされたコレクションを必要とするならば、あなたはコレクションのもつシーケンス基盤のまたはコレクション基盤のイニシャライザを使うことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need an integer value within a specific range, use the static random(in:using:) method on that integer type instead of this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある整数を指定範囲内で必要とするならば、静的random(in:using:)メソッドをその整数型の上で使ってください、このメソッドの代わりに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to access a specific position in a UTF-16 view, use Swift’s index manipulation methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがUTF-16ビューにおいて特定の位置にアクセスする必要があるならば、Swiftのインデックス操作メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to access the contents of a string as encoded in different Unicode encodings, use one of the string’s unicodeScalars, utf16, or utf8 properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある文字列の内容に異なるユニコードエンコーディングでエンコードされたようにアクセスする必要があるならば、その文字列のもつunicodeScalars、utf16、またはutf8プロパティの１つを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to disambiguate between overloaded functions, use parenthesized expressions along with the as operator to make the #selector expression refer unambiguously to a specific overload.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーロードされた関数の間の違いを明らかにする必要があるならば、括弧に囲まれた式をas演算子と一緒に使って、#selector式を明白に特定のオーバーロードを参照するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to infer moves, call the inferringMoves() method on the resulting difference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが移動の推論を必要とするならば、inferringMoves()メソッドを結果の差異の上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to store a copy of a nontrivial value into memory, or to store a value into memory that contains a nontrivial value, you cannot use the storeBytes(of:toByteOffset:as:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが非自明の値のコピーをメモリに格納する、またはある値を非自明の値を含むメモリに格納する必要がある場合、あなたはstoreBytes(of:toByteOffset:as:)メソッドを使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to validate that an index from one string’s view corresponds with an exact position in another view, use the index’s samePosition(in:) method or the init(_:within:) initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある文字列の持つビューからのインデックスが別のビューでの正確な位置と対応することを有効にする必要があるならば、そのインデックスのsamePosition(in:)メソッドまたはinit(_:within:)イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you only need to throw an error to stop the work, call the Task.checkCancellation() function to check for cancellation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはあるエラーをスローしてその仕事を止める必要があるだけならば、Task.checkCancellation()関数を呼び出して取り消しを調べてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがゼロ長範囲をsubrangeパラメータとして渡すならば、このメソッドはnewElementsの要素をsubrange.startIndexで挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass the collection’s endIndex property as the index parameter, the new element is appended to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションのendIndexプロパティをindexパラメータとして渡すならば、新しい要素がコレクションに追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass the collection’s endIndex property as the index parameter, the new elements are appended to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションのendIndexプロパティをindexパラメータとして渡すならば、いくらかの新しい要素がコレクションに追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you provide your own implementation, make sure to compute the value nondestructively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなた独自の実装を提供するならば、値を非破壊的に計算することを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use 11 as rhs, x is overshifted such that all of its bits are set to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが11をrhsとして使うならば、xは、それのビットのすべてがゼロに設定されるような、オーバーシフトをされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが2を右手側の値としてxに関する演算において使うならば、シフト量はマスクを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use 2 as the right-hand-side value in an operation on x, the value is shifted left by two bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが2をx上での演算の右手側の値として使うならば、値は2ビットだけ左にシフトされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use 2 as the right-hand-side value in an operation on x, the value is shifted right by two bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが2をx上での演算の右手側の値として使うならば、値は2ビットだけ右にシフトされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow addition operator (&amp;+).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーフロー検査を取りやめて、あらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー加算演算子（&amp;+）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow multiplication operator (&amp;*).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーフロー検査を取りやめて、あらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー乗算演算子（&amp;*）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow subtraction operator (&amp;-).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーフロー検査を取りやめてあらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー減算演算子（&amp;-）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you will be adding a known number of elements to a collection, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが数のわかった要素をコレクションに加えることになっているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ要素からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same sequence of integer values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ整数値からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じシャッフルされた順番という結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re working directly with numeric values, use the addition operator (+) instead of this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが直接に数値を扱っているならば、加算演算子（+）をこのメソッドの代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ill-formed sequences are replaced with the Unicode replacement character ("\u{FFFD}").</seg>
      </tuv>
      <tuv lang="ja">
        <seg>誤形式シーケンスは、ユニコード代替文字（"\u{FFFD}"）で置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implement this method to conform to the Hashable protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを実装して、Hashableプロトコルに準拠してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implicit Casting and Bridging</seg>
      </tuv>
      <tuv lang="ja">
        <seg>暗黙的なキャストとブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Important</seg>
      </tuv>
      <tuv lang="ja">
        <seg>重要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Imported C and Objective-C APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたCおよびObjective-C API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Improve your app’s performance by refactoring your code to take advantage of asynchronous functions in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでの並行性関数を利用するようにあなたのコードをリファクタリングすることであなたのアプリの性能を改良してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Objective-C, a key is a string that identifies a specific property of an object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cでは、キーはオブジェクトの特定のプロパティを識別する文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Objective-C, a selector is a type that refers to the name of an Objective-C method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Ojbective-Cでは、セレクタはObjective-Cメソッドの名前を参照するある型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In SDKs that support Swift concurrency, frameworks add async-await versions of most functions that previously took completion handlers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift並行性をサポートするSDKにおいて、フレームワークそれらは以前に完了ハンドラをとっていた大部分の関数のasync-awaitバージョンを加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, reachability refers to the ability to produce one value from the other through zero or more applications of index(after:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、到達可能性 reachabilityは、ゼロ以上のindex(after:)の適用を通して、ある値を別のものから生み出す能力のことを言います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, Objective-C selectors are represented by the Selector structure, and you create them using the #selector expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、Objective-CセレクタはSelector構造体によって表されます、そしてあなたはそれらを#selector式を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you create a selector for an Objective-C method by placing the name of the method within the #selector expression: #selector(MyViewController.tappedButton(_:)).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、あなたはセレクタをObjective-Cメソッドに対して、そのメソッドの名前を#selector式の内部に置くことによって作成します：#selector(MyViewController.tappedButton(_:))。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you use the #selector and #keyPath expressions to represent those method or property names as selectors or key paths, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、あなたは#selectorと#keyPath式を使って、それらメソッドまたはプロパティ名をセレクタまたはキーパスとして表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a Zip2Sequence instance, the elements of the ith pair are the ith elements of each underlying sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Zip2Sequenceインスタンスにおいて、i番目の対に属する要素らは、基盤となるシーケンスそれぞれのi番目の要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a collection, the subsequence should also conform to Collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションにおいて、下位シーケンスはまたCollectionに準拠すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a long-task that includes multiple pieces, you might need to check for cancellation at several points, and handle cancellation differently at each point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複数の断片を含む長いタスクにおいて、あなたは取り消しをいくつかの地点で調べる、そして取り消しを各地点で異なって取り扱う必要があるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to checking whether the base scalar has isEmoji == true, you must also check its default presentation (see isEmojiPresentation) and determine whether it is followed by a variation selector that would modify the presentation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基底スカラーがisEmoji == trueであるかどうかを調べることに加えて、あなたはまたそれの省略時の表現を調べて（isEmojiPresentationを見てください）そしてその表現を修正する異字体セレクタがそれの後に続くかどうかを判定しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to creating a string from a single string literal, you can also create an empty string, a string containing an existing group of characters, or a string repeating the contents of another string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単独の文字列リテラルから文字列を作成することに加えて、あなたはまた、空の文字列、既存のいくつかの文字からなるグループを含んでいる文字列、または別の文字列の内容を繰り返している文字列を作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to its collection interface, an UnsafeMutableRawBufferPointer instance also supports the following methods provided by UnsafeMutableRawPointer, including bounds checks in debug mode:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのコレクションインターフェイスに加えて、UnsafeMutableRawBufferPointerインスタンスはまた、UnsafeMutableRawPointerによって提供される以下のメソッドをサポートし、デバッグモードにおける境界検査を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to its collection interface, an UnsafeRawBufferPointer instance also supports the load(fromByteOffset:as:) method provided by UnsafeRawPointer, including bounds checks in debug mode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのコレクションインターフェイスに加えて、UnsafeRawBufferPointerインスタンスはまた、load(fromByteOffset:as:)メソッドをUnsafeRawPointerによって提供されてサポートし、デバッグモードにおける境界検査を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, because abs(_:) always returns a value of the same type, even in a generic context, using the function instead of the magnitude property is encouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えて、abs(_:)は常に同じ型の値を返すことから、総称体の文脈においてさえも、この関数をmagnitudeプロパティの代わりに使うことは推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty UTF-16 view, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のUTF-16ビューにおいて、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty UTF-8 view, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のUTF-8ビューにおいて、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty Unicode scalars view, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のユニコードスカラービューにおいて、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty string, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列が空ならば、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty string, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の文字列において、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In case of an invalid input value, nil is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無効な入力値の場合には、nilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In case of an invalid input value, the result is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無効な入力値の場合には、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In case of an invalid unicode scalar value, nil is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無効なユニコードスカラー値の場合には、nilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>実際のところ、s.flatMap(transform)はArray(s.map(transform).joined())に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In most cases, the Swift type system prevents a task group from escaping like that because adding a child task is a mutating operation, and mutation operations can’t be performed from concurrent execution contexts likes child tasks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの場合、Swift型システムはタスクグループがそのような脱出をするのを妨げます、なぜなら子タスクを加えることは可変演算だからです、そして可変演算は子タスクのような並列実行文脈から実行されることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In most cases, the Swift type system prevents this mistake; for example, because the add(priority:operation:) method is mutating, that method can’t be called from a concurrent execution context like a child task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの場合には、Swift型システムはこの誤りを防ぎます；例えば、add(priority:operation:)メソッドが変化することから、そのメソッドは子タスクのような並行性遂行文脈から呼び出されることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In order to use recursion without making copies of the strings at each step, countLetterChanges(_:_:) uses Substring, a string’s slice type, for its parameters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各段階で文字列のコピーを作ることなく反復を使う手段として、countLetterChanges(_:_:)はSubstring、文字列の持つスライス型、をそれのパラメータに対して使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, because cafe was declared using the decomposed form of the "é" character, unicodeScalars contains the scalar values for both the letter "e" (101) and the accent character "´" (769).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、cafeは分解形式の"é"文字を使って宣言されたことから、unicodeScalarsは字"e"（101）とアクセント文字"´"（769）両方のスカラー値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, do not use implicit bridging when calling an UnsafeMutablePointer initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、暗黙的ブリッジをUnsafeMutablePointerイニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, do not use implicit bridging when calling an UnsafeMutableRawPointer initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、暗黙的ブリッジをUnsafeMutableRawPointerイニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, do not use implicit bridging when calling an UnsafePointer initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、暗黙的ブリッジをUnsafePointerイニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, do not use implicit bridging when calling an UnsafeRawPointer initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、暗黙的ブリッジをUnsafeRawPointerイニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, this discussion mentions extended grapheme clusters, Unicode scalar values, and canonical equivalence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、この解説は拡張書記素クラスタ、ユニコードスカラー値、そして正準等価について言及します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In simple cases, you can use DefaultStringInterpolation as the interpolation type for types that conform to the ExpressibleByStringLiteral protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単純な場合には、あなたはDefaultStringInterpolationを補間型としてExpressibleByStringLiteralプロトコルに準拠する型に対して使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In some cases an SDK call requires using a completion handler.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの場合においてSDKは完了ハンドラを使うことを要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In some situations the priority of a task must be elevated (or “escalated”, “raised”):</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの状況ではタスクの優先度は昇進させられる必要があります（または “段階的に上昇”、“そこまで高める”）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In that case, a string’s unicodeScalars view contains more elements than the string itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その場合には、文字列のもつunicodeScalarsビューは、その文字列それ自体より多くの要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In that case, the method returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その場合には、このメソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the case of secondCodeUnit, that character is still the flag itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>secondCodeUnitの場合では、その文字は依然として旗それ自体です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the encoded representation of a Unicode scalar value, each UTF-8 code unit after the first is called a continuation byte.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコードスカラー値の符号化された表現において、最初のものの後の各UTF-8コード単位は、継続バイトと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, moreNumbers has the same type as numbers, which is [Int].</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上の例において、moreNumbersはnumbersと同じ型を持ちます、それは[Int]です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, ptr is a pointer to memory initialized with a value of 23:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、ptrは23の値で初期化されるメモリに対するポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、数からなる配列は、30より大きな要素に合致するという述部によって仕切られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例では、そのクロージャは、あるHTTP応答を記述するあつらえ列挙の配列に対してある順序付けを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the constant y is successfully created from x, an Int instance with a value of 100.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、定数yは、Intインスタンスで100の値を持つxからうまく作成されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the constant x is successfully created from a value of 100, while the attempt to initialize the constant y from 1_000 fails because the Int8 type can represent 127 at maximum:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、定数xは100の値から首尾よく作り上げられます、一方で定数yを1_000から初期化する試みは失敗します、なぜならInt8型は最大で127を表現可能だからです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>続く例において、定数xは21.0の値から首尾よく作成されます、一方で定数yを21.5から初期化する試みは失敗します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the difference of 10 and 21 is less than zero, the minimum representable UInt value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、10と21の差はゼロ、最小限表現可能なUInt値、よりも少ないです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the difference of 10 and 21 is less than zero, the minimum representable UInt value, so the result is the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、10と21の差はゼロ、最小限表現可能なUInt値、よりも少ないです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the predicate provides an ordering for an array of a custom HTTPResponse type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例では、その述部はあつらえのHTTPResponse型の配列に対してある順序付けを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the product of 10 and 50 is greater than the maximum representable Int8 value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、10と50の積は、最大限表現可能なInt8値より大きいです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the result of 21 * 21 is greater than the maximum representable Int8 value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、21 * 21の結果は、最大限表現可能なInt8値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the result of 21 + 120 is greater than the maximum representable Int8 value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、21 + 120の結果は、最大限表現可能なInt8値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the result of 21 - 50 is less than zero, the minimum representable UInt8 value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、21 - 50の結果は、最大限表現可能なUInt8値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the sum of 100 and 121 is greater than the maximum representable Int8 value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、100と121の合計は、最大限表現可能なInt8値より大きいです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, see the documentation of Collection.underestimatedCount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この場合には、Collection.underestimatedCountの文書を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, the numberOfCookies constant has the default type for an integer literal, Int, as designated by the IntegerLiteralType type alias.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この場合では、numberOfCookies定数は整数リテラルに対する省略時型、Intを持ちます、IntegerLiteralType型エイリアスによって設計されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, 100 bytes of raw memory are allocated for the pointer bytesPointer, and then the first four bytes are bound to the Int8 type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、100バイトの生のメモリがポインタbytesPointerに対して割り当てられて、それから最初の４バイトがInt8型に束縛されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, filter(_:) is used to include only names shorter than five characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、filter(_:)は５つの文字より短い名前のみ含めるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、mapは最初に配列中の名前を小文字文字列に変換するために、それからそれらの文字を数えるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, x is initialized as an Int8 instance by clamping 500 to the range -128...127, and y is initialized as a UInt instance by clamping -500 to the range 0...UInt.max.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、xはInt8インスタンスとして、500を範囲-128...127に制限すること（クランピング）によって初期化されます、そしてyはUIntインスタンスとして、-500を範囲0...UInt.maxに制限することによって初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、３つの範囲からなる配列は平坦化されます、それで各範囲の要素は順に反復されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an asynchronous sequence called Counter produces Int values from 1 to 10.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、Counterと呼ばれる非同期シーケンスはInt値を1から10まで生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an asynchronous sequence called Counter produces Int values from 1 to 4.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、Counterと呼ばれる非同期シーケンスはInt値を1から4まで生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an asynchronous sequence called Counter produces Int values from 1 to 5.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、Counterと呼ばれる非同期シーケンスは、Int値を1から5まで生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、mapとcompactMapを、オプショナルInt値を返す変換とともに使う結果の違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, note the difference in the result of using map and flatMap with a transformation that returns an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、mapとflatMapをある配列を返す変換とともに使うことの結果における違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, note the difference in the result of using map and flatMap with a transformation that returns an optional Int value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、mapとflatMapを、オプショナルInt値を返す変換とともに使う結果の違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the CFArrayCallBacks initializer uses nil values as arguments for the retain and release parameters, the customCopyDescription(_:) function as the argument for the customCopyDescription parameter, and a closure literal as the argument for the equal parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、CFArrayCallBacksイニシャライザはnil値をretainとreleaseパラメーターに対する引数として、customCopyDescription(_:)関数をcustomCopyDescriptionパラメーターに対する引数として、そしてクロージャリテラルをequalパラメーターに対する引数として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the assignment to the letterK constant is handled by this initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、letterK定数への代入は、このイニシャライザによって舞台裏で取り扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the assignment to the x constant calls this integer literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、x定数への代入は、この整数リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the expression singleDigits.dropFirst(5)) is equivalent to calling this initializer with singleDigits and a range covering the last five items of singleDigits.indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、式singleDigits.dropFirst(5))は、このイニシャライザをsingleDigitsおよびsingleDigits.indicesの終わり５項目を対象とする範囲とともに呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated&lt;Int&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、整数からなる配列の真ん中の３つの要素が、Repeated&lt;Int&gt;インスタンスの５つの要素によって置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indentation is stripped from each line of a multiline string literal to match the indentation of the closing delimiter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>字下げは、複数行文字列リテラルの各行から剥ぎ取られて、閉じ区切り子の字下げに合わせられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Index and iterator types for other sequence and collection types in the standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの中の他のシーケンスとコレクション型のためのインデックスとイテレータ型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indicates that a precondition was violated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは前提条件が破られたことを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indicates that an internal sanity check failed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはある内部的な正常性確認が失敗したことを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indices and Iterators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスとイテレータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indices of a slice can be used interchangeably with indices of the base collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライスのインデックスは、基盤コレクションのインデックスと交換可能に使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Individual Unicode Scalar Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個々のユニコードスカラー値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inequality is the inverse of equality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不等性は、同等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Infrequently Used Functionality</seg>
      </tuv>
      <tuv lang="ja">
        <seg>滅多に使われない機能性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inherited By</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継承される先</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inherits From</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継承元</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initialization with Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リテラルを使った初期化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initialization, assignment, and deinitialization can be performed using UnsafeMutablePointer methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化、代入、そしてデイニシャライズは、UnsafeMutablePointerメソッドを使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initialized Memory</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化済みメモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes every element in this buffer’s memory to a copy of the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのもつメモリの中の全ての要素を与えられた値のコピーへと初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the buffer’s memory with the given elements, binding the initialized memory to the elements’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつメモリを与えられた要素で初期化します、初期化されたメモリを要素のもつ型に束縛します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the buffer’s memory with the given elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたいくらかの要素を使ってバッファの持つメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the memory referenced by this buffer with the given value, binds the memory to the value’s type, and returns a typed buffer of the initialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファによって参照されるメモリを与えられた値で初期化して、そのメモリを値の型に束縛し、そして初期化されたメモリの型付バッファを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the memory referenced by this pointer with the given value, binds the memory to the value’s type, and returns a typed pointer to the initialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを与えられた値で初期化して、そのメモリを値の型に束縛し、そして初期化されたメモリへの型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the memory referenced by this pointer with the values starting at the given pointer, binds the memory to the values’ type, and returns a typed pointer to the initialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを与えられたポインタで始まる値で初期化して、そのメモリを値の型に束縛し、そして初期化されたメモリへの型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the memory referenced by this pointer with the values starting at the given pointer, binds the memory to the values’ type, deinitializes the source memory, and returns a typed pointer to the newly initialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを与えられたポインタで始まる値で初期化して、そのメモリを値の型に束縛し、元となるメモリをデイニシャライズして、そして新しく初期化されたメモリへの型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the memory referenced by this pointer with the values starting at the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを、与えられたポインタで始まるいくらかの値で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes this pointer’s memory with a single instance of the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタのもつメモリを、与えられた値の単一のインスタンスで初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes this pointer’s memory with the specified number of consecutive copies of the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタのもつメモリを、指定された数の与えられた値の連続コピーで初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Input and Output</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入力と出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserting Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字の挿入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts a collection of characters at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列からなるコレクションを指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts a new character at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字を指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts a new element into the collection at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しい要素をコレクションへ指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts the elements of a sequence into the collection at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスに属する複数の要素をコレクションへ指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a Scalar</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Casting</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスのキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Method</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Methods</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスメソッド </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>様々なインスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Property</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instances of UnfoldSequence are created with the functions sequence(first:next:) and sequence(state:next:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnfoldSequenceのインスタンスは、関数sequence(first:next:)およびsequence(state:next:)で作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instances of the StaticString type are immutable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StaticString型のインスタンスは、不変です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instances of types that conform to the TextOutputStreamable protocol can write their value to instances of any type that conforms to the TextOutputStream protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>TextOutputStreamableプロトコルに準拠する型のインスタンスは、それらの値をTextOutputStreamプロトコルに準拠するあらゆる型のインスタンスへ書き出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instantiates an instance of the conforming type from a string representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型のインスタンスを文字列表現から初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of only accessing the specific UTF-8 code unit, that index is treated as the position of the character at the index’s encoded offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特定のUTF-8コード単位にアクセスすることだけではなく、そのインデックスは、インデックスの持つエンコードされたオフセットでの文字の位置として扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, convert an instance of any type to a string by using the String(describing:) initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、どんな型のインスタンスでも文字列へと、String(describing:)イニシャライザを使って変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, convert an instance of any type to a string by using the String(reflecting:) initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、どんな型のインスタンスでも文字列へと、String(reflecting:)イニシャライザを使って変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, corresponding next call to TaskGroup.next() rethrows that error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、TaskGroup.next()への対応する次の呼び出しはそのエラーを再スローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, create a slice of a collection by using the collection’s range-based subscript or by using methods that return a subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、そのコレクションのもつ範囲に基づく添え字によって、または下位シーケンスを返すメソッドを使うことによって、コレクションのスライスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, define your own subsequence type that takes your index invalidation requirements into account.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その代わりに、あなたのインデックス無効化要件を考慮に入れるあなた自身の下位シーケンス型を定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, initialize a variable or constant using a string literal with interpolated expressions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、補間式いくらかを持つある文字列リテラルを使って変数や定数を初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, initialize a variable or constant using an integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、整数リテラルを使って変数や定数を初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, the corresponding next() call will throw the error when necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、対応するnext()呼び出しがエラーを必要な時にスローするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, the corresponding call to TaskGroup.next() rethrows that error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、TaskGroup.next()への対応する呼び出しはそのエラーを再スローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use an initializing method, such as initialize(to:count:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、初期化するメソッド、initialize(to:count:)などを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use an initializing method, such as initialize(to:count:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、初期化するメソッド、initialize(to:count:)などを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use simple assignment to create a new constant or variable equal to this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、単純な代入を使ってこの文字列と等しい新しい定数または変数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use string interpolation to create a new string by including values, literals, variables, or expressions enclosed in parentheses, prefixed by a backslash (\(…)).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、文字列補間を使って、バックスラッシュ\(…)を前に置いた丸括弧に囲まれた値、リテラル、変数、または式を含めることで、新しい文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use the task property of UnsafeCurrentTask to access an instance of Task that you can store long-term and interact with outside of the closure body.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうしないで、UnsafeCurrentTaskのtaskプロパティを使うことでアクセスを、あなたが長期間格納してそしてクロージャ本体の外側で相互作用できるTaskのインスタンスにおこなってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use the body closure’s buffer argument to access the values in memory as instances of type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、bodyクロージャの持つバッファ引数を使ってメモリ中の値に型Tのインスタンスとしてアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use the body closure’s pointer argument to access the values in memory as instances of type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、bodyクロージャのもつポインタ引数を使うことで、メモリの中の値に型Tのインスタンスとしてアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, you must know the type of value previously in memory and initialize or assign the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、あなたは前もってメモリ中の値の型を知っていて、メモリを初期化またはアサインする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Integer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Integer Value Casting</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数値のキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Interpolated expressions don’t pass through this method; instead, Swift selects an overload of appendInterpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補間式はこのメソッドを通り抜けられません；代わりに、SwiftはappendInterpolationのオーバーロードを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a C va_list argument derived from the given array of arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、その与えられた引数の配列から引き出されたC va_list引数で発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a buffer containing the static string’s UTF-8 code unit sequence (excluding the null terminator).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを発動します、静的文字列のもつUTF-8コード単位シーケンス（null終端子を除外して）を含んでいるパッファを用います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a buffer pointer covering the raw bytes of the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、与えられた引数の生のバイトを変換しているバッファポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a mutable buffer pointer covering the raw bytes of the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、与えられた引数の生のバイトを変換している可変バッファポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a pointer to the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、与えられた引数に対するポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It also supports chaining through optional values within a chain, such as #keyPath(Person.bestFriend.name).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それはまた、連鎖内でオプショナル値を通した連鎖をサポートします、例えば#keyPath(Person.bestFriend.name)など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It does not attempt to cover multiple uses of some scalars, such as the use of letters to represent Roman numerals.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、いくつかのスカラーの複数の使用を対象とすること、たとえばローマ数字を表すための複数の表音文字の使用など、を試みようとしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It does not copy the elements from the collection into separate storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、要素をそのコレクションから別個のストレージへとコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is an unowned reference to avoid unnecessary reference-counting work even when working with actors abstractly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはある非所有参照で、不必要な参照カウント作業を、アクターそれらを抽象的に扱っている時でさえ防ぐためのものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is guaranteed to be empty when returning from that body because a task group waits for all child tasks to complete before returning.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その本体から返る時に空であることは保証されます、なぜならタスクグループは全ての子タスクが完了するのを復帰する前に待つからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is implicitly carried with the task, and is accessible by any child tasks the task creates (such as TaskGroup or async let created tasks).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは暗黙的にそのタスクとともに運搬されます、そしてそのタスクが作成するあらゆる子タスクによってアクセス可能です（たとえば TaskGroup または async let が作成したタスク）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is possible to define not-optional task-local values, and an explicit default value must then be defined instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非オプショナルのタスクローカル値を定義するのは可能です、そしてある明示的な省略時の値がそのとき代わりに定義されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is possible to perform task-local value reads from either asynchronous or synchronous functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカル値の読み出しを非同期または同期関数のどちらかから実行することは可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is unusual to need to call this method directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを直接呼び出す必要は通常ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when you create a string using string interpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それはあなたが文字列補間を使って文字列を作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when you initialize a string using a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが文字列リテラルを使って文字列を初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It may be used by the compiler when you initialize a static string using a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが文字列リテラルを使って静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It may be used by the compiler when you initialize a static string using an extended grapheme cluster.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが拡張初期素クラスタを使って静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It may be used by the compiler when you initialize a static string with a Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたがユニコードスカラーで静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It may be used by the compiler when you use a string literal to initialize a Unicode.Scalar instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが文字列リテラルを使ってUnicode.Scalarインスタンスを初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It replaces the completion handlers with async functions, and uses actors to guarantee safe access to data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、完了ハンドラをasync関数で置き換えます、そしてアクターを使ってデータへの安全なアクセスを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It will, however, continue to create tasks when the plain async function is used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、しかしながら、単純なasync関数が使われる場合はタスクの作成を続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating over a String's Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の持つ文字のすべてにわたって反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It’s also possible to use for await to collect results of a task groups:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>for awaitを使ってタスクグループの結果を収集することも可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It’s guaranteed to be empty when returning from that body because a task group waits for all child tasks to complete before returning.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その本体から返る時に空であることは保証されます、なぜならタスクグループは全ての子タスクが完了するのを復帰する前に待つからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Joint Iteration</seg>
      </tuv>
      <tuv lang="ja">
        <seg>接合反復</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Key Paths</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Key paths created using the #keyPath string expression don’t pass type information about the properties or methods they reference to the APIs that accept key paths.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>#keyPath文字列式を使って作成されるキーパスは、それらが参照するプロパティまたはメソッドについての型情報を、キーパスを受け入れるAPIに渡しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Key-Path Expressions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Keys and key paths are frequently used for key-value coding (KVC), a mechanism for indirectly accessing an object’s attributes and relationships using string identifiers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーとキーパスは、文字列識別子を使ってオブジェクトの属性および関連付け（リレーションシップ）に間接的にアクセスするための仕組み、キー値コーディング（KVC）のためにしばしば使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Language Interoperability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>言語互換性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lazy Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延コレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lazy Wrappers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延ラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how functions and methods that take a completion handler are converted to Swift asynchronous functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完了ハンドラをとる関数およびメソッドがどのようにSwift非同期関数へと変換されるかを学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how the Swift standard library uses protocols and generics to express powerful constraints.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのようにSwift標準ライブラリがプロトコルや総称体を使ってパワフルな制約を表すかを学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn the recommended steps to migrate your code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコードを移行するための推奨される段階を学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Left bit shift and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左ビットシフトして代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Left bit shift ignoring overflow and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左ビットシフト、オーバーフローを無視します、そして割り当てます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Less than</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より小さい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Less than or equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より小さいか、等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Like Task.detached, this initializer creates a separate, top-level task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Task.detachedと同様に、このイニシャライザはある分離した、トップレベルタスクを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Like Task.detached, the async function creates a separate, top-level task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Task.detachedと同様に、async関数はある分離した、トップレベルタスクを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Like a C function pointer, a Swift function type with the @convention(c) attribute does not capture the context of its surrounding scope.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C関数ポインタのように、@convention(c)属性を持つスウィフト関数型は、それを取り囲んでいるスコープのコンテキストをキャプチャしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if distance &lt; 0, a limit that is greater than i has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、distance &lt; 0ならば、iより大きい限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if n &lt; 0, a limit that is greater than i has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、n &lt; 0ならば、iより大きい限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if distance &lt; 0, limit should be less than i to have any effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、distance &lt; 0ならば、limitが何らかの効果を持つにはiより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、あなたがゼロ長コレクションをnewElementsパラメータとして渡すならば、このメソッドは与えられた下位範囲の中の要素を置き換えることなく削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, it’s the responsibility of the code running as part of the task to check for cancellation whenever stopping is appropriate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じように、停止が適切である時はいつでも取り消しを確認するのは、タスクの一部として動作しているコードの責任です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, scalars that default to text presentation can be followed by U+FE0F VARIATION SELECTOR-16 to request the emoji presentation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じように、テキスト表現が初期状態のスカラーは、U+FE0F VARIATION SELECTOR-16が後に続くことで、emoji表現を要請できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Linux platforms use getrandom(2) when available; otherwise, they read from /dev/urandom.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Linuxプラットホームは、getrandom(2)を利用可能な場合は使います；そうでなければ、それらは/dev/urandomから読み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Loading returns an array of drinks, and saving takes an array of drinks as an argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ロードでは、ドリンクそれらからなるある配列を返します、そしてセーブ（保存）ではドリンクそれらからなるある配列を引数としてとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logical AND</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理積</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logical NOT</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logical OR</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logical Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Long-term storage of a slice may therefore prolong the lifetime of elements that are no longer otherwise accessible, which can erroneously appear to be memory leakage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライスの長期ストレージは、もはやそれ以外ではアクセス可能ではない要素の寿命を延長し、それはメモリの漏洩であるように見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Make sure the Coffee Tracker complication appears on the active watch face.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Coffee Trackerコンプリケーションがアクティブなウォッチフェイス上に現れることを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Make your data types encodable and decodable for compatibility with external representations such as JSON.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのデータ型のエンコーディングとデコーディングを外部表現、例えばJSONなどとの互換性のために行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Managed Buffers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファ管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manipulating Indices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスを操る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manual Iteration</seg>
      </tuv>
      <tuv lang="ja">
        <seg>手動反復</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manual Memory Management</seg>
      </tuv>
      <tuv lang="ja">
        <seg>手動メモリ管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many collection operations are performed by wrapping a collection in another type, instead of copying the collection's contents.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くのコレクション演算は、コレクションを別の型の中にラップすることによって実行されます、コレクションの内容をコピーするのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many individual characters, such as “é”, “김”, and “🇮🇳”, can be made up of multiple Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くの単一の文字、例えば「é」、「김」、そして「🇮🇳」などが、複数のユニコードスカラー値から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many pointer operations must only be applied to pointers with memory in a specific state—you must keep track of the state of the memory you are working with and understand the changes to that state that different operations perform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くのポインタ演算はある特定の状態のメモリを持つポインタに適用されるだけであるべきです — あなたは、あなたが作業しているメモリの状態を見失わないようにして、異なる演算が実行するその状態の変更を理解していなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many tasks will check for cancellation before beginning their “actual work”, however this is not a requirement nor is it guaranteed how and when tasks check for cancellation in general.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くのタスクは、取り消しについて確認をそれらの “実際の仕事” を始める前に行うでしょう、しかしながらこれは要件ではありませんしまたどのようにそしていつタスクそれらが取り消しについて確認するかも一般的に保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marks attached at the bottom left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左下で付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marks attached at the top right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右上で付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marks attached directly above.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>直上に付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marks attached directly below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>直下に付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marks that overlay a base letter or symbol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基底表音文字またはシンボルを覆う記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Measuring the Length of a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の長さを計測する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory Access</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory Layout</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリレイアウト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory can be untyped and uninitialized, bound to a type and uninitialized, or bound to a type and initialized to a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリは、型無しで未初期化、ある型に束縛されて未初期化、またはある型に束縛されてある値に初期化される可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory that has been bound to a type can be rebound to a different type only after it has been deinitialized or if the bound type is a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型に束縛されているメモリは、それがデイニシャライズされた後にまたは束縛型がtrivial typeである場合にのみ、異なる型に再束縛が可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory that has been bound to a type, whether it is initialized or uninitialized, is typically accessed using typed pointers—instances of UnsafePointer and UnsafeMutablePointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型に束縛されているメモリは、それが初期化済みか未初期化かにかかわらず、一般的に型付ポインタを使ってアクセスされます — UnsafePointerおよびUnsafeMutablePointerではなくて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory that has just been allocated through a typed pointer or has been deinitialized is in an uninitialized state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタを通して今しがたアロケートされる、または未初期化状態にデイニシャライズされるメモリ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory that you manually manage can be either untyped or bound to a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが手動で管理するメモリは、特定の型に対して型付けされないまたは束縛されるのいずれかが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Migrating Your Objective-C Code to Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-Cコードのスウィフトへの移行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Model data with numbers, Boolean values, and other fundamental types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数、ブール値、および他の基本的な型に関してデータをモデル化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Modifying a copy of a string leaves the original unaffected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のコピーを修正しても、元のものはそのままで影響を受けません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Modifying and Comparing Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の修正と比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most importantly, they can be overloaded, so a type that conforms to StringInterpolationProtocol can provide several different appendInterpolation methods with different behaviors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も重要なことには、それらはオーバーロードされることができます、それでStringInterpolationProtocolに準拠する型は、いくつかの異なるappendInterpolationメソッドを異なる挙動で提供できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Move the code from the setter into the new method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コードをそのセッターから新しいメソッドに移動してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moves instances from initialized source memory into the uninitialized memory referenced by this pointer, leaving the source memory uninitialized and the memory referenced by this pointer initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかのインスタンスを初期化されたソースメモリからこのポインタによって参照される未初期化メモリに移動します、残っている未初期化ソースメモリは未初期化で、このポインタによって参照されたメモリは初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiline string literals are enclosed in three double quotation marks ("""), with each delimiter on its own line.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複数行文字列リテラルは、３つの二重引用符記号（"""）に囲まれ、各区切り子をそれの独自の行上に持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and produces their product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算してそれらの積を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算して結果を左手側の変数に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算して、結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiply</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiply and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiply with overflow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算、オーバーフローとともに</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiply with overflow and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算、オーバーフローと割り当てとともに</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Must be non-zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非ゼロでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Named and Unnamed Combining Classes</seg>
      </tuv>
      <tuv lang="ja">
        <seg>名前付きおよび名無しの結合クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Navigate back to the watch face.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ウォッチフェイスに戻ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Never call finalize() on hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>finalize()をhasher上で決して呼び出さないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Never resuming leaves the task in a suspended state indefinitely, and leaks any associated resources.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>再開することは、そのタスクを決して曖昧に中断状態のままにしておきません、そしていかなる関連したリソースも漏洩しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, the bytes referenced by destBytes are copied into byteArray, a new [UInt8] array, and then the remainder of someBytes is appended to byteArray:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に、destBytesによって参照されるバイトはbyteArray、新しい[UInt8]配列へとコピーされます、そしてそれからsomeBytesの残りはbyteArrayに加えられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Nil coalescing</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil合体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>No matter which way you call printInt(atAddress:), Swift’s type safety guarantees that you can only pass a pointer to the type required by the function—in this case, a pointer to an Int.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがprintInt(atAddress:)を呼び出す方法は問題ではありません、Swiftの型安全は、あなたが関数によって要求される型へのポインタを渡すことだけが可能であるのを保証します — この場合、Intへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>None</seg>
      </tuv>
      <tuv lang="ja">
        <seg>なし</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Not equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>等しくない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Not identical</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一でない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notably, it does not contain the standard digits or Latin/Greek letter blocks; instead, it contains the mathematical Latin, Greek, and Arabic letters and numbers defined in the Supplemental Multilingual Plane.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特に、それは標準の桁またはラテン／ギリシャ文字ブロックを含みません；代わりに、それは補助多言語面で定義される数学用のラテン、ギリシャ、そしてアラビア文字と数字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that an index into one view may not have an exact corresponding position in another view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるビューに対するインデックスが別のビューにおいて正確に対応する位置を持たないかもしれないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that it is unsafe to escape the pointer provided to body.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyに提供されたポインタをエスケープすることは安全でないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that this may not be as effective as creating the task with the “right” priority to in the first place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これがまず第一にタスクをそれに対する “正しい” 優先度で作成するのと同じくらい有効ではないかもしれないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that this might not be as effective as creating the task with the correct priority, depending on the executor’s scheduling details.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはタスクを正しい優先度で作成するのと同じくらい効果的でないかもしれないことに注意してください、エグゼキュータのもつ予定の仕方の詳細に依存しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that unlike the scalar &amp;&amp; operator, the SIMD .&amp; operator always fully evaluates both arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラー&amp;&amp;演算子と違って、SIMD .&amp; 演算子は常に両方の引数を完全に評価することに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラー||演算子と違って、SIMD .| 演算子は常に両方の引数を完全に評価することに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在、shorterIndices配列はnames集合の中のより短い名前のインデックスを保持します、あなたはそれらのインデックスを使ってこの集合の要素にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numbers and Basic Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数と基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numerals greater than 9 are represented as Roman letters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>９より大きい数詞はローマ字で表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numeric Protocols</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数に関するプロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numeric Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C and C Code Customization</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-CとCコードのカスタム化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C key paths are distinct from, but related to, key-path expressions in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cキーパスは、Swiftでのキーパス式とは違います、しかしそれと関連します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Offsets the given index by the specified distance, or so that it equals the given limiting index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスをこの指定された隔たりで補います、またはそれでそれは与えられた限界インデックスと等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Offsets the given index by the specified distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスを指定された間隔で補います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often, the optimizer can eliminate bounds- and uniqueness-checks within an algorithm, but when that fails, invoking the same algorithm on body\ ’s argument lets you trade safety for speed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しばしば、最適化機能はアルゴリズム内部で境界および固有さ検査を省くことができます、しかしそれが失敗する時、同じアルゴリズムをbodyの引数上で発動することは、あなたに安全をスピードと交換させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素を基底非同期シーケンスから除きます、それから全ての残りの要素をずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Omits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素を基底非同期シーケンスから、ある与えられたクロージャがfalseを返すまで省きます、それの後それは全ての残りの要素をずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On 32-bit platforms, UInt is the same size as UInt32, and on 64-bit platforms, UInt is the same size as UInt64.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビットプラットホーム上では、UIntはUInt32と同じ大きさです、そして64ビットプラットホーム上では、UIntはUInt64と同じ大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On This Page</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この項には</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On a big-endian platform, for any integer x, x == x.bigEndian.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビッグエンディアンプラットホーム上で、何らかの整数xに対して、x == x.bigEndian。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On a little-endian platform, for any integer x, x == x.littleEndian.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リトルエンディアンプラットホーム上で、何らかの整数xに対して、x == x.littleEndian。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On the other hand, an emoji flag character is constructed from a pair of Unicode scalar values, like "\u{1F1F5}" and "\u{1F1F7}".</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一方で、あるemoji国旗文字は一対のユニコードスカラー値から構築されます、"\u{1F1F5}"と"\u{1F1F7}"のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once nil has been returned, all subsequent calls return nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一旦nilが返されるならば、すべての続いて起こる呼び出しはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once all of the segments are appended, the interpolation is passed to an init(stringInterpolation:) initializer on the type being created, which must extract the accumulated data from the StringInterpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一旦すべての文節が追加されるならば、補間はその作成されている型上でのinit(stringInterpolation:)イニシャライザに渡されます、それは蓄積されたデータをStringInterpolationから抽出しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once the predicate returns false it will not be called again.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いったん述部がfalseを返すならそれは再び呼び出されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only APIs on UnsafeCurrentTask that are also part of Task are safe to invoke from another task besides the one that this task handle represents.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeCurrentTask上のAPIそれらでまたTaskの一部でもあるものだけが、このタスクハンドルが表すものに加えてさらに別のタスクからの発動が安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only Swift function types with C function reference calling convention may be used for function pointer arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C関数参照呼出手法を持つスウィフト関数型だけが、関数ポインタ引数のために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only code that’s running as part of the task can interact with that task, by invoking the appropriate context-sensitive static functions which operate on the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクの一部として動作しているコードだけが、そのタスクと相互作用できます、現在のタスク上で動作する適切な文脈依存の静的関数を発動することによって。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only the String and Substring types in the standard library are valid conforming types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StringとSubstring型だけが標準ライブラリにおいて有効な準拠する型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only use this method to rebind the buffer’s memory to a type with the same size and stride as the currently bound Element type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつメモリを現在バインドされるElement型と同じサイズおよびストライドを持つある型に再バインドするためにだけこのメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only use this method to rebind the pointer’s memory to a type with the same size and stride as the currently bound Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタのもつメモリを現在バインドされるPointee型と同じサイズおよびストライドを持つある型に再バインドするためにだけこのメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Open Settings, and scroll down to Health &gt; Health Data &gt; Nutrition &gt; Caffeine to see all of the drinks you added to the app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Settingsを開いて、そして Health &gt; Health Data &gt; Nutrition &gt; Caffeine へと下にスクロールして、あなたがアプリに加えた飲み物の全てを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operating on substrings is fast and efficient because a substring shares its storage with the original string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列での演算は高速で効率的です、なぜなら下位文字列はそれのストレージを本来の文字列と共有するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operations are allowed to throw, in which case the try await next() invocation corresponding to the failed task will re-throw the given task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算はthrowを許可されます、その場合には失敗したタスクと結びつけられるtry await next()発動は、与えられたタスクを再スローするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operator</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operator Declarations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operator Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Optionals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other letters, including syllables and ideographs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他の文字、音節と表意文字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other responses to cancellation include returning the work completed so far, returning an empty result, or returning nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取り消しへの他の応答は、これまでに完了した仕事を返す、空の結果を返す、またはnilを返すことを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, iteration will stop if an ill-formed sequence is detected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、反復は誤形式シーケンスが検出されるならば停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, the memory must not be initialized or Pointee must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、メモリは初期化されてはなりません、またPointeeは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Overflow checking is not performed in -Ounchecked builds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー検査は、-Ouncheckedビルドでは実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Overview</seg>
      </tuv>
      <tuv lang="ja">
        <seg>概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parameters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パラメータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parses a single Unicode scalar value from input.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>inputからの単一ユニコードスカラー値を構文解析します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parsing of the string is case insensitive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列の構文解析は、大文字小文字に影響されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass true if you need the result to use only ASCII characters; otherwise, pass false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが結果にASCII文字のみ使うことを必要とするならばtrue；そうでなければ、falseを渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass true to create a new string, even when the data referenced by cString contains ill-formed sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>trueを渡すと、cStringによって参照されるデータが誤形式シーケンスを含む時であっても新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass true to measure the length of input even when input contains ill-formed sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>trueを渡すと、inputが誤形式シーケンスを含む時であってもinputの長さを測ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass true to prevent the release of the string’s allocated storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>trueを渡して文字列のもつ割り当てストレージの解放を防止してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass true to request that the collection avoid releasing its storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>trueを渡して、コレクションがそのストレージを解放するのを回避するよう要求してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass true to use uppercase letters to represent numerals greater than 9, or false to use lowercase letters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>trueを渡すことで大文字を使って９より大きい数詞を表します、またはfalseでは小文字を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass false to immediately stop measuring input when an ill-formed sequence is encountered.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>falseを渡すと、誤形式シーケンスと出くわす場合にinputの計測を直ちに中止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass false to interrupt the creation of the new string if an ill-formed sequence is detected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>falseを渡すと新しい文字列の作成は、誤形式シーケンスが検出されるならば中断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass a Constant Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="ja">
        <seg>定数ポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass a Function Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数ポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass a Mutable Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変ポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass an Autoreleasing Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オートリリースポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass the greater-than operator (&gt;) operator as the predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より大きい（&gt;）演算子を述部として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing a sequence with no elements or an empty collection as possiblePrefix always results in true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの要素もないシーケンスまたは空のコレクションをpossiblePrefixとして渡すことは、常にtrueという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing a value that can’t be represented in this type results in a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型において表せない値を渡すことは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing the collection’s endIndex as the start parameter results in an empty subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのendIndexをstartパラメータとして渡すことは、空のシーケンスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing the collection’s starting index as the end parameter results in an empty subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの開始インデックスをendパラメータとして渡すことは、空のシーケンスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing the same index as both i and j has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iとjの両方と同じアンデックスを渡すことは、効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pattern match</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パターン・マッチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Perform asynchronous and parallel operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期なそして並列な演算それらを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Perform casts between types or represent values of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型の間でキャストを実行したり、任意型の値を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performance Optimizations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>性能最適化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing Typed Pointer Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタ算術を実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing a bitwise NOT operation on 0 returns a value with every bit set to 1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位のNOT演算を0に関して実行することは、すべてのビットが1に設定された値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a traditional C-style assert with an optional message.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>随意のメッセージを持つ伝統的なC形式アサートを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs an unbalanced autorelease of the object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブジェクトのある不均衡なオートリリース（自動解放）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs an unbalanced release of the object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブジェクトのある不均衡なリリース（解放）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs an unbalanced retain of the object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブジェクトのある不均衡なリテイン（保持）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Platform Implementation of SystemRandomNumberGenerator</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SystemRandomNumberGeneratorのプラットホーム実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointer arithmetic with a typed pointer is counted in strides of the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタでのポインタ算術は、ポインタのもつPointee型のストライドで勘定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointer arithmetic with raw pointers is performed at the byte level.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のポインタを使うポインタ算術は、バイト水準で実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointers to Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値へのポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise bitwise AND</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位ビット単位の積</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise bitwise AND and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位ビット単位の積と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise bitwise OR</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位ビット単位の和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise bitwise OR and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位ビット単位の和と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise bitwise XOR</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位ビット単位の排他的和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise bitwise XOR and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位ビット単位の排他的和と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise greater than</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連大なり</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise greater than or equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連大なり同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise less than</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連の小なり</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise less than or equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連小なり同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise logical NOT</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位論理否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise not equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連不等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: maximum must compare equal to itself (i.e. cannot be NaN).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：maximumはそれ自身と等しいと比較されなければなりません（すなわちNaNであることはできません）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: minimum must compare equal to itself (i.e. cannot be NaN).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：minimumはそれ自身と等しいと比較されなければなりません（すなわちNaNであることはできません）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: scalars must have the same number of elements as the vector type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：scalarsは、ベクター型と同じ数の要素を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: v.value can be represented as ASCII (0..&lt;128).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：v.valueがASCII（0..&lt;128）として表現できること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: May not be called after a previous self.encode(_:) call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：前のself.encode(_:)呼び出しの後に呼び出されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: The next location exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：次の場所が存在すること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: The next position is representable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：次の位置が表現可能であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: The previous location exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：前の場所が存在すること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを、効率のためにreduce(_:_:)より優先してください、その結果がコピーオンライト型である場合、例えばArrayまたはDictionaryに対しては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素を格納するようにコレクションを準備します、そうすることが基礎をなす型に対して適切である場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Print the result using the index found in step 2 on the original absences array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>手順２で見つけたインデックスをオリジナルabsences配列上で使って結果を出力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Print values to the console, read from and write to text streams, and use command line arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値をコンソールに出力し、テキストストリームから読み込みおよびそれへと書き出し、そしてコマンドライン引数を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Printing and Displaying a Scalar</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーをプリントおよび表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Printing and Dumping</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プリントとダンプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Priority</seg>
      </tuv>
      <tuv lang="ja">
        <seg>優先度</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Priority elevation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>優先度上昇</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Priority inheritance</seg>
      </tuv>
      <tuv lang="ja">
        <seg>優先度継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Priority scheduling</seg>
      </tuv>
      <tuv lang="ja">
        <seg>優先度スケジュール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces a string containing the bytes in a given C array, interpreted according to a given encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた符号化によって解釈される、与えられたC配列の中のバイトを含んでいる文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces a string created by copying the data from a given C array of UTF8-encoded bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF8符号化されたバイトからなる与えられたC配列からコピーするデータによって作成される文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces an initialized String object that contains a given number of bytes from a given buffer of bytes interpreted in a given encoding, and optionally frees the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化されたStringオブジェクトを作成します、それは与えられた符号化での与えられたバイト解釈のバッファ由来の与えられた数のバイトを含んでいます、そして随意にそのバッファを解放します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Programming Tasks</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プログラミング作業</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Proper alignment ensures that the result of distance(to:) accurately measures the distance between the two pointers, counted in strides of Pointee.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>適切なアライメントは、distance(to:)の結果が正確に２つのポインタの間の隔たりを、Pointeeのストライドで数えて、測ることを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Properties of this scalar defined by the Unicode standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード標準によって定義されるこのスカラーのプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Property wrapper that defines a task-local value key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカルな値キーを定義するプロパティラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Protocols, such as Collection and Equatable, that describe common abstractions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロトコル、たとえばCollectionそしてEquatableなど、それは共通の抽象化を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Protocols, such as CustomDebugStringConvertible and CustomReflectable, that you use to customize operations that are available to all types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロトコル、たとえばCustomDebugStringConvertibleそしてCustomReflectableなど、あなたはそれを使って全ての型で利用可能である演算をカスタマイズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Protocols, such as OptionSet, that you use to provide implementations that would otherwise require boilerplate code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロトコル、たとえばOptionSetなど、あなたはそれを使用してそうしなければ定型文コードを必要としただろう実装を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Provide a custom reflection for your types using these protocols.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえのリフレクションをあなたの型に対してこれらのプロトコルを使って提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Put the Coffee Data Class on the Main Actor</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Coffee Data Classをメインアクター上に置く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying Runtime Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>実行時値の問い合わせ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Random Number Generators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為数生成子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Range Expressions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ranges</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw Pointer Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のポインタ算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw Pointers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw Representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生の表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw memory that has just been allocated is in an uninitialized, untyped state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートされてすぐの生のメモリは、初期化されない、型付けされない状態にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw, Uninitialized Memory</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生の、初期化されないメモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reading from and writing to memory through a raw buffer are untyped operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある生のバッファを通してメモリから読み込むそしてそれへ書き込むことは、型無し演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reading from memory through a raw buffer is an untyped operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある生のバッファを通してメモリから読み込むことは、型無し演算のひとつです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reading task local values is simple and looks the same as-if reading a normal static property:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカル値の読み出しは簡単です、そして通常の静的プロパティを読み出す場合と同じに見えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reading task-local values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカル値を読み出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reference Counting</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照カウント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reference Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Related Documentation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連文書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Related String Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連した文字列型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Relationships</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関係</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remainder</seg>
      </tuv>
      <tuv lang="ja">
        <seg>剰余</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remainder and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>剰余と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all elements from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての要素をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all the elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす要素すべてを除去します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the character at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置での文字を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the element at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置での要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the first element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最初の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the last element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最後の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the characters in the given range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた範囲の中の文字を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the elements in the specified subrange from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された下位範囲の中の要素をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the given number of elements from the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数の要素をコレクションの終わりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the specified number of elements from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素をコレクションの始まりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the specified number of elements from the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素をコレクションの終わりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the specified subrange of elements from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの要素からなる指定された下位範囲をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removing Substrings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列の削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reordering a String's Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の持つ文字を並び替えます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素を再配列します、例えば、与えられた述部にマッチする要素すべてが、合致しない要素すべての後になるなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Repeatedly calling this method returns, in order, all the elements of the underlying sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返しこのメソッドを呼び出すことは、基礎をなすシーケンスのすべての要素を、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replace Delegates and Completion Handlers with Async Methods</seg>
      </tuv>
      <tuv lang="ja">
        <seg>委任と完了ハンドラをasyncメソッドで置き換える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces a with the pointwise exclusive or of a and b.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>aをaとbのポイント単位排他的論理和で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces a with the pointwise logical conjuction of a and b.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>aをaとbのポイント単位論理積で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces a with the pointwise logical disjunction of a and b.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>aをaとbのポイント単位論理和で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces elements of this vector with other in the lanes where mask is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターの要素を、maskがtrueであるところの、レーンの中のotherで置き換えます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces elements of this vector with elements of other in the lanes where mask is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターの要素を、maskがtrueであるところの、レーンの中のotherの要素で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the elements within the specified bounds with the given Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された領域内の要素を与えられたユニコードスカラー値で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the given index with its predecessor.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスをそれの前のものと取り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the given index with its successor.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスをそれの後に続くものと取り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the memory referenced by this pointer with the values starting at the given pointer, leaving the source memory uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを与えられたポインタで始まるいくらかの値と置き換えます、ソースメモリは未初期化のままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the specified subrange of elements with the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの要素からなる指定された下位範囲を与えられたコレクションで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the text within the specified bounds with the given characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された領域内のテキストを与えられた幾らかの文字で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this pointer’s initialized memory with the specified number of instances from the given pointer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタのもつ初期化されたメモリを、指定されたポインタのもつメモリからの指定された数のインスタンスで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this pointer’s memory with the specified number of consecutive copies of the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタのもつメモリを、指定された数の指定された値の連続コピーで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this string with the empty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列を空の文字列で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replacing Substrings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列の置換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Represents a string literal with interpolations while it is being built up.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルでいくらかの補間をもつものを、それが作り上げられている間に表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Represents the contents of a string literal with interpolations while it’s being built up.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの補間をもつある文字列リテラルの内容それらを、それが作り上げられている間に表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Required.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必須。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reserves enough space in the string’s underlying storage to store the specified number of ASCII characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数のASCII文字を格納するのに十分な空間を文字列のもつ基礎をなすストレージの中に確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reserves enough space in the view’s underlying storage to store the specified number of ASCII characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数のASCII文字を格納するのに十分な空間をビューのもつ基礎をなすストレージの中に確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resources</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リソース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting next by having it return normally from its suspension point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次を待っているタスクを、それをそれの一時停止地点から通常に復帰させることによって再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the continuation by having it either return normally or throw an error based on the state of the given Result value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続を待っているタスクを、それにそれの中断地点からこの与えられたResult値の状態に基づいて通常に復帰させるかエラーをスローさせるかどちらかによって再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the continuation by having it return normally from its suspension point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続を待っているタスクを、それにそれの中断地点から通常に復帰させることによって再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the continuation by having it throw an error from its suspension point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続を待っているタスクを、それにそれの中断地点からエラーをスローさせることによって再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task that’s awaiting the continuation by returning or throwing the given result value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた結果値をスローするまたは返すことによって、継続を待っているタスクを再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task that’s awaiting the continuation by returning the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値を返すことによって、継続を待っているタスクを再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task that’s awaiting the continuation by returning.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返すことによって、継続を待っているタスクを再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task that’s awaiting the continuation by throwing the given error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたエラーをスローすることによって、継続を待っているタスクを再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resuming from a continuation more than once is undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある継続から一回以上再開することは、未定義挙動です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Retaining the collection’s storage can be a useful optimization when you’re planning to grow the collection again.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのストレージを保持することは、あなたがコレクションをもう一度増大しようと計画している時に、ひとつの有益な最適化であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Retaining the storage can be a useful optimization when you’re planning to grow the string again.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストレージを保持することは、あなたが文字列をもう一度増大しようと計画している時に、ひとつの有益な最適化であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Retrieves and returns the referenced instance, returning the pointer’s memory to an uninitialized state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照されたインスタンスを取ってきて返します、ポインタのメモリを初期化されない状態へ戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Return Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Return: The element that was yielded or a error that was thrown.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り：生み出された要素またはスローされたエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Return: The element that was yielded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り：生み出された要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns -1 if this value is negative and 1 if it’s positive; otherwise, 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値が負ならば-1そしてそれが正ならば1；それ以外では0を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns true if the task is cancelled, and should stop executing.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>trueを返します、もしタスクが取り消される、そして遂行を停止すべきならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns true if this value is a multiple of the given value, and false otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>trueをもしこの値がその与えられた値の倍数ならば、そしてfalseをそうでないならば返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a CVaListPointer that is backed by autoreleased storage, built from the given array of arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オートリリースされるストレージによって裏付けられるCVaListPointerを返します、いくらかの引数からなる与えられた配列から組み立てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a LazyMapSequence over this Sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このSequenceを覆うLazyMapSequenceを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスのすべての要素がある与えられた述部を満たすかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the given object is known to have a single strong reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値を返して、与えられたオブジェクトが１つだけ強い参照を持つことを知られるかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最初の要素らが別のシーケンスの中の要素らと同等かどうかを、与えられた述部を同等性テストとして使って指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最初の要素らが別のシーケンスの中の要素らと同じかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された述部を満足させるある要素をシーケンスが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence contains the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された要素をシーケンスが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが別のシーケンスの前に来るかどうかをある語彙筆記的順序（字典）順序において、与えられた述部を使って要素を比較して、指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (&lt;) to compare elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのシーケンスが別のシーケンスの前に来るかどうかを、ある語彙筆記的順序（字典）順序において、より小さい演算子（&lt;）を使って要素を比較して、指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a UTF-8 continuation byte.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたコード単位がUTF-8継続バイトかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a high or low surrogate code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたコード単位が高位または低位サロゲートコード単位かを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a high-surrogate code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたコード単位が上位サロゲートコード単位かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a low-surrogate code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたコード単位が下位サロゲートコード単位かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the string begins with the specified prefix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列が指定された接頭辞で始まるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the string ends with the specified suffix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列が指定された接尾辞で終わるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the two given values are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the two given values are not equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより大きいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより大きいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより少ないまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより少ないかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスともう一方のシーケンスが同等の要素を同じ順序で含むかどうかを、与えられた述部を同等テストとして使って、指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスともう一方のシーケンスが同じ要素を同じ順序で含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two references point to different object instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの参照が異なるオブジェクトインスタンスを指しているかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two references point to the same object instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの参照が同じオブジェクトインスタンスを指しているかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two types are identical.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの型が同一かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two types are not identical.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの型が同一でないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two values are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two values are not equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two vectors are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのベクターが等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値を返します、それは非同期シーケンスによって生み出される全ての要素がこの与えられた述部を満足させるかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値を返します、それは非同期シーケンスがこの与えられた述部を満足させる要素を含むかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the asynchronous sequence contains the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値を返します、それは非同期シーケンスがこの与えられた要素を含むかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a closed range that contains both of its bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの境界の両方を含む完結範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a copy of this vector, with elements other in the lanes where mask is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターのコピーを返します、maskがtrueであるところの、レーンの中の要素otherを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a copy of this vector, with elements replaced by elements of other in the lanes where mask is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターのコピーを返します、maskがtrueであるところの、レーンの中の要素otherを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a half-open range that contains its lower bound but not its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの下側の境界は含むがそれの上側の境界はそうしない半開範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a human-readable string giving the name of a given encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた符号化の名前を与えている、人間が読む文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a lazy sequence that concatenates the elements of this sequence of sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスに属する複数のシーケンスの要素を鎖状に連結する遅延シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a lowercase version of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の小文字バージョンを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a mirror that reflects the UTF-16 view of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のUTF-16ビューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a mirror that reflects the UTF-8 view of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のUTF-8ビューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a mirror that reflects the Unicode scalars view of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のユニコードスカラービューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オリジナルのコレクションの要素で与えられた述部を満たすものを、順序正しく、含んでいる同じ型の新しいコレクションを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new instance of the given type, constructed from the raw memory at the specified offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の新しいインスタンスを返します、生のメモリから指定されたオフセットで構築されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new instance of the given type, read from the buffer pointer’s raw memory at the specified byte offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の新しいインスタンスを返します、バッファポインタの生のメモリから指定されたバイトオフセットで読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各要素の間に与えられた分離子を加えて、シーケンスの要素を連結することによる新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a partial range extending upward from a lower bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下側の境界から上方に拡張している部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a partial range up to, and including, its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの上側の境界までの、そしてそれを含む部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a partial range up to, but not including, its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの上側の境界までの、しかしそれを含んでいない、部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a pointer offset from this pointer by the specified number of instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから指定された数のインスタンスだけオフセットしたポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a pointer to the next consecutive instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の隣接インスタンスへのポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a pointer to the previous consecutive instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前の隣接インスタンスへのポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random element of the collection, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのある無作為な要素を返します、与えられた生成子を無作為さの出典として使って使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのある無作為の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random value that is less than the given upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた上側の境界より小さい無作為の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random value within the specified range, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された範囲内のある無作為な値を返します、与えられた生成子を無作為さの出典として使って使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random value within the specified range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された範囲内のある無作為の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす、冒頭の、隣接する要素を飛ばすことによるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence containing all but the given number of final elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数の末尾要素以外すべてを含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence containing all but the given number of initial elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の冒頭要素以外すべてを含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence containing the initial, consecutive elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす、冒頭の、隣接する要素を含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence formed from first and repeated lazy applications of next.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>firstからそして繰り返しnextを遅延適用して形成されたシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence formed from repeated lazy applications of next to a mutable state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返しnextを可変のstateに遅延適用することから形成されたシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence from a starting value to, but not including, an end value, stepping by the specified amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定の量だけ歩を進めて、始まりの値から終わりの値まで、しかしそれは含めないシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence from a starting value toward, and possibly including, an end value, stepping by the specified amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定の量だけ歩を進めて、始まりの値から終わりの値の方へ、そしてもしかするとそれを含めるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペア (n, x) のシーケンスを返します、そこでnはゼロで開始する連続した数を表して、xはシーケンスの要素を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence, up to the specified maximum length, containing the initial elements of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された最大長まで、そのシーケンスの冒頭の要素を含んでいる、あるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a string created by using a given format string as a template into which the remaining argument values are substituted according to the user’s default locale.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた書式設定文字列をテンプレートとして使ってユーザの省略時のロケールに従って残りの引数値がそれに対する代用とされることによって作成される文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a string read from standard input through the end of the current line or until EOF is reached.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準入力から現在の行の終わりまでまたはEOFが到達されるまで読み込んだ文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a string representation of the Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーの文字列表現を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>predicateがtrueを返す間は要素を飛ばして残りの要素を返すことによって、ある下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence containing all but the given number of initial elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の冒頭要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence containing all but the specified number of final elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の末尾要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>predicateがfalseを返すまで冒頭の要素を含んでいて残りの要素を飛ばしている、ある下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence from the specified position to the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置からコレクションの終わりまでの下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence from the start of the collection through the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの始まりから指定された位置までも含む下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence from the start of the collection up to, but not including, the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの始まりから指定された位置まで、しかしそれは含めない下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence, up to the given maximum length, containing the final elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位シーケンスを、指定された最大長まで、コレクションの末尾の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence, up to the given maximum length, containing the final elements of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位シーケンスを、指定された最大長まで、シーケンスの末尾の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位シーケンスを、指定された最大長まで、コレクションの冒頭の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a tuple containing the high and low parts of the result of multiplying this value by the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を指定の値で掛ける結果の高および低部分を含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a tuple containing the quotient and remainder of dividing the given value by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をこの値で除算した商と余りを含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a typed pointer to the memory referenced by this pointer, assuming that the memory is already bound to the specified type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリに対する型付ポインタを返します、メモリがすでに指定された型へ束縛されると仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a value from a uniform, independent distribution of binary data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリデータの一様な、独立分布からの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a value that is offset the specified distance from this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定の隔たりをこの値からオフセットされたある値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with true or false randomly assigned in each lane, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各レーンに無作為に割り当てられるtrueまたはfalseを持つあるベクターを返します、与えられた生成子を無作為さの出典として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with true or false randomly assigned in each lane.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各レーンに無作為に割り当てられるtrueまたはfalseを持つあるベクターを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with the result of a pointwise equality comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位同等比較の結果を持つベクターマスクを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with the result of a pointwise inequality comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位不等比較の結果を持つベクターマスクを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a view presenting the elements of the collection in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素を逆順に表しているある見方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an Array of the encodings string objects support in the application’s environment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリケーションの環境においてサポートされる符号化文字列オブジェクトの配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された変換をこのシーケンスの各要素で呼び出す結果を連結したものを含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the elements of this sequence in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素を逆順に含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された変換をこのシーケンスの各要素で呼び出す結果で非-nilのものを含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the results of mapping the given closure over the sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャをシーケンスのもつ要素全体にわたってマップする結果を含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された述部を満足させるものであるシーケンスの要素を、順序通りに、含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを返します、基底シーケンスの冒頭の、連続する要素いくつかを含んでいます、それらは与えられた述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された最大長まで、その基底非同期シーケンスの冒頭の要素を含んでいる、ある非同期シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスから指定された隔たりのインデックスを返します、その隔たりが与えられた限界インデックスを越えない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an index that is the specified distance from the given index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスから指定された隔たりのインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an initialized String object that contains a given number of characters from a given array of UTF-16 Code Units</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化されたStringオブジェクトを返します、それは与えられた数の文字をユニコード文字からなる与えられた配列から含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an initialized String object that contains a given number of characters from a given array of Unicode characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化されたStringオブジェクトを返します、それは与えられた数の文字をユニコードスカラーからなる与えられた配列から含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the bytes of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスのバイトすべてを対象としたあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the elements of this buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the elements of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素すべてを対象としたあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an uppercase version of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の大文字バージョンを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the current task’s priority.</seg>
      </tuv>
      <tuv lang="ja">
        <seg> currentタスクのもつ優先度を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the C-string encoding assumed for any method accepting a C string as an argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C文字列を引数として受け入れる何らかのメソッドのために仮定されるC文字列符号化を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the absolute value of the given number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数の絶対値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the bits of the given instance, interpreted as having the specified type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインスタンスのビットを返します、指定された型を持つと解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各要素の間に与えられた分離子を挿入して、このシーケンスに属する複数のシーケンスの要素を鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the concatenated results of mapping the given transformation over this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた変換をこのシーケンス全体にわたってマッピングする結果を鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつ順番付けられた要素をこの与えられたコレクションから生成するのに必要とされる差異を返します、与えられた述部を同等性テストとして使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference needed to produce this collection’s ordered elements from the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつ順番付けられた要素をこの与えられたコレクションから生成するのに必要とされる差異を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をこの値から減じることで入手される差、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の差を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the distance between two indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのインデックス間の隔たりを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the distance from this pointer to the given pointer, counted as instances of the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから与えられたポインタまでの隔たりを返します、ポインタのもつPointee型のインスタンスとして数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the distance from this value to the given value, expressed as a stride.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値から特定の値までの隔たりを返します、ストライドとして表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the dynamic type of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の動的型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, shuffled using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの要素を返します、与えられた生成子を無作為さの出典として使って混ぜ合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, shuffled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入れ替えた、シーケンスの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を要素間の比較として使ってソートされた、シーケンスの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, sorted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスに属する要素を、ソートして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of this sequence of sequences, concatenated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスに属する複数のシーケンスの要素を、鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the first element of the sequence that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たすこのシーケンスの最初の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the first index in which an element of the collection satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のインデックスで、それにおけるコレクションの要素が与えられた述部を満足させるものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the first index where the specified value appears in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値がコレクションにおいて現れるところの最初のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the given instance cast unconditionally to the specified type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインスタンスを無条件に特定の型にキャストして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the given integer as the equivalent value in a different integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数を同等値としてある異なる整数型において返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the given number unchanged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数を変更せずに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the greater of two comparable values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの比較可能な値のうちより大きいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the greatest argument passed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>渡された引数の最も大きいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the high-surrogate code unit of the surrogate pair representing the specified Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたユニコードスカラーを表しているサロゲートペアの上位サロゲートコード単位を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the index of the last element in the collection that matches the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部に合致する、コレクションの中の最後の要素のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the inverse of the bits set in the argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数におけるビットの逆順を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the last element of the sequence that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす、シーケンスの最後の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the last index where the specified value appears in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値がコレクションにおいて現れるところの最後のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the least argument passed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>渡された引数の最も少ないものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the lesser of two comparable values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの比較可能な値のうちより小さいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素と等しい要素を避けるようにして、このコレクションの最も長くなりうる下位シーケンスを、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす要素を含んでいない、このコレクションの最も長くなりうる下位シーケンスそれらを順序どおりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素と等しい要素を避けるようにして、このシーケンスの最も長くなりうる下位シーケンスを、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす要素を含んでいない、このシーケンスの最も長くなりうる下位シーケンスそれらを順序どおりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the low-surrogate code unit of the surrogate pair representing the specified Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたユニコードスカラーを表しているサロゲートペアの下位サロゲートコード単位を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the maximum element in an asynchronous sequence of comparable elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較可能要素それらからなるある非同期シーケンスの中の最大の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスの中の最大の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the maximum element in the sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最大の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the maximum element in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最大の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the minimum element in an asynchronous sequence of comparable elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較可能要素それらからなるある非同期シーケンスの中の最小の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスの中の最小の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the minimum element in the sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最小の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the minimum element in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最小の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the next consecutive location after i.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iの後の、以降に続く場所を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the next consecutive position after i.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iの後の、以降に続く位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the non-nil results of mapping the given transformation over this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた変換をこのシーケンス全体にわたってマッピングする非nilの結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the number of UTF-16 code units required for the given code unit sequence when transcoded to UTF-16, and a Boolean value indicating whether the sequence was found to contain only ASCII characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16にコード変換するときに指定されたコードユニットシーケンスに必要とされるUTF-16コードユニットの数を、およびそのシーケンスがASCII文字だけを含むことを発見されたかどうかを指し示すブール値を、返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the number of code units required to encode the given Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラーをエンコードするのに必要とされるコードユニットの数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position immediately after the given index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスの直後の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position immediately before the given index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスの直前の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position in the given UTF-16 view that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたUTF-16ビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position in the given UTF-8 view that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたUTF-8ビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position in the given string that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列の中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position in the given view of Unicode scalars that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラーのビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the previous consecutive location before i.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>i前の、以前に続く場所を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the product of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の積を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と与えられた値の積、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient and remainder of this value divided by the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値で除算されたこの値の商と余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を指定の値で割ることで入手される商、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient of dividing the first value by the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算した商を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を指定の値によって除算する後の余り、それに加えてオーバーフローが除算の間に起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the remainder of dividing the first value by the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算した余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスの要素をこの与えられたクロージャを使って結合する結果を返します、ある可変の初期値を与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of combining the elements of the asynchronous sequence using the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスの要素をこの与えられたクロージャを使って結合する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of combining the elements of the sequence using the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを使って、このシーケンスの要素それらを結合する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of performing a bitwise AND operation on the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位AND演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of performing a bitwise OR operation on the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位OR演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of performing a bitwise XOR operation on the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位XOR演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します、シフト量をその型のもつビット幅にマスクしています、そして結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します、シフト量をマスクしてその型のもつビット幅にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を返します、シフト量をその型のもつビット幅にマスクしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the sum of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の合計を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と与えられた値の合計、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the underlying string from which this Substring was derived.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それからこの下位文字列が引き出された基礎をなす文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns whether the given code unit represents an ASCII scalar</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたコード単位が、あるASCIIスカラーを表すかどうかを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns whether this string is capable of providing access to validly-encoded UTF-8 contents in contiguous memory in O(1) time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列が、有効に符号化されたUTF-8内容に隣接メモリにおいて O(1) 時間でアクセスを提供する能力があるかどうかを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns without performing work if self and source are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>selfとsourceが等しいならば、作業を実行することなしに戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reverses the elements of the collection in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素をその場で逆順にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Right bit shift and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右ビットシフトして代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Right bit shift ignoring overflow and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右ビットシフト、オーバーフローを無視します、そして割り当てます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Right shift operations on negative values “fill in” the high bits with ones instead of zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負値上での右シフト演算は、高ビットを１で「満たします」、ゼロではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Run given operation as asynchronously in its own top-level task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたoperationを非同期なものとしてそれ自身のトップレベルタスクにおいて実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Run given throwing operation as part of a new top-level task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたスローするoperationを新しいトップレベルタスクの一部として実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs body over the content of this string in contiguous memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyを、隣接メモリの中のこの文字列の内容に対して実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs body over the content of this substring in contiguous memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyを、隣接メモリの中のこの下位文字列の内容に対して実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMD Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMD実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMD Vector Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMDベクター型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMD Vectors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMDベクター</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMDStorage Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMDStorage実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalar values representing characters that are normally unprintable or that otherwise require escaping are escaped with a backslash.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>通常は出力できないまたはそうするにはエスケープする必要がある、スカラー値表現の文字は、バックスラッシュでエスケープされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalars are never removed from the Unicode Standard, but the usage of deprecated scalars is strongly discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーは決して「ユニコード標準」から取り除かれません、しかし非推奨のスカラーの使用は強く反対されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalars for which this property is true are frequently, but not always, combining marks or modifiers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してこのプロパティがtrueであるスカラーはしばしば、しかし常にではなく、符号または修飾子と組み合わさっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalars that have default to emoji presentation can be followed by U+FE0E VARIATION SELECTOR-15 to request the text presentation of the scalar instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>emoji表現が初期状態であるスカラーは、U+FE0E VARIATION SELECTOR-15が後に続くことで、そのスカラーのテキスト表現を代わりに要請できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalars with a non-nil numeric type include numbers, fractions, numeric superscripts and subscripts, and circled or otherwise decorated number glyphs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非nilの数値型をもつスカラーは、数字、分数、上付きおよび下付き数字、そして丸またはそれ以外に装飾された数の字体を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalars with this numeric type are often those that represent a decimal digit but would not typically be used to write a base-10 number, such as “④” (U+2463 CIRCLED DIGIT FOUR).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この数値型を持つスカラーは、たいてい10進法桁を表すがしかし概して底10の数を記述するのに使われないものです、例えば “④”（U+2463 CIRCLED DIGIT FOUR）など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scroll to the Coffee Tracker complication, and then click the Digital Crown again to save your changes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Coffee Trackerコンプリケーションまでスクロールしてください、そしてそれからDigital Crownを再びクリックしてあなたの変更を保存してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See Also</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See also: elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照：elements</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Select the complication to modify.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>修正するためにコンプリケーションを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sequence and Collection Protocols</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスおよびコレクションプロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Serialize and deserialize instances of your types with implicit or customized encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のインスタンスを暗黙のまたはカスタマイズされたエンコーディングでシリアライズおよびデシリアライズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sets</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sets and Dictionaries</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合と辞書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Several methods on the CLKComplicationDataSource protocol used to configure the app’s timeline take completion handlers, which you can replace with their async equivalents:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリのもつタイムラインを構成設定するために使われるCLKComplicationDataSourceプロトコル上のいくつかのメソッドは、完了ハンドラをとります、それはあなたがそれらのasync相当物と置き換え可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Shuffles the collection in place, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場で混ぜ合わせます、与えられた生成子を無作為さの出典として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Shuffles the collection in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場で混ぜ合わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Signed Integers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>4に対するキーがないことから、クロージャはnilをその場合には返します、それはcompactMap(_:)がこの変換されたシーケンスから省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices Inherit Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスは意味論を継承します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices Share Indices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスはインデックスを共有します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slicing with an unbounded range is essentially a conversion of a collection instance into its slice type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無境界範囲でスライスすることは、本質的にあるコレクションインスタンスのそれのスライス型への変換です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Solve complex problems and write high-performance, readable code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複雑な問題を解決します、そして高性能の、読みやすいコードを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some Objective-C APIs—like target-action—accept method or property names as parameters, then use those names to dynamically call or access the methods or properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかのObjective-C API — ターゲットアクションのような — は、メソッドまたはプロパティ名を引数として受け入れます、そのときそれらの名前を使って動的にメソッドまたはプロパティに呼び出しまたはアクセスをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some characters that are visible in a string are made up of more than one Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の中に見られるいくつかの文字は、１つ以上のユニコードスカラー値で構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some letterlike scalars used in numeric systems, such as Greek or Latin letters, do not have a non-nil numeric type, in order to prevent programs from incorrectly interpreting them as numbers in non-numeric contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数値システムにおいて使われるいくつかの字のようなスカラー、例えばギリシャまたはラテン文字それらは、非nilの数値型を持ちません、その目的はプログラムが非数値文脈においてそれらを間違って数として解釈するのを防ぐことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some scalars, such as control characters, do not have a value for this property in the Unicode Character Database.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかのスカラー、例えば制御文字などは、このプロパティに対する値を「ユニコード文字データベース」において持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sorting these scalars by their combining classes yields "\u{0041}\u{0316}\u{0301}", so two strings that differ only by the ordering of those scalars would compare as equal:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラーをそれらの結合クラスによってソートすることは、"\u{0041}\u{0316}\u{0301}"を生み出します、それでこれらのスカラーの順番によってのみ異なる２つの文字列は等しいと比較されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sorts the collection in place, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場でソートします、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sorts the collection in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場でソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Spawn, unconditionally, a child task in the group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある子タスクをこのグループの中に、無条件に、生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Special-Use Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特殊用途のコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Special-Use Numeric Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特殊用途の数値型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically, dropping a detached tasks Task does not automatically cancel given task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、分離されたタスクTaskを放り出すことは、与えられたタスクを自動的に取り消しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically, dropping a detached tasks Task.Handle does not automatically cancel given task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、分離されたタスクTask.Handleを放り出すことは、与えられたタスクを自動的に取り消しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically, it does not validate that a high-surrogate code unit precedes x.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>具体的には、それは高位サロゲートコード単位がxの前にくることを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically, it does not validate that a low-surrogate code unit follows x.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>具体的には、それは低位サロゲートコード単位がxの後にくることを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically, scalars have this numeric type if they occupy a contiguous range of code points representing numeric values 0...9.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>具体的に、スカラーは、もしそれらが数値0...9を表しているコード点の隣接範囲を占有するならば、この数値型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Splitting a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を分割する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Standard Library</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts a new scope in which a dynamic number of throwing tasks can be created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいタスクグループを開始します、それにおいて動的な数のスローするタスクが作成されることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts a new task group which provides a scope in which a dynamic number of tasks may be created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいタスクグループを開始します、それはあるスコープを提供しそれにおいて動的な数のタスクが作成されるかもしれないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts or continues decoding a UTF-16 sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるUTF-16シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts or continues decoding a UTF-32 sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるUTF-32シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts or continues decoding a UTF-8 sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるUTF-8シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts or continues decoding a code unit sequence into Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コード単位シーケンスをユニコードスカラー値へデコードすることを開始するまたは継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 16 integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 32 integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 64 integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of eight integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>８整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of four integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>4整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of two integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Store and organize data using arrays, dictionaries, sets, and other data structures.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列、辞書、集合、および他のデータ構造を使ってデータを格納および組織化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Store your custom types in sets or use them as dictionary keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いろいろなあなたのあつらえの型を集合に格納するまたはそれらを辞書キーとして使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores a value’s bytes into the buffer pointer’s raw memory at the specified byte offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値のもつバイトをバッファポインタのもつ生のメモリに指定されたバイトオフセットで格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the given value’s bytes into raw memory at the specified offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値のもつバイトを生のメモリへ指定されたオフセットで格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of performing a bitwise AND operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位AND演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of performing a bitwise OR operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位OR演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of performing a bitwise XOR operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位XOR演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of shifting a value’s binary representation the specified number of digits to the left in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of shifting a value’s binary representation the specified number of digits to the right in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storing an unsafe task handle doesn’t have an impact on the task’s actual life cycle, and the behavior of accessing an unsafe task handle outside of the withUnsafeCurrentTask(body:) method’s closure isn’t defined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非安全タスクハンドルを格納することは、タスクのもつ実際のライフサイクルに影響を与えません、そして非安全タスクハンドルにwithUnsafeCurrentTask(body:)メソッドのもつクロージャの外側でアクセスすることの挙動は、未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storing substrings may, therefore, prolong the lifetime of string data that is no longer otherwise accessible, which can appear to be memory leakage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列の格納は、したがって、それ以外ではもはやアクセスできない文字列データのライフサイクルを延長するでしょう、それはメモリリークとして現れかねません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Streams</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストリーム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strides</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストライド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String Representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String buffers use an exponential growth strategy that makes appending to a string a constant time operation when averaged over many append operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列バッファは指数成長戦略を使います、それはある文字列へ追加することを、多くの追加演算を平均した時に定数時間演算にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String interpolations give you an easy way to build a string from multiple pieces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列補間は、多様な断片からある文字列を組み立てる簡単な方法をあなたに提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>StringProtocol Implementations </seg>
      </tuv>
      <tuv lang="ja">
        <seg>Stringプロトコル実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings always have value semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列は常に値意味論を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings and Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列と文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings and Text</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列とテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings and their views share indices, so you can access the UTF-8 view of the name string using the same firstSpace index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列とそれのビューはインデックスを共有します、それであなたはname文字列のUTF-8ビューにアクセスすることが同じfirstSpaceインデックスを使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings in Swift are Unicode correct and locale insensitive, and are designed to be efficient.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでの文字列は、ユニコードに正確でロケールに影響されず、そして効率的であるように設計されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (&lt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列はSwift ではComparableプロトコルに準拠します、それでこれらの名前はより小さい演算子（&lt;）によって昇順にソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subscripts</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Substrings present the same interface as strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列は、文字列と同じインターフェイスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtract</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtract and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtract with overflow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー減算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtract with overflow and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算、オーバーフローと割り当てとともに</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts one value from another and produces their difference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値をもう一方から減じて、それらの差を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の値を最初のものから減じてその差を左手側の変数の中に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の値を最初のものから減じて、その差を左手側の変数の中に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Such letters are stored in text ahead of syllable-initial consonants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのような文字は、テキストにおいて音節リテラルの子音の前に格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Such tasks will be created yet immediately cancelled, allowing the tasks to perform some short-cut implementation, if they are responsive to cancellation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのようなタスクは作成されるけれども直ぐに取り消されるでしょう、タスクそれらに何らかのショートカット実装を実行させて、もしそれらが取り消しに反応するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supporting Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補助関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supporting Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>支援を行う型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspending Execution</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遂行を一時停止する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task and allows other tasks to execute.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを一時停止して他のタスクに遂行を許可します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task for at least the given duration in nanoseconds, unless the task is cancelled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを少なくともこのナノ秒で与えられた期間に対して一時停止します、そのタスクが取り消されない限り。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task for at least the given duration in nanoseconds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを少なくともこのナノ秒で与えられた期間に対して一時停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task, then calls the given closure with a checked continuation for the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを中断します、それからこの与えられたクロージャを、現在のタスクに対する検査済み継続で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task, then calls the given closure with a checked throwing continuation for the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを中断します、それからこの与えられたクロージャを、現在のタスクに対する検査済みスロー継続で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task, then calls the given closure with an unsafe continuation for the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを中断します、それからこの与えられたクロージャを、現在のタスクに対する安全でない継続で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task, then calls the given closure with an unsafe throwing continuation for the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを中断します、それからこの与えられたクロージャを、現在のタスクに対する安全でないスロー継続で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift Standard Library</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift Standard Library Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリ関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift concurrency provides a standard set of language tools and techniques for concurrent programming.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift並行性は、標準的な一揃いの言語ツールと技法を並行性プログラミングのために提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift converts an expression like "The time is \(time)." as MyString into a series of statements similar to:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、"The time is \(time)." as MyStringのような式を、次のような一連の文に変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift passes this initializer a pair of arguments specifying the size of the literal segments and the number of interpolated segments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftはこのイニシャライザに、リテラル文節のサイズと補間文節の数を指定する一対の引数を渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift streamlines interoperation with C string APIs by letting you pass a String instance to a function as an Int8 or UInt8 pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、あなたにStringインスタンスを関数へInt8またはUInt8ポインタとして渡させることによって、C文字列APIとの相互作用を能率化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift’s String type conforms to TextOutputStream already, so you can capture the output from print(_:to:) and dump(_:to:) in a string instead of logging it to standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftのString型は、すでにTextOutputStreamに準拠します、なのであなたはprint(_:to:)およびdump(_:to:)からの出力を文字列の中に捕えることが、それを標準出力に記録する代わりに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swipe left until the configuration screen highlights the complications.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構成画面がコンプリケーションをハイライト表示するまで、左にスワイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>TODO: Define the details of task priority; It is likely to be a concept similar to Darwin Dispatch’s QoS; bearing in mind that priority is not as much of a thing on other platforms (i.e. server side Linux systems).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべきこと：タスク優先度の詳細を定義してください；それは Darwin Dispatch の QoS に似た概念になりそうに思われる；優先度は他のプラットホーム（すなわち、サーバーサイドLinuxシステムそれら）上のものと同様でないことに留意する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tap the Coffee Tracker complication to go back to the app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Coffee Trackerコンプリケーションをタップしてアプリに戻ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task Cancellation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスク取り消し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task local values cannot be set directly and must instead be bound using the scoped $traceID.withValue() { ... } operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカル値は、直接にsetされることが出来ません、そして代わりにスコープ付き$traceID.withValue() { ... }演算を使ってバインドされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task local values of optional types default to nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナル型のタスクローカル値は、省略時にはnilになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task locals must be declared as static properties (or global properties, once property wrappers support these), like this:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカルそれらは、静的プロパティとして宣言されなければなりません（またはグローバルプロパティ、一旦プロパティラッパーがそれらをサポートするならば）、このように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task priority may inform decisions an Executor makes about how and when to schedule tasks submitted to it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスク優先度は、Executorがそれへと提出されるタスクそれらを、どのようにそしていつ予定するかについてする決定を告知するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task-Local Storage</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカルなストレージ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task-local declarations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクローカルな宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tasks</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまなタスク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tasks include a shared mechanism for indicating cancellation, but not a shared implementation for how to handle cancellation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクは、ある共有された仕組みを取り消しを指し示すために含みます、しかしどのように取り消しを扱うかのための共有された実装ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ternary conditional</seg>
      </tuv>
      <tuv lang="ja">
        <seg>三項条件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Testing</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Text Output</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テキスト出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That argument list can include multiple arguments and argument labels.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数リストは、複数の引数そして引数ラベルを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, bitPattern % MemoryLayout&lt;Pointee&gt;.alignment must be 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、bitPattern % MemoryLayout&lt;Pointee&gt;.alignmentは、0でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, for any elements a, b, and c, the following conditions must hold:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、何らかの要素a、b、そしてcに対して、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, for any elements a, b, and c, the following conditions must hold:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、何らかの要素a、b、そしてcに対して、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, if source is negative, the result is padded with ones; otherwise, the result is padded with zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、sourceが負ならば、結果は１で詰め物をされます；そうでなければ、結果はゼロで詰め物をされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, if a Slice instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、Sliceインスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &amp;&lt;&lt;= operator performs a masking shift, where the value used as rhs is masked to produce a value in the range 0..&lt;lhs.bitWidth.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&amp;&lt;&lt;=演算子は、マスクするシフトを実行します、そこにおいてrhsとして使われる値はマスクされることで範囲0..&lt;lhs.bitWidthの中の値を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &amp;&gt;&gt;= operator performs a masking shift, where the value passed as rhs is masked to produce a value in the range 0..&lt;lhs.bitWidth.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&amp;&gt;&gt;=演算子は、マスクするシフトを実行します、そこにおいてrhsとして渡される値はマスクされることで範囲0..&lt;lhs.bitWidthの中の値を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;&lt; operator performs a smart shift, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;&lt;演算子は、ある賢いシフトを実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &gt;&gt; operator performs a smart shift, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&gt;&gt;演算子は、ある賢いシフトを実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &gt;&gt;= operator performs a smart shift, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&gt;&gt;=演算子は、ある賢いシフトを実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ASCIILogger type’s write(_:) method processes its string input by escaping each Unicode scalar, with the exception of "\n" line returns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ASCIILogger型のもつwrite(_:)メソッドは、それの文字列入力を各ユニコードスカラーをエスケープすることによって処理します、"\n"行復帰を除いては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The AdditionPrecedence group, which is left associative, contains the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AdditionPrecedenceグループは、それは左結合です、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The AssignmentPrecedence group, which is right associative, contain the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AssignmentPrecedenceグループは、それは右結合です、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The BitwiseShiftPrecedence group, which isn’t associative, contains the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BitwiseShiftPrecedenceグループは、それは結合性はありません、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CanonicalCombiningClass type conforms to RawRepresentable with a raw value of type UInt8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CanonicalCombiningClass型は、RawRepresentableに型UInt8の生の値で準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CastingPrecedence group, which is left associative, contains the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CastingPrecedenceグループは、それは左結合です、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CoffeeData class implements ObservableObject and has an @Published property to feed the SwiftUI views.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CoffeeDataクラスは、ObservableObjectを実装して、そしてSwiftUIビューに供給する@Publishedプロパティを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ComparisonPrecedence group, which isn’t associative, contains the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ComparisonPrecedenceグループは、それは結合性はありません、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Date type can now be used with the stride(from:to:by:) and stride(from:through:by:) functions and as the bounds of an iterable range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Date型は、今ではstride(from:to:by:)およびstride(from:through:by:)関数でそして反復可能な範囲の境界として使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The HealthKitController type contains several calls to the HealthKit SDK.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>HealthKitController型は、HealthKit SDKへのいくつかの呼び出しを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The LogicalConjunctionPrecedence group, which is left associative, contains the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>LogicalConjunctionPrecedenceグループは、それは左結合です、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The LogicalDisjunctionPrecedence group, which is left associative, contains the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>LogicalDisjunctionPrecedenceグループは、それは左結合です、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The MultiplicationPrecedence group, which is left associative, contains the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>MultiplicationPrecedenceグループは、それは左結合です、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The NilCoalescingPrecedence group, which is right associative, contains the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NilCoalescingPrecedenceグループは、それは右結合です、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The RangeFormationPrecedence group, which isn’t associative, contains the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>RangeFormationPrecedenceグループは、それは結合性はありません、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The SIMDStorage protocol defines a storage layout and provides elementwise accesses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMDStorageプロトコルは、ストレージレイアウトを定義します、そして要素単位のアクセスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Stride type for Date is Int, inferred from the parameter and return types of advanced(by:) and distance(to:):</seg>
      </tuv>
      <tuv lang="ja">
        <seg>DateのためのStride型はIntです、パラメータと戻り値のadvanced(by:)とdistance(to:)から推論されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Strideable protocol provides default implementations for the equal-to (==) and less-than (&lt;) operators that depend on the Stride type’s implementations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Strideableプロトコルは、省略時の実装を同等（==）およびより小さい（&lt;）演算子に対して、Stride型のもつ実装に依存して提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The StringInterpolation type is responsible for collecting the segments passed to its appendLiteral(_:) and appendInterpolation methods and assembling them into a whole, converting as necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StringInterpolation型は、それのappendLiteral(_:)とappendInterpolationメソッドに渡される文節を集めること、そしてそれらをある全体へと、必要に応じて変換して、組み立てることに責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The StringLiteralType of an interpolation type must match the StringLiteralType of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補間型のStringLiteralTypeは、準拠している型のStringLiteralTypeと合致しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The TernaryPrecedence group, which is right associative, contains the following infix operators:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>TernaryPrecedenceグループは、それは右結合です、以下の接中辞演算子を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UTF16View in which to find the new position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それにおいて新しい位置を見つけるUTF16View。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UTF8View in which to find the new position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それにおいて新しい位置を見つけるUTF8View。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode.Scalar type, representing a single Unicode scalar value, is the element type of a string’s unicodeScalars collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一のユニコードスカラー値を表している、Unicode.Scalar型は、ある文字列のもつunicodeScalarsコレクションの要素型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UnicodeCodec protocol declares methods that decode code unit sequences into Unicode scalar values and encode Unicode scalar values into code unit sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnicodeCodecプロトコルは、コード単位シーケンスをユニコードスカラー値へデコードする、ユニコードスカラー値をコード単位シーケンスへエンコードするメソッドを宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UnicodeScalarView in which to find the new position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それにおいて新しい位置を見つけるUnicodeScalarView。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UnsafeMutableRawPointer type provides no automated memory management, no type safety, and no alignment guarantees.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableRawPointer型は、自動メモリ管理、型安全、そしてアライメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UnsafeRawPointer type provides no automated memory management, no type safety, and no alignment guarantees.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeRawPointer型は、自動メモリ管理、型安全、そしてアライメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The YES macro from Objective-C is bridged to Swift as an ObjCBool value of true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-CからのYESマクロは、trueのObjCBool値としてSwiftにブリッジされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The add function will never (re-)throw errors from the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>add関数は、決してエラーをoperationから（再）スローしないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The adjective constant is created by calling this initializer with a slice of the picnicGuest.unicodeScalars view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>adjective定数は、このイニシャライザをpicnicGuest.unicodeScalarsビューのスライスとともに呼び出すことによって作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The appendInterpolation methods in your custom type must be mutating instance methods that return Void.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえの型におけるappendInterpolationメソッドは、Voidを返す変更インスタンスメソッドでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The async function should be used when creating asynchronous work that operates on behalf of the synchronous function that calls it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>async関数は、非同期作業を作成する時に使われるべきです、それはそれを呼び出す同期関数の代わりに作動するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The cafe string is a collection of the nine characters that are visible when the string is displayed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>cafe文字列は、９つの文字からなる１つのコレクションで、その文字列が表示される時に見られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The endIndex property of an UnsafeBufferPointer instance is always identical to count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeBufferPointerインスタンスのendIndexプロパティは、常にcountと同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The endIndex property of an UnsafeMutableBufferPointer instance is always identical to count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableBufferPointerインスタンスのendIndexプロパティは、常にcountと同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The endIndex property of an UnsafeMutableRawBufferPointer instance is always identical to count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableRawBufferPointerインスタンスのendIndexプロパティは、常にcountと同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The endIndex property of an UnsafeRawBufferPointer instance is always identical to count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeRawBufferPointerインスタンスのendIndexプロパティは、常にcountと同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The firstName constant is an instance of the Substring type—a type that represents substrings of a string while sharing the original string’s storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>firstName定数は、Substring型 — ある文字列の下位文字列をオリジナル文字列のもつストレージを共有している間に表す型のインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The high component of the value carries the sign, if the type is signed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値のhigh構成部分は符号を運びます、その型が符号付きならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The nameAlias property is provided to issue corrections if a name was issued erroneously.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nameAliasプロパティは、ある名前が不正確に発行されたならば、訂正を発行するために提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nextPartialResultクロージャは、initialResultへと初期化された蓄積値とそのシーケンスの各要素を使って連続して遂行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nextPartialResultクロージャは、initialResultへと初期化された蓄積値とシーケンスの各要素とともに連続して呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nextPartialResultクロージャが、initialResult—この場合では0—そしてnumbersの最初の要素とともに呼び出されて、その合計：1を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The nextPartialResult closure receives initialResult the first time the closure executes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nextPartialResultクロージャは、initialResultを、そのクロージャが遂行される最初の時に受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The nextPartialResult closure receives initialResult the first time the closure runs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nextPartialResultは、initialResultを、クロージャが動作する最初の時に受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The numbers array is now arranged in two partitions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>numbers配列は今や２つの区分に整頓されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The startIndex property of an UnsafeBufferPointer instance is always zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeBufferPointerインスタンスのstartIndexプロパティは、常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The startIndex property of an UnsafeMutableBufferPointer instance is always zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableBufferPointerインスタンスのstartIndexプロパティは、常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The unicodeScalars view’s elements comprise each Unicode scalar value in the cafe string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>unicodeScalarsビューのもつ各要素は、cafe文字列の中の各ユニコードスカラー値からなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>updateAccumulatingResultクロージャは、initialResultへと初期化された可変の蓄積値とシーケンスの各要素とともに連続して呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key "a".</seg>
      </tuv>
      <tuv lang="ja">
        <seg>updateAccumulatingResultクロージャが、初期蓄積値—この場合では[:]—そしてlettersの最初の文字とともに呼び出されて、1をキー"a"に対して設定することで蓄積値を修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>flatMap(_:)メソッドは、結果のシーケンスのシーケンスを単一のAsyncSequenceへと “平坦にします”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The String type bridges with the Objective-C class NSString and offers interoperability with C functions that works with strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>String型は、Objective-CクラスNSStringとブリッジします、そしてC関数で文字列を扱うものと相互運用を提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Substring type presents the same interface as String, so you can avoid or defer any copying of the string’s contents.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Substring型は、Stringと同じインターフェイスを提供します、それであなたは文字列の内容の何らかのコピーを避けるまたは延期できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The apple string contains a single emoji character made up of a surrogate pair when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>apple文字列は、UTF-16でエンコードされる場合あるサロゲートペアから作り上げられる単一のemoji文字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The moveInitializeMemory(as:from:count:) method automatically performs a forward or backward copy of all instances from the source region to their destination.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>moveInitializeMemory(as:from:count:)メソッドは、すべてのインスタンスの前方および後方へのコピーをソース領域からそれらの行き先へ自動的に実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The strncmp function takes two const char* pointers and an integer specifying the number of characters to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>strncmp関数は、２つのconst char*ポインタと、比較する文字数を指定している整数を取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The removeLast() method must be used only on a nonempty collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>removeLast()メソッドは、空でないコレクションでのみ使われるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ..&lt; operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>..&lt;演算子は上方の境界を含まないある範囲を作成します、それでそれは常にendIndexと使うのに安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The high and low properties of the result value represent 2000 when concatenated to form a double-width integer; that is, using result.high as the high byte and result.low as the low byte of a UInt16 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>result値のhighおよびlowプロパティは、二倍幅整数に成形するために連結される時2000を表します；すなわち、UInt16インスタンスの高バイトとしてresult.highをそして低バイトとしてresult.lowを使って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The nameAlias property then contains the corrected name.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nameAliasプロパティはその後、訂正された名前を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>allSatisfy(_:)メソッドは、シーケンスによって生み出されたすべての要素が10より小さいかどうか見るために調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The contains(_:) method checks to see whether the sequence produces the value 5:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>contains(_:)メソッドは、シーケンスが値5を生み出すかどうか見るために調べます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The contains(where:) method checks to see whether the sequence produces a value divisible by 3:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>contains(where:)メソッドは、シーケンスが3で割り切れる値を生み出すかどうか見るために調べます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drop(while:)メソッドは、修正されたシーケンスが、それが3によって割り切れるものに出くわすまで受け取った値を無視することを引き起こします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dropFirst(_:) method causes the modified sequence to ignore the values 0 through 4, and instead emit 5 through 10:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>dropFirst(_:)メソッドは、その修正されたシーケンスに値0から4を無視させます、そして代わりに5から10を放出させます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>filter(_:)メソッドは、trueを偶数値に対してそしてfalseを奇数値に対して返します、それによって奇数値を取り除いています：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>first(where:)メソッドは、2と3の両方で整然と割り切れるこのシーケンスの最初のメンバーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The high and low compnents of the result value represent -1920 when concatenated to form a double-width integer; that is, using result.high as the high byte and result.low as the low byte of an Int16 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>result値のhighとlow構成要素は、２倍幅整数に成形するために連結される場合-1920を表します；すなわち、result.highを高バイトとしてresult.lowを低バイトとしてInt16インスタンスに使って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The max() method returns the max value of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>max()メソッドは、シーケンスの最大値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The min() method returns the minimum value of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>min()メソッドは、シーケンスの最小値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The prefix(_:) method causes the modified sequence to pass through the first six values, then end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefix(_:)メソッドは、その修正されたシーケンスに最初の６つの値をずっと渡させて、それから終わらせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefix(while:)メソッドは、修正されたシーケンスが値それらを、それらが2と3によって割り切れない限り通過させるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The reduce(_:_:) method sums the values received from the asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>reduce(_:_:)メソッドは、非同期シーケンスから受け取った値それらを合計します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CFArrayCreateMutable(_:_:_:) function takes a CFArrayCallBacks structure, which is initialized with function pointer callbacks:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CFArrayCreateMutable(_:_:_:)関数は、ひとつのCFArrayCallBacks構造体を取ります、それは関数ポインタコールバックで初期化されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CoffeeDataStore actor saves the data on a background thread.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CoffeeDataStoreアクターは、データをあるバックグラウンドスレッド上で保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The base property of the slice is equal to singleDigits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスライスのbaseプロパティは、singleDigitsに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The #keyPath string expression accepts chained method or property references.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>#keyPath文字列式は、数珠つなぎにされたメソッドまたはプロパティ参照を受け入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ASCII representation of a number in the radix passed as radix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>radixとして渡される基数におけるある数のASCII表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ASCII representation of a number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある数のASCII表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘_Bool’ and C++ ‘bool’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cの「_Bool」およびC++の「bool」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘_Float16’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「_Float16」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘char’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cの「char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘double’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「double」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘float’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「float」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘int’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「int」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘long long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「long long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘short’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「short」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘signed char’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「signed char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned char’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned int’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned int」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned long long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned long long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned short’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned short」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C++ ‘wchar_t’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C++「wchar_t」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C++11 ‘char16_t’ type, which has UTF-16 encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C++11「char16_t」型、それはUTF-16エンコーディングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C++11 ‘char32_t’ type, which has UTF-32 encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C++11「char32_t」型、それはUTF-32エンコーディングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Fitzpatrick skin types are examples of emoji modifiers; they change the appearance of the preceding emoji base (that is, a scalar for which isEmojiModifierBase is true) by rendering it with a different skin tone.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Fitzpatrickスキン型はemoji修飾子の例です；それらは先行するemoji基盤（すなわち、それに対してisEmojiModifierBaseがtrueであるスカラー）の外観を、それを異なるスキントーンで描出することによって変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sendable protocol indicates that value of the given type can be safely used in concurrent code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Sendableプロトコルは、与えられた型の値が並行性コードにおいて安全に使用できることを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Swift standard library defines a base layer of functionality for writing Swift programs, including:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリは、Swiftプログラムを記述するための機能性の基盤層を定義していて、以下を含んでいます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Swift standard library’s text-related types, String, Character, and Unicode.Scalar, all conform to TextOutputStreamable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリのテキスト関連の型、String、Character、そしてUnicode.Scalarは、すべてTextOutputStreamableに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UTF-16 code unit offset corresponding to this Index</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに対応しているUTFー16コード単位オフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UTF-16 code units of a string’s utf16 view match the elements accessed through indexed NSString APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列のもつutf16ビューのUTF-16コード単位は、NSString APIでインデックスを使われることでアクセスされる要素と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode code point to use for the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのために使うユニコードコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode encoding of input.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>inputのユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode encoding of the data referenced by cString.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>cStringによって参照されるデータのユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode scalar value "\u{301}" modifies the preceding character to include an accent, so "e\u{301}" has the same canonical representation as the single Unicode scalar value "é".</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値"\u{301}"は、先行する文字を修飾してアクセントを含めます、それで"e\u{301}"は単一のユニコードスカラー値"é"と同じ正準表現を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode scalar value of A is 65, which is small enough to fit in a single code unit in both UTF-16 and UTF-8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Aのユニコードスカラー値は65です、それはUTF-16およびUTF-8両方において単一のコード単位の中にぴったり収まるにの十分に小さいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode scalar value to encode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコードするあるユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode-safe comparison matches Unicode extended grapheme clusters rather than the code points used to compose them.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード安全比較は、ユニコード拡張書記素クラスタにマッチします、それらを組み立てるのに使われるコード点ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode-safe comparison matches Unicode scalar values rather than the code points used to compose them.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード安全での比較は、ユニコードスカラー値を比べます、それらを組み立てるのに使われるコード点ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UnsafeSendable protocol indicates that value of the given type can be safely used in concurrent code, but disables some safety checking at the conformance site.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeSendableプロトコルは、与えられた型の値が並行性コードにおいて安全に使用できる、しかしいくつかの安全検査を適応場所で作動しなくすることを指し示します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The accessed slice uses the same indices for the same elements as the original buffer uses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスされるスライス（断片）は、同じ要素に対して、元のバッファが使うのと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The accessed slice uses the same indices for the same elements as the original collection uses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスされるスライス（切り取り）は、同じ要素に対して元のコレクションが使うのと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The accessed slice uses the same indices for the same elements as the original collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスされるスライス（切り取り）は、同じ要素に対して元のコレクションと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The addition operator (+) calculates the sum of its two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算演算子（+）は、それの２つの引数の合計を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The address of that buffer is passed to the callee, and on return, the value in the buffer is loaded, retained, and reassigned into the operand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのバッファのアドレスは呼び出される側に渡されます、そして戻る時に、バッファの値はロードされ、保持され、演算数に再割り当てされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The address of the memory that starts the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリのアドレス、それはバッファを始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The address passed as bitPattern must have the correct alignment for the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bitPatternとして渡されるアドレスは、ポインタの持つPointee型に対して整合状態でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to create random values may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為値を作成するために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to select a random element may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある無作為な要素を選択するために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to shuffle a collection may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションをシャッフルするために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to shuffle a sequence may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスをシャッフルするために使われるアルゴリズムは、将来のSwiftバージョンで変更するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The alignment of the new region of allocated memory, in bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートされたメモリの新しい領域のアラインメント、バイトで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The allocated memory is not bound to any specific type and must be bound before performing any typed operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートされたメモリは、何ら特定の型に束縛されません、そして何らかの型付き演算を実行する前に束縛されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The amount of memory to allocate, counted in instances of Element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートするメモリの総量、Elementのインスタンスで数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The amount of memory to allocate, counted in instances of Pointee.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートするメモリの総量、Pointeeのインスタンスで数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The amount of memory to bind to type T, counted as instances of T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型Tへと束縛するメモリの量、Tのインスタンスとして数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The approximate size of all literal segments combined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結合された全てのリテラル文節のおおよそのサイズ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The array to append to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加先の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The base state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基底状態。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The base to use for the string representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列表現のために使う底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The basic unit of encoding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号化の基本単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The behavior of accessing memory as a type unrelated to its bound type is undefined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリにそれの束縛型と関係ない型でアクセスすることの挙動は未定義です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The big-endian representation of this integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のビッグエンディアン表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a UInt16 instance is 16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt16インスタンスのビット幅は16です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a UInt32 instance is 32.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt32インスタンスのビット幅は32です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a UInt64 instance is 64.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt64インスタンスのビット幅は64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a UInt instance is 32 on 32-bit platforms and 64 on 64-bit platforms.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UIntインスタンスのビット幅は、32ビットプラットホーム上では32そして64ビットプラットホーム上では64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of an UInt8 instance is 8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UInt8インスタンスのビット幅は８です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bitwise NOT operator (~) is a prefix operator that returns a value in which all the bits of its argument are flipped: Bits that are 1 in the argument are 0 in the result, and bits that are 0 in the argument are 1 in the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位のNOT演算子（~）は前置演算子で、それの引数のビットすべてがひっくり返されるある値を返します：引数において1であるビットは結果において0になります、そして引数において0であるビットは結果において1になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the range must be valid indices of the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の境界は、このバッファの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the range must be valid indices of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の境界は、コレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the range must be valid indices of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の境界は、文字列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the range must be valid indices of the view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の境界は、ビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer argument contains the same number of complete instances of T as the original&lt;br/&gt;buffer’s count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファ引数は、オリジナルのバッファのもつcountと同じ数の完全なTのインスタンスを含まなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer must contain sufficient memory to accommodate source.underestimatedCount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファは、source.underestimatedCountを収容するのに十分なメモリを含んでいなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer must contain sufficient memory to accommodate source.underestimatedCount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファは、source.underestimatedCountを収容するのに十分なメモリを含んでいなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer pointer plus offset must be properly aligned for accessing an instance of type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>offsetを加えたバッファポインタは、型Tのインスタンスにアクセスするために適切にアラインされる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer slice to rebase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>再構築されるバッファスライス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになるバッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer’s memory must be initialized or the buffer’s Element must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつメモリは初期化されなければなりません、またバッファのもつElementは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer’s type T must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつ型Tは、自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bytes for a are copied from the first four bytes of someBytes, and the bytes for b are copied from the next four bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>aに対するバイトは、someBytesの最初の４バイトからコピーされます、そしてbに対するバイトは次の４バイトからコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The canonical combining class of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーの正準結合クラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The case-sensitive comparison will only match strings whose corresponding characters have the same case.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>大文字小文字考慮での比較は、対応する文字の大文字小文字が同じである文字列同士のみが一致することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The character at that position is the composed "é" character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その位置での文字は、合成済"é"文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The character that was removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除された文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The character to append to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列に追加されることになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The character to convert to a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列へと変換されることになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The character to repeat.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返すことになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The classification of a scalar used in the Canonical Ordering Algorithm defined by the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「Unicode標準」によって定義される「正準順序アルゴリズム」において使われるあるスカラーのクラス分け。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure is called again repeatedly with the previous call’s return value and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャは、前の呼び出しの戻り値とシーケンスの各要素とともに繰り返して再び呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure is called again repeatedly with the updated accumulating value and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャは、更新された蓄積値とシーケンスの各要素とともに繰り返して再び呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>compactMap(_:)メソッドに提供されたクロージャは、各Intをとり、そして対応しているStringをromanNumeralDict辞書から捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>map(_:)メソッドに提供されたクロージャは、各Intをとり、そして対応しているStringをromanNumeralDict辞書から捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure should return the number of initialized code units, or 0 if it couldn’t initialize the buffer (for example if the requested capacity was too small).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャは、初期化されたコード単位の数を返すべきです、または０をもしそれがバッファを初期化することができなかったならば（例えば要請された収容能力が小さすぎたならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure’s buffer argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャのもつバッファ引数は、このクロージャの実行の間に対してだけ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure’s pointer argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャのもつポインタ引数は、このクロージャの実行の間に対してだけ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The code above stores the value 0xFFFF_FFFF into the four newly allocated bytes, and then loads the first byte as a UInt8 instance and the third and fourth bytes as a UInt16 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上のコードは値0xFFFF_FFFFを４つの新しいアロケート済みバイトに格納して、それから最初のバイトをUInt8インスタンスとして、そして３番目と４番目のバイトをUInt16インスタンスとしてロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The code point to use for the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのために使うコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The code units of that buffer match the code units in the string’s utf8 view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのコード単位は、文字列のもつutf8ビューでのコード単位と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection being appended to allocates any additional necessary storage to hold the new elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションは追加されることによって、新しい要素を保有するために何らかの追加的に必要なストレージを割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection must not be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションは空であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection to create a view into.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してビューが作成されることになるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The combining classes of these scalars have the numeric values 0, 230, and 220, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラーの結合クラスは、数値 0、230、そして220をそれぞれ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The comparison is both case sensitive and Unicode safe.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較は、大文字小文字考慮のみならずユニコード安全でもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The components used for hashing must be the same as the components compared in your type’s == operator implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ化に使用される構成要素は、あなたの型のもつ==演算子実装において比較される構成要素と同じでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The contents of the interpolation’s parentheses are treated as the call’s argument list.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補間のもつ丸括弧の内容は、その呼び出しの引数リストとして扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The conversion of p to a string in the assignment to s uses the Point type’s debugDescription property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>pの文字列への変換はsへの代入において、Point型のもつdebugDescriptionプロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The conversion of p to a string in the assignment to s uses the Point type’s description property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sへの代入におけるpの文字列への変換は、Point型のもつdescriptionプロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The corresponding value of the raw type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この生の型の対応している値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The current decoding index of the container (i.e. the index of the next element to be decoded.) Incremented after every successful decode call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコンテナの現在のデコーディングインデックス（すなわちデコードされることになる、次の要素のインデックス）。すべての成功したデコード呼び出しの後に増やされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The current task’s priority.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクのもつ優先度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The custom mirror for this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのためのあつらえのミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The decoder to read data from.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それからデータを読み出すデコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default cancellation thrown when a task is cancelled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるタスクが取り消される時にスローされる省略時の取り消し。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default implementation returns 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の実装は、０を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is 10.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時は10。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態はfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default separator is an empty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の分離子は空の文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained Boolean literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブールリテラルである他は別途制約されない省略時用の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained Unicode extended grapheme cluster literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されないユニコード拡張書記素クラスタリテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained floating-point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されない浮動小数点リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されない整数リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されない文字列リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained unicode scalar literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されないユニコードスカラーリテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値はfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is Int.max.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値はInt.maxです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は、trueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は、trueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は、trueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is returned whenever the task-local is read from a context which either: has no task available to read the value from (e.g. a synchronous function, called without any asynchronous function in its call stack),</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は、タスクローカル値がこのどちらかの文脈で読み出される時はいつでも返されます：値をそれから読み出すのに利用可能なタスクがひとつもない（たとえば、それの呼び出しスタックの中にどんな非同期関数もなしに呼び出されるある同期関数）、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The deinitialized memory can be reinitialized with values of the same type, bound to a new type, or deallocated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デイニシャライズされたメモリは、同じ型の値で再初期化する、新しい型に束縛する、またはデアロケートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The destination memory must be uninitialized or the buffer’s Element must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行き先のメモリは未初期化でなければなりません、またポインタのもつElementは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The destination memory must be uninitialized or the pointer’s Pointee must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行き先のメモリは未初期化でなければなりません、またポインタのもつPointeeは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference between these states can be distinguished by checking isAtEnd.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの状態の間の差は、isAtEnd.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference needed to produce the receiver’s state from the parameter’s state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>レシーバのもつ状態をパラメータのもつ状態から生成するのに必要とされる差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference needed to produce this collection’s ordered elements from the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつ順番付けられた要素をこの与えられたコレクションから生成するのに必要とされる差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の差は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference to be applied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>適用されることになる差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance between start and end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>startとendの隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance from this pointer to end, in strides of the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタからendまでの隔たり、ポインタのもつPointee型のストライドで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance from this value to other.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値からotherまでの隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance to advance this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を前進させる距離。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance to offset i.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iを補う間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The earliest version of the Unicode Standard in which the scalar was assigned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それにおいてこのスカラーが割り当てられた「ユニコード標準」の最も時期の早いバージョン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element that should be split upon.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それで分離されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to append to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この要素をコレクションへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to find in the asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この要素を非同期シーケンスの中で見つけ出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to find in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスにおいて見つける要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to repeat.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the utf16 view are the code units for the string when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>utf16ビューの要素は、UTF-16で符号化される時の文字列に対するコード単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the utf8 view are the code units for the string when encoded in UTF-8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>utf8ビューの要素は、UTF-8で符号化される時の文字列に対するコード単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the index vector are wrapped modulo the count of elements in this vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスベクターの要素は、このベクターの中の要素の数によるモジュロでラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のそれぞれの要素は遅延に計算されます、毎回それらは、基盤となる要素上でtransform関数を呼び出すことによって読み出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the resulting array are ordered according to the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の配列の要素は、与えられた述部にしたがって並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the sequence are computed lazily and the sequence may potentially be infinite in length.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスに属する要素らは、遅延に計算されます、そしてこのシーケンスの長さは潜在的に無限大です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements returned by this iterator appear in the order that the tasks completed, not in the order that those tasks were added to the task group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータによって返される要素それらは、タスクそれらが完了した順番に現れます、それらタスクがタスクグループに加えられた順番にではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements returned from this method appear in the order that the tasks completed, not in the order that those tasks were added to the task group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドから返される要素それらは、タスクそれらが完了した順番に現れます、それらタスクがタスクグループに加えられた順番にではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements to append to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの要素をコレクションへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements to use in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターにおいて使うことになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The encoder to write data to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データを書き込むエンコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The encoding in which codeUnits should be interpreted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それでcodeUnitsが解釈されるべきエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The encoding in which the code units should be interpreted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それでコード単位が解釈されるべきエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The encoding with which this parser is associated</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それとこのパーサーが結びつけられる符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>末尾インデックスは、あるコレクションの最後の要素を１つ過ぎた位置を参照します、それでそれはある要素に対応しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The entire region of memory referenced by this buffer must be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファによって参照されるメモリの全領域は、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The error is always an instance of Task.CancellationError.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラーは常にTask.CancellationErrorのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The error to throw from an awaiting call to next.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次への待機している呼び出しからスローすることになるエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The error to throw from the continuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その継続からスローされたエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The exact semantics of how priority is treated are left up to each platform and Executor implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのように優先度が扱われるかの正確な意味論は、それぞれのプラットホームとExecutor実装に任されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below defines a Person class, creates two instances of it, and uses several #keyPath string expressions to access properties and properties of those properties:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、Personクラスを定義して、それの２つのインスタンスを作成して、そしていくつかの#keyPath文字列式を使っていくつかのプロパティおよびそれらプロパティのプロパティにアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below shows a selector being used as part of the target-action pattern to call a method in response to the touchUpInside event.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、ターゲットアクションパターンの一部として使われるセレクタを示して、あるメソッドをtouchUpInsideメソッドに答えて呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below uses two strings with different forms of the "é" character—the first uses the composed form and the second uses the decomposed form.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、異なる形式の"é"文字を持つ２つの文字列を使います—最初は合成形式を使い、そして２番目は分解形式を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The file path be interpreted as UTF-8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このファイルパスはUTF-8として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The file path to be interpreted as UTF-8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8として解釈することになるファイルパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final accumulated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最終的に蓄積された値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後の例はfalseをomittingEmptySubsequencesパラメータに渡します、なので返される配列は空白が繰り返されたところで空の文字列を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final example passes true for the allowEmptySlices parameter, so the returned array contains empty strings where spaces were repeated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後の例はtrueをallowEmptySlicesパラメータに渡します、なので返される配列は空白が繰り返されたところで空の文字列を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final result is true because the ASCII digits have non-default emoji presentations; some platforms render these with an alternate appearance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後の結果はtrueです、なぜならASCII桁それらは非初期状態emoji表現を持つので；いくつかのプラットホームはそれらは代替の外観で描出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first and second code units of the pair, designated leading and trailing surrogates, make up a surrogate pair.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このペアの最初と２番目のコード単位、先行および後続サロゲートと呼ばれるものが、ひとつのサロゲートペアを作り上げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first code unit is designated a lead byte and the rest are continuation bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のコード単位は、先行バイトに指定されます、そして残りは継続バイトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the collection if the collection is not empty; otherwise, nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空でないならばコレクションの最初の要素；そうでなければnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最初の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>predicate満たすシーケンスの最初の要素、またはpredicateを満たす要素が無いならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first in any sequence of mutating operations causes elements to be copied into unique, contiguous storage which may cost O(n) time and space, where n is the length of the string’s encoded representation (or more, if the underlying NSString has unusual performance characteristics).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの変更を行う一連の演算の中の最初のものは、要素が固有の、隣接するストレージへとコピーされる原因となり、それはO(n)の時間と空間がかかります、そこにおいてnは文字列表現の長さです（またはそれ以上のもの、基盤となるNSStringが通常でない性能特質を持つならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first index where element is found.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>elementが見つけられたところの最初のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first partition, numbers[..&lt;p], is made up of the elements that are not greater than 30.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の区画、numbers[..&lt;p]は、30より大きくない要素から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first use of split returns each word that was originally separated by one or more spaces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>splitの最初の利用は、各単語を返します、それはもともと１つ以上の空白で隔てられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first value to add.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算する第１の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first value to multiply.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>掛け合わされる第１の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code creates slice, a slice covering part of an existing buffer instance, then rebases it into a new rebased buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードはslice、既存のバッファインスタンスの一部をカバーするスライス、を作成します、それからそれを新しい生のrebasedバッファへと再構築します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code creates constants for the first and second positions in the flag.utf8 view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、flag.utf8ビューの中の１番目と２番目の位置に対する定数それぞれを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code declares a generic version of the parseAndAddOne(_:) function:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、parseAndAddOne(_:)関数のひとつの総称体版を宣言します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code encodes a fermata in UTF-16:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、フェルマータをUTF-16でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code encodes a fermata in UTF-32:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、フェルマータをUTF-32でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code encodes a fermata in UTF-8:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードはフェルマータをUTF-8でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code temporarily rebinds the memory that uint8Pointer references from UInt8 to Int8 to call the imported C strlen function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、一時的にuint8Pointerが参照するメモリをUInt8からInt8へと再束縛することで、インポートされたC strlen関数を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code tests whether a string contains any math symbols:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、ある文字列が何らかの数学記号を含むかどうかをテストします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code uses the UTF8 codec to encode a fermata in UTF-8:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、UTF8コーデックを使ってUTF-8でのフェルマータをエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code uses this method to test whether all the names in an array have at least five characters:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、このメソッドを使って、配列の中の全ての名前が少なくとも５つの文字を含むかどうかを試験します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example accesses an element of an array through its subscript to print its value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、配列のある要素にそれの添え字によってアクセスしてそれの値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example accesses the fourth code unit in both the flowers and nsflowers strings:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、flowersとnsflowers文字列の両方で４番目のコード単位にアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example adds a new number to an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、ある新しい要素を整数からなる配列へ加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example adds an emoji globe to the end of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は地球絵文字をある文字列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example allocates a buffer that can store four Int instances and then initializes that memory with the elements of a range:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、４つのIntインスタンスを格納できるあるバッファをアロケートして、それからそのメモリをある範囲に属するいくらかの要素で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example allocates enough new memory to store four Int instances and then initializes that memory with the elements of a range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、新しいメモリを必要なだけアロケートすることで、４つのIntインスタンスを格納して、それからそのメモリをある範囲に属するいくらかの要素で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example allocates enough raw memory to hold four instances of Int8, and then uses the initializeMemory(as:from:count:) method to initialize the allocated memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、生のメモリを必要なだけアロケートすることで、４つのInt8インスタンスを保持して、それからinitializeMemory(as:from:count:)メソッドを使ってアロケートされたメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example allocates enough raw memory to hold four instances of Int8, and then uses the initializeMemory(as:repeating:count:) method to initialize the allocated memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、生のメモリを必要なだけアロケートすることで、４つのInt8インスタンスを保持して、それからinitializeMemory(as:repeating:count:)メソッドを使ってアロケートされたメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example allocates four bytes of memory and stores 0xFF in all four bytes:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、４バイトのメモリをアロケートして0xFFを４バイトすべての中に格納します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example appends the elements of a Range&lt;Int&gt; instance to an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、Range&lt;Int&gt;インスタンスからなるいくらかの要素を整数からなる配列に追加します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example binds the memory referenced by uint8Pointer to one instance of the UInt64 type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、uint8Pointerによって参照されるメモリをUInt64型のあるインスタンスに束縛します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example builds a customized greeting by using the append(_:) method:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はあつらえの挨拶をappend(_:)メソッドを使うことによって作ります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example calls this initializer with pointers to the contents of two different CChar arrays—the first with well-formed UTF-8 code unit sequences and the second with an ill-formed sequence at the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このイニシャライザを２つの異なるCChar配列の内容へのポインタとともに呼び出します—最初のものは正しい形式のUTF-8コード単位シーケンスをもち、そして２番目のものはある誤形式シーケンスを末尾に保ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example calls this method with pointers to the contents of two different CChar arrays—the first with well-formed UTF-8 code unit sequences and the second with an ill-formed sequence at the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このメソッドを２つの異なるCChar配列の内容へのポインタとともに呼び出します—最初のものは正しい形式のUTF-8コード単位シーケンスをもち、そして２番目のものはある誤形式シーケンスを末尾に保ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example converts the maximal Int value to a string and prints its length:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、最大限のInt値を文字列へ変換してそれの長さを出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example converts the position of the Unicode scalar "e" into its corresponding position in the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ユニコードスカラー"e"の位置を文字列でのそれの対応位置に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates a greeting string, and then finds the substring of the first sentence:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、greeting文字列を作成して、それから第一文からなる下位文字列を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates an array initialized with five strings containing the letter Z.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、字Zを含んでいる５つの文字列で初期化される配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates two new Int32 instances from the memory referenced by the buffer pointer someBytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、２つの新しいInt32インスタンスをバッファポインタsomeBytesによって参照されるメモリから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example declares singleDigits, a range of single digit integers, and then drops the first element to create a slice of that range, singleNonZeroDigits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、１桁整数からなる範囲、singleDigitsを宣言します、それから最初の要素を落としてその範囲のあるスライス、singleNonZeroDigitsを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example decodes the UTF-16 encoded bytes of a string into an array of Unicode.Scalar instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列のUTF-16エンコードされたバイトを、Unicode.Scalarインスタンスの配列へとデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example decodes the UTF-8 encoded bytes of a string into an array of Unicode.Scalar instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列のUTF-8エンコードされたバイトを、Unicode.Scalarインスタンスの配列へとデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example decodes the UTF-8 encoded bytes of a string into an array of Unicode.Scalar instances:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列のUTF-8エンコードされたバイトを、Unicode.Scalarインスタンスの配列へとデコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example defines x as an instance of UInt8, an 8-bit, unsigned integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、xをUInt8のインスタンス、ある８ビットの、符号なし整数型として定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example finds the length of the UTF-16 encoding of the string "Fermata 𝄐", starting with its UTF-8 representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、文字列"Fermata 𝄐"のUTF-16エンコーディングの長さを、それのUTF-8表現で開始して見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example finds the position of a space in a string and then converts that position to an index in the string’s utf16 view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある空白の位置を文字列の中で見つけて、それからその位置を文字列のもつutf16ビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example finds the position of a space in a string’s utf16 view and then converts that position to an index in the string’s unicodeScalars view:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある空白の位置を文字列のもつutf16ビューの中で見つけて、それからその位置を文字列のもつunicodeScalarsビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example finds the position of a space in a string’s utf16 view and then converts that position to an index in the string’s utf8 view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある空白の位置を文字列のもつutf16ビューの中で見つけて、それからその位置を文字列のもつutf8ビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、文字列の開始インデックスから４位置進んだインデックスを取得して、それからその位置の文字を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、配列の始まりから４位置進んだインデックスを入手して、それからその位置での要素を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example passes a pointer to the value variable by using inout syntax:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、value変数へのポインタをinout構文を使って渡します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example reverses the elements of an array of characters:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、文字列からなる配列の要素を逆順にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches a string’s Unicode scalars view for a capital letter and then prints the character and Unicode scalar value at the found index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列のもつユニコートスカラービューで大文字を捜して、それから見つかったインデックスでの文字とユニコードスカラー値を出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、整数からなる配列において数40のインデックスを捜して、それからそのインデックスで始まる配列の末尾を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、整数からなる配列において数40のインデックスを捜して、それからそのインデックスに至るまでの、そしてそれを含めて、配列の冒頭を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、整数からなる配列において数40のインデックスを捜して、それからそのインデックスに至るまでの、しかしそれを含めずに、配列の冒頭を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how an array of strings can be joined to a single, comma-separated string:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、どのように文字列からなる配列が単一の、コンマ区切りの文字列へと連結できるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how an iterator can be used explicitly to emulate a for-in loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、イテレータが明示的に使われてfor-inループの機能を真似る方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example temporarily rebinds the memory of a UInt64 pointer to Int64, then accesses a property on the signed integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、 一時的にUInt64ポインタのメモリをInt64に再束縛します、それから符号付き整数上のあるプロパティにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example transforms a string to uppercase letters:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列を大文字の文字に変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses someBytes, an UnsafeMutableRawBufferPointer instance, to demonstrate the difference between assigning a buffer pointer and using a buffer pointer as the source for another collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はsomeBytes、UnsafeMutableRawBufferPointerインスタンスを使って、バッファポインタの割り当することとバッファポインタを別のコレクションの要素のソースとして使うことの間の違いを実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses someBytes, an UnsafeRawBufferPointer instance, to demonstrate the difference between assigning a buffer pointer and using a buffer pointer as the source for another collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はsomeBytes、UnsafeRawBufferPointerインスタンスを使って、バッファポインタの割り当することとバッファポインタを別のコレクションの要素のソースとして使うことの間の違いを実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、トランプのランクそれらからなるある列挙、Rankを使います、それはace（低）からking（高）までに及びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses implicit bridging to pass a pointer to value when calling print(address:as:):</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、print(address:as:)を呼び出すとき、暗黙的ブリッジを使ってポインタをvalueへと渡します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the drop(while:) method to skip over the positive numbers at the beginning of the numbers array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、drop(while:)メソッドを使って、正の数をnumbers配列の始まりで省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the first(where:) method to find the first negative number in an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、first(where:)メソッドを使って、整数の配列において最初の負数を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the prefix(while:) method to find the positive numbers at the beginning of the numbers array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、prefix(while:)メソッドを使って、正の数をnumbers配列の始まりで見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the zip(_:_:) function to iterate over an array of strings and a countable range at the same time:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はzip(_:_:)関数を使って、同時に文字列からなる配列とある可付番範囲の全体にわたって反復します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the C strncmp function to compare the beginning of two Swift strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、C strncmp関数を使って２つのSwift文字列を比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the buffer pointer’s subscript to access and modify the elements of a mutable buffer pointing to the contiguous contents of an array:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、バッファポインタのもつ添え字を使うことで、配列の隣接内容を指している可変バッファの要素にアクセスして修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the buffer pointer’s subscript to access every other element of the buffer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、バッファポインタの添え字を使うことで、そのバッファのすべての他の要素にアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the subscript to print the value of a string’s first UTF-16 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、添え字を使って文字列のもつ最初のUTF-16コード単位の値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the subscript to print the value of a string’s first UTF-8 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、添え字を使って文字列のもつ最初のUTF-8コード単位の値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this method to multiply two Int8 values that normally overflow when multiplied:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このメソッドを使って、通常は乗算した時オーバーフローする２つのInt8値を乗算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this method to multiply two UInt8 values that normally overflow when multiplied:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このメソッドを使って、通常は乗算した時オーバーフローする２つのUInt8値を乗算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples show how string interpolations are translated into calls to appendInterpolation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、どのように文字列補間がappendInterpolationへの呼び出しに翻訳されるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、maxSplitsとomittingEmptySubsequencesパラメータの効果を、各空白文字（” “）で文字列を分割する場合で示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、maxSplitsとomittingEmptySubsequencesパラメータの効果を、空白にマッチするクロージャを使って文字列を分割する場合で示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples use this initializer with the contents of two different UInt8 arrays—the first with a well-formed UTF-8 code unit sequence, and the second with an ill-formed sequence at the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このイニシャライザを２つの異なるUInt8配列の内容とともに使います — 整形式UTF-8コード単位シーケンスをもつ最初のもの、そして誤形式シーケンスをその終わりでもつ２番目もの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The function uses a recursive approach to perform the same comparisons on smaller and smaller pieces of the original strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、反復する取り組みを使って、元の文字列のどんどん小さい断片上で同じ比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The general category (most usual classification) of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーの一般カテゴリ（最も普通のクラス分け）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The general category of a scalar is its “first-order, most usual categorization”.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーの一般カテゴリは、それの “第一次の、最も普通のカテゴリ分け” です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The given argument without any changes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何ら変更のない、与えられた引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The global abs(_:) function provides more familiar syntax when you need to find an absolute value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グローバルabs(_:)関数は、あなたが絶対値を見つける必要がある時により親しみやすい構文を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hasher to use when combining the components of this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスの構成要素を結合する場合に使うハーシャー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The immutable buffer pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる不変のバッファポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The immutable pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる不変ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The immutable raw pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる不変の生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index at which to start the resulting subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それで結果の下位シーケンスが始まるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index must be a valid index of String(utf16).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスはString(utf16)の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the element to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスする要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first byte to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する最初のバイトのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first element for which predicate returns true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してpredicateがtrueを返す最初の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first element in a nonempty buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でないバッファの中の最初の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first element in the reordered collection that matches belongsInSecondPartition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>並べ直されたコレクションの中の最初の要素のインデックス、それはbelongsInSecondPartitionに合致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first value to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する１つ目の値のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the last element in the collection that matches predicate, or nil if no elements match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>predicateに合致する、コレクションの中の最後の要素のインデックス、または合致する要素がないならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the last element to include in the resulting subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の下位シーケンスの中に含まれることになる最後の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the lead surrogate is successfully converted to a position in utf8, but the index of the trailing surrogate is not.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>先頭サロゲートはうまくutf8での位置に変換されます、しかし後続サロゲートのインデックスは違います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the second byte to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する２番目のバイトのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the second value to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する２つ目の値のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index type for a string’s unicodeScalars view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のもつunicodeScalarsビューのためのインデックス型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index value immediately after i.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iの直後のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index value immediately before i.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>iの直前のインデックス値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The indices that are valid for subscripting the collection, in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの添え字に使うのに有効である、昇順でのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The infix operators are grouped below by precedence group in decreasing order of precedence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>中置演算子は、以下に優先順位の高い方から優先順位グループによって分類されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The initializer creates the string representation of instance in one of the following ways, depending on its protocol conformance:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザは、instanceの文字列表現をそれのプロトコル準拠に依存して以下の方法の１つで作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The initializer creates the string representation of instance in one of the following ways, depending on its protocol conformance:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザは、instanceの文字列表現をそれのプロトコル準拠に依存して以下の方法の１つで作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The initializer succeeds if v is a valid Unicode scalar value, in the range 0...0xD7FF or 0xE000...0x10FFFF.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>vが有効なユニコードスカラー値、範囲0...0xD7FFまたは0xE000...0x10FFFFの中であるならば、イニシャライザは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The initializer succeeds if v is a valid Unicode scalar value—that is, if v is in the range 0...0xD7FF or 0xE000...0x10FFFF.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>vが有効なユニコードスカラー値であるならば — すなわち、vが範囲0...0xD7FFまたは0xE000...0x10FFFFの中であるならば、イニシャライザは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The input was entirely consumed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入力はすっかり消費された。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance can be used to await its completion, cancel the task, etc., The task will run to completion even if there are no other instances of the Task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのインスタンスは、それの完了を待機する、タスクを取り消す、などに使われることができます。タスクは、完了まで動作するでしょう、Taskの他のインスタンスが存在しないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance passed as value will leak if nothing eventually balances the retain.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>valueとして渡されるインスタンスは、リテインが結局は均衡を保つことがないならば漏洩します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to assign this buffer’s memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス、それにこのバッファのもつメモリをアサインします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to assign this pointer’s memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス、それにこのポインタのもつメモリをアサインします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to copy into memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリにコピーすることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to initialize this buffer’s memory with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス、それでこのバッファのもつメモリ初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to initialize this pointer’s memory with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス、それでこのポインタのもつメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to initialize this pointer’s pointee to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス、それにこのポインタのもつpointeeを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instances in the region source..&lt;(source + count) are unaffected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域source..&lt;(source + count)の中のインスタンスは、影響を受けません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The joined sequence of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>つなぎ合わされたシーケンス要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key type to use for the container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンテナに対して使うためのキー型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lanewise maximum of two vectors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのベクターのレーン単位の最大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lanewise minimum of two vectors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのベクターのレーン単位最小。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the collection if the collection has one or more elements; otherwise, nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが１つ以上の要素を持つならばコレクションの最後の要素；そうでなければnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the collection if the collection is not empty; otherwise, nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空でないならばコレクションの最後の要素；そうでなければnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最後の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>predicate満たすシーケンスの最後の要素、またはpredicateを満たす要素が無いならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last index where element is found.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこでelementが見つけられた最後のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last parameter of these functions is of the associated Stride type—the type that represents the distance between any two instances of the Strideable type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの関数の最後のパラメータは、Stride型 — Strideable型の何らかの２つのインスタンスの間の隔たりを表す型の関連型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The leading surrogate code unit of x when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16でエンコードされる時のxの先行サロゲートペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The little-endian representation of this integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のリトルエンディアン表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The longer scalar values may need two UInt16 values for storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より長いスカラー値は、２つのUInt16値をストレージとして必要とするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lower bound for the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の下側の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lowercase mapping of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのローワーケースマッピング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The magnitude of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の規模。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The mask type resulting from pointwise comparisons of this vector type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクター型のポイント単位比較からの結果のマスク型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The masking addition assignment operator (&amp;+=) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク加算代入演算子（&amp;+=）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The masking multiplication assignment operator (&amp;*=) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク乗算代入演算子（&amp;*=）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The masking subtraction assignment operator (&amp;-=) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク減算代入演算子（&amp;-=）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of elements to return.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返される要素の最大限の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of times to split the collection, or one less than the number of subsequences to return.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションを分割する回数の最大限度、または返される下位シーケンスの数より１つ少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of times to split the sequence, or one less than the number of subsequences to return.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスを分割する回数の最大限度、または返される下位シーケンスの数より１つ少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum representable integer in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型における最大の表現可能な整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory at this pointer plus offset must be properly aligned for accessing T and initialized to T or another type that is layout compatible with T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタにoffsetを加えたところでのメモリは、Tにアクセスするために厳密にアラインされ、そしてTまたはTとレイアウト互換の別の型に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory at this pointer plus offset must be properly aligned for accessing T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>offsetを加えたこのポインタでのメモリは、Tにアクセスするために適切にアラインされる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the region source..&lt;(source + byteCount) may overlap with the memory referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域source..&lt;(source + byteCount)の中のメモリは、このポインタによって参照されるメモリと重なるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the region source..&lt;(source + byteCount) must be initialized to a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域source..&lt;(source + byteCount)の中のメモリは、自明型に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the region source..&lt;(source + count) may overlap with the destination region.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域source..&lt;(source + count)の中のメモリは、行き先の領域と重なるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the region source..&lt;(source + count) must be initialized to type T and must not overlap the destination region.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域source..&lt;(source + count)の中のメモリは、型Tに初期化されなければなりません、そして行き先の領域と重なってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the region source..&lt;(source + count) must be initialized to type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域source..&lt;(source + count)の中のメモリは、型Tに初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in this region is bound to T, but has not been modified in any other way.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この領域の中のメモリは、Tへと束縛されます、しかし他のいかなる方法においても変更されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory is allocated, but not initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリはアロケートされます、しかし初期化されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory layout of a type, describing its size, stride, and alignment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型のメモリレイアウト、それはそれのサイズ、ストライド、およびアライメントを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must also be uninitialized, initialized to T, or initialized to another trivial type that is layout compatible with T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリはまた、未初期化状態にされる、Tに初期化される、または別の自明型でTとレイアウト互換なものに初期化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must also be uninitialized, initialized to T, or initialized to another trivial type that is layout compatible with T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリはまた、未初期化状態にされる、Tに初期化される、または別の自明型でTとレイアウト互換なものに初期化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must be initialized to a value of a type that is layout compatible with type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリは、typeとレイアウト互換である型の値に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must be uninitialized or initialized to a type that is layout compatible with T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリは、未初期化であるかTとレイアウト互換でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must be uninitialized or initialized to a type that is layout compatible with T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリは、未初期化であるかTとレイアウト互換でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must not be initialized or Pointee must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリは初期化されてはなりません、またPointeeは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by source may overlap with the memory referenced by this buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceによって参照されるメモリは、このバッファによって参照されるメモリと重なるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by an UnsafeMutablePointer instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutablePointerインスタンスによって参照されるメモリは、いくつかの状態の１つであることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by an UnsafeMutableRawPointer instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableRawPointerインスタンスによって参照されるメモリは、いくつかの状態の１つであることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by an UnsafePointer instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafePointerインスタンスによって参照されるメモリは、幾つかの状態のうち１つであるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by an UnsafeRawPointer instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeRawPointerインスタンスによって参照されるメモリは、幾つかの状態のうち１つであるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by the returned raw pointer is still bound to Pointee.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返される生のポインタによって参照されるメモリは、依然としてPointeeへの境界です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by this buffer must be uninitialized or initialized to a trivial type, and must be properly aligned for accessing T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファによって参照されるメモリは、未初期化状態にされるまたは自明型に初期化されなければなりません、そしてTにアクセスするために適切にアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by this pointer must be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリは、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by this pointer must be uninitialized or initialized to a trivial type, and must be properly aligned for accessing T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリは、未初期化状態にされるまたは自明型に初期化されなければなりません、そしてTにアクセスするために適切にアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory region source..&lt;(source + count) must be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ領域source..&lt;(source + count)は、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory regions referenced by source and this pointer may overlap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceによって参照されるメモリ領域とこのポインタは、重なり合うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory regions referenced by source and this pointer must not overlap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceによって参照されるメモリ領域とこのポインタは、重なり合わなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory regions referenced by source and this pointer may overlap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceによって参照されるメモリ領域とこのポインタは、重なり合うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory starting at this pointer must be bound to the type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで始まるメモリは、型Tに束縛されていなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory to be deallocated must be uninitialized or initialized to a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>割り当て解除されるメモリは、未初期化でなければなりません、または自明型に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory to read for the new instance must not extend beyond the buffer pointer’s memory region—that is, offset + MemoryLayout&lt;T&gt;.size must be less than or equal to the buffer pointer’s count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのために読み出すメモリは、バッファポインタのもつメモリ領域を越えて拡張されてはなりません — すなわち、offset + MemoryLayout&lt;T&gt;.sizeはバッファポインタのもつcountより少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory written to must not extend beyond the buffer pointer’s memory region—that is, offset + MemoryLayout&lt;T&gt;.size must be less than or equal to the buffer pointer’s count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書き込まれることになるメモリは、バッファポインタのもつメモリ領域を越えて拡張されてはなりません — すなわち、offset + MemoryLayout&lt;T&gt;.sizeはバッファポインタのもつcountより少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The minimum number of ASCII character’s worth of storage to allocate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>割り当てる最小数のASCII文字相当のストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The minimum representable integer in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型における最小の表現可能な整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The model type on the main actor must use await to call methods on the CoffeeDataStore actor, which allows other work to run on the main thread during the synchronous IO operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メインアクター上のmodel型は、awaitを使ってメソッドそれらをCoffeeDataStoreアクター上で呼び出さなければなりません、それは他の作業が同期IO操作の間にメインスレッド上で動作するのを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The modified sequence ends when the predicate closure returns false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>修正されたシーケンスは、条件クロージャがfalseを返す時に終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The most general classification of a Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーの最も一般的なクラス分け。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The multiplication operator (*) calculates the product of its two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算演算子（*）は、それの２つの引数の積を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The mutable buffer pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる可変のバッファポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The mutable raw pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる可変ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of a scalar is immutable and never changed in future versions of the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーの名前は不変です、そして決してユニコード標準の将来の版において変更されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new Unicode scalar values to add to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列へ加える新しいユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new buffer represents the same region of memory as slice, but is indexed starting at zero instead of sharing indices with the original buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいバッファは、sliceと同じメモリ領域を表します、しかしゼロで開始してインデックスをつけられます、元のバッファとインデックスを共有するのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new buffer represents the same region of memory as the slice, but its indices start at zero instead of at the beginning of the slice in the original buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいバッファは、このスライスと同じメモリ領域を表します、しかしそれのインデックスはゼロで開始します、元のバッファ中のスライスの始まりでというわけでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new character to insert into the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列へ挿入する新しい文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new characters to add to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列へ加える新しいいくらかの文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new element is inserted before the element currently at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい要素は、指定されたインデックスでの現在の要素の前に挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new element to insert into the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションに挿入されることになる新しい要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new elements are inserted before the element currently at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいいくらかの要素が、指定されたインデックスでの現在の要素の前に挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new elements to add to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションに加える新しいいくらかの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new elements to insert into the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションへ挿入される新しいいくらかの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new value represents the address of the pointer passed as pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値は、pointerとして渡されるポインタのアドレスを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next n bytes of the memory that someBytes references are copied in this code:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>someBytesが参照する次のnバイトのメモリは、このコードでコピーされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next element in the underlying sequence, if a next element exists; otherwise, nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の要素が存在するならば、基礎をなすシーケンス中の次の要素；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example attempts to convert the indices of the two UTF-16 code points that represent the teacup emoji ("🍵").</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、ティーカップ絵文字（"🍵"）を表す２つのUTF-16コード点のインデックスの変換を試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例はs.startIndexから６位置のインデックスをとりだすことを試みます、しかし失敗します、なぜならその間隔はlimitとして渡されるインデックスを越えるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example attempts to retrieve an index ten positions from numbers.startIndex, but fails, because that distance is beyond the index passed as limit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例はnumbers.startIndexから10位置のインデックスをとりだすことを試みます、しかし失敗します、なぜならその間隔はlimitとして渡されるインデックスを越えるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next sequential byte in the raw buffer if another byte exists; otherwise, nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別のバイトが存在するならば生のバッファでの次の順次的なバイト；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The normative formal alias of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのスカラーの標準の公式のエイリアス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of UTF-8 code units (excluding the null terminator).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8コード単位の数（null終端子を除外して）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of UTF-8 code units worth of memory to allocate for the string (excluding the null terminator).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このUTF-8コード単位の数だけのメモリを文字列に対してアロケートすることになります（null終端子を除外して）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits equal to 1 in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現の中の１に等しいビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits in the binary representation of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現でのビット数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits to shift lhs to the left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このビット数をlhsから左へとシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits to shift lhs to the right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このビット数をlhsから右へとシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits used for the underlying binary representation of values of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の値の基礎をなすバイナリ表現に対して使われるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes in the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの中のバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes in this region is count * MemoryLayout&lt;T&gt;.stride.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この領域の中のバイト数は、count * MemoryLayout&lt;T&gt;.strideです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes to allocate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートすることになるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes to copy.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コピーされることになるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes to include in the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの中に含むことになるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of characters in a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の中の文字数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of consecutive copies of newValue to assign.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アサインするnewValueの連続コピーの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of consecutive copies of newValue to initialize.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化するnewValueの連続コピーの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of copies of value to copy into memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリにコピーすることになるvalueのコピー数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements contained within this container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコンテナ内に含まれる要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements encoded into the container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコンテナへとエンコードされる要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements in the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの始まりから省く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの初めの部分から落とす要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop off the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの終わりで省く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop off the end of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの末尾から取り除く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to remove from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションから削除される要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除する要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of instances in the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの中のインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of instances of Pointee to bind to type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Pointeeのインスタンスの数、typeに束縛されることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of instances to copy from the memory referenced by source to this pointer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceによって参照されるメモリからこのポインタのもつメモリまでコピーされるインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of instances to deinitialize.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デイニシャライズするインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of instances to move from source to this pointer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceからこのポインタのもつメモリまで移動することになるインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of interpolations which will be appended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加されるだろう補間の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of leading zeros in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現における先頭のゼロの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of new elements need not match the number of elements being removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい要素の数は、削除される要素の数と一致する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of scalars, or elements, in a vector of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型のあるベクターの中のスカラーそれら、または要素それらの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of scalars, or elements, in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの中のスカラー、または要素、の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of strides of the pointer’s Pointee type to offset this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタのPointee型のストライドの数、このポインタに補われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of times to repeat repeatedValue in the resulting string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>repeatedValueを結果文字列の中で繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of times to repeat the value passed in the repeating parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>repeatingパラメータで渡された値を繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of trailing zeros in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現において後に続くゼロの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The numeric type of a scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーの数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The numeric type of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーの数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The numeric value of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーの数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The object referenced by this Unmanaged instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このUnmanagedインスタンスによって参照されるオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The object to encode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコードするオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset from this pointer at which to access an instance, measured in strides of the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタからのオフセット、それでインスタンスにアクセスします、ポインタのPointee型のストライドにおいて測られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset from this pointer, in bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタからのオフセット、バイトで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset in bytes into the buffer pointer’s memory to begin reading data for the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのためにデータの読み出しを開始するための、バッファポインタのもつメモリに対するバイトでのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset into a string’s code units for this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに対する、ある文字列のもつコード単位へのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset of the byte to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスすることになるバイトのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset, in bytes, into the buffer pointer’s memory at which to begin reading data for the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファポインタのもつメモリに対する、バイトでの、オフセット、それで新しいインスタンスに対してデータ読み出しを始めることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The only scalars for which this property is true are:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のスカラーに対してのみこのプロパティはtrueです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The opaque pointer to convert to a typed pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタに変換されることになる不透明ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The operation doesn’t require going beyond the limiting numbers.endIndex value, so it succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この操作は、限度であるnumbers.endIndex値を越えることを要求しません、それでそれは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算は、限界であるs.endIndex値を越えていく必要はありません、それでそれは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The order of the remaining elements is preserved.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>残っている要素の順番は保全されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The original version uses completion handlers to query the HealthKit SDK and to respond to CLKComplicationDataSource calls, and dispatch queues to isolate concurrent access to memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オリジナルバージョンは、完了ハンドラを、HealthKit SDKへの問い合わせのためそしてCLKComplicationDataSource呼出しへの応答のために、そしてディスパッチキューを、メモリへの並行アクセスを隔離するために使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The overflow addition operator (&amp;+) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー加算演算子（&amp;+）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The overflow multiplication operator (&amp;*) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー乗算演算子（&amp;*）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The overflow subtraction operator (&amp;-) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー減算演算子（&amp;-）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path of coding keys taken to get to this point in decoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコーディングのこの時点を得るために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path of coding keys taken to get to this point in encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングのこの時点を得るために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer argument is valid only for the duration of the method’s execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタ引数は、ただメソッドの実行の間に対してのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer argument to body is valid only during the execution of withUTF8Buffer(_:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyへのポインタ引数は、withUTF8Buffer(_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer created through implicit bridging of an instance or of an array’s elements is only valid during the execution of the called function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスのまたは配列の要素の暗黙的ブリッジを通して作成されるポインタは、呼び出された関数の実行の間に有効であるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer passed as start must be aligned to MemoryLayout&lt;Element&gt;.alignment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>startとして渡されるポインタは、MemoryLayout&lt;Element&gt;.alignmentにアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer passed as an argument to body is valid only during the execution of withCString(_:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数としてbodyに渡されるポインタは、withCString(_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer passed as an argument to body is valid only during the execution of withCString(encodedAs:_:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数としてbodyに渡されるポインタは、withCString(encodedAs:_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer to calculate the distance to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それへの隔たりを計算されるポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになるポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer to use as the source for the new integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい整数のためのソースとして使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer you pass to the function is only guaranteed to be valid for the duration of the function call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが関数に渡すポインタは、関数呼び出しの間に対して有効であることだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position at which to insert the new element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこで新しい要素が挿入されることになる位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position at which to insert the new elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこで新しいいくらかの要素が挿入されるところの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position in characters that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに正確に対応するcharactersの中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position in unicodeScalars that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに正確に対応するunicodeScalarsの中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position in utf16 that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに正確に対応するutf16の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position in utf8 that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに正確に対応するutf8の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the character to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除する文字の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the element to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスする要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the element to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除する要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first Unicode scalar value if the string is nonempty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列が空でないならば、最初のユニコードスカラー値の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first character in a nonempty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でない文字列の中の最初の文字の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first code unit if the String is nonempty; identical to endIndex otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Stringが空で無いならば最初のコードユニットの位置；そうでないならばendIndexと同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first code unit if the UTF-8 view is nonempty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8ビューが空でないならば、最初のコードユニットの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のコード単位の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first element in a nonempty collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でないコレクションの中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The postfix operators are as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>接尾辞演算子は次のとおりです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部は、非同期シーケンスがある要素を生み出すたびごとに遂行されます、述部がある合致を見つけるかシーケンスが終わるかどちらかまで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部は、非同期シーケンスがある要素を生み出すたびごとに遂行されます、述部がfalseを返すかシーケンスが終わるかどちらかまで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate must be a equivalence relation over the elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部は要素に対して同値関係でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate must be a strict weak ordering over the elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部は、それら要素に対して厳密弱順序でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate orders errors before successes and sorts the error responses by their error code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この述部はエラーを成功の前に並べて、そしてそれらエラー応答をそのエラーコードによってソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate provided to the max(by:) method sorts ranks based on their rawValue:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>max(by:)メソッドに提供された述部は、ランクそれらをそれらのrawValueに基づいて並べ換えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate provided to the min(by:) method sorts ranks based on their rawValue:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>min(by:)メソッドに提供された述部は、ランクそれらをそれらのrawValueに基づいて並べ換えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The prefix operators are as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>接頭辞演算子は次のとおりです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of x and y is 2000, which is too large to represent in a UInt8 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>xとyの積は2000です、それはUInt8インスタンスにおいて表すには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of x and y is -1920, which is too large to represent in an Int8 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>xとyの積は-1920です、それはInt8インスタンスにおいて表すには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の積は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The protocol to which all class types implicitly conform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロトコルに対して、全てのクラス型は暗黙的に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The protocol to which all classes implicitly conform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロトコルに対して、全てのクラスは暗黙的に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The published name of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーの公開名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The radix, or base, to use for converting text to an integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>textを整数値に変換するのに使うための基数、または底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when choosing a random element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある無作為な要素を選ぶときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when creating the new random value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい無作為値を作成するときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when shuffling the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをシャッフルするときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when shuffling the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスをシャッフルするときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range expression is converted to a concrete subrange relative to this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式は、このコレクションに関連するある具体的な下位範囲へ変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range in which to create a random value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その中においてある無作為な値が作成される範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of byte offsets to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスすることになるバイトオフセットの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of elements to replace.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>置き換えることになる要素範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of indices to allow access to in the new slice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいスライスにおいて、アクセスするのが許されるインデックスの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of text to replace.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>置き換えるテキスト範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of the collection to be removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除されることになるコレクションの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of the elements to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除する要素の範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw buffer slice to rebase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>再構築される生のバッファスライス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw integer value of the canonical combining class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この正準結合クラスの生の整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw type that can be used to represent all values of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠している型のすべての値を表すために使われる生の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw value to use for the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのために使う生の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The region of memory starting at this pointer and covering count instances of the pointer’s Pointee type must be initialized or Pointee must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで始まりそしてポインタのPointee型のcount個のインスタンスを対象とするメモリ領域は初期化されなければならず、またPointeeは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The region of memory starting at this pointer and covering count instances of the pointer’s Pointee type must be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで始まりそしてポインタのもつPointee型のcount個のインスタンスを対象とするメモリ領域は、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The region of memory starting at this pointer and covering count instances of the pointer’s Pointee type must be uninitialized or Pointee must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで始まりそしてポインタのPointee型のcount個のインスタンスを対象とするメモリ領域は未初期化でなければなりません、またPointeeは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The remainder of the allocated region is unbound raw memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>割り当てられた領域の残りは、生のメモリに束縛されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The remainder of the relational operator functions are implemented by the standard library for any type that conforms to Comparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>残りの関係演算子関数は、Comparableに準拠するあらゆる型に対して標準ライブラリによって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The removed element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除された要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The requested number of elements to store.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>依頼された格納される要素数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result begins with the first element of numbers that does not satisfy predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、predicateを満たさない、numbersの最初の要素で始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result can be negative only if the collection conforms to the BidirectionalCollection protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、そのコレクションがBidirectionalCollectionプロトコルに準拠する場合に限り、負であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result has the same sign as lhs and has a magnitude less than rhs.magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、lhsと同じ符号を持ち、rhs.magnitudeより小さい規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of attempting to parse a T from some input.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>なんらかの入力からのTを構文解析を試みることの結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of one Unicode decoding step.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ひとつのユニコード復号化処理の結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of the remainder operator (%) has the same sign as lhs and has a magnitude less than rhs.magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>剰余演算子（%）の結果は、lhsと同じ符号を持ち、rhs.magnitudeより小さい規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting array consists of at most maxSplits + 1 subsequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の配列は、多くともmaxSplits + 1の下位シーケンスから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting buffer references a region of memory that is bound to Element and is count * MemoryLayout&lt;Element&gt;.stride bytes in size.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のバッファはあるメモリ領域を参照します、それはElementに束縛されます、そしてcount * MemoryLayout&lt;Element&gt;.strideバイトの大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting collection has the type of argument on the right-hand side.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるコレクションは、右手側の引数の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting collection has the type of the argument on the left-hand side.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるコレクションは、左手側の引数の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting flattened array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として生じる平たくされた配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting instance may not have the same numeric value as bitPattern—it is only guaranteed to use the same pattern of bits in its binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のインスタンスは、bitPatternと同じ数値を持たないかもしれません — それは、同じパターンのビットをそれのバイナリ表現において使うことを保証されるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting pointer must be within the bounds of the same allocation as this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のポインタは、このポインタと同じアロケーションの範囲内でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting pointer references a region of memory that is bound to Pointee and is count * MemoryLayout&lt;Pointee&gt;.stride bytes in size.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のポインタはあるメモリ領域を参照します、それはPointeeに束縛されます、そしてcount * MemoryLayout&lt;Pointee&gt;.strideバイトの大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting quotient must be representable within the bounds of the type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の商は、この型の境界の内に表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting subsequence does not include the element at the position end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるシーケンスは、位置endでの要素を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting subsequence includes the element at the position end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるシーケンスは、位置endでの要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return type of sequence(first:next:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sequence(first:next:)の戻り型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return type of functions that do not return normally, that is, a type with no values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>普通に戻らない関数の戻り型、すなわち、値なしでの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return type of functions that don’t explicitly specify a return type, that is, an empty tuple ().</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り型を明示的に指定されない関数の戻り型、すなわち、空のタプル()。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return value, if any, of the body closure parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyクロージャパラメータの戻り値、もしあれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return value, if any, of the body closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bodyクロージャの、もしあれば、戻り値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The returned buffer references memory starting at the same base address as this buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるバッファは、このバッファと同じ基底アドレスで始まるメモリを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The returned index is the position of the element in the buffer one past the last element written.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるインデックスは、書かれた最後の要素を１つすぎたバッファの中の要素の位置です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The returned instance is memory-managed and unassociated with the value in the memory referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるインスタンスは、メモリ管理されて、このポインタによって参照されるメモリの中の値と無関係です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second byte is a continuation byte.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目のバイトが継続バイトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の例は1をmaxSplitsパラメータに渡します、それで元の文字列は一度だけ分割されて、２つの新しい文字列になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second partition, numbers[p...], is made up of the elements that are greater than 30.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の区画、numbers[p...]は、30より大きなものである要素から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second value to add.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算する第２の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second value to multiply.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>掛け合わされる第２の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence ends either when the base sequence ends or when transform throws an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスは、基底シーケンスが終わる時かまたはtransformがエラーをスローする時に終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence ends either when the the last sequence created from the last element from base sequence ends, or when transform throws an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスは、基底シーケンスからの最後の要素から作成された最後のシーケンスが終わる時、またはtransformがエラーをスローする時のどちらかに終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence of elements for the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいコレクションのための要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequences whose contents to encode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの内容をエンコードするシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s maximum element if the sequence is not empty; otherwise, nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが空でないならばシーケンスの最大の要素；そうでなければnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s maximum element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最大の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s minimum element, according to areInIncreasingOrder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最小の要素、areInIncreasingOrderによる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s minimum element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最小の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars [:XID_Continue:] closes the set [:ID_Continue:] under NFKC normalization by removing any scalars whose normalized form is not of the form [:ID_Continue:]*.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーの集合[:XID_Continue:]は、集合[:ID_Continue:]に、NFKC正規化の下で、それの正規化形式が形式[:ID_Continue:]*でないあらゆるスカラーを取り除くことによって、閉じています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars [:XID_Start:] closes the set [:ID_Start:] under NFKC normalization by removing any scalars whose normalized form is not of the form [:ID_Start:] [:ID_Continue:]*.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーの集合[:XID_Start:]は、集合[:ID_Start:]に、NFKC正規化の下で、それの正規化形式が形式[:ID_Start:] [:ID_Continue:]*でないあらゆるスカラーを取り除くことによって、閉じています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars for which isGraphemeBase is true is disjoint by definition from the set for which isGraphemeExtend is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してisGraphemeBaseがtrueであるスカラーの集合は、それに対してisGraphemeExtendがtrueである集合からの定義と交わりを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars for which isGraphemeExtend is true is disjoint by definition from the set for which isGraphemeBase is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してisGraphemeExtendがtrueであるスカラーの集合は、それに対してisGraphemeBaseがtrueである集合からの定義と交わりを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars for which isCased is true is a superset of those for which changesWhenCaseMapped is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してisCasedがtrueであるスカラーの集合は、それに対してchangesWhenCaseMappedがtrueであるもののスーパーセットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars for which this property is true includes mathematical operators and symbols as well as specific Greek and Hebrew letter variants that are categorized as symbols.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してこのプロパティがtrueであるスカラーの集合は、数学用の演算子と記号を含みます、記号として分類される特定のギリシャおよびベブライ文字異字体だけでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The shift is performed using this masked value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトは、このマスクされた値を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign of this number, expressed as an integer of the same type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この数の符号、同じ型の整数として表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sorting algorithm is not guaranteed to be stable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このソートアルゴリズムは、安定であることを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library implements codecs for the UTF-8, UTF-16, and UTF-32 encoding schemes as the UTF8, UTF16, and UTF32 types, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリは、UTF-8、UTF-16、そしてUTF-32エンコードスキームに対するコーデックをUTF8、UTF16、そしてUTF32型としてそれぞれ実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string is automatically converted to UTF8 in a zero-terminated buffer, and a pointer to that buffer is passed to the function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列は、自動的にゼロ終端バッファの中のUTF8に変換されます、そしてそのバッファに対するポインタが関数に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string passed as description may begin with a plus or minus sign character (+ or -), followed by one or more numeric digits (0-9).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>descriptionとして渡される文字列は、プラスまたはマイナス符号文字（+または-）で始まり、１つ以上の数値のアラビア数字（0-9）が続くことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string passed as text may begin with a plus or minus sign character (+ or -), followed by one or more numeric digits (0-9) or letters (a-z or A-Z).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>textとして渡される文字列は、プラスまたはマイナス符号文字（+または-）で始まり、１つ以上の数値のアラビア数字（0-9）または文字（a-z or A-Z）が続くことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string referenced by the resulting index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるインデックスによって参照される文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string to repeat.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返すことになる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string to use for the index conversion.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックス変換に使う文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string value of the unique identifier wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データ値の中にラップされる特有識別子の文字列値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データ値の中にラップされる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string’s value represented as a collection of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値のコレクションとして表される、文字列のもつ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subrange of the collection to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除することになるコレクションの下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subrange of the collection to replace.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>置き換えることになるコレクションの下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subscript notation is preferred over prefix(through:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字表記法は、prefix(through:)よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subscript notation is preferred over suffix(from:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字表記法は、suffix(from:)よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subscript notation is preferred over prefix(upTo:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字表記法は、prefix(upTo:)よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subtraction operator (-) calculates the difference of its two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算演算子（-）は、それの２つの引数の差を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The successor of an index must be well defined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるインデックスの後に続くものは、よく定義されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sum of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の合計は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sum of types that can be used as a Quick Look representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「クイックルック」表現として使われることのできる型の総和。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The system’s default source of random data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>システムの持つ省略時の無作為データのソース。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tables below list the operators declared by the Swift standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の表は、Swift標準ライブラリによって宣言される演算子を一覧にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The task continues executing when its executor schedules it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクは、それのエグゼキュータがそれを予定する場合は遂行を継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The task this refers to may check for cancellation, however since it is not-throwing it would have to handle it using some other way than throwing a CancellationError, e.g. it could provide a neutral value of the Success type, or encode that cancellation has occurred in that type itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これが参照するタスクは、取り消しについて確認するかもしれません、しかしながらそれがスローするものでないことからそれはそれをCancellationErrorをスローするのと違った何か他の方法を使って取り扱わなければならないでしょう、たとえばそれはSuccess型の中立の値を提供できます、または取り消しがその型それ自体において発生したことをエンコードできるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The titlecase mapping of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのタイトルケースマッピング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The trailing surrogate code unit of x when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16でエンコードされる時のxの後続サロゲートペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The transforming closure takes the received Int and returns a new Counter that counts that high.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換クロージャは、その受け取ったIntをとり、そしてその高さを数える新しいCounterを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two arguments must have the same Element type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数は、同じElement型を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two loops in the following example produce the same output:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例における２つのループは、同じ出力を生み出します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two types communicate by passing an array of Drink values, which is a value type because Drink is a structure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの型は、Drink値それらからなるある配列を渡すことによって通信します、それは値型です、なぜならDrinkが構造体であるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type T must be the same size and be layout compatible with the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型 Tは、ポインタのもつPointee型と同じサイズで、互換性のあるレイアウトでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type T must have the same size and be layout compatible with the pointer’s Element type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型 Tは、ポインタのもつElement型と同じサイズで、互換性のあるレイアウトでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type T that the memory has already been bound to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリがすでに束縛されているところの型T。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type T to be stored must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>格納されることになる型Tは、自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type T to bind the memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型Tへとメモリを束縛することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type each segment of a string literal containing interpolations should be appended to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えられるべき補間を含んでいる文字列リテラルの各文節の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>valueの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of an unbounded range operator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無境界範囲演算子の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of asynchronous iterator that produces elements of this asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この非同期シーケンスの要素それらを取り出す非同期イテレータの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of data that a pointer can access is the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタがアクセス可能なデータの型は、ポインタのもつPointee型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of data that a pointer can access is the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタがアクセス可能なデータの型は、ポインタのもつPointee型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of element produced by this asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この非同期シーケンスによって取り出される要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of element returned by next().</seg>
      </tuv>
      <tuv lang="ja">
        <seg>next()によって返される要素のもつ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of element traversed by the iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータによって辿っていかれる要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of scalars in the vector space.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクタースペースの中のスカラーそれらの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of the elements of an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルの要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of the elements to bind the buffer’s memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつメモリをそれへと束縛する幾らかの要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of the instance to create.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>作成されることになるインスタンスの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of value to decode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の値にデコードする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type that should be used for literal segments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リテラル文節に対して使われるべき型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to bind this buffer’s memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのもつメモリをそれへと束縛する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to bind this memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメモリに束縛することになる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to decode as.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型としてデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to temporarily bind the memory referenced by this buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファによって参照されるメモリを一時的に束縛する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to temporarily bind the memory referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを一時的に束縛する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to use for the newly constructed instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新規に構築されるインスタンスのために使うことになる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The typed buffer contains self.count / MemoryLayout&lt;T&gt;.stride instances of T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Tのself.count / MemoryLayout&lt;T&gt;.strideインスタンスを含んでいる型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The typed buffer references self.count / MemoryLayout&lt;T&gt;.stride instances of T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付バッファは、Tのself.count / MemoryLayout&lt;T&gt;.strideインスタンスを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The typed buffer to convert to a raw buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいバッファへと変換されることになる型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The typed pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The unbounded range operator (...) is valid only within a collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無境界範囲演算子（...）は、あるコレクションの添字の内でのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying collection of the slice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスライスの基礎をなすコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying type a string uses when it wraps itself in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列が、それがそれ自身をあるデータ値の中にラップする時に使う、基礎をなす型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The universal hash function used by Set and Dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SetとDictionaryによって使われる普遍的なハッシュ関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The updated version uses Swift’s concurrency features to provide clearer code with better error checking at compile time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>更新されたバージョンは、Swiftの並行性機能を使って、明快なコードをより良いコンパイル時でのエラーチェックとともに提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper and lower bounds of bounds must be valid indices of the string and not equal to the string’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bounds範囲の上方および下方の境界はこの文字列の有効なインデックスでなければなりません、そしてこの文字列の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper and lower bounds of bounds must be valid indices of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>boundsの上方および下方の境界は、文字列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper and lower bounds of the range must be in the range 0...count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の上方および下方の境界は、範囲0...countの中でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper bound for the randomly generated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この無作為に生成される値に対する上方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper bound for the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の上側の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The uppercase mapping of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのアッパーケースマッピング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The valid indices for subscripting the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターに添え字での指定をするための有効なインデックスそれら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value is available throughout the execution of the operation closure, including any get operations performed by child-tasks created during the execution of the operation closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値が利用可能なのは、演算クロージャの遂行の間じゅうです、演算クロージャの遂行の間に作成された子タスクによって実行されたあらゆるget演算を含めて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value is only bound for the duration of that scope, and is available to any child tasks which are created within that scope.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値は、そのスコープの持続期間に対してバインドされるだけです、そしてそのスコープ内で作成されたすべての子タスクに利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of count must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>countの値は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of maxLength must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>maxLengthの値は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of the operand is copied bitwise into a temporary nonowning buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算数の値は、コピーされます。一時的な非所有バッファにビット単位でコピーされるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>distanceとして渡される値は、このコレクションの境界を越えてiを補ってはなりません、limitとして渡されるインデックスがそれら境界を越えて補うのを防止するのでない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as distance must not offset i beyond the bounds of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>distanceとして渡される値は、このコレクションの境界を越えてiを補ってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as n must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nとして渡される値は、このコレクションの境界を越えてiを補ってはなりません、limitとして渡されるインデックスがそれら境界を越えて補うのを防止するのでない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as n must not offset i beyond the bounds of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nとして渡される値は、このコレクションの境界を越えてiを補ってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as source must be representable in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>sourceとして渡される値は、この型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value returned by the next child task that completes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完了した次の子タスクによって返された値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to add to this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値に加える値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to calculate the distance to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それへの隔たりを計算される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to convert to a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列へ変換する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to create.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>作成されることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to divide lhs by.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値でlhsを除算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to divide this value by.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を除算するための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to divide.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算することになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to encode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコードする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to multiply by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と掛け合わせられることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to multiply this value by.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値に掛ける値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to return from an awaiting call to next.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次への待機している呼び出しから返すことになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to return from the continuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その継続から返す値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to shift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to store as raw bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のメモリとして格納されることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to subtract from lhs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>lhsから減じる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to subtract from this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値から減じる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テストする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to use as the initial accumulating value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初から蓄積されている値として使われる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The values returned by successive calls to this method appear in the order that the tasks completed, not in the order that those tasks were added to the task group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドへの連続した呼び出しによって返される値それらは、タスクそれらが完了した順に現れます、それらタスクがタスクグループに加えられた順にではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The view to use for the index conversion.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックス変換に使うビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The width of x when encoded in UTF-16, either 1 or 2.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16でエンコードされる時のxの幅、1または2のどちらか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The width of x when encoded in UTF-8, from 1 to 4.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8で符号化された時のxの幅、1から4まで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The zero value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The zero width joiner is also used to construct complex emoji from sequences of base emoji characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロ幅接合子はまた、複合絵文字を一連の基礎絵文字文字から組み立てるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The “past the end” index of the resulting subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のシーケンスの「終わりを過ぎた」インデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then build and run the app in Simulator, and follow these steps:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それからアプリをシミュレータ上でビルドおよび実行してください、そしてこれらの手順に従ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are two scalars for which this property is true:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してこのプロパティがtrueである２つのスカラーがあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Therefore, the first in any sequence of mutating operations may cost O(n) time and space.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それゆえに、何らかの一連の変化を伴う演算において最初に、O(n)時間と空間を要するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These collections can store zero, one, or many of the same element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのコレクションは、ゼロ、１つ、または多くの同じ要素を格納できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのカウンタはインデックスとして使われることが、ゼロ基盤の、整数インデックスでのコレクション、例えばArrayそしてContiguousArrayなどのインスタンスにおいてのみ可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These elements are computed lazily, each time they’re read, by calling the transform function on a base element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの要素は、それらが読み出されるたびに、基盤要素上で変換関数を呼び出すことによって遅延計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These elements match those accessed through indexed NSString APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらの要素は、インデックス付きNSString APIを通してアクセスされるものと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These letters start with "A" if uppercase is true; otherwise, with "a".</seg>
      </tuv>
      <tuv lang="ja">
        <seg>uppercaseがtrueならば、これらの文字は"A"で始まります；そうでなければ、"a"で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These methods all return typed pointers for further typed access to the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのメソッドは、この後で型付アクセスをこのメモリにするために型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These partial periods towards the task’s completion are PartialAsyncTask.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクのもつ完了に向かうこれら部分的な期間それらは、PartialAsyncTaskです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These scalar values are combined by Unicode’s boundary algorithms into extended grapheme clusters, represented by the Swift Character type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラー値は、ユニコード境界アルゴリズムによって拡張書記素クラスタへと、SwiftのもつCharacter型によって表されるものへと、組み合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These scalars are often the components of ideographic description sequences, as defined by the isIDSBinaryOperator and isIDSTrinaryOperator properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラーは、しばしば表意文字記述シーケンスの構成要素です、isIDSBinaryOperatorとisIDSTrinaryOperatorプロパティによって定義されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They have no visible glyph or advance width in and of themselves, although they may affect the display, positioning, or adornment of adjacent or surrounding characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらは、可視の字体または送り幅をそれら自体持ちません、とはいえそれらは、隣接または囲んでいる文字の表示、位置決定、もしくは装飾に影響を及ぼすかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This assignment to the nextStop constant calls this string literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nextStop定数への代入はこの文字列リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This associated type appears as a requirement in the Sequence protocol, but it is restated here with stricter constraints.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関連型は、Sequenceプロトコルの中のある要件として現れます、しかしここでより厳格な制約で言い直されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This buffer can then be shared by different copies of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファは、それからある文字列の異なるコピーによって共有されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This buffer pointer’s baseAddress must be nil or a pointer to a memory block previously returned by a Swift allocation method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファポインタのbaseAddressは、nilまたは以前にSwiftアロケーションメソッドによって返されたメモリブロックへのポインタでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This buffer pointer’s count must be equal to the originally allocated size of the memory block.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファポインタのもつcountは、もともとアロケートされたメモリブロックのサイズと等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This buffer pointer’s byte count must be equal to the originally allocated size of the memory block.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファポインタのもつcountバイトは、もともとアロケートされたメモリブロックのサイズと等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter describes the global functions defined in the Swift standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この章は、Swift標準ライブラリにおいて定義されるグローバル関数を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This code shows a custom interpolation type’s declaration of an appendInterpolation method that provides special validation for user input:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコードは、あるあつらえの補間型のもつappendInterpolationの宣言を示します、それはユーザ入力に対する特別な検証を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This continuation type can be called more than once, unlike the unsafe and checked counterparts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この継続型は、一度以上呼び出されることが可能です、非安全なそして検査される相当物とは異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from AsyncSequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、AsyncSequenceから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、BidirectionalCollectionから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from BinaryInteger.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、BinaryIntegerから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from Collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、Collectionから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from Comparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、Comparableから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from CustomDebugStringConvertible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、CustomDebugStringConvertibleから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from CustomReflectable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、CustomReflectableから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from CustomStringConvertible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、CustomStringConvertibleから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from Equatable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、Equatableから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from ExpressibleByArrayLiteral.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、ExpressibleByArrayLiteralから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from ExpressibleByExtendedGraphemeClusterLiteral.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、ExpressibleByExtendedGraphemeClusterLiteralから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from ExpressibleByIntegerLiteral.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、ExpressibleByIntegerLiteralから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from ExpressibleByStringInterpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、ExpressibleByStringInterpolationから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from ExpressibleByStringLiteral.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、ExpressibleByStringLiteralから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from ExpressibleByUnicodeScalarLiteral.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、ExpressibleByUnicodeScalarLiteralから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from FixedWidthInteger.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、FixedWidthIntegerから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from Hashable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、Hashableから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from IteratorProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、IteratorProtocolから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from LazySequenceProtocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、LazySequenceProtocolから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from LosslessStringConvertible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、LosslessStringConvertibleから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from MutableCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、MutableCollectionから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from RandomAccessCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、RandomAccessCollectionから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from RangeReplaceableCollection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、RangeReplaceableCollectionから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from RawRepresentable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、RawRepresentableから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from SIMD.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、SIMDから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from SIMDStorage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、SIMDStorageから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from Sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、Sequenceから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from Strideable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、Strideableから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from TextOutputStream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、TextOutputStreamから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from TextOutputStreamable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、TextOutputStreamableから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from UnkeyedEncodingContainer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、UnkeyedEncodingContainerから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from _CustomPlaygroundQuickLookable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、_CustomPlaygroundQuickLookableから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from _UnicodeEncoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、_UnicodeEncodingから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from _UnicodeParser.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、_UnicodeParserから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation contains preliminary information about an API or technology in development.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書は、開発でのテクノロジーまたはAPIのための事前の情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example appends the elements of a Range&lt;Int&gt; instance to an array of integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはあるRange&lt;Int&gt;インスタンスに属する複数要素を整数の配列に追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example checks to see whether a favorite actor is in an array storing a movie’s cast.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、映画出演者を格納する配列の中にお気に入りの俳優がいるかどうか確認するために調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a ClosedRange&lt;Character&gt; from “a” up to, and including, “z”.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、「a」から「z」までの、そしてそれを含むClosedRange&lt;Character&gt;を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a PartialRangeFrom&lt;Double&gt; instance that includes any value greater than or equal to 5.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、PartialRangeFrom&lt;Double&gt;インスタンスで5.0より大きいか等しい何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a PartialRangeThrough&lt;Double&gt; instance that includes any value less than or equal to 5.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、PartialRangeThrough&lt;Double&gt;インスタンスで5.0より少ないか等しい何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a PartialRangeUpTo&lt;Double&gt; instance that includes any value less than 5.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、PartialRangeUpTo&lt;Double&gt;インスタンスで5.0より少ない何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a Range&lt;Double&gt; from zero up to, but not including, 5.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ゼロから5.0までの、しかしそれを含めないRange&lt;Double&gt;を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates three new values in the range 1...100.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、３つの新しい値を範囲1...100において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates three new values in the range 1..&lt;100.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、３つの新しい値を範囲1..&lt;100において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example declares the numberOfCookies constant, using an integer literal to express its value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、numberOfCookies定数を宣言します、整数リテラルをそれの値を表すために使っています：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example defines a rawData string with some unstructured data, and then uses the string’s prefix(while:) method to create a substring of the numeric prefix:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、rawData文字列を何らかの構造化されていないデータで定義します、それからその文字列のもつprefix(while:)メソッドを使うことで数字接頭辞からなる下位文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example demonstrates getting a slice from a buffer of strings, finding the index of one of the strings in the slice, and then using that index in the original buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例はいくらかの文字列からなるバッファからスライスを取得する実演をします、スライスの中の文字列の１つのインデックスを見つけて、それからそのインデックスを元のバッファにおいて使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は文字列からなる配列のあるスライスの取得を実演します、スライスの中の文字列の１つのインデックスを見つけて、それからそのインデックスを元の配列において使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example enumerates the characters of the string “Swift” and prints each character along with its place in the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は文字列「Swift」の文字を列挙します、そして各文字をその文字列でのそれの場所とともに出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example finds the index of the last name that begins with the letter A:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、文字A:で始まる、最後の名前のインデックスを見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example finds the largest value in an array of height measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、身長計測の配列の中で最も大きな値を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example finds the smallest value in an array of height measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、身長計測の配列の中で最も小さな値を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example first finds the position of a space (UTF-16 code point 32) in a string’s utf16 view and then uses this method to find the same position in the string’s unicodeScalars view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある空白（UTF-16コード点32）の位置を文字列のもつutf16ビューの中で見つけて、それからこのメソッドを使って文字列のもつunicodeScalarsビューにおける同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example first finds the position of a space (UTF-8 code point 32) in a string’s utf8 view and then uses this method find the same position in the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある空白（UTF-8コード点32）の位置を文字列のもつutf8ビューの中で見つけて、それからこのメソッドを使って文字列における同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example first finds the position of the character "é" and then uses this method find the same position in the string’s utf16 view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、最初に文字"é"の位置を見つけて、それからこのメソッドを使って文字列のもつutf16ビューにおける同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example first finds the position of the character "é", and then uses this method find the same position in the string’s utf8 view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、最初に文字"é"の位置を見つけて、それからこのメソッドを使って文字列のもつutf8ビューにおける同じ位置を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある集合のインデックスと要素のすべてにわたって反復します、５つまたはより少ない文字を持つ名前のインデックスから成るリストを作ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example passes intPointer, a pointer to an Int value, to print(address:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例はintPointer、Int値へのポインタをprint(address:)に渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example passes rawPointer as the initial parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、rawPointerを最初のパラメータとして渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example passes intPointer, a mutable pointer to an Int value, to print(address:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例はintPointer、Int値への可変ポインタをprint(address:)に渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example passes rawPointer as the initial parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、rawPointerを最初のパラメータとして渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example picks a name at random from an array:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある名前を無作為に配列から選出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example prints the characters of a string in reverse order:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある文字列に属する文字を逆順で出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes all the vowels from a string:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、全ての母音を文字列から除去します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes the hyphen from the middle of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある文字列の真ん中からハイフンを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes the middle element from an array of measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、測定結果からなる配列から真ん中の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes three elements from the middle of an array of measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、測定結果からなる配列の真ん中から３つの要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、streetsSliceをスライスの中の文字列の１つについて検索して、それからそのインデックスを元々の配列において使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのようにいくつかの[Int]インスタンスからなる配列が別の[Int]インスタンスを分離子として使ってつなぎ合わされるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to build a dictionary of letter frequencies of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある文字列の文字頻度の辞書を作り上げる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to find the sum of an array of numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのように数からなる配列の合計を見出すかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、max(by:)メソッドを辞書上で使って、最も高い値を持つキー値ペアを見つける方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、min(by:)メソッドを辞書上で使って、最も低い値を持つキー値ペアを見つける方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how you can check an array for an expense greater than $100.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのようにあなたが$100より大きい出費についてある配列を調べるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how you can modify one of the names in an array of students.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例が示すのは、どうやってあなたが学生らの配列の中の名前の１つを修正できるかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows the different ways that you can call a function that takes a constant raw pointer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、あなたが定数の生のポインタを取るある関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows the different ways that you can call a function that takes a mutable pointer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、あなたが可変ポインタを取る関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows the different ways that you can call a function that takes a mutable raw pointer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、あなたが変数の生のポインタを取るある関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows the different ways that you can call the a function that takes a constant pointer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、あなたが定数ポインタを取る関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example tests whether one countable range begins with the elements of another countable range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある可付番範囲が別の可付番範囲の要素で始まるかどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example tests whether one countable range shares the same elements as another countable range and an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある可付番範囲が同じ要素を別の可付番範囲とそしてある配列と共有するかどうかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses implicit bridging to pass a pointer to the elements of numbers when calling print(address:as:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、print(address:as:)を呼び出す時に、暗黙的ブリッジを使ってnumbersの要素へのポインタを渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses implicit bridging to pass a pointer to the elements of numbers when calling printInt(atAddress:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、暗黙的ブリッジを使ってポインタをnumbersの要素へと、printInt(atAddress:)を呼び出す時に渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the last(where:) method to find the last negative number in an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、last(where:)メソッドを使って、整数の配列において最後の負数を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例はlexicographicallyPrecedesメソッドを使って、どの整数配列がある語彙筆記的順序において最初に来るかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function does not block the underlying thread.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、基礎をなすスレッドを遮断しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function does not infer element moves.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、要素が移動することを推測しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function is the only requirement of the Comparable protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、Comparableプロトコルのただ１つの要件です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function may be called even from within child (or any other) tasks, and causes the group to be canceled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、子（または何か他の）タスク内部からでさえ呼び出されるかもしれません、そしてグループが取り消されることを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function throws an error if any values are invalid for the given encoder’s format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、与えられたエンコーダの形式に対して何らかの値が無効であるならばエラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This includes some scalars that are not typically considered to be emoji:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、概してemojiであると考えられない幾つかのスカラーを含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This index must be a valid index of String(unicodeScalars).utf16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスはString(unicodeScalars).utf16の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This index must be a valid index of at least one view of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスは、charactersの少なくとも１つのビューで有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This index must be a valid index of at least one view of the string shared by unicodeScalars.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスは、unicodeScalarsによって共有される文字列の少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This index must be a valid index of at least one view of the string shared by utf16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスは、utf16によって共有される文字列の少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This index must be a valid index of at least one view of the string shared by utf8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスは、utf8によって共有される文字列の少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この情報は変更される場合があり、この文書に沿って実装されるソフトウェアは最終的なオペレーティングシステム・ソフトウェアでテストされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer creates a new pointer to the same address as other and performs no allocation or copying.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、新しいポインタをotherと同じアドレスに作成して、割り当てやコピーを実行することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer creates a new pointer to the same address as other and performs no allocation or copying.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、新しいポインタをotherと同じアドレスに作成して、割り当てやコピーを実行することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer creates asynchronous work on behalf of the synchronous function that calls it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、非同期作業を、それを呼び出す同期関数の代わりに作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer does not perform any range or overflow checking.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、全く範囲またはオーバーフロー検査を実行しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer does not try to repair ill-formed UTF-8 code unit sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、誤形式UTF-8コード単位シーケンスの修復を試みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、デコーダからの読み出しが失敗するならば、または読み込んだデータが不正またはそうでなくとも無効ならば、エラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザはどんな型とでも働きます、そしてあつらえのdebugDescriptionプロパティをCustomDebugStringConvertibleに準拠する型に対して使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザはどんな型とでも働きます、そしてあつらえのdescriptionプロパティをCustomStringConvertibleに準拠する型に対して使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is a demonstration only—if you need the Unicode scalar representation of a string, use its unicodeScalars view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは単に１つの実演です—あなたがある文字列のユニコードスカラー表現を必要とするならば、それのunicodeScalarsビューを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is an optimized type used internally by the core scheduling operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、コアスケジューリング演算によって内部的に使われるある最適化された型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is equivalent to the inverse of a set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはある集合の逆と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is identical to init(cString: UnsafePointer&lt;CChar&gt;) but operates on an unsigned sequence of bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、init(cString: UnsafePointer&lt;CChar&gt;)と同一です、しかし符号なしバイトシーケンス上で作動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is meant to be passed to String.reserveCapacity(_:); it may be slightly larger or smaller than the sum of the counts of each literal segment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはString.reserveCapacity(_:)に渡されるよう意図されます；それは各リテラル文節を計算する合計より少しばかり大きいか小さいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the greater-than operator (&gt;) for any type that conforms to Comparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Comparableに準拠するあらゆる型に対して、より大きい演算子（&gt;）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the greater-than-or-equal-to operator (&gt;=) for any type that conforms to Comparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Comparableに準拠するあらゆる型に対して、より大きいか等しい演算子（&gt;=）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the less-than-or-equal-to operator (&lt;=) for any type that conforms to Comparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Comparableに準拠するあらゆる型に対して、より少ないか等しい演算子（&lt;=）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Equatableに準拠するあらゆる型に対して、不等演算子（!=）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is useful when a function returns an unmanaged reference and you know that you’re not responsible for releasing the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、ある関数が管理されない参照を返す、そしてあなたがその結果を解放することに責任を持たなくてよいことをあなたが知っているときにときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is useful when a function returns an unmanaged reference and you know that you’re responsible for releasing the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、ある関数が管理されない参照を返す、そしてあなたがその結果を解放することに責任を持つことをあなたが知っているときにときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is useful when passing a reference to an API which Swift does not know the ownership rules for, but you know that the API expects you to pass the object at +0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、Swiftがそれについての所有権規則を知らないAPIにある参照を渡す、しかしそのAPIはあなたがオブジェクトを+0で渡すことを予期するのをあなたが知っているときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is useful when passing an object to an API which Swift does not know the ownership rules for, but you know that the API expects you to pass the object at +1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、Swiftがそれについての所有権規則を知らないAPIにあるオブジェクトを渡す、しかしそのAPIはあなたがオブジェクトを+1で渡すことを予期するのをあなたが知っているときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This iterator terminates after all tasks have completed successfully, or after any task completes by throwing an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータは、全てのタスクが成功裏に完了した後に終了します、または何らかのタスクがエラーをスローすることによって完了した後に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This may require resizing the buffer beyond its original capacity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、バッファの大きさ変更を要請するかもしれません、それの元の収容能力を越えて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means that, depending on the semantics of the specific file system, conversion to a string and back to a path might result in a value that’s different from the original path.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これが意味するのは、特定のファイルシステムの意味論に依存して、ある文字列へそしてパスへ戻す変換は、元のパスとは異なる値という結果になるかもしれないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、外側のfor await inループがStringインスタンスそれらのすべてにわたって反復することを意味します、Counterが生み出す基礎をなすIntそれらではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、外側のfor await inループがStringインスタンスそれらのすべてにわたって反復することを意味します、Counterが生み出す基礎をなすIntそれらではなく：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method does not validate the encoding of a UTF-16 sequence beyond the specified code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、指定されたコード単位を越えてUTF-16シーケンスのエンコードを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method doesn’t throw an error, even if the child task does.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、エラーをスローしません、たとえ子タスクがするとしても。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、指定された範囲の要素をコレクションから取り除き、そして新しい要素を同じ場所に挿入する効果を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、語彙筆記的順序の数学的概念を実装します、それはユニコードに関係はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method initializes the buffer with elements from source until source is exhausted or, if source is a sequence but not a collection, the buffer has no more room for its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドはsourceからの要素でバッファを初期化します、sourceが使い尽くされるまでまたは、sourceがシーケンスであるがコレクションではないならば、バッファがこれ以上それの要素のための部屋を持たなくなるまで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling random(in:using:), passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、random(in:using:)を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling randomElement(using:), passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、randomElement(using:)を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling shuffle(using:), passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、shuffle(using:)を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling shuffled(using:), passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、shuffled(using:)を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling the version that takes a generator, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、ある生成子をとるバージョンを、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、効率のためにreduce(_:_:)より好まれます、その結果がコピーオンライト型である場合、例えばArrayまたは辞書に対しては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method replaces ill-formed UTF-8 sequences with the Unicode replacement character ("\u{FFFD}").</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、誤形式UTF-8シーケンスをユニコード代替文字（"\u{FFFD}"）で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns nil if the container has no elements left to decode, or if the value is null.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドはnilを返します、もしコンテナがデコードするのに残る要素を持たないならば、またはもし値がnullならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns a typed pointer for further typed access to the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、この後で型付アクセスをこのメモリにするために型付ポインタを返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method works regardless of whether the static string stores a pointer or a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、静的文字列がポインタまたは単一ユニコードスカラー値のどちらを格納するかに関係なく働きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This numeric type includes fractions such as “⅕” (U+2155 VULGAR FRACTION ONE FIFTH), numerical CJK ideographs like “兆” (U+5146 CJK UNIFIED IDEOGRAPH-5146), and other scalars that are not decimal digits used positionally in the writing of base-10 numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この数値型は、分数たとえば “⅕” (U+2155 VULGAR FRACTION ONE FIFTH)、数値CJK文字の “兆” (U+5146 CJK UNIFIED IDEOGRAPH-5146) のようなもの、そして底10の数を書くのに桁区切りに使われる10進桁でない他のスカラーを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This operation does not change reference counts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この操作は参照カウントを変更しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This pointer must be a pointer to the start of a previously allocated memory block.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタは、以前にアロケートされたメモリブロックの始まりを指すポインタでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property applies to a small number of spacing vowel letters occurring in some Southeast Asian scripts like Thai and Lao, which use a visual order display model.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、タイ語およびラオ語のようないくつかの南東アジア書体に現れる少数の空白母音字に適用されます、それは視覚順序表示モデルを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “ASCII_Hex_Digit” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “ASCII_Hex_Digit” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Age” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Age” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Alphabetic” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Alphabetic” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Bidi_Control” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Bidi_Control” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Bidi_Mirrored” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Bidi_Mirrored” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Canonical_Combining_Class” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Canonical_Combining_Class” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Case_Ignorable” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Case_Ignorable” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Cased” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Cased” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_Casefolded” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Changes_When_Casefolded” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_Casemapped” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Changes_When_Casemapped” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_Lowercased” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Changes_When_Lowercased” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_NFKC_Casefolded” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Changes_When_NFKC_Casefolded” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_Titlecased” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Changes_When_Titlecased” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_Uppercased” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Changes_When_Uppercased” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Dash” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Dash” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Default_Ignorable_Code_Point” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Default_Ignorable_Code_Point” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Deprecated” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Deprecated” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Diacritic” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Diacritic” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Emoji_Modifier_Base” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Emoji_Modifier_Base” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Emoji_Modifier” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Emoji_Modifier” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Emoji_Presentation” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Emoji_Presentation” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Emoji” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Emoji” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Extender” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Extender” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Full_Composition_Exclusion” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Full_Composition_Exclusion” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “General_Category” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “General_Category” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Grapheme_Base” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Grapheme_Base” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Grapheme_Extend” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Grapheme_Extend” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Hex_Digit” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Hex_Digit” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “IDS_Binary_Operator” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “IDS_Binary_Operator” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “IDS_Trinary_Operator” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “IDS_Trinary_Operator” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “ID_Continue” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “ID_Continue” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “ID_Start” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “ID_Start” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Ideographic” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Ideographic” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Join_Control” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、Unicode Standardにおける “Join_Control” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Logical_Order_Exception” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Logical_Order_Exception” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Lowercase_Mapping” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Lowercase_Mapping” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Lowercase” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Lowercase” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Math” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Math” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Name_Alias” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Name_Alias” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Name” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Name” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Noncharacter_Code_Point” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Noncharacter_Code_Point” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Numeric_Type” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Numeric_Type” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Numeric_Value” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Numeric_Value” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Pattern_Syntax” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Pattern_Syntax” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Pattern_White_Space” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Pattern_White_Space” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Quotation_Mark” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Quotation_Mark” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Radical” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Radical” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Sentence_Terminal” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Sentence_Terminal” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Soft_Dotted” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Soft_Dotted” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Terminal_Punctuation” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Terminal_Punctuation” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Titlecase_Mapping” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、Unicode Standardにおける “Titlecase_Mapping” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Unified_Ideograph” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Unified_Ideograph” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Uppercase_Mapping” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Uppercase_Mapping” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Uppercase” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Uppercase” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Variation_Selector” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “Variation_Selector” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “White_Space” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “White_Space” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “XID_Continue” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “XID_Continue” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “XID_Start” property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ユニコード標準における “XID_Start” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is true for all scalars for which isASCIIHexDigit is true as well as for their CJK halfwidth and fullwidth variants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、それに対してisASCIIHexDigitがtrueである全てのスカラーに対して、それだけでなくそれらのCJK半角および全角異字体に対しても、trueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is true for scalars that are spaces, separator characters, and other control characters that should be treated as whitespace for the purposes of parsing text elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティがtrueであるのは、空白、分離子文字、そして他の制御文字であるスカラーに対してです、それはテキスト要素を構文解析する目的のために空白として扱われるべきものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is true whenever one or more of changesWhenLowercased, changesWhenUppercased, or changesWhenTitlecased are true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティはtrueです、１つ以上のchangesWhenLowercased、changesWhenUppercased、またはchangesWhenTitlecasedがtrueである時はいつでも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is a String, not a Unicode.Scalar or Character, because some mappings may transform a scalar into multiple scalars or graphemes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、あるStringです、Unicode.ScalarまたはCharacterではなく、なぜならいくつかのマッピングはスカラーを複数のスカラーや書記素に分解するかもしれないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is always false for unsigned integer types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、符号なし整数型に対して常にfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is false for CJK punctuation and symbols, as well as for compatibility ideographs (which canonically decompose to unified ideographs).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、CJK句読点およびシンボルに対してfalseです、互換表意文字だけでなく（それは統一表意文字に正準に分解されます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is true for scalars that are rendered as emoji by default and also for scalars that have a non-default emoji rendering when followed by U+FE0F VARIATION SELECTOR-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティがtrueであるのは、emojiとして初期状態で描出されるスカラーに対して、そしてまたU+FE0F VARIATION SELECTOR-16が後に続く場合に描出する非初期状態emojiを持つスカラーに対してです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property roughly defines the class of “Chinese characters” and does not include characters of other logographic scripts such as Cuneiform or Egyptian Hieroglyphs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、おおよそ “漢字” のクラスを定義します、そして他の表意文字書体の文字、たとえば楔形またはエジブト語ヒエログリフなどを含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This reflects the fact that a task can be canceled for many reasons, and additional reasons can accrue during the cancellation process.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、あるタスクは多くの理由のために取り消されることがありうるという事実を反映します、そして追加的な理由は取り消しプロセスの間に収集できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This representation matches the one used when String instances are passed to C APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この表現は、StringインスタンスがC APIに渡される時に使われるものと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This sample code project is associated with WWDC21 session 10194: Swift Concurrency: Update a Sample App.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この見本コードプロジェクトは、WWDC21 セッション 10194: Swift Concurrency: Update a Sample Appと関連します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This sample provides two separate versions of the Coffee Tracker app:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この見本は、２つの別のバージョンのCoffee Trackerアプリを提供します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This type is inherently sendable and can safely be used and stored in multiple task contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型は、本質的に送信可能なものです、そして安全に使われることそして複数のタスク文脈において格納されることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This type must be a class so it has a stable identity, that is used as key value for lookups in the task local storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型は、classでなければなりません、なのでそれは安定した同一性を持ちます、それはタスクローカルストレージにおける検索それらに対するキー値として使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Close_Punctuation (abbreviated Pe) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準における分類区分Close_Punctuation（簡略形式Pe）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Connector_Punctuation (abbreviated Pc) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるConnector_Punctuation（簡略形式Pc）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Control (abbreviated Cc) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、Unicode StandardにおけるControl（簡略形式Cc）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Currency_Symbol (abbreviated Sc) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるCurrency_Symbol（簡略形式Sc）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Dash_Punctuation (abbreviated Pd) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるDash_Punctuation（簡略形式Pd）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Decimal_Number (abbreviated Nd) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるDecimal_Number（簡略形式Nd）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Enclosing_Mark (abbreviated Me) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるEnclosing_Mark（簡略形式Me）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Final_Punctuation (abbreviated Pf) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるFinal_Punctuation（簡略形式Pf）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Format (abbreviated Cf) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、Unicode StandardにおけるFormat（簡略形式Cf）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Initial_Punctuation (abbreviated Pi) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるInitial_Punctuation（簡略形式Pi）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Letter_Number (abbreviated Nl) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるLetter_Number（簡略形式Nl）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Line_Separator (abbreviated Zl) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるLine_Separator（簡略形式Zl）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Lowercase_Letter (abbreviated Ll) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるLowercase_Letter（簡略形式Ll）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Math_Symbol (abbreviated Sm) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるMath_Symbol（簡略形式Sm）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Modifier_Letter (abbreviated Lm) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるModifier_Letter（簡略形式Lm）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Modifier_Symbol (abbreviated Sk) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるModifier_Symbol（簡略形式Sk）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Nonspacing_Mark (abbreviated Mn) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるNonspacing_Mark（簡略形式Mn）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Open_Punctuation (abbreviated Ps) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるOpen_Punctuation（簡略形式Ps）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Other_Letter (abbreviated Lo) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるOther_Letter（簡略形式Lo）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Other_Number (abbreviated No) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるOther_Number（簡略形式No）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Other_Punctuation (abbreviated Po) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるOther_Punctuation（簡略形式Po）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Other_Symbol (abbreviated So) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるOther_Symbol（簡略形式So）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Paragraph_Separator (abbreviated Zp) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるParagraph_Separator（簡略形式Zp）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Private_Use (abbreviated Co) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるPrivate_Use（簡略形式Co）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Space_Separator (abbreviated Zs) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるSpace_Separator（簡略形式Zs）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Spacing_Mark (abbreviated Mc) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるSpacing_Mark（簡略形式Mc）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Surrogate (abbreviated Cs) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、Unicode StandardにおけるSurrogate（簡略形式Cs）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Titlecase_Letter (abbreviated Lt) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるTitlecase_Letter（簡略形式Lt）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Unassigned (abbreviated Cn) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、Unicode StandardにおけるUnassigned（簡略形式Cn）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category Uppercase_Letter (abbreviated Lu) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、ユニコード標準におけるUppercase_Letter（簡略形式Lu）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value is nil for code points that have not yet been assigned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、まだ割り当てられていないコード点に対してnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Those “pairs” of code units are called surrogate pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら「ペア」のコード単位は、サロゲートペアと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Though similar in name, this property is not equivalent to changesWhenCaseMapped.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>名前が似ているにもかかわらず、このプロパティはchangesWhenCaseMappedと等しくありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus, creating a slice has O(1) complexity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>したがって、ある切り取り（スライス）の作成はO(1)の計算量を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To await the results of a completion handler in these cases, add a continuation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらの場合に完了ハンドラの結果をawaitするには、continuationを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access the stride, use MemoryLayout&lt;Pointee&gt;.stride.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストライドにアクセスするには、MemoryLayout&lt;Pointee&gt;.strideを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access the stride, use MemoryLayout&lt;Pointee&gt;.stride.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストライドにアクセスするには、MemoryLayout&lt;Pointee&gt;.strideを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access the underlying memory through typed operations, the memory must be bound to a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付演算を通して基礎をなすメモリにアクセスするには、メモリは自明型に束縛されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access the underlying memory, invoke withUnsafeBufferPointer on the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基礎をなすメモリにアクセスするには、withUnsafeBufferPointerを配列上で発動してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add Strideable conformance to a custom type, choose a Stride type that can represent the distance between two instances and implement the advanced(by:) and distance(to:) methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Strideable準拠をあつらえの型に加えるには、２つのインスタンスの間の隔たりを表現可能であるStride型のひとつを選んで、advanced(by:)とdistance(to:)メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add TextOutputStreamable conformance to a custom type, implement the required write(to:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>TextOutputStreamable準拠をあつらえの型に加えるには、必須write(to:)メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add the complication to an active watch face, start by building and running the sample code project in the simulator, and follow these steps:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンプリケーションをアクティブなウォッチフェイスに加えるには、見本コードプロジェクトをシミュレータにおいてビルドおよび実行することによって始めます、そしてこれらの段階に従ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なる型の値を加算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>予期されないコピーを避けるために、代わりにindex(after:)メソッドを使ってstartIndexで始めることで、インデックスを生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To bind a region of memory to a type that is a different size, convert the buffer to a raw buffer and use the bindMemory(to:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるメモリ領域を異なるサイズの型に束縛するには、そのバッファを新しい生のバッファに変換して、bindMemory(to:)メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To bind a region of memory to a type that is a different size, convert the pointer to a raw pointer and use the bindMemory(to:capacity:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリのある領域を異なるサイズである型にバインドするには、ポインタを生のポインタに変換して、bindMemory(to:capacity:)メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To bind memory to T, use bindMemory(to:capacity:) instead of this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリをTに束縛するには、bindMemory(to:capacity:)をこのメソッドの代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To bind uninitialized memory to a type without initializing it, use the bindMemory(to:count:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリをそれを初期化することなくある型に束縛するには、bindMemory(to:count:)メソッドを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To bind uninitialized memory to a type without initializing it, use the bindMemory(to:count:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリをそれを初期化することなくある型に束縛するには、bindMemory(to:count:)メソッドを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To call countLetterChanges(_:_:) with two strings, use an unbounded range in each string’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>countLetterChanges(_:_:)を２つの文字列で呼び出すには、無境界範囲を各文字列の添え字において使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To cancel a group, call the TaskGroup.cancelAll() method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グループを取り消すには、TaskGroup.cancelAll()メソッドを呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To cancel a group, call the ThrowingTaskGroup.cancelAll() method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グループを取り消すには、ThrowingTaskGroup.cancelAll()メソッドを呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To check whether x is represented by a surrogate pair, use UTF16.width(x) == 2.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>xがあるサロゲートペアで表現されるかどうか調べるには、UTF16.width(x) == 2を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To check whether a collection is empty, use its isEmpty property instead of comparing count to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションが空かどうか調べるには、それのisEmptyプロパティを使ってください、countをゼロと比較するのでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To check whether a string is empty, use its isEmpty property instead of comparing the length of one of the views to 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列が空かどうか調べるには、それのisEmptyプロパティを使ってください、ビューの内の１つの長さを0と比較するのでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To conform to Hashable, implement the hash(into:) requirement instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Hashableに準拠するには、hash(into:)要件を代わりに実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To construct a selector for a property’s Objective-C getter or setter method, prefix the property name using the getter: or setter: label, like #selector(getter: MyViewController.myButton).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>セレクタをあるプロパティの持つObjective-Cゲッターまたはセッターメソッドに対して組み立てるには、プロパティ名にgetter:またはsetter:ラベルを使って接頭辞を付けてください、#selector(getter: MyViewController.myButton)のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To convert a String.UTF16View instance back into a string, use the String type’s init(_:) initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>String.UTF16Viewインスタンスを逆に文字列へと変換するには、String型のもつinit(_:)イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To convert an NSRange instance to a range of String.Index, use the Range(_:in:) initializer, which takes an NSRange and a string as arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NSRangeインスタンスをString.Indexの範囲へ変換するには、Range(_:in:)イニシャライザを使ってください、それはNSRangeと文字列を引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create a Zip2Sequence instance, use the zip(_:_:) function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Zip2Sequenceインスタンスを作成するには、zip(_:_:)関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create a continuation in asynchronous code, call the withUnsafeContinuation(_:) or withUnsafeThrowingContinuation(_:) function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある継続を非同期コードにおいて作成するには、withUnsafeContinuation(_:)またはwithUnsafeThrowingContinuation(_:)関数を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create a task group, call the withTaskGroup(of:returning:body:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクグループを作成するには、withTaskGroup(of:returning:body:)メソッドを呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To decode a code unit sequence completely, call this method repeatedly until it returns UnicodeDecodingResult.emptyInput.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコード単位のシーケンスを完全にデコードするには、このメソッドを繰り返し、それがUnicodeDecodingResult.emptyInputを返すまで呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To demonstrate the different views available for every string, the following examples use this String instance:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる文字列で利用可能な異なるビューを実際に示すために、以降の例はこのStringインスタンスを使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To ensure that all updates to this property are made on the main thread, place the type on the main actor:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティへの全ての更新がメインスレッド上でなされることを確実にするために、その型をメインアクター上に置いてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find individual elements of a string, use the appropriate view for your task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の個々の要素を手に入れるには、あなたの作業に適切なビューを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find the distance in bytes between two pointers, convert them to UnsafeRawPointer instances before calling distance(to:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのポインタの間の隔たりをバイトで知るには、それらをUnsafeRawPointerインスタンスに、distance(to:)を呼ぶ前に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find the index of the day in question, follow these steps:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>質問の日付のインデックスを見つけるには、これらの手順に従ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To get an instance of UnsafeCurrentTask for the current task, call the withUnsafeCurrentTask(body:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeCurrentTaskのインスタンスを現在のタスクに対して取得するには、withUnsafeCurrentTask(body:)メソッドを呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To iterate over the elements of a collection with its indices, use the zip(_:_:) function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションの要素すべてにわたってそれのインデックスで反復するには、zip(_:_:)関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make your custom type conform to the TextOutputStream protocol, implement the required write(_:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえのクラスをTextOutputStreamプロトコルに準拠させるには、必須write(_:)メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To multiply values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なる型の値を乗算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To perform all methods asynchronously, replace the currentDrinks property’s didSet operation with private(set) and add a new async method named drinksUpdated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全てのメソッドを非同期に実行するには、currentDrinksプロパティのもつdidSet演算をprivate(set)で置き換えます、そして新しいasyncメソッドをdrinksUpdatedという名前で加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To protect the stored properties on the controller when accessed asynchronously, change HealthKitController from a class type to an actor:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>格納プロパティをコントローラ上で非同期にアクセスされた時に保護するには、HealthKitControllerをclass型からactorへと変えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To remove the last element of a collection that might be empty, use the popLast() method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空であるかもしれないあるコレクションの最後の要素を削除するには、popLast()関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To represent those scalar values using 8-bit integers, more than one UTF-8 code unit is often required.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラー値を8ビット整数で表すには、１つ以上のUTF-8コード単位がしばしば必要とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To resume the asynchronous task, call the resume(returning:), resume(throwing:), resume(with:), or resume() method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期タスクを再開するには、resume(returning:)、resume(throwing:)、resume(with:)、またはresume()メソッドを呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To sort the elements of your collection in descending order, pass the greater-than operator (&gt;) to the sort(by:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコレクションの要素を降順にソートするには、より大きい演算子（&gt;）をsort(by:)メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To sort the elements of your sequence in descending order, pass the greater-than operator (&gt;) to the sorted(by:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのシーケンスの要素を降順にソートするには、より大きい演算子（&gt;）をsorted(by:)メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To sort your sequence in descending order, pass the greater-than operator (&gt;) as the areInIncreasingOrder parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのシーケンスを降順にソートするには、より大きい演算子（&gt;）をareInIncreasingOrderパラメータとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To subtract values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なる型の値を減算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the default interpolation, conform a type to ExpressibleByStringInterpolation and implement init(stringLiteral: String).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の補間を使うには、型をExpressibleByStringInterpolationに準拠させて、そしてinit(stringLiteral: String)を実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use this interpolation method, create a string literal with an interpolation using the validating parameter label.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この補間メソッドを使うには、validatingパラメータラベルを使用するある補間で文字列リテラルを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tools for Your Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のためのツール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Topics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>話題</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming a String's Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列のもつ文字を変形します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Translates the given input from one Unicode encoding to another by calling the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された入力をあるユニコード符号化から別のものへと指定されたクロージャを呼び出すことによって翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Translation Between Unicode Encodings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードエンコーディング間の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>True if any lane of mask is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスクのどんなレーンもtrueならば、true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>True if every lane of mask is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスクのあらゆるレーンがtrueならば、true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two edge cases are worth particular attention:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの境界事例は特別な注意を払う価値があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two elements are incomparable if neither is ordered before the other according to the predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの要素は、述部によるとどちらもが他の前に並べられるならば比較できない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two methods that perform synchronous IO — the load and save methods — are factored out into a separate CoffeeDataStore actor, which performs these activities away from the main thread.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同期的なIOを実行する２つのメソッド — loadとsaveメソッド — それらは、ある隔てられたCoffeeDataStoreアクターへと抽出されます、それはこれらの活動をメインスレッドから離して実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two sequences are canonically equivalent if they are equal when sorting the scalars in ascending order by their combining class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのシーケンスは、スカラーをそれらの結合クラスによって昇順でソートする場合にそれらが等しいならば、正準的に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Aliases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Casting and Existential Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型キャストと存在型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Method</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Methods</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型プロパティ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Property</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型プロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type aliases representing the concrete type that a literal takes when no other type information is provided.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>具体的な型を表している型エイリアスで、それをリテラルが取るのは他の型情報が提供されない時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type cast</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型キャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type check</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型チェック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type-Erasing Wrappers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去ラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typed Memory</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付メモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typed Pointers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typed pointers are required to be properly aligned for their Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタは、適切にそれらのPointee型にアラインされることを要求されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that have an integer Stride can be used as the boundaries of a countable range or as the lower bound of an iterable one-sided range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数Strideを持つこれら型は、可付番範囲の境界としてまたは反復可能な片側範囲の下方境界として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typical extenders are length and iteration marks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>典型的なエクステンダは、長さおよび反復マークです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typically, you use this to transform from one type of element to another.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>概して、あなたはこれを使ってある型の要素から別のものへと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UTF-16 View</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UTF-8 View</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UTF16View Elements Match NSString Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF16View要素はNSString文字に一致します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UTF8View Elements Match Encoded C Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF8View要素は符号化C文字列と一致します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unary minus</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単項マイナス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unary plus</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単項プラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unconditionally create a child task in the group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無条件にある子タスクをこのグループの中に作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unconditionally prints a given message and stops execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無条件に与えられたメッセージを出力して実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understanding a Pointer’s Memory State</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるポインタのメモリ状態を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode Codecs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードコーデック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode Scalar Classifications</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラークラス分け</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode Scalar View</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラービュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode scalar values are the 21-bit codes that are the basic unit of Unicode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値は21ビットコードです、それはユニコードの基本的な単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode scalar values that make up a string’s contents can be up to 21 bits long.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列のもつ内容を構成するユニコードスカラー値は、21ビット長に至るまで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uninitialized Memory</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uninitialized memory must be initialized before it can be accessed for reading.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリは、それが読み出しのためアクセスされる前に初期化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uninitialized memory must be initialized with values of a type before it can be used with any typed operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリは、それが何らかの型付き演算で使用される前にある型の値で初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uniqueness Checking</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特有性の検査</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnkeyedDecodingContainer Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnkeyedDecodingContainer 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnkeyedEncodingContainer Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnkeyedEncodingContainer 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションがBidirectionalCollectionプロトコルに準拠しない場合は、startはendより少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションが無作為アクセス性能を保証しない限り、countの算出は、O(n)演算であるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless you’re implementing a scheduler, you don’t generally interact with jobs directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあるスケジューラを実装しようとしているのでない限り、あなたは一般的にジョブそれらと直接に相互作用しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless you’re implementing a scheduler, you don’t generally interact with partial tasks directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあるスケジューラを実装しようとしているのでない限り、あなたは一般的に部分的タスクそれらと直接に相互作用しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike NSString, however, String.UTF16View does not use integer indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、NSStringとは違い、String.UTF16Viewは整数インデックスを使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike Task.detached, the task creating by the Task initializer inherits the priority and actor context of the caller, so the operation is treated more like an asynchronous extension to the synchronous operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Task.detachedとは異なり、Taskイニシャライザによって作成されたタスクは、呼び出し側の優先度とアクター文脈を継承します、なのでoperationはむしろ同期演算のための非同期拡張に近いと見なされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike Task.detached, the task created inherits the priority and actor context of the caller, so the operation is treated more like an asynchronous extension to the synchronous operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Task.detachedとは異なり、作成されたタスクは、呼び出し側の優先度とアクター文脈を継承します、なのでoperationはむしろ同期演算のための非同期拡張に近いと見なされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike other continuations YieldingContinuation may resume more than once.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他の継続とは違いYieldingContinuationは一度より多く再開するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike traditional truncating multiplication, the multipliedFullWidth(by:) method returns a tuple containing both the high and low parts of the product of this value and other.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>従来的な切り詰め乗算と違って、multipliedFullWidth(by:)メソッドは、この値とotherの積のhighおよびlow部分の両方を含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike with isEmpty, calculating a view’s count property requires iterating through the elements of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>isEmptyとは違い、あるビューのcountプロパティを計算することはその文字列の要素を始めから終わりまで反復していく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike with other pointer types, you can't use an array as an implicitly bridged parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他のポインタ型とは違い、あなたは配列を暗黙的にブリッジされるパラメータとして使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeMutableBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeMutableRawBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableRawBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeRawBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeRawBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unsafely converts an unmanaged class reference to a pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>管理されないクラス参照をポインタへと安全でない変換をする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unsafely turns an opaque C pointer into an unmanaged class reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不透明Cポインタの管理されないクラス参照への安全でない転換。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unsigned Integers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unstructured Concurrency</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造化されない並行性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Update the drinksUpdated() method to call the CoffeeDataStore actor using an await call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drinksUpdated()メソッドを更新して、CoffeeDataStoreアクターをawait呼出を使って呼び出すようにください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Updating an App to Use Swift Concurrency</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリをSwift並行性を使うように更新する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Upon reaching 6, the sequence ends:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>6に到達することで、そのシーケンスは終わります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Void or an empty tuple as the return type when declaring a closure, function, or method that doesn’t return a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を返さないクロージャ、関数、またはメソッドを定義する場合は、Voidまたは空のタプルを戻り型として使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drop(while:)を使うことで要素を非同期シーケンスから、その受け取った要素があなたが指定する条件に合うまで省いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>dropFirst(_:)を使ってください、あなたが最初のn要素を基底シーケンスから抜かす、そして残っている要素をずっと渡したい場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use prefix(_:) to reduce the number of elements produced by the asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefix(_:)を使って非同期シーケンスによって生み出された要素の数を減らしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use prefix(while:) to produce values while elements from the base sequence meet a condition you specify.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefix(while:)を使うことで、基底シーケンスからの要素があなたが指定する条件に合う間ずっと値を生み出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Key Paths to Dynamically Access Objective-C Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパスを使って動的にObjective-Cプロパティにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Selectors to Arrange Calls to Objective-C Methods</seg>
      </tuv>
      <tuv lang="ja">
        <seg>セレクタを使ってObjective-Cメソッドへの呼び出しを整える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use a variable or constant with an existential type to hold an instance of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある変数または定数を存在型とともに使うことで、どんな型のインスタンスでも保持するようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use bridged reference types when you need reference semantics or Foundation-specific behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジされた参照型を、あなたが参照意味論またはFoundation特有の挙動を必要とする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use implicit pointer casting or bridging when calling functions that takes pointers as parameters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>暗黙的なポインタキャストまたはブリッジを、ポインタをパラメータとして取る関数を呼び出す場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use imported C types or call C variadic functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC型を使ったり、C可変長引数関数を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use inout syntax to implicitly create a pointer to an instance of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インアウト構文を使って、任意の型のインスタンスへのポインタを暗黙的に作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use key-path expressions to access properties dynamically.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス式を使ってプロパティに動的にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use native Swift syntax to interoperate with types and functions in C and Objective-C.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>本来のSwift構文を使ってCおよびObjective-Cでの型および関数と相互作用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use raw pointers and buffers to access memory for loading and storing as raw bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のポインタとバッファを使って、ロードおよび格納のためにメモリに生のバイトとしてアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use selectors and key paths to interact with dynamic Objective-C APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>セレクタとキーパスを使って動的Objective-C APIと相互作用してます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use slices only for transient computation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスを一時的な計算のためだけに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the advanced(by:) method in generic code to offset a value by a specified distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>advanced(by:)メソッドを総称体コードにおいて使用して、ある値を指定された隔たりだけオフセットしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the bindMemory(to:) method to bind the memory referenced by this buffer to the type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bindMemory(to:)メソッドを使用して、このバッファによって参照されるメモリを型Tへと束縛してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the bindMemory(to:capacity:) method to bind the memory referenced by this pointer to the type T.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>bindMemory(to:capacity:)メソッドを使用して、このポインタによって参照されるメモリを型Tへと束縛してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>compactMap(_:)メソッドを使うことで、基底非同期シーケンスから受け取ったあらゆる要素を変換してください、そして一方でまたあらゆるnil結果をクロージャから廃棄して。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the map(_:) method to transform every element received from a base asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>map(_:)メソッドを使うことで、基底非同期シーケンスから受け取ったあらゆる要素を変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the max(by:) method to determine the index of the day with the most absences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>max(by:)メソッドを使って最も欠席者の多い日付のインデックスを判定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the reduce(_:_:) method to produce a single value from the elements of an entire sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>reduce(_:_:)メソッドを使って、あるシーケンス全体の要素それらからある単一の値を生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the reduce(into:_:) method to produce a single value from the elements of an entire sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>reduce(into:_:)メソッドを使って、あるシーケンス全体の要素それらからある単一の値を生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the shuffle() method to randomly reorder the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>shuffle()メソッドを使って、配列の要素を無作為に再配列してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the stride(from:through:by:) function to create StrideThrough instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>stride(from:through:by:)関数を使ってStrideThroughインスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the stride(from:to:by:) function to create StrideTo instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>stride(from:to:by:)関数を使ってStrideToインスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the Unicode.Scalar type to work with decoded Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Unicode.Scalar型を使ってデコードされたユニコードスカラー値を扱ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結範囲演算子（...）を使ってComparableプロトコルに準拠する何らかの型の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the half-open range operator (..&lt;) to create a range of any type that conforms to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>半開範囲演算子（..&lt;）を使ってComparableプロトコルに準拠する何らかの型の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the masking left shift operator (&amp;&lt;&lt;) when you need to perform a shift and are sure that the shift amount is in the range 0..&lt;lhs.bitWidth.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク左シフト演算子（&amp;&lt;&lt;）を、あなたがあるシフトを実行する、そしてシフト量が範囲0..&lt;lhs.bitWidthの中であるのを確実にする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the masking right shift operator (&amp;&gt;&gt;) when you need to perform a shift and are sure that the shift amount is in the range 0..&lt;lhs.bitWidth.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク右シフト演算子（&amp;&gt;&gt;）を、あなたがあるシフトを実行する、そしてシフト量が範囲0..&lt;lhs.bitWidthの中であるのを確実にする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the postfix range operator (postfix ...) to create a partial range of any type that conforms to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>後置完結範囲演算子（後置...）を使うことで何らかの型の部分的な範囲でComparableプロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the prefix closed range operator (prefix ...) to create a partial range of any type that conforms to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前置完結範囲演算子（前置...）を使うことで何らかの型の部分的な範囲でComparableプロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the prefix half-open range operator (prefix ..&lt;) to create a partial range of any type that conforms to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前置半開範囲演算子（前置..&lt;）を使うことで何らかの型の部分的な範囲でComparableプロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use these functions with numeric values and other comparable types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの関数を数値および他の比較可能な型で使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use these lazy wrappers to defer any filtering or transformation of collection elements until elements are accessed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの遅延ラッパーを使うことで、コレクション要素の何らかの変換またはフィルタを要素がアクセスされるまで延期してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this information to estimate the amount of storage you will need.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この情報を使って、あなたが必要とするストレージの総量を見積もってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to convert an instance of any type to its custom debugging representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って、何らかの型のインスタンスをそれのあつらえのデバッグ表現に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to convert an instance of any type to its preferred representation as a String instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って、何らかの型のインスタンスをそれのより好まれる表現であるStringに変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to convert from another integer type when you know the value is within the bounds of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って別の整数型から変換してください、値がこの型の境界の内部であるのをあなたが知っている場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create a string by converting an MLDataValue with an underlying type of String.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って文字列を作成してください、MLDataValueをある基礎をなす型のStringで変換することによって</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to explicitly convert other to an UnsafeMutableRawPointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って、otherをUnsafeMutableRawPointerインスタンスに明示的に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to explicitly convert other to an UnsafeRawPointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って、otherをUnsafeRawPointerインスタンスに明示的に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to calculate the full result of a product that would otherwise overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで、そうしなければオーバーフローするであろう積の完全な結果を計算してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to calculate the quotient and remainder of a division at the same time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、除算の商と余りを同時に計算してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate an integer within a specific range when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、特定の範囲の内のある整数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate an integer within a specific range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、特定の範囲の内のある整数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive a sequence of non-optional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで非オプショナル値のシーケンスを受け取ってください、あなたの変換がオプショナル値を生成する時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、単一階層の非同期シーケンスを受け取ってください、あなたの変換が各要素に対してひとつの非同期シーケンスを生み出す時は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive a single-level collection when your transformation produces a sequence or collection for each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの変換が各要素に対してひとつのシーケンスまたはコレクションを生成する場合に、このメソッドを使って単一水準コレクションを受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive a single-level sequence when your transformation produces a sequence or collection for each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの変換が各要素に対してひとつのシーケンスまたはコレクションを生成する場合に、このメソッドを使って単一水準シーケンスを受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive an array of non-optional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで非オプショナル値の配列を受け取ってください、あなたの変換がオプショナル値を生成する時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive an array of nonoptional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの変換がオプショナル値を生成する場合に、このメソッドを使って非オプショナル値からなる配列を受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to remove every element in a collection that meets particular criteria.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、コレクションの中の、特定の基準に合うすべての要素を除去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを、非同期シーケンスのもつ値それらがComparableに準拠しない時に、またはあなたがあるあつらえの順序付けをそのシーケンスに適用したい時に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when you have a buffer of memory bound to one type and you need to access that memory as a buffer of another type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うのは、あなたがある型に束縛されるメモリのバッファを持つ、そしてあなたがそのメモリに別の型のバッファとしてアクセスする必要がある場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when you have a pointer to memory bound to one type and you need to access that memory as instances of another type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを、あなたがある型に束縛されたメモリへのポインタを持つ、そしてあなたがそのメモリに別の型のインスタンスとしてアクセスする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when you have a raw pointer to memory that has already been bound to the specified type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがすでに指定された型へ束縛されているメモリに対する生のポインタを持つ場合に、このメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when you need random binary data to generate another value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを、あなたが無作為バイナリデータを別の値を生成するために必要とする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this operator to append the elements of a sequence to the end of range-replaceable collection with same Element type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算子を使って、あるシーケンスに属するいくらかの要素を同じElement型を持つ範囲置換可能なコレクションの終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this property to access the Unicode properties of a Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティを使って、あるユニコードスカラー値のユニコードプロパティにアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this value to estimate how much additional capacity will be needed for the interpolated segments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を使って、どのくらい多くそれ以上の容量が補間される文節に対して必要とされるか見積もってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use typed pointers and buffers to access memory as instances of a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付きのポインタとバッファを使って、メモリに特定の型のインスタンスとしてアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use wrappers, indices, and iterators in operations like slicing, flattening, and reversing a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ラッパー、インデックス、そしてイテレータを、コレクションのスライス（切出し）、平坦化、反転のような演算で使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use your custom types in operations that depend on testing for equality or order and as members of sets and dictionaries.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえの型を、同等性や順番を調べることに基づく演算の中で、そして集合および辞書のメンバとして使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Objective-C Runtime Features in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cランタイム機能をSwiftで使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a Slice instance with a mutable collection requires that the base collection’s subscript(_: Index) setter does not invalidate indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Sliceインスタンスを可変コレクションで使うことは、基底コレクションのもつsubscript(_: Index)セッターがインデックスを無効にしないことを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a String as a Data Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value as rhs is the same as performing a left shift using abs(rhs).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rhsとして負の値を使うことは、abs(rhs)を使って左シフトを実行するのと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value as rhs is the same as performing a right shift with abs(rhs).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の値をrhsとして使うことは、abs(rhs)を使って右シフトを実行するのと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value for rhs performs a left shift using abs(rhs).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rhsに負の値を使うことは、abs(rhs)を使って左シフトを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value for rhs performs a right shift using abs(rhs).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rhsに負の値を使うことは、abs(rhs)を使って右シフトを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a value for rhs that is greater than or equal to the bit width of lhs is an overshift, resulting in zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rhsにlhsのビット幅より大きいか等しい値を使うことは、オーバーシフト、ゼロという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a value for rhs that is greater than or equal to the bit width of lhs is an overshift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rhsにlhsのビット幅より大きいか等しい値を使うことは、オーバーシフトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using any other value for rhs performs a left shift on lhs by that amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rhsに何か他の値を使うことは、左シフトをlhs上でその量だけ行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using any other value for rhs performs a right shift on lhs by that amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>rhsに何か他の値を使うことは、右シフトをlhs上でその量だけ行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the forEach method is distinct from a for-in loop in two important ways:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>forEachメソッドを使うことは、for-inループとは２つの重要なやり方においてまったく異なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefix(through:)メソッドを使うことは、部分的な完結範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefix(upTo:)メソッドを使うことは、部分的な半開範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>return文をbodyクロージャにおいて使うことは、ただ現在のbodyへの呼び出しから抜け出すだけです、全く外側のスコープからではなくて、そして続いて起こる呼び出しを飛ばしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>suffix(from:)メソッドを使うことは、インデックスからの部分的範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the trackpad, firmly press the watch face to put the face in edit mode, then tap Customize.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>トラックパッドを使って、しっかりウォッチフェイスを押して、フェイスを編集モードに入れて、それからCustomizeをタップしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using this initializer is equivalent to initializing a string with an empty string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使うことは、ある文字列を空の文字列リテラルで初期化するのと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using this method with types that have a noninteger Stride may result in an approximation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを非整数Strideを持つ型とともに使うことは、近似値という結果になるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using this property directly is discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティを直接に使うことは、推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>有効なインデックスは、各要素の位置、および添え字引数として使うのに有効でない“終わりを過ぎた”位置から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ExtendedGraphemeClusterLiteralTypeに対して有効な型は、Character、String、そしてStaticStringです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for StringLiteralType are String and StaticString.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StringLiteralTypeに対する有効な型は、StringとStaticStringです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnicodeScalarLiteralTypeに対する有効な型は、Unicode.Scalar、Character、String、そしてStaticStringです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Value Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Values and Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値とコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Values in interpolations are converted to strings, and then passed to that initializer just like any other string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補間の中の値は文字列に変換されます、そしてそれからそのイニシャライザに渡されます、ちょうど何か他の文字列リテラルのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Variation selectors allow rendering engines that support them to choose different glyphs to display for a particular code point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異字体セレクタそれらは、レンダリングエンジンがそれらをサポートすることで種々の字体を選んで特定のコード点に対して表示することを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Void Type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>void型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>WARNING: this initializer is not memory-safe!</seg>
      </tuv>
      <tuv lang="ja">
        <seg>警告：このイニシャライザはメモリ安全ではありません！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wait and collect all group child task completions:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全てのグループ子タスク完了を待って収集します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wait for all remaining tasks in the task group to complete before returning.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>復帰する前にタスクグループの中の残っているタスクの全てが完了するのを待機します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wait for the next child task to complete, and return a result containing either the value that the child task returned or the error that it threw.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の子タスクが完了するのを待機します、そして子タスクが返した値またはそれがスローしたエラーのどちらかを含んでいる値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wait for the next child task to complete, and return the value it returned or rethrow the error it threw.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の子タスクが完了するのを待ちます、そしてそれが返した値を返します、またはそれがスローしたエラーを再スローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wait for the next child task to complete, and return the value it returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の子タスクが完了するのを待機します、そしてそれが返した値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wait for the task to complete, returning (or throwing) its result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクが完了するのを待ちます、それの結果を返します（またはスローします）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wait for the task to complete, returning its result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクが完了するのを待ちます、それの結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Warning</seg>
      </tuv>
      <tuv lang="ja">
        <seg>警告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Warning: All buffer elements must be initialized before calling this.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>警告：全てのバッファ要素はこれを呼び出す前に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Watch the session to see the process step by step, and then compare the two projects to see the differences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この過程を段階的に理解するためにセッションを視聴してください、そしてそれから２つのプロジェクトを比べてその違いを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When letters.reduce(into:_:) is called, the following steps occur:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>letters.reduce(into:_:)が呼び出される時、以下の段階が生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When numbers.reduce(_:_:) is called, the following steps occur:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>numbers.reduce(_:_:)が呼び出される時、以下の段階が生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When pointee is used as the left side of an assignment, the instance must be initialized or this pointer’s Pointee type must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>pointeeが代入の左側として使われる場合、インスタンスは初期化されなければなりません、またポインタのもつPointee型は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When U+200C ZERO WIDTH NON-JOINER is inserted between two characters, it directs the rendering engine to render them separately/disconnected when it might otherwise render them as a ligature.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>U+200C ZERO WIDTH NON-JOINER（ゼロ幅非接合子）が２つの文字の間に挿入される時、それはレンダリングエンジンにそれらを個別に／分離して描写するよう指図します、それがそうでなければそれらを合字として描出するかもしれない時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When U+200D ZERO WIDTH JOINER is inserted between two characters, it directs the rendering engine to render them as a connected glyph when it would otherwise render them independently.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>U+200D ZERO WIDTH JOINER（ゼロ幅接合子）が２つの文字の間に挿入される時、それはレンダリングエンジンにそれらをある結合される字体として描写するように指図します、それがそうでなければそれらを独立して描出するであろう時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a literal expression is written with no type information, Swift uses these type aliases to determine what type to use for the expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リテラル表現が型情報なしで記述される時、Swiftはこれらの型エイリアスを使ってどの型をその式に使うか決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a string’s contiguous storage fills up, a new buffer must be allocated and data must be moved to the new storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の隣接ストレージがいっぱいになるとき、新しいストレージが割り当てられる必要があり、データは新しいストレージに移動される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function or method with an UnsafeMutablePointer parameter, you can pass an instance of that specific pointer type or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数やメソッドをUnsafeMutablePointerパラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡すか、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function or method with an UnsafeMutableRawPointer parameter, you can pass an instance of that specific pointer type, pass an instance of a compatible pointer type, or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数やメソッドをUnsafeMutableRawPointerパラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡す、互換ポインタ型のインスタンスを渡す、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function or method with an UnsafePointer parameter, you can pass an instance of that specific pointer type, pass an instance of a compatible pointer type, or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数やメソッドをUnsafePointerパラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡す、互換ポインタ型のインスタンスを渡す、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function or method with an UnsafeRawPointer parameter, you can pass an instance of that specific pointer type, pass an instance of a compatible pointer type, or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数やメソッドをUnsafeRawPointerパラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡す、互換ポインタ型のインスタンスを渡す、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function that takes a C function pointer argument, you can pass a top-level Swift function, a closure literal, a closure declared with the @convention(c) attribute, or nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C関数ポインタ引数を取る関数を呼び出す場合、あなたはトップレベルスウィフト関数、クロージャリテラル、@convention(c)属性で宣言されるクロージャ、またはnilを渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function that takes a pointer as a parameter, you can use implicit casting to pass a compatible pointer type or implicit bridging to pass a pointer to a variable or the contents of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタをパラメータとして取る関数を呼び出す場合、あなたは、暗黙的なキャストを使って互換性のあるポインタ型を渡すか、暗黙的なブリッジを使ってポインタを変数または配列の内容に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling the initialize(from:) method on a buffer b, the memory referenced by b must be uninitialized or the Element type must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>initialize(from:)メソッドをバッファb上で呼び出す場合、bによって参照されるメモリは未初期化でなければなりません、またはElement型が自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling the initializeMemory(as:from:) method on a buffer b, the memory referenced by b must be uninitialized or initialized to a trivial type, and must be properly aligned for accessing S.Element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>initializeMemory(as:from:)メソッドをバッファb上で呼び出す場合、bによって参照されるメモリは未初期化であるか自明型に初期化される必要があります、そしてS.Elementにアクセスするために適切にアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When declaring a function or method, you don’t need to specify a return type if no value will be returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数またはメソッドを宣言するとき、値が返されることがないならばあなたは戻り型を指定する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When multiple calls are awaiting a produced value from next any call to yield will resume all awaiting calls to next with that value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複数の呼び出しがある生成値を次の何らかの呼び出しから生み出されるのを待っている時、全ての待機している次への呼び出しをその値で再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When reading from memory as raw bytes when that memory is bound to a type, you must ensure that you satisfy any alignment requirements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリから読み出しをそのメモリがある型に束縛される時に生のバイトとして行う場合、あなたがあらゆるアライメント要件を満たすことを確実にしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When reading from or writing to memory as raw bytes when that memory is bound to a type, you must ensure that you satisfy any alignment requirements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリから読み出しや書き込みをそのメモリがある型に束縛される時に生のバイトとして行う場合、あなたがあらゆるアライメント要件を満たすことを確実にしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When reading from the pointee property, the instance referenced by this pointer must already be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>pointeeプロパティから読み出している時、このポインタによって参照されるインスタンスは既に初期化されていなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the forceASCII parameter is true, a Unicode.Scalar instance with a value greater than 127 is represented using an escaped numeric value; otherwise, non-ASCII characters are represented using their typical string value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>forceASCIIパラメータがtrueである場合、127より大きい値をもつUnicode.Scalarインスタンスはエスケープされた数的な値を使って表されます、そうでなければ、非ASCIIはそれらの典型的な文字列値を使って表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the bit width of T (the type of source) is equal to or greater than this type’s bit width, the result is the truncated least-significant bits of source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>T（sourceの型）のビット幅がこの型のもつビット幅と等しいかより大きいならば、結果はsourceの先端を切った最下位ビットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the bit width of T is less than this type’s bit width, the result is sign-extended to fill the remaining bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Tのビット幅がこの型のもつビット幅より小さいならば、結果は残りのビットを満たすように符号拡張されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the return value is false, the value of i is equal to limit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り値がfalseの場合、iの値はlimitに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the sequence is exhausted, the accumulating value is returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが使い尽くされる時、蓄積値が呼び出し側へ返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the sequence is exhausted, the last value returned from the closure is returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが使い尽くされる時、クロージャから返される最後の値が呼び出し側へ返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the subscript is used as the left side of an assignment, the memory at p + i must be initialized or the pointer’s Pointee type must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字が代入の左側で使われる場合、p + iでのメモリは初期化されなければなりません、またポインタのもつPointee型は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the value is 5, the closure throws MyError, terminating the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値が5である場合、クロージャはMyErrorをスローして、シーケンスを終端しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When used to access the elements of the flag string itself, however, the secondCodeUnit index does not correspond to the position of a specific character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>flag文字列それ自身の要素へのアクセスに使われる場合は、しかしながら、secondCodeUnitインデックスは特定の文字の位置に該当しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you access memory through an UnsafeMutablePointer instance, the Pointee type must be consistent with the bound type of the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがメモリにUnsafeMutablePointerインスタンスを通してアクセスする時、Pointee型はそのメモリの束縛される型と一致しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you access memory through an UnsafePointer instance, the Pointee type must be consistent with the bound type of the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがメモリにUnsafePointerインスタンスを通してアクセスする時、Pointee 型はそのメモリの束縛される型と一致しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you add to or subtract from a raw pointer, the result is a new raw pointer offset by that number of bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが生のポインタに加算または減算する時、結果はそのバイト数をオフセットした（補った、埋め合わせた）新しい生のポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you add to or subtract from an UnsafeMutablePointer instance, the result is a new pointer of the same type, offset by that number of instances of the Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがUnsafeMutablePointerインスタンスに加えたりそれから引いたりする場合、結果は同じ型の新しいポインタです、Pointee型のインスタンスの数によってオフセットします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you add to or subtract from an UnsafePointer instance, the result is a new pointer of the same type, offset by that number of instances of the Pointee type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがUnsafePointerインスタンスに加えたりそれから引いたりする場合、結果は同じ型の新しいポインタです、Pointee型のインスタンスの数によってオフセットします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you allocate memory, always remember to deallocate once you’re finished.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがメモリをアロケートする場合、あなたがやり終えるやいなやデアロケートするのを常に忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a C function using a String, Swift automatically creates a buffer of UTF-8 code units and passes a pointer to that buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがC関数をStringを使って呼び出すとき、Swiftは自動的にUTF-8コード単位のバッファを作成してポインタをそのバッファへ渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that is declared as taking an AutoreleasingUnsafeMutablePointer&lt;Type&gt;, you can pass any of the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがAutoreleasingUnsafeMutablePointer&lt;Type&gt;をとるように宣言される関数を呼び出す場合、あなたは以下のどれでも渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that is declared as taking an UnsafeMutablePointer&lt;Type&gt; argument, you can pass any of the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがUnsafeMutablePointer&lt;Type&gt;引数をとるように宣言される関数を呼び出す場合、あなたは以下のどれでも渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that is declared as taking an UnsafeMutableRawPointer argument, you can pass the same operands as UnsafeMutablePointer&lt;Type&gt;, but for any type as Type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがUnsafeMutableRawPointer引数を取ると宣言される関数を呼び出す場合、あなたはUnsafeMutablePointer&lt;Type&gt;と同じ演算数を、しかしTypeであるあらゆる型に対して、渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that is declared as taking an UnsafePointer&lt;Type&gt; argument, you can pass any of the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがUnsafePointer&lt;Type&gt;引数をとるように宣言される関数を呼び出す場合、あなたは以下のどれでも渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that takes an UnsafeRawPointer argument, you can pass the same operands as UnsafePointer&lt;Type&gt;, but with any type as Type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがUnsafeRawPointer引数を取る関数を呼び出す場合、あなたはUnsafePointer&lt;Type&gt;と同じ演算数を、しかしTypeであるあらゆる型で、渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you create a slice of a string, a Substring instance is the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある文字列のスライスを作成している場合、Substringインスタンスが結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあるコレクションを列挙するとき、各ペアの整数部分は列挙のためのカウンタです、しかし必ずしもペアにされた値のインデックスではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you generate random values, shuffle a collection, or perform another operation that depends on random data, this type is the generator used by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが無作為値を生成する、コレクションをシャッフルする、または無作為データに依存する他の操作を実行する場合、この型は省略時に使われる生成子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need a range that includes the last element of a collection, use the half-open range operator (..&lt;) with endIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションの最後の要素を含むある範囲を必要とする時は、半開範囲演算子（..&lt;）をendIndexとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコレクションが空かどうか確認する必要がある場合、isEmptyプロパティを使ってください、countプロパティがゼロと等しいのを調べるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to know the length of a string, you must first consider what you’ll use the length for.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある文字列の長さを知る必要がある場合、あなたが最初に考えなければならないのは、あなたが使う長さは何に対するものかということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to permanently rebind memory to a different type, first obtain a raw pointer to the memory and then call the bindMemory(to:capacity:) method on the raw pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが永続的にメモリを異なる型へ再束縛する必要があるならば、まずメモリに対する生のポインタを取得して、それからbindMemory(to:capacity:)メソッドを生のポインタ上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to store a substring or pass it to a function that requires a String instance, you can convert it to a String by using the String(_:) initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが下位文字列を格納するまたはStringインスタンスを要求する関数にそれを渡す必要がある場合、あなたはそれをStringへとString(_:)イニシャライザを使って変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you only need to temporarily access a pointer’s memory as a different type, use the withMemoryRebound(to:capacity:) method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがポインタのもつメモリに異なる型として一時的にアクセスする必要があるだけならば、withMemoryRebound(to:capacity:)メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you pass true as isRepairing, this method replaces ill-formed sequences with the Unicode replacement character ("\u{FFFD}"); otherwise, an ill-formed sequence causes this method to stop decoding and return nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがtrueをisRepairingとして渡すとき、このメソッドは誤形式シーケンスをユニコード代替文字（"\u{FFFD}"）で置き換えます；そうでなければ、ある誤形式シーケンスはこのメソッドがエンコードを停止してnilを返すことを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you use this type, you become partially responsible for keeping the object alive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがこの型を使う場合、あなたはオブジェクト存続を保っていることに対して部分的に責任を負うようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you want to sort a collection of elements that don’t conform to the Comparable protocol, pass a closure to this method that returns true when the first element should be ordered before the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがComparableプロトコルに準拠しない要素からなるコレクションをソートしたい場合、最初の要素が２番目の前に並べられるべき場合はtrueを返すクロージャをこのメソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがComparableプロトコルに準拠しない要素からなるシーケンスをソートしたい場合、最初の要素が２番目の前に並べられるべき時はtrueを返す述部をこのメソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whether the encountered value was null.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>出くわした値がnullだったかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whether this function has any effect is task-dependent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数が何らかの効果を与えるかどうかはタスク依存です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While the system generator is automatically seeded and thread-safe on every platform, the cryptographic quality of the stream of random data produced by the generator may vary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>システム生成子が全てのプラットホーム上で自動的にシードを決められてスレッド安全である一方で、生成子によって生み出される無作為データのストリームの暗号化品質は様々でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Windows uses BCryptGenRandom.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Windowsは、BCryptGenRandomを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With a custom interpolation type, each interpolated segment is translated into a call to a special appendInterpolation method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるあつらえの補間型では、それぞれの補間される文節は特別なappendInterpolationメソッドへの呼び出しに翻訳されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With pointer p and distance n, the result of p.advanced(by: n) is equivalent to p + n.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタpと隔たりnでは、p.advanced(by: n)の結果はp + nと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With pointers p and q, the result of p.distance(to: q) is equivalent to q - p.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタpとqでは、p.distance(to: q)の結果はq - pと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Within asynchronous functions, as a “current” task is always guaranteed to exist, this will perform the lookup in the task local context.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期関数の内側では、“現在の” タスクは常に存在することを保証されます、これはタスクローカル文脈における検索を実行するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Work with fixed-width numeric types of different sizes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なるサイズの固定長数値型を扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Work with fixed-width vectors of fixed-width numeric types of different sizes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なるサイズの固定幅数値型の固定幅ベクターを扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Work with prefix, postfix, and infix operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前置、後置、および中置演算子を扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Work with text using Unicode-safe strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード安全な文字列を使ってテキストを扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Encodings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Paths</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パスを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with String Views</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列ビューを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wrap each expression in a string interpolation in parentheses, prefixed by a backslash.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列補間の中の式それぞれを丸括弧で包んで、バックスラッシュを前においてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wrap the call in a do-catch statement instead of using an Error? type as a parameter to the completion handler.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>呼び出しをdo-catch文の中に包んでください、Error?型をパラメータとして完了ハンドラに使う代わりに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wrappers for Algorithms</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アルゴリズムに対するラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writable Key Paths</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書き込み可能なキーパス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Write generic code that works with any collection, or build your own collection types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかのコレクションを使って作業する総括的なコードを記載します、またはあなた独自のコレクション型を組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Write generic code that works with any numeric type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの数値型を使って作業する総括的なコードを記載します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes a textual representation of this instance into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのテキスト表現を与えられた出力ストリームへ書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the string into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた出力ストリームへ文字列を書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representation of the Unicode scalar into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーのテキスト表現を与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素のテキスト表現を与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items into the standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた項目のテキスト表現を標準出力に書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items most suitable for debugging into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた項目の、デバッグに最も適するテキスト表現を、与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items most suitable for debugging into the standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた項目の、デバッグに最も適するテキスト表現を、標準出力に書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing to a File or URL</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファイルまたはURLに書き込む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing to typed memory as raw bytes must only be performed when the bound type is a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付メモリに生のバイトとして書き込むことは、その束縛型が自明型である場合にのみ実行されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You also use this method to sort elements that conform to the Comparable protocol in descending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、このメソッドを使ってComparableプロトコルに準拠する要素を降順でソートすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are in charge of managing the allocated memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、アロケートされたメモリの管理を任されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are responsible for handling the life cycle of any memory you work with through unsafe pointers to avoid leaks or undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはリークや未定義挙動を避けるために、あなたが安全でないポインタを通して扱うあらゆるメモリの生涯の処理に責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are responsible for handling the life cycle of any memory you work with through unsafe pointers, to avoid leaks or undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、リークや未定義挙動を避けるために、あなたが安全でないポインタを通して扱うあらゆるメモリの生涯の処理に責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access a string’s view of UTF-16 code units by using its utf16 property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは文字列の持つビューのUTF-16コード単位にアクセスすることが、それのutf16プロパティを使うことで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access a string’s view of UTF-8 code units by using its utf8 property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、文字列のもつUTF-8コード単位ビューにそれのutf8プロパティを使うことによってアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access a string’s view of Unicode scalar values by using its unicodeScalars property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは文字列の持つビューのユニコードスカラー値にアクセスすることが、それのunicodeScalarsプロパティを使うことで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also create Unicode scalar values directly from their numeric representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、ユニコードスカラー値を直接にそれらの数値表現から作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also pass a closure property of a generic type or a generic method as long as no generic type parameters are referenced in the closure’s argument list or body.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、ひとつの総称体型のクロージャプロパティまたは総称体メソッドを渡すことが、いくつかの総称体型パラメータがクロージャの引数リストまたは本文において参照されるのでない限りは可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use inout syntax to pass a mutable pointer to the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、インアウト構文を使って、可変ポインタを配列の要素へ渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use subscript notation to access the value in memory at a specific offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、添え字表記法を使ってメモリ中の値に特定のオフセットでアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can call this generic function with an instance of either String or Substring.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、この総称体関数をStringまたはSubstringのどちらのインスタンスでも呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can check the equality of instances of any BinaryInteger types using the equal-to operator (==).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスの同等性を同等演算子（==）使って確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can check the inequality of instances of any BinaryInteger types using the not-equal-to operator (!=).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスの不等性を不等演算子（!=）使って確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any BinaryInteger types using the greater-than operator (&gt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスをより大きい演算子（&gt;）を使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any BinaryInteger types using the greater-than-or-equal-to operator (&gt;=), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスをより大きいか等しい演算子（&gt;=）使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any BinaryInteger types using the less-than operator (&lt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスをより小さい演算子（&lt;）を使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any BinaryInteger types using the less-than-or-equal-to operator (&lt;=), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスをより小さいか等しい演算子（&lt;=）使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can confirm the data value’s underlying type by retrieving a non-nil value from stringValue or by inspecting the type property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、データ値のもつ基礎をなす型を確認することが、非nil値をstringValueから回収することによって、またはtypeプロパティを調査することによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can convert a String.UnicodeScalarView instance back into a string using the String type’s init(_:) initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、String.UnicodeScalarViewインスタンスを逆にひとつの文字列へと変換することが、String型のもつinit(_:)イニシャライザを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create a Unicode.Scalar instance by using a string literal that contains a single character representing exactly one Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、Unicode.Scalarインスタンスを、厳密に１つのユニコードスカラー値を表している単一の文字を含んでいる文字列リテラルを使うことによって作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create instances of the type by using the static members named after the symbolic names, or by using the init(rawValue:) initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、この型のインスタンスを、それら象徴名を付けられた静的メンバーを使うことによってまたはinit(rawValue:)イニシャライザを使うことによって作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create new strings using string literals or string interpolations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは新しい文字列を、文字列リテラルまたは文字列補間を使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can expect faster execution when the collections share many common elements, or if Element conforms to Hashable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはより速い遂行を予想できます、コレクションそれらが多くの普通の要素を共有する場合は、またはもしElementがHashableに準拠するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can expect faster execution when the collections share many common elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはより速い遂行を予想できます、コレクションそれらが多くの普通の要素を共有する場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can perform many string operations on a substring.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、多くの文字列演算を買い文字列上で行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can remove completion handlers by updating these calls to use the async-await versions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは完了ハンドラそれらを取り除くことがそれらの呼び出しをasync-await版を使うよう更新することで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can reverse a collection without allocating new space for its elements by calling this reversed() method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションを逆順にすることがそれの要素に対して新しい空間を割り当てることなくreversed()メソッドによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can send the output of the standard library’s print(_:to:) and dump(_:to:) functions to an instance of a type that conforms to the TextOutputStream protocol instead of to standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、標準ライブラリのprint(_:to:)およびdump(_:to:)関数の出力をTextOutputStreamプロトコルに準拠する型のインスタンスに送ることが、標準出力に送る代わりに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can sort any mutable collection of elements that conform to the Comparable protocol by calling this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはComparableプロトコルに準拠する要素からなるあらゆる可変の配列をこのメソッドを呼び出すことによってソートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can sort any sequence of elements that conform to the Comparable protocol by calling this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはいくらかの要素からなる何らかのシーケンスでComparableプロトコルに準拠するものをこのメソッドを呼び出すことによってソートする（並び替える）ことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can subscript a collection with any valid index other than the collection’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、そのコレクションの末尾インデックスの以外のあらゆる有効なインデックスで、コレクションに対して添え字を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use popLast() to remove the last element of a collection that might be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはpopLast()を使って、空であるかもしれないコレクションの最後の要素を削除できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a slice’s base property to access its base collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはスライスのもつbaseプロパティを使って、それの基盤コレクションにアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a type that conforms to the Strideable protocol with the stride(from:to:by:) and stride(from:through:by:) functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、Strideableプロトコルに準拠する型をstride(from:to:by:)およびstride(from:through:by:)関数で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an UnsafeBufferPointer instance in low level operations to eliminate uniqueness checks and, in release mode, bounds checks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、UnsafeBufferPointerインスタンスを低レベル演算において使うことで、特有性検査をそして、リリースモードでは、境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an UnsafeMutableBufferPointer instance in low level operations to eliminate uniqueness checks and, in release mode, bounds checks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、UnsafeMutableBufferPointerインスタンスを低レベル演算において使うことで、特有性検査をそして、リリースモードでは、境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an UnsafeMutableRawBufferPointer instance in low-level operations to eliminate uniqueness checks and release mode bounds checks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、UnsafeMutableRawBufferPointerインスタンスを低水準演算において使用することで、固有性検査とリリースモード境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an UnsafeRawBufferPointer instance in low-level operations to eliminate uniqueness checks and release mode bounds checks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、UnsafeRawBufferPointerインスタンスを低水準演算において使用することで、固有性検査とリリースモード境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use methods like initialize(to:count:), initialize(from:count:), and moveInitialize(from:count:) to initialize the memory referenced by a pointer with a value or series of values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、initialize(to:count:)、initialize(from:count:)、そしてmoveInitialize(from:count:)のようなメソッドを使うことで、ポインタによって参照されるメモリをある値または一連の値で初期化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use methods like initializeMemory(as:from:) and moveInitializeMemory(as:from:count:) to bind raw memory to a type and initialize it with a value or series of values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、initializeMemory(as:from:)とmoveInitializeMemory(as:from:count:)のようなメソッドを使うことで、生のメモリをある型に束縛して、それをある値または一連の値で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the withUTF8Buffer(_:) method to access a static string’s contents, regardless of which representation the static string uses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、withUTF8Buffer(_:)メソッドを使うことで、静的文字列のもつ内容にアクセスできます、その静的文字列が使うのはどの表現かに関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは述部を使うことで、Equatableプロトコルに準拠しない型の要素を調べること、またはある一般的条件を満たす要素を見つけることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは述部を使って、Equatableプロトコルに準拠しない型、例えばこの例でのHTTPResponse列挙などの要素に対して調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは述部を使って、Equatableプロトコルに準拠しない型の要素を見つける、または特定の基準に合致する要素を見つけることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the same indices for subscripting a string and its substring.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、文字列とそれの下位文字列での添え字の使用に対して同じインデックスを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the unary plus operator (+) to provide symmetry in your code for positive numbers when also using the unary minus operator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、単行プラス演算子（+）を使うことで、均整美をあなたのコードにおいて正の数に対して単行マイナス演算子もまた使う場合に提供できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the unbounded range operator (...) to create a slice of a collection that contains all of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、無境界範囲演算子（...）を使って、あるコレクションのスライスでそのコレクションのもつ要素すべてを含んでいるものを作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this initializer to create a new string from a slice of another string’s unicodeScalars view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このイニシャライザを使って新しい文字列を別の文字列のもつunicodeScalarsビューのスライスから作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this initializer to create a new string from the result of one or more collection operations on a string’s characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このイニシャライザを使って新しい文字列を、ある文字列のもつ幾らかの文字上での１つ以上のコレクション演算の結果から作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this method to create new values from the buffer pointer’s underlying bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このメソッドを使って新しい値をバッファポインタのもつ基盤バイトから作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、その部分的な範囲の下側の境界からそのコレクションの終わりまでの範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、コレクションの始まりからその部分的な範囲の上側の境界までの、そしてそれを含んでいる範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、コレクションの始まりからその部分的な範囲の上側の境界までの、しかしそれを含んでいない範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use * with arguments of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、*をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use + with arguments of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、+をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use - with arguments of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、-をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、breakまたはcontinue文を使って、bodyクロージャの現在の呼び出しを抜け出したり、または続いて起こる呼び出しを飛ばしたりできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You don’t have to convert all of your code all at once; instead, you can use specific refactoring techniques to convert your code one piece at time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あなたのコードの全てを一斉に変換する必要はありません；あなたは特定のリファクタリング技法を使ってあなたのコードを一度に一断片ずつ変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You must call a resume method exactly once on every execution path throughout the program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ある再開メソッドをあらゆる遂行経路上でそのプログラムの間を通して厳密に一度だけ呼び出さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You must not call this method if any other copy of this iterator has been advanced with a call to its next() method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このイテレータの何か他のコピーがそれのnext()メソッドを呼び出すことで前に進められるならば、このメソッドを呼び出す必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You suspend the store.save() operation by adding the await keyword.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはstore.save()操作を、awaitキーワードの追加によって一時停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use instances of the UnsafeMutablePointer type to access data of a specific type in memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、UnsafeMutablePointer型のインスタンスを使うことで、メモリにおいて特定の型のデータにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use instances of the UnsafePointer type to access data of a specific type in memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、UnsafePointer型のインスタンスを使うことで、メモリにおいて特定の型のデータにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the #keyPath string expression to create compiler-checked keys and key paths that can be used by KVC methods like value(forKey:) and value(forKeyPath:).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、#keyPath文字列式を使って、コンパイラチェック済みのキーおよびキーパスを作成します、それはKVCメソッドvalue(forKey:)やvalue(forKeyPath:)によって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the UnsafeMutablePointer type to access and manage memory that has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、UnsafeMutablePointer型を使うことで、特定の型に束縛されているメモリへのアクセスおよび管理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the UnsafeMutableRawPointer type to access and manage raw bytes in memory, whether or not that memory has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、UnsafeMutableRawPointer型を使ってメモリ中の生のバイトにアクセスおよび管理を、そのメモリが特定の型に束縛されているかどうかにかかわらず行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the UnsafePointer type to access and manage memory that has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、UnsafePointer型を使うことで、特定の型に束縛されているメモリへのアクセスおよび管理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the UnsafeRawPointer type to access and manage raw bytes in memory, whether or not that memory has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、UnsafeRawPointer型を使ってメモリ中の生のバイトにアクセスおよび管理を、そのメモリが特定の型に束縛されているかどうかにかかわらず行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this method to randomize the elements of a collection when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、あるコレクションの要素を無作為化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this method to randomize the elements of a sequence when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、あるシーケンスの要素を無作為化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You’re tasked with finding the day with the most absences in the second half of the session.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこの学期の後半において最も多く欠席者がいる日付を見つける任務を負います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zero is a multiple of everything because 0 = 0*x for any integer x.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロはあらゆるものの倍数です、なぜなら0 = 0*xなので、どんな整数xに対してもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zero is the identity element for addition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロは加算に対する単位元です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>a pointer to a null-terminated sequence of UTF-8 code units:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>null終端された一連のUTF-8コード単位へのあるポインタ：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>a single Unicode scalar value, under very limited circumstances:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一のユニコードスカラー値、非常に制限された状況のもとで：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>handle to the task, allowing to await get() on the tasks result or cancel it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクに対するハンドル、それはタスク結果上でawait get()をまたはそれのcancelを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>handle to the task, allowing to await handle.get() on the tasks result or cancel it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクに対するハンドル、それはタスク結果上でawait handle.get()をまたはそれのcancelを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>if a Task running on behalf of an actor, and a new higher-priority task is enqueued to the actor, its current task must be temporarily elevated to the priority of the enqueued task, in order to allow the new task to be processed at–effectively– the priority it was enqueued with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるTaskがあるアクターを代表して動作している、そして新しいより高い優先度のタスクがそのアクターへの待ち行列に入れられるならば、その現在のタスクは待ち行列に入れられたタスクの優先度まで一時的に上げられなければなりません、新しいタスクがそれが待ち行列に入れられた - 実質的な - 優先度で処理されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>if a task is created with a Task.Handle, and a higher-priority task calls the await handle.get() function the priority of this task must be permanently increased until the task completes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるタスクがTask.Handleで作成される、そしてより高い優先度のタスクがawait handle.get()関数を呼び出すならば、このタスクの優先度は、タスクが完了するまで永久的に増大されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>it is generally preferable to use child tasks rather than detached tasks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般的に望ましいのは、子タスクを使うことです、分離されたタスクよりも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>operation to execute and add to the group</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遂行するそしてグループに加える演算。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>override priority of the operation task</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算タスクの優先度をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>priority of the task</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクの優先度</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>priority of the task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクの優先度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>the executor on which the detached closure should start executing on.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの上でこの分離されたクロージャが遂行を開始するべきエグゼキュータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>the operation to execute</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遂行する演算。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>this DOES NOT affect Task.currentPriority().</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、Task.currentPriority()に影響「しません」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>this DOES affect Task.currentPriority().</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、Task.currentPriority()に影響「します」。</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
