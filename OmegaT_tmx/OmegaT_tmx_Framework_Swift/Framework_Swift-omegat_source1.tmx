<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="5.3.0_0_2fd7a9ecc" segtype="sentence" srclang="en-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="en-US">
        <seg>(An &lt;c2&gt;enum&lt;/c2&gt; without associated values has &lt;c3&gt;Equatable&lt;/c3&gt; conformance even without the declaration.)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（関連値なしでの&lt;c2&gt;enum&lt;/c2&gt;は、&lt;c3&gt;Equatable&lt;/c3&gt;準拠をたとえ宣言なしでも持ちます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(An &lt;c2&gt;enum&lt;/c2&gt; without associated values has &lt;c3&gt;Hashable&lt;/c3&gt; conformance even without the declaration.)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（関連値なしでの&lt;c2&gt;enum&lt;/c2&gt;は、&lt;c3&gt;Hashable&lt;/c3&gt;準拠をたとえ宣言なしでも持ちます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Enumerations without associated values have &lt;c3&gt;Equatable&lt;/c3&gt; and &lt;c4&gt;Hashable&lt;/c4&gt; conformance even without declaring adoption.)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（関連値なしの列挙は、&lt;c3&gt;Equatable&lt;/c3&gt;および&lt;c4&gt;Hashable&lt;/c4&gt;準拠を持ちます、たとえ採用を宣言することなしでも。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(In Swift 5.1 and earlier, &lt;c2&gt;is&lt;w3&gt;Canonical&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;true&lt;/c4&gt; for these values, which is the incorrect value.)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（Swift 5.1およびそれより前では、&lt;c2&gt;is&lt;w3&gt;Canonical&lt;/w3&gt;&lt;/c2&gt;はこれらの値に対して&lt;c4&gt;true&lt;/c4&gt;です、それは不正確な値です。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Irreflexivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（非反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Reflexivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（反射性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Symmetry)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（対称性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(These may become compile-time errors in the future.)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（それらはコンパイル時エラーに将来はなるかもしれません。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Transitive comparability)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（推移的比較性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Transitive incomparability)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（推移的比較不能性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Transitivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（推移性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>/ A genuinely asychronous implementation uses the `Task`&lt;/s49&gt;&lt;/s48&gt;&lt;/s46&gt;&lt;s50&gt;&lt;s51&gt;&lt;/s51&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>/ 真に非同期の実装は `Task`&lt;/s49&gt;&lt;/s48&gt;&lt;/s46&gt;&lt;s50&gt;&lt;s51&gt;&lt;/s51&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>/ API to check for cancellation here and return early.&lt;/s53&gt;&lt;/s52&gt;&lt;/s50&gt;&lt;s54&gt;&lt;s55&gt;&lt;/s55&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>/ API を使用して取り消しをここで調べて、より早くに復帰します。&lt;/s53&gt;&lt;/s52&gt;&lt;/s50&gt;&lt;s54&gt;&lt;s55&gt;&lt;/s55&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;-infinity&lt;/c0&gt; compares less than all values except for itself and NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-infinity&lt;/c0&gt;は、それ自身とNaNを除くすべての値より少ないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;-infinity&lt;/c0&gt; compares less than or equal to all values except NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-infinity&lt;/c0&gt;は、NaNを除くすべての値より少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Hashable&lt;/w1&gt;&lt;/c0&gt; considers bridged counterparts (such as a &lt;c2&gt;String&lt;/c2&gt; and an &lt;c3&gt;NSString&lt;/c3&gt;) of the same value to be equivalent when type-erased.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Hashable&lt;/w1&gt;&lt;/c0&gt;は、同じ値のブリッジされた相当物（たとえば&lt;c2&gt;String&lt;/c2&gt;と&lt;c3&gt;NSString&lt;/c3&gt;）を同等であると、型消去される場合にはみなします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt; can also be used as the concrete type for an instance of a type that bridges to an Objective-C class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt;はまた、Objective-Cクラスへとブリッジするある型のインスタンスに対する具象型として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Array&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt; instances are not always indexed from zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Array&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt;インスタンスは、常にゼロからインデックスをつけられるわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt; also defines methods for processing the elements you receive, modeled on the operations provided by the basic &lt;c2&gt;Sequence&lt;/c2&gt; in the standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;はまた、あなたが受け取る要素を処理するために、標準ライブラリの基本の&lt;c2&gt;Sequence&lt;/c2&gt;によって提供される演算を手本にしてメソッドいくつかを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Autoreleasing&lt;w1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is assumed to reference a value with &lt;c4&gt;_&lt;w5&gt;_autoreleasing&lt;/w5&gt;&lt;/c4&gt; ownership semantics, like &lt;c6&gt;NSFoo **&lt;/c6&gt; declarations in ARC.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Autoreleasing&lt;w1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、&lt;c4&gt;_&lt;w5&gt;_autoreleasing&lt;/w5&gt;&lt;/c4&gt;所有権意味論をもつ値を参照すると仮定されます、ARCにおける&lt;c6&gt;NSFoo **&lt;/c6&gt;宣言のような。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Bool&lt;/c0&gt; represents Boolean values in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bool&lt;/c0&gt;はブール値をSwiftにおいて表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Bool&lt;/c0&gt;, &lt;c1&gt;Darwin&lt;w2&gt;Boolean&lt;/w2&gt;&lt;/c1&gt;, &lt;c3&gt;Obj&lt;w4&gt;CBool&lt;/w4&gt;&lt;/c3&gt;, and &lt;c5&gt;Windows&lt;w6&gt;Bool&lt;/w6&gt;&lt;/c5&gt; are treated as Boolean values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bool&lt;/c0&gt;、&lt;c1&gt;Darwin&lt;w2&gt;Boolean&lt;/w2&gt;&lt;/c1&gt;、&lt;c3&gt;Obj&lt;w4&gt;CBool&lt;/w4&gt;&lt;/c3&gt;、そして&lt;c5&gt;Windows&lt;w6&gt;Bool&lt;/w6&gt;&lt;/c5&gt;は、ブール値として扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;CGPoint&lt;/c0&gt;, &lt;c1&gt;CGSize&lt;/c1&gt;, and &lt;c2&gt;CGRect&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;CGPoint&lt;/c0&gt;、&lt;c1&gt;CGSize&lt;/c1&gt;、および&lt;c2&gt;CGRect&lt;/c2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Checked&lt;w1&gt;Continuation&lt;/w1&gt;&lt;/c0&gt; logs a message if either of these invariants is violated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Checked&lt;w1&gt;Continuation&lt;/w1&gt;&lt;/c0&gt;は、これら不変式のどれかが侵害されるならばメッセージを記録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Checked&lt;w1&gt;Continuation&lt;/w1&gt;&lt;/c0&gt; performs runtime checks for missing or multiple resume operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Checked&lt;w1&gt;Continuation&lt;/w1&gt;&lt;/c0&gt;は、見つからないまたは複数の再開操作に対する実行時検査を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Codable&lt;/c0&gt; is a type alias for the &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Decodable&lt;/c2&gt; protocols.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Codable&lt;/c0&gt;は、&lt;c1&gt;Encodable&lt;/c1&gt;と&lt;c2&gt;Decodable&lt;/c2&gt;プロトコルに対する型エイリアスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Date&lt;/c0&gt; and &lt;c1&gt;NSDate&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Date&lt;/c0&gt;および&lt;c1&gt;NSDate&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Default&lt;w1&gt;String&lt;w2&gt;Interpolation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; extensions should add only &lt;c3&gt;mutating&lt;/c3&gt; members and should not copy &lt;c4&gt;self&lt;/c4&gt; or capture it in an escaping closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Default&lt;w1&gt;String&lt;w2&gt;Interpolation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;拡張は、&lt;c3&gt;mutating&lt;/c3&gt;メンバだけを加えるべきです、そして脱出クロージャにおいて&lt;c4&gt;self&lt;/c4&gt;をコピーまたはそれをキャプチャすべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Empty&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt; does not have any element indices, so it is not possible to advance indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Empty&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;は、全く要素インデックスを持ちません、それでインデックスを進めることは可能ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Enumerated&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt; is a sequence of pairs (&lt;e2&gt;n&lt;/e2&gt;, &lt;e3&gt;x&lt;/e3&gt;), where &lt;e4&gt;n&lt;/e4&gt;s are consecutive &lt;c5&gt;Int&lt;/c5&gt; values starting at zero, and &lt;e6&gt;x&lt;/e6&gt;s are the elements of a base sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Enumerated&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;は、ペア (&lt;e2&gt;n&lt;/e2&gt;, &lt;e3&gt;x&lt;/e3&gt;) からなるシーケンスです、ここで&lt;e4&gt;n&lt;/e4&gt;はゼロで始まる連続した&lt;c5&gt;Int&lt;/c5&gt;です、そして&lt;e6&gt;x&lt;/e6&gt;は基盤シーケンスの要素です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Float&lt;/c0&gt; and &lt;c1&gt;Double&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float&lt;/c0&gt;および&lt;c1&gt;Double&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Hashable&lt;/c0&gt; conformance means that you can store positions in a set and quickly check whether you've visited a position before, as shown in the following example:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Hashable&lt;/c0&gt;準拠は、あなたが集合の中の位置を格納して前にあなたが訪れた位置かどうかを素早く確認できることを意味します、以下の例で示すように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Hasher&lt;/c0&gt; can be used to map an arbitrary sequence of bytes to an integer hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Hasher&lt;/c0&gt;は、随意のバイト列を整数ハッシュ値へとマップするのに使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Hasher&lt;/c0&gt; is usually randomly seeded, which means it will return different values on every new execution of your program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Hasher&lt;/c0&gt;は、ふつうは無作為にシードを決められます、それはあなたのプログラムの新規の実行ごとに異なる値が返されることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Identifiable&lt;/c0&gt; leaves the duration and scope of the identity unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Identifiable&lt;/c0&gt;は、同一性の期間とスコープを特定されないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Identifiable&lt;/c0&gt; provides a default implementation for class types (using &lt;c1&gt;Object&lt;w2&gt;Identifier&lt;/w2&gt;&lt;/c1&gt;), which is only guaranteed to remain unique for the lifetime of an object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Identifiable&lt;/c0&gt;は、省略時の実装をクラス型に対して提供します（&lt;c1&gt;Object&lt;w2&gt;Identifier&lt;/w2&gt;&lt;/c1&gt;を使って）、それはあるオブジェクトの存続期間に対して特有のままであることだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Int&lt;/c0&gt;, &lt;c1&gt;UInt&lt;/c1&gt;, and the other standard library integer types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int&lt;/c0&gt;、&lt;c1&gt;UInt&lt;/c1&gt;、そして他の標準ライブラリの整数型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Iterator&lt;w1&gt;Over&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is the iterator for the &lt;c3&gt;Collection&lt;w4&gt;Of&lt;w5&gt;One&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Iterator&lt;w1&gt;Over&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、&lt;c3&gt;Collection&lt;w4&gt;Of&lt;w5&gt;One&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;型のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;NSBezier&lt;w1&gt;Path&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;UIBezier&lt;w3&gt;Path&lt;/w3&gt;&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NSBezier&lt;w1&gt;Path&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;UIBezier&lt;w3&gt;Path&lt;/w3&gt;&lt;/c2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;NSColor&lt;/c0&gt;, &lt;c1&gt;UIColor&lt;/c1&gt;, &lt;c2&gt;CGColor&lt;/c2&gt;, and &lt;c3&gt;CIColor&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NSColor&lt;/c0&gt;、&lt;c1&gt;UIColor&lt;/c1&gt;、&lt;c2&gt;CGColor&lt;/c2&gt;、および&lt;c3&gt;CIColor&lt;/c3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;NSImage&lt;/c0&gt;, &lt;c1&gt;UIImage&lt;/c1&gt;, &lt;c2&gt;CGImage&lt;/c2&gt;, and &lt;c3&gt;CIImage&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NSImage&lt;/c0&gt;、&lt;c1&gt;UIImage&lt;/c1&gt;、&lt;c2&gt;CGImage&lt;/c2&gt;、および&lt;c3&gt;CIImage&lt;/c3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;NSObject&lt;/c0&gt; subclasses inherit conformance to the &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;Hashable&lt;/c2&gt; protocols, with equality based on instance identity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NSObject&lt;/c0&gt;サブクラスは、&lt;c1&gt;Equatable&lt;/c1&gt;と&lt;c2&gt;Hashable&lt;/c2&gt;プロトコルへの準拠を継承します、インスタンス同一性に基づく同等性を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;NSView&lt;/c0&gt; and &lt;c1&gt;UIView&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NSView&lt;/c0&gt;および&lt;c1&gt;UIView&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Pointee&lt;/c0&gt; must be a class type or &lt;c1&gt;Optional&lt;C&gt;&lt;/c1&gt; where &lt;c2&gt;C&lt;/c2&gt; is a class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Pointee&lt;/c0&gt;は、クラス型または&lt;c1&gt;Optional&lt;C&gt;&lt;/c1&gt;でなければなりません、そこで&lt;c2&gt;C&lt;/c2&gt;はクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;String&lt;/c0&gt; and &lt;c1&gt;NSString&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;/c0&gt;および&lt;c1&gt;NSString&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;T&lt;w1&gt;.min&lt;w2&gt;.is&lt;w3&gt;Multiple(of: -1)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c4&gt;true&lt;/c4&gt; for signed integer &lt;c5&gt;T&lt;/c5&gt;, even though the quotient &lt;c6&gt;T&lt;w7&gt;.min / -1&lt;/w7&gt;&lt;/c6&gt; isn’t representable in type &lt;c8&gt;T&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;w1&gt;.min&lt;w2&gt;.is&lt;w3&gt;Multiple(of: -1)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c4&gt;true&lt;/c4&gt;です、符号付き整数&lt;c5&gt;T&lt;/c5&gt;に対して、たとえ商&lt;c6&gt;T&lt;w7&gt;.min / -1&lt;/w7&gt;&lt;/c6&gt;が型&lt;c8&gt;T&lt;/c8&gt;で表現可能でなくてさえ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;URL&lt;/c0&gt; and &lt;c1&gt;NSURL&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;URL&lt;/c0&gt;および&lt;c1&gt;NSURL&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;a &lt; a&lt;/c0&gt; is always &lt;c1&gt;false&lt;/c1&gt; (Irreflexivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;a &lt; a&lt;/c0&gt;は常に&lt;c1&gt;false&lt;/c1&gt;（非反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;a &lt; b&lt;/c0&gt; and &lt;c1&gt;b &lt; c&lt;/c1&gt; implies &lt;c2&gt;a &lt; c&lt;/c2&gt; (Transitivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;a &lt; b&lt;/c0&gt;かつ&lt;c1&gt;b &lt; c&lt;/c1&gt;は&lt;c2&gt;a &lt; c&lt;/c2&gt;を意味する（推移）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;a &lt; b&lt;/c0&gt; implies &lt;c1&gt;!(b &lt; a)&lt;/c1&gt; (Asymmetry)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;a &lt; b&lt;/c0&gt;は&lt;c1&gt;!(b &lt; a)&lt;/c1&gt;を意味する（非対称）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;a == a&lt;/c0&gt; is always &lt;c1&gt;true&lt;/c1&gt; (Reflexivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;a == a&lt;/c0&gt;は、常に&lt;c1&gt;true&lt;/c1&gt;（反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;a == b&lt;/c0&gt; and &lt;c1&gt;b == c&lt;/c1&gt; implies &lt;c2&gt;a == c&lt;/c2&gt; (Transitivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;a == b&lt;/c0&gt;かつ&lt;c1&gt;b == c&lt;/c1&gt;は、&lt;c2&gt;a == c&lt;/c2&gt;を意味する（推移）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;a == b&lt;/c0&gt; implies &lt;c1&gt;b == a&lt;/c1&gt; (Symmetry)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;a == b&lt;/c0&gt;は、&lt;c1&gt;b == a&lt;/c1&gt;を意味する（対称）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;are&lt;w1&gt;Equivalent(a, a)&lt;/w1&gt;&lt;/c0&gt; is always &lt;c2&gt;true&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;Equivalent(a, a)&lt;/w1&gt;&lt;/c0&gt;は常に&lt;c2&gt;true&lt;/c2&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;are&lt;w1&gt;Equivalent(a, b)&lt;/w1&gt;&lt;/c0&gt; implies &lt;c2&gt;are&lt;w3&gt;Equivalent(b, a)&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;Equivalent(a, b)&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;are&lt;w3&gt;Equivalent(b, a)&lt;/w3&gt;&lt;/c2&gt;を意味する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order(a, a)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is always &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order(a, a)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は常に&lt;c4&gt;false&lt;/c4&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; must be a &lt;e4&gt;strict weak ordering&lt;/e4&gt; over the elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、それら要素に対して&lt;e4&gt;厳密弱順序&lt;/e4&gt;でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;body&lt;/c0&gt; is executed each time the &lt;c1&gt;next()&lt;/c1&gt; method is called on the resulting iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;は、結果として生じるイテレータで&lt;c1&gt;next()&lt;/c1&gt;メソッドが呼び出されるたびに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;condition&lt;/c0&gt; is not evaluated in &lt;c1&gt;-Ounchecked&lt;/c1&gt; builds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;condition&lt;/c0&gt;は、&lt;c1&gt;-Ounchecked&lt;/c1&gt;ビルドにおいては評価されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;condition&lt;/c0&gt; is only evaluated in playgrounds and &lt;c1&gt;-Onone&lt;/c1&gt; builds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;condition&lt;/c0&gt;はただプレイグラウンドと&lt;c1&gt;-Onone&lt;/c1&gt;において評価されるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;count&lt;/c0&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;count&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;default&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;optional&lt;/c2&gt; have the same type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;default&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;optional&lt;/c2&gt;は同じ型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;default&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is the same type as the &lt;c2&gt;Wrapped&lt;/c2&gt; type of &lt;c3&gt;optional&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;default&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;は、&lt;c2&gt;optional&lt;/c2&gt;の&lt;c3&gt;Wrapped&lt;/c3&gt;型と同じ型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;end&lt;/c0&gt; is an element of the resulting sequence if and only if it can be produced from &lt;c1&gt;start&lt;/c1&gt; using steps of &lt;c2&gt;stride&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;は、それが&lt;c1&gt;start&lt;/c1&gt;から&lt;c2&gt;stride&lt;/c2&gt;の間隔を使って生成可能であるときかつその場合に限り、結果のシーケンスの要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;end&lt;/c0&gt; is never an element of the resulting sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;は、決して結果シーケンスの要素ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;end&lt;/c0&gt; must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;はコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is always reachable from &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt; by zero or more applications of &lt;c4&gt;index(after:)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は、常に&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;から&lt;c4&gt;index(after:)&lt;/c4&gt;のゼロまたはそれ以上の適用によって到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is not a valid argument to &lt;c2&gt;subscript&lt;/c2&gt;, and is always reachable from &lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; by zero or more applications of &lt;c5&gt;index(after:)&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;subscript&lt;/c2&gt;に対する有効な引数ではありません、そして常に&lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;からゼロまたはそれ以上の&lt;c5&gt;index(after:)&lt;/c5&gt;の適用によって到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;greatest&lt;w1&gt;Finite&lt;w2&gt;Magnitude&lt;w3&gt;.ulp&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is a finite number, even though the next greater representable value is &lt;c4&gt;infinity&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;greatest&lt;w1&gt;Finite&lt;w2&gt;Magnitude&lt;w3&gt;.ulp&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は有限数です、たとえ次のより大きい表現可能な値が&lt;c4&gt;infinity&lt;/c4&gt;であるとしても。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;hash&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is deprecated as a &lt;c2&gt;Hashable&lt;/c2&gt; requirement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;hash&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;は、&lt;c2&gt;Hashable&lt;/c2&gt;要件として非推奨にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;i&lt;/c0&gt; must be &lt;c1&gt;0&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;は&lt;c1&gt;0&lt;/c1&gt;でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;i&lt;/c0&gt; must be &lt;c1&gt;1&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;は&lt;c1&gt;1&lt;/c1&gt;でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;i&lt;/c0&gt; must be greater than &lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;は&lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;より大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;i&lt;/c0&gt; must be less than &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;は&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;より少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;index&lt;/c0&gt; must be a valid index of the array or equal to its &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;は、配列の有効なインデックスまたはそれの&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;プロパティでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;index&lt;/c0&gt; must be a valid index of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;は配列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;index&lt;/c0&gt; must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;はコレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;index&lt;/c0&gt; must be a valid index of the dictionary, and must not equal the dictionary’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;は辞書の有効なインデックスでなければなりません、そして辞書の末尾インデックスと同じではなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;index&lt;/c0&gt; must be greater than or equal to &lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt; and less than &lt;c3&gt;end&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;は、&lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;より大きいか等しくそして&lt;c3&gt;end&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;より小さくなくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;index&lt;/c0&gt; must be in the range &lt;c1&gt;0..&lt;scalar&lt;w2&gt;Count&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;は、範囲&lt;c1&gt;0..&lt;scalar&lt;w2&gt;Count&lt;/w2&gt;&lt;/c1&gt;の中になければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;initial&lt;w1&gt;Result&lt;/w1&gt;&lt;/c0&gt; is passed to &lt;c2&gt;next&lt;w3&gt;Partial&lt;w4&gt;Result&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; the first time the closure is executed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;initial&lt;w1&gt;Result&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;next&lt;w3&gt;Partial&lt;w4&gt;Result&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に、クロージャが実行される最初の時に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;is&lt;w1&gt;Known&lt;w2&gt;Uniquely&lt;w3&gt;Referenced(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; checks only for strong references to the given object—if &lt;c4&gt;object&lt;/c4&gt; has additional weak or unowned references, the result may still be &lt;c5&gt;true&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Known&lt;w2&gt;Uniquely&lt;w3&gt;Referenced(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は与えられたオブジェクトに対する強い参照に対してのみ確認します — &lt;c4&gt;object&lt;/c4&gt;がさらに弱いまたは非所有参照を持つ場合、結果は依然として&lt;c5&gt;true&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;k&lt;/c0&gt; must be greater than or equal to zero and must not exceed the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;k&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません、そしてコレクションの中の要素の数を越えてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;k&lt;/c0&gt; must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;k&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません、そしてコレクションの要素数より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;k&lt;/c0&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;k&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;n&lt;/c0&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;n&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;nil&lt;/c0&gt; has a specific meaning in Swift—the absence of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;nil&lt;/c0&gt;はSwiftでは特別な意味を持ちます—値の不在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;nil&lt;/c0&gt;, which gets passed as a null pointer,</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;nil&lt;/c0&gt;、それはヌルポインターとして渡されます、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;position&lt;/c0&gt; must be a valid index of the collection that is not equal to the &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;はコレクションの有効なインデックスで、&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;プロパティと等しくないものでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;position&lt;/c0&gt; must be a valid index of the dictionary and not equal to &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;は、この辞書の有効なインデックスで、&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;と等しくない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;position&lt;/c0&gt; must be a valid index of the range, and must not equal the range’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;は、この範囲の有効なインデックスでなければなりません、そしてこの範囲の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;range&lt;/c0&gt; must be finite and non-empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;range&lt;/c0&gt;は有限でそして空でない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;range&lt;/c0&gt; must not be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;range&lt;/c0&gt;は空であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;s&lt;w1&gt;.joined().map(f)&lt;/w1&gt;&lt;/c0&gt; maps eagerly and returns a new array</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;s&lt;w1&gt;.joined().map(f)&lt;/w1&gt;&lt;/c0&gt;は先行にマップを行い、新しい配列を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;s&lt;w1&gt;.joined()&lt;/w1&gt;&lt;/c0&gt; does not create new storage</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;s&lt;w1&gt;.joined()&lt;/w1&gt;&lt;/c0&gt;は新しいストレージを作りません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;s&lt;w1&gt;.lazy&lt;w2&gt;.joined().map(f)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; maps lazily and returns a &lt;c3&gt;Lazy&lt;w4&gt;Map&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;s&lt;w1&gt;.lazy&lt;w2&gt;.joined().map(f)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は遅延にマップして、&lt;c3&gt;Lazy&lt;w4&gt;Map&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;source&lt;/c0&gt; must be representable in this type after rounding toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;は、ゼロへの丸め後にこの型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;source&lt;/c0&gt; must be representable in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;は、この型で表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;start&lt;/c0&gt; must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;/c0&gt;はコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;transform&lt;/c0&gt; accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;transform&lt;/c0&gt;はこのシーケンスのひとつの要素をそれのパラメータとして受け取り、同じもしくは異なる型の変換された値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;transform&lt;/c0&gt; accepts an element of this sequence as its parameter and returns an &lt;c1&gt;Async&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;transform&lt;/c0&gt;はこのシーケンスのある要素をそれのパラメータとして受け取り、そして&lt;c1&gt;Async&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;transform&lt;/c0&gt; accepts each value of the dictionary as its parameter and returns a transformed value of the same or of a different type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;transform&lt;/c0&gt;は、辞書の各値をそれのパラメータとして受け取って、同じまたは異なる型の変換した値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;transform&lt;/c0&gt; accepts each value of the dictionary as its parameter and returns an optional transformed value of the same or of a different type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;transform&lt;/c0&gt;は辞書の各値をそれのパラメータとして受け取ります、そして同じまたは異なる型のあるオプショナルの変換済みの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;element&lt;/c1&gt; is contained in the range; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;element&lt;/c1&gt;がこの範囲に含まれるならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;i&lt;/c1&gt; has been offset by exactly &lt;c2&gt;distance&lt;/c2&gt; steps without going beyond &lt;c3&gt;limit&lt;/c3&gt;; otherwise, &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もし&lt;c1&gt;i&lt;/c1&gt;が正確に&lt;c2&gt;distance&lt;/c2&gt;幅だけ&lt;c3&gt;limit&lt;/c3&gt;を越えていくことなく補われたならば；そうでなければ、&lt;c4&gt;false&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;lhs&lt;/c1&gt; is greater than or equal to &lt;c2&gt;rhs&lt;/c2&gt;; otherwise, &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を、&lt;c1&gt;lhs&lt;/c1&gt;が&lt;c2&gt;rhs&lt;/c2&gt;より大きいか等しいならば返します；そうでなければ、&lt;c3&gt;false&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;object&lt;/c1&gt; is known to have a single strong reference; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;object&lt;/c0&gt;が強い参照をただ１つだけ持つものと知られているならば&lt;c1&gt;true&lt;/c1&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;other&lt;/c1&gt; has the same value as this instance; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;other&lt;/c1&gt;がこのインスタンスと同じ値を持つならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;other&lt;/c1&gt; is greater than this value; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もし&lt;c1&gt;other&lt;/c1&gt;がこの値より大きいならば；そうでなければ&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if both &lt;c1&gt;t0&lt;/c1&gt; and &lt;c2&gt;t1&lt;/c2&gt; are &lt;c3&gt;nil&lt;/c3&gt; or if they represent the same type; otherwise, &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もし&lt;c1&gt;t0&lt;/c1&gt;と&lt;c2&gt;t1&lt;/c2&gt;が&lt;c3&gt;nil&lt;/c3&gt;ならば、またはそれらが同じ型を表すならば；そうでなければ、&lt;c4&gt;false&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if one, but not both, of &lt;c1&gt;t0&lt;/c1&gt; and &lt;c2&gt;t1&lt;/c2&gt; are &lt;c3&gt;nil&lt;/c3&gt;, or if they represent different types; otherwise, &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もし&lt;c1&gt;t0&lt;/c1&gt;と&lt;c2&gt;t1&lt;/c2&gt;の１つが、しかし両方でなく&lt;c3&gt;nil&lt;/c3&gt;ならば、またそれらが異なる型を表すならば；そうでなければ、&lt;c4&gt;false&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the element was found in the sequence; otherwise, &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素がシーケンスにおいて見つけられなかったならば、&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the initial elements of the sequence are equivalent to the elements of &lt;c1&gt;possible&lt;w2&gt;Prefix&lt;/w2&gt;&lt;/c1&gt;; otherwise, &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしシーケンスの冒頭の要素が&lt;c1&gt;possible&lt;w2&gt;Prefix&lt;/w2&gt;&lt;/c1&gt;の要素と等しいならば；そうでなければ&lt;c3&gt;false&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the initial elements of the sequence are the same as the elements of &lt;c1&gt;possible&lt;w2&gt;Prefix&lt;/w2&gt;&lt;/c1&gt;; otherwise, &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしシーケンスの冒頭の要素が&lt;c1&gt;possible&lt;w2&gt;Prefix&lt;/w2&gt;&lt;/c1&gt;の要素と同じならば；そうでなければ&lt;c3&gt;false&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the method found the element in the asynchronous sequence; otherwise, &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしメソッドがその要素をこの非同期シーケンスの中で見つけたならば；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the sequence contains an element that satisfies &lt;c1&gt;predicate&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスが&lt;c1&gt;predicate&lt;/c1&gt;を満たす要素を含むならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the sequence contains an element that satisfies predicate; otherwise, &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしシーケンスが述部を満足させる要素を含むならば；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the sequence contains only elements that satisfy &lt;c1&gt;predicate&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしシーケンスが&lt;c1&gt;predicate&lt;/c1&gt;を満たす要素のみを含むならば；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the translation detected encoding errors in &lt;c1&gt;input&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>翻訳が&lt;c1&gt;input&lt;/c1&gt;においてエンコーディングエラーを検出したならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this range and &lt;c1&gt;other&lt;/c1&gt; have at least one element in common; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲と&lt;c1&gt;other&lt;/c1&gt;が少なくとも１つの共通の要素を持つならば、&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this sequence and &lt;c1&gt;other&lt;/c1&gt; contain equivalent items, using &lt;c2&gt;are&lt;w3&gt;Equivalent&lt;/w3&gt;&lt;/c2&gt; as the equivalence test; otherwise, &lt;c4&gt;false.&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、このシーケンスと&lt;c1&gt;other&lt;/c1&gt;が&lt;c2&gt;are&lt;w3&gt;Equivalent&lt;/w3&gt;&lt;/c2&gt;を同等性テストとして使って同じ要素らを含むならば；そうでなければ、&lt;c4&gt;false&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this sequence and &lt;c1&gt;other&lt;/c1&gt; contain the same elements in the same order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスと&lt;c1&gt;other&lt;/c1&gt;が同じ要素を同じ順序で含んでいるならば、&lt;c0&gt;true&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this sequence precedes &lt;c1&gt;other&lt;/c1&gt; in a dictionary ordering as ordered by &lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;; otherwise, &lt;c6&gt;false&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしこのシーケンスが&lt;c1&gt;other&lt;/c1&gt;に、&lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;によって並べられる通りの字典順序において先行するならば；そうでなければ、&lt;c6&gt;false&lt;/c6&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this sequence precedes &lt;c1&gt;other&lt;/c1&gt; in a dictionary ordering; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスが&lt;c1&gt;other&lt;/c1&gt;に、ある字典順序において先行するならば、&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this value is less than &lt;c1&gt;other&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしこの値が&lt;c1&gt;other&lt;/c1&gt;より少ないならば；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this value is ordered below or the same as &lt;c1&gt;other&lt;/c1&gt; in a total ordering of the floating-point type; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、この値が浮動小数点型の全順序において&lt;c1&gt;other&lt;/c1&gt;と同じまたは下に順序付けられるならば；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; corresponds to the value represented by the C macros &lt;c3&gt;FLT&lt;w4&gt;_EPSILON&lt;/w4&gt;&lt;/c3&gt;, &lt;c5&gt;DBL&lt;w6&gt;_EPSILON&lt;/w6&gt;&lt;/c5&gt;, etc, and is sometimes called &lt;e7&gt;epsilon&lt;/e7&gt; or &lt;e8&gt;machine epsilon&lt;/e8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、Cマクロ&lt;c3&gt;FLT&lt;w4&gt;_EPSILON&lt;/w4&gt;&lt;/c3&gt;、&lt;c5&gt;DBL&lt;w6&gt;_EPSILON&lt;/w6&gt;&lt;/c5&gt;、などによって表される値に対応します、そして時々は&lt;e7&gt;イプシロン&lt;/e7&gt;または&lt;e8&gt;計算機イプシロン&lt;/e8&gt;と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;value&lt;/c0&gt; must be representable in this type after rounding toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;は、ゼロへの丸め後にこの型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;without&lt;w1&gt;Actually&lt;w2&gt;Escaping(_:&lt;w3&gt;do:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; provides a temporarily escapable copy of &lt;c4&gt;predicate&lt;/c4&gt; that &lt;e5&gt;can&lt;/e5&gt; be used in a call to the lazy view’s &lt;c6&gt;filter(_:)&lt;/c6&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;without&lt;w1&gt;Actually&lt;w2&gt;Escaping(_:&lt;w3&gt;do:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、&lt;c4&gt;predicate&lt;/c4&gt;の一時的な脱出可能コピーを提供します、それは遅延ビューのもつ&lt;c6&gt;filter(_:)&lt;/c6&gt;メソッドに対する呼び出しにおいて使用&lt;e5&gt;できます&lt;/e5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Multiple(of: 0)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c3&gt;true&lt;/c3&gt; if &lt;c4&gt;x&lt;/c4&gt; is zero and &lt;c5&gt;false&lt;/c5&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Multiple(of: 0)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c3&gt;true&lt;/c3&gt;です、もし&lt;c4&gt;x&lt;/c4&gt;がゼロであるならば、そしてそうでなければ&lt;c5&gt;false&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;Double&lt;/c1&gt; is a binary floating-point type that has a radix of &lt;c2&gt;2&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Double&lt;/c1&gt;はバイナリ浮動小数点型で&lt;c2&gt;2&lt;/c2&gt;の基数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;Equatable&lt;/c1&gt; is also the base protocol for the &lt;c2&gt;Hashable&lt;/c2&gt; and &lt;c3&gt;Comparable&lt;/c3&gt; protocols, which allow more uses of your custom type, such as constructing sets or sorting the elements of a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Equatable&lt;/c1&gt;はまた、&lt;c2&gt;Hashable&lt;/c2&gt;と&lt;c3&gt;Comparable&lt;/c3&gt;プロトコルのための基盤プロトコルです、それらはあなたのあつらえの型のさらなる利用を可能します、例えば集合の組み立てやコレクション要素のソートなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;count&lt;/c1&gt; must be zero or greater.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;count&lt;/c1&gt;は、ゼロまたはより大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;distance&lt;/c1&gt; must not be negative unless the collection conforms to the &lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;distance&lt;/c1&gt;は、そのコレクションが&lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt;プロトコルに準拠するのでない限り、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;n&lt;/c1&gt; must not be negative unless the collection conforms to the &lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;n&lt;/c1&gt;は、そのコレクションが&lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt;プロトコルに準拠するのでない限り、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;radix&lt;/c1&gt; must be in the range &lt;c2&gt;2...36&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;radix&lt;/c1&gt;は、範囲&lt;c2&gt;2...36&lt;/c2&gt;の中でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;rhs&lt;/c1&gt; must not be zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;rhs&lt;/c1&gt;は、ゼロではなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;s&lt;/c1&gt; must contain exactly one extended grapheme cluster.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;s&lt;/c1&gt;は、厳密に１つの拡張書記素クラスタを含んでいなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;transform&lt;/c1&gt; can also throw an error, which ends the transformed sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;transform&lt;/c1&gt;はまたエラーをスローできます、それは変換されたシーケンスを終わらせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;type&lt;/c1&gt; and the type of &lt;c2&gt;x&lt;/c2&gt; must have the same size of memory representation and compatible memory layout.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;type&lt;/c1&gt;と&lt;c2&gt;x&lt;/c2&gt;の型は、同じ大きさのメモリ表現を持ち、互換メモリレイアウトを持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;Any&lt;w3&gt;Object&lt;/w3&gt;&lt;/c2&gt; can be used as the concrete type for an instance of any class, class type, or class-only protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Any&lt;w3&gt;Object&lt;/w3&gt;&lt;/c2&gt;は、あらゆるクラス、クラス型、またはクラス専用プロパティのインスタンスに対する具象型として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;Unsafe&lt;w3&gt;Continuation&lt;/w3&gt;&lt;/c2&gt; avoids enforcing these invariants at runtime because it aims to be a low-overhead mechanism for interfacing Swift tasks with event loops, delegate methods, callbacks, and other non-&lt;c4&gt;async&lt;/c4&gt; scheduling mechanisms.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Unsafe&lt;w3&gt;Continuation&lt;/w3&gt;&lt;/c2&gt;は、それら不変式を実行時に遵守させることを避けます、なぜならそれはイベントループを備えるSwiftタスク、委任メソッド、コールバック、そして他の非&lt;c4&gt;async&lt;/c4&gt;スケジューリング機構を取り持つことに対して低オーバーヘッド機構であるように努力するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;element&lt;/c2&gt; is contained in the range if it is between the two bounds or equal to either bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;element&lt;/c2&gt;は、それが２つの境界の間またはどちらかの境界と等しいならば、その範囲に含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;init(string&lt;w3&gt;Interpolation:)&lt;/w3&gt;&lt;/c2&gt; should use these properties to initialize the instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;init(string&lt;w3&gt;Interpolation:)&lt;/w3&gt;&lt;/c2&gt;は、それらのプロパティを使ってインスタンスを初期化すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;max&lt;w3&gt;Splits&lt;/w3&gt;&lt;/c2&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;max&lt;w3&gt;Splits&lt;/w3&gt;&lt;/c2&gt;は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;numeric&lt;w3&gt;Cast(_:)&lt;/w3&gt;&lt;/c2&gt; traps on overflow in &lt;c4&gt;-O&lt;/c4&gt; and &lt;c5&gt;-Onone&lt;/c5&gt; builds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;numeric&lt;w3&gt;Cast(_:)&lt;/w3&gt;&lt;/c2&gt;は、&lt;c4&gt;-O&lt;/c4&gt;および&lt;c5&gt;-Onone&lt;/c5&gt;ビルドにおいてオーバーフローでトラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c3&gt;n&lt;/c3&gt; may be positive, negative, or zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;n&lt;/c3&gt;は、正、負、またはゼロが許されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c4&gt;128&lt;w5&gt;.25&lt;/w5&gt;&lt;/c4&gt; is rounded to &lt;c6&gt;128&lt;/c6&gt;, which is not representable as an &lt;c7&gt;Int8&lt;/c7&gt; instance, triggering a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;128&lt;w5&gt;.25&lt;/w5&gt;&lt;/c4&gt;は、&lt;c6&gt;128&lt;/c6&gt;へ丸められます、それは&lt;c7&gt;Int8&lt;/c7&gt;インスタンスによって表現可能ではなく、実行時エラーを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c5&gt;next()&lt;/c5&gt; then consumes values from this iterator until it terminates.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;next()&lt;/c5&gt;はそれから、このイテレータから値を消費します、それが終端するまで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c6&gt;Binary&lt;w7&gt;Floating&lt;w8&gt;Point&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; is implemented in the standard library by &lt;c9&gt;Float&lt;/c9&gt;, &lt;c10&gt;Double&lt;/c10&gt;, and &lt;c11&gt;Float80&lt;/c11&gt; where available.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;Binary&lt;w7&gt;Floating&lt;w8&gt;Point&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;は、標準ライブラリにおいて&lt;c9&gt;Float&lt;/c9&gt;、&lt;c10&gt;Double&lt;/c10&gt;、そして利用可能なところでは&lt;c11&gt;Float80&lt;/c11&gt;によって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c6&gt;Expressible&lt;w7&gt;By&lt;w8&gt;Nil&lt;w9&gt;Literal&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; conformance for types that use &lt;c10&gt;nil&lt;/c10&gt; for other purposes is discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c10&gt;nil&lt;/c10&gt;を他の目的に使う型のための&lt;c6&gt;Expressible&lt;w7&gt;By&lt;w8&gt;Nil&lt;w9&gt;Literal&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;準拠は、 推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c9&gt;x&lt;w10&gt;.is&lt;w11&gt;Zero&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt; is equivalent to the following comparison: &lt;c12&gt;x == 0&lt;w13&gt;.0&lt;/w13&gt;&lt;/c12&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c9&gt;x&lt;w10&gt;.is&lt;w11&gt;Zero&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;は次の比較に相当するものです：&lt;c12&gt;x == 0&lt;w13&gt;.0&lt;/w13&gt;&lt;/c12&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;Signed&lt;/e0&gt; integer types can represent both positive and negative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;符号付き&lt;/e0&gt;整数型は、正および負の値の両方を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e1&gt;Unsigned&lt;/e1&gt; integer types can represent only nonnegative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e1&gt;符号なし&lt;/e1&gt;整数型は、非負数のみ表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;Required.&lt;/s0&gt; Default implementation provided.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;s0&gt;必須。&lt;/s0&gt; 省略時の実装の提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;Required.&lt;/s0&gt; Default implementations provided.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;s0&gt;必須。&lt;/s0&gt; いくつかの省略時の実装の提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;See Also&lt;/s0&gt;&lt;s1&gt; &lt;s2&gt;&lt;p3&gt;&lt;/p3&gt;&lt;/s2&gt;&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;s0&gt;参照&lt;/s0&gt;&lt;s1&gt; &lt;s2&gt;&lt;p3&gt;&lt;/p3&gt;&lt;/s2&gt;&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 16-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 32-bit floating point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビット浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 32-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 64-bit floating point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64ビット浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 64-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64ビット符号付き整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Closed&lt;w1&gt;Range&lt;/w1&gt;&lt;/c0&gt; instance contains both its lower and upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Closed&lt;w1&gt;Range&lt;/w1&gt;&lt;/c0&gt;インスタンスは、それの下方および上方境界の両方を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Closed&lt;w1&gt;Range&lt;/w1&gt;&lt;/c0&gt; instance contains both its lower bound and its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Closed&lt;w1&gt;Range&lt;/w1&gt;&lt;/c0&gt;インスタンスは、それの下側の境界とそれの上側の境界の両方を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Collection&lt;/c0&gt; that provides its own implementation of this method must also guarantee that an equivalent buffer of its &lt;c1&gt;Sub&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt; can be generated by advancing the pointer by the distance to the slice’s &lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドのそれ独自の実装を提供する&lt;c0&gt;Collection&lt;/c0&gt;はまた、それの&lt;c1&gt;Sub&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt;の同等のバッファが、スライスのもつ&lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;への隔たりだけポインタを前進することによって生成されることを保証しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Range&lt;/c0&gt; to convert to a &lt;c1&gt;Closed&lt;w2&gt;Range&lt;/w2&gt;&lt;/c1&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Range&lt;/c0&gt;、&lt;c1&gt;Closed&lt;w2&gt;Range&lt;/w2&gt;&lt;/c1&gt;インスタンスへと変換することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c1&gt;Reversed&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; instance wraps an underlying collection and provides access to its elements in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Reversed&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;インスタンスは、基礎をなすコレクションをラップして、それの要素へのアクセスを逆順で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;binade&lt;/e0&gt; is a set of binary floating-point values that all have the same sign and exponent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;binade&lt;/e0&gt;は、バイナリ浮動小数点値の一揃いです、それは全てが同じ符号と指数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;continuation&lt;/e0&gt; is an opaque representation of program state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;e0&gt;継続&lt;/e0&gt;は、プログラム状態の不透明表現です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;decimal value&lt;/e0&gt; contains the significand, a sequence of decimal digits that may include a decimal point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;10進の値&lt;/e0&gt;は仮数、小数点を含んでも良い一連の10進の桁を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;hexadecimal value&lt;/e0&gt; contains the significand, either &lt;c1&gt;0X&lt;/c1&gt; or &lt;c2&gt;0x&lt;/c2&gt;, followed by a sequence of hexadecimal digits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;16進数値&lt;/e0&gt;は、仮数、&lt;c1&gt;0X&lt;/c1&gt;または&lt;c2&gt;0x&lt;/c2&gt;のどちらかに続く16進の桁を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;normal&lt;/e0&gt; value is a finite number that uses the full precision available to values of a type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;ノーマル&lt;/e0&gt;値は、有限数で、ある型の値に利用可能な完全な精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;subnormal&lt;/e0&gt; value is a nonzero number that has a lesser magnitude than the smallest normal number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;サブノーマル&lt;/e0&gt;値は、非ゼロ数で、最も小さいノーマル数よりも少ない規模を持つものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value converts to an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.int&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブール値は、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.int&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the collection is empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance is NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがNaN（非数）であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance is a signaling NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがsignaling NaNであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance is equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがゼロと等しいかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance is infinite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが無限大であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance is subnormal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがサブノーマルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance’s representation is in its canonical form.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスの表現がそれの正準形式であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the range contains no elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲が何の要素も含まないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character changes under any form of case conversion.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字がケース変換の何らかの形式の下で変化するかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character is a letter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この表意文字が表音文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character is considered lowercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字がローワーケースであると考えられるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character is considered uppercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字がアッパーケースと考えられるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character represents a currency symbol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字が通貨記号を表すかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character represents a hexadecimal digit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字が16進法桁を表しているかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character represents a newline.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字がニューラインを表すかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character represents a number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字がある数を表しているかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character represents a symbol that naturally appears in mathematical contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字が数学的文脈において自然に現れるシンボルを表すかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character represents a symbol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字がシンボルを表すかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character represents a whole number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字が整数を表しているかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character represents punctuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字が句読点を表すかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this character represents whitespace, including newlines.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字が空白を、ニューラインを含めて、表すかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this instance is finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが有限であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this instance is normal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがノーマルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this is an ASCII character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それがASCII文字かどうかを指し示しているブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this type is a signed integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型が符号付き整数型であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value that indicates whether the dictionary is empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書が空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A NaN compares not equal, not greater than, and not less than every value, including itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは、それ自身を含めてあらゆる値に対して等しくない、大きくない、少なくないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A NaN passed as &lt;c1&gt;other&lt;/c1&gt; results in another NaN, with a signaling NaN value converted to quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;other&lt;/c1&gt;として渡されるNaNは、シグナルNaN値はクワイエットNaNに変換されて、別のNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A NaN passed as &lt;c1&gt;value&lt;/c1&gt; results in another NaN, with a signaling NaN value converted to quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;value&lt;/c1&gt;として渡されるNaNは、シグナルNaN値はクワイエットNaNに変換されて、別のNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A NaN value may also include a payload in parentheses following the &lt;c0&gt;"nan"&lt;/c0&gt; keyword.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるNaN値はまた、&lt;c0&gt;"nan"&lt;/c0&gt;キーワードに続けて丸括弧の中にペイロードを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UTF-16 encoding of &lt;c0&gt;self&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;のUTF-16符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UTF-8 encoding of &lt;c0&gt;self&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;のUTF-8符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Unicode string value that is a collection of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコード文字列値、それは、いくらかの文字からなる１つのコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A binary floating-point type’s &lt;c0&gt;exponent&lt;w1&gt;Bit&lt;w2&gt;Count&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; imposes a limit on the range of the exponent for normal, finite values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ浮動小数点型のもつ&lt;c0&gt;exponent&lt;w1&gt;Bit&lt;w2&gt;Count&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、正規化数の、有限の値に対する指数の範囲に限界を課します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bit pattern to use for the address of the new pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいポインタのアドレスのために使われるビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bitwise AND operation results in a value that has each bit set to &lt;c0&gt;1&lt;/c0&gt; where &lt;e1&gt;both&lt;/e1&gt; of its arguments have that bit set to &lt;c2&gt;1&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位AND演算は、ある値という結果になります、それが各ビットを&lt;c0&gt;1&lt;/c0&gt;に設定するのは、&lt;e1&gt;両方&lt;/e1&gt;のそれの引数が、そのビットを&lt;c2&gt;1&lt;/c2&gt;に設定するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bitwise OR operation results in a value that has each bit set to &lt;c0&gt;1&lt;/c0&gt; where &lt;e1&gt;one or both&lt;/e1&gt; of its arguments have that bit set to &lt;c2&gt;1&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位OR演算は、ある値という結果になります、それが各ビットを&lt;c0&gt;1&lt;/c0&gt;に設定するのは、&lt;e1&gt;一方または両方&lt;/e1&gt;のそれの引数が、そのビットを&lt;c2&gt;1&lt;/c2&gt;に設定するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bitwise XOR operation, also known as an exclusive OR operation, results in a value that has each bit set to &lt;c0&gt;1&lt;/c0&gt; where &lt;e1&gt;one or the other but not both&lt;/e1&gt; of its arguments had that bit set to &lt;c2&gt;1&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位XOR演算、または排他的OR演算として知られるものは、１つの値という結果になり、それは各ビットが&lt;c0&gt;1&lt;/c0&gt;に設定されます、そこにおいて&lt;e1&gt;一方または他方しかし両方でなく&lt;/e1&gt;それの引数がそのビットを&lt;c2&gt;1&lt;/c2&gt;に設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A callback to invoke when iteration of a AsyncStream is cancelled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AsyncStreamの反復が取り消される時に発動するコールバック。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A callback to invoke when iteration of a AsyncThrowingStream is cancelled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AsyncThrowingStreamの反復が取り消される時に発動するコールバック。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A character with the value “\r\n” (CR-LF) is normalized to “\n” (LF) and has an &lt;c0&gt;ascii&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; property equal to 10.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値 “\r\n” (CR-LF) を持つある文字は、“\n” (LF) に正規化されます、そして10に等しい&lt;c0&gt;ascii&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;プロパティを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A class of types whose instances hold the value of an entity with stable identity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらのインスタンスはある登録項目の値を安定した同一性で保持するところの型それらのクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that accepts an &lt;c0&gt;inout&lt;/c0&gt; state and returns the next element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;inout&lt;/c0&gt;状態を受け取り、そしてそのシーケンスの次の要素を返すクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that accepts an element of this sequence as its argument and returns a sequence or collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスのひとつの要素をそれの引数として受け取って、あるシーケンスまたはコレクションを返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that accepts an element of this sequence as its argument and returns an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスのひとつの要素をそれの引数として受け取って、ひとつのオプショナルの値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that accepts the previous sequence element and returns the next element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは前のシーケンス要素を受け取り、次の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure or returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは蓄積値と非同期シーケンスのいち要素を新しい蓄積値へと結合します、&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャの次の呼び出しにおいて使うためにまたは呼び出し側に返されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure or returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは蓄積値をシーケンスのいち要素と結合して新しい蓄積値とし、&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャの次の呼び出しにおいて使われるか、呼び出し側に返されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that is called with the values for any duplicate keys that are encountered.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャで、出くわす何らかの重複キーに対するそれら値とともに呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that is executed immediately with an escapable copy of &lt;c0&gt;closure&lt;/c0&gt; as its argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;closure&lt;/c0&gt;の脱出可能コピーをそれの引数として使い直ちに実行されるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that processes one &lt;c0&gt;output&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt; code unit at a time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは一度に１つの&lt;c0&gt;output&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;コードユニットを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that returns &lt;c0&gt;true&lt;/c0&gt; if its argument should be used to split the sequence; otherwise, &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つのクロージャ、それはそれの引数が使われてシーケンスを分割するならば&lt;c0&gt;true&lt;/c0&gt;を；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that returns a Boolean value indicating whether two elements are equivalent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの要素が等しいかどうかを指し示しているブール値を返すクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that returns a key for each element in &lt;c0&gt;values&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;values&lt;/c0&gt;の中の各要素に対するキーを返すクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that returns an optional element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはあるオプショナルの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a &lt;c0&gt;Checked&lt;w1&gt;Continuation&lt;/w1&gt;&lt;/c0&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは&lt;c0&gt;Checked&lt;w1&gt;Continuation&lt;/w1&gt;&lt;/c0&gt;バラメータを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a key-value pair as its argument and returns a Boolean value indicating whether the pair should be included in the returned dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値ペアをそれの引数として取り、返される辞書にそのペアが含まれるべきかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a mutable pointer to &lt;c0&gt;value&lt;/c0&gt; as its sole argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;への可変ポインタをそれの唯一の引数として取るクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a pointer to &lt;c0&gt;value&lt;/c0&gt; as its sole argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;へのポインタをそれの唯一の引数として取るクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a raw buffer pointer to the bytes of &lt;c0&gt;value&lt;/c0&gt; as its sole argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;のバイトへの生のバッファポインタをそれの唯一の引数として取るクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an &lt;c0&gt;Unsafe&lt;w1&gt;Continuation&lt;/w1&gt;&lt;/c0&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは&lt;c0&gt;Unsafe&lt;w1&gt;Continuation&lt;/w1&gt;&lt;/c0&gt;バラメータを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an &lt;c0&gt;Unsafe&lt;w1&gt;Current&lt;w2&gt;Task&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは&lt;c0&gt;Unsafe&lt;w1&gt;Current&lt;w2&gt;Task&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;バラメータを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはある要素をパラメータとして取り、その要素がこの修正後のシーケンスに含まれるべきかどうかを指し示すブール値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはある要素をパラメータとして取り、その要素をこの修正後のシーケンスから抜かすことになるかどうかを指し示すブール値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは１つの要素を引数として取り、コレクションがその要素で分割されるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは１つの要素をそれの引数として取り、渡された要素が合致するものであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは非同期シーケンスの１つの要素をそれの引数として取り、その要素があるマッチであるかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこの非同期シーケンスの１つの要素をそれの引数として取り、渡された要素があるマッチを表すかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこの非同期シーケンスの１つの要素をそれの引数として取り、渡された要素がある条件を満たすかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは非同期シーケンスの１つの要素をそれの引数として取り、その要素をこの平坦化されたシーケンスに含むことになるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as a parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１要素を引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns &lt;c0&gt;true&lt;/c0&gt; if the element should be included or &lt;c1&gt;false&lt;/c1&gt; if it should be excluded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が含まれるべきならば&lt;c0&gt;true&lt;/c0&gt;をまたはそれが除外されるべきならば&lt;c1&gt;false&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns &lt;c0&gt;true&lt;/c0&gt; if the element should be skipped or &lt;c1&gt;false&lt;/c1&gt; if it should be included.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が省かれるべきならば&lt;c0&gt;true&lt;/c0&gt;をまたはそれが含まれるべきならば&lt;c1&gt;false&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が合致するものかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が結果に含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が返される配列に含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素がコレクションから除去されるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスの１つの要素をそれの引数として取り、渡された要素が合致するものであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスの１つの要素をそれの引数として取り、渡された要素がある条件を満たすかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes the current and new values for any duplicate keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャで、何らかの重複キーに対する現在および新しい値それぞれをとるもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that transforms a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を変換するクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that updates the accumulating value with an element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>蓄積される値をこのシーケンスのある要素を使って更新するクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure to execute that depends on the lifetime of &lt;c0&gt;x&lt;/c0&gt; being extended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>延長されている&lt;c0&gt;x&lt;/c0&gt;の生涯に依存して実行するクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure with a &lt;c0&gt;CVa&lt;w1&gt;List&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; parameter that references the arguments passed as &lt;c3&gt;args&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;args&lt;/c3&gt;として渡される引数を参照する&lt;c0&gt;CVa&lt;w1&gt;List&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;パラメータを持つクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure with an &lt;c0&gt;Unsafe&lt;w1&gt;Buffer&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; parameter that points to the contiguous storage for the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャで&lt;c0&gt;Unsafe&lt;w1&gt;Buffer&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;パラメータを持ち、それはその配列のための隣接ストレージを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure with an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; parameter that points to the contiguous storage for the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャで&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;パラメータを持ち、それはその配列のための隣接ストレージを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure with an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; parameter that points to the contiguous storage for the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャで&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;パラメータを持ち、それはその配列のための隣接ストレージを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure with an &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; parameter that points to the contiguous storage for the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャで&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;パラメータを持ち、それはその配列のための隣接ストレージを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection and its slices share the same indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションとそれのスイラスは同じインデックスを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection containing a single element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一の要素を含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection containing just the keys of the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書のキーだけを含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection containing just the values of the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の値だけを含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection containing the words of this value’s binary representation, in order from the least significant to most significant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の持つバイナリ表現の単語いくらかを含んでいるコレクション、最下位から最上位への順番で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection difference with all possible moves inferred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可能な限り移動それらが推測された状態でのあるコレクション差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of all values of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の全ての値からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of changes that represent a transition between two states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの状態の間の推移を表す変更いくつからなるあるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of indices for an arbitrary collection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不定なコレクションのためのインデックスのコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of insertions and removals that describe the difference between two ordered collection states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの順序付きコレクション状態の間の差異を記述するいくらかの挿入と除去からなるあるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection or finite sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションまたは有限のシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that contains &lt;c0&gt;count&lt;/c0&gt; elements that are all &lt;c1&gt;element&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;count&lt;/c0&gt;個の要素を含んでいるコレクション、それはすべてが&lt;c1&gt;element&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that presents the elements of its base collection in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション、それは、それの基盤コレクションの要素を逆順で提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that supports backward as well as forward traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前方にだけでなく後方へ辿っていくこともサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that supports efficient random-access index traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>効率のよい無作為アクセスのインデックス探査をサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection whose element type is &lt;c0&gt;Element&lt;/c0&gt; but that is always empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの要素型は&lt;c0&gt;Element&lt;/c0&gt;である、しかし常に空であるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection whose elements are all identical.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション、その要素は全て同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection whose elements are key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの要素がキー値ペアであるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection’s &lt;c0&gt;indices&lt;/c0&gt; property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションの&lt;c0&gt;indices&lt;/c0&gt;プロパティは、そのコレクション自身に対する強い参照を保持でき、そのコレクションが特有にでなくとも参照されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection’s &lt;c0&gt;indices&lt;/c0&gt; property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションの&lt;c0&gt;indices&lt;/c0&gt;プロパティは、そのコレクション自身に対する強い参照を保持でき、そのコレクションが非特有に参照されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A conforming type may contain a subset of values which are treated as exceptional—that is, values that are outside the domain of meaningful arguments for the purposes of the &lt;c0&gt;Comparable&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠している型は、普通でないものとして扱われる値の下位集合を含むでしょう — すなわち、&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルの用途のための意味のある引数の領域の外側である値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A conforming type may use any integer radix, but values other than 2 (for binary floating-point types) or 10 (for decimal floating-point types) are extraordinarily rare in practice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型は、あらゆる整数基数を使うことができます、しかし２（バイナリ浮動小数点型に対して）または10（10進浮動小数点型に対して）より他の値は、実際には非常に稀です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A contiguously stored array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>隣接保管の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A continuation must be resumed exactly once.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続は、厳密に一度だけ再開されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Bool&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bool&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンドクイックルック。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Character&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Character&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Double&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Double&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Float&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Int16&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int16&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Int32&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int32&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Int&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground description for this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスに対するあつらえのplayground記述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A decimal value may also include an exponent following the significand, indicating the power of 10 by which the significand should be multiplied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>10進の値はまた、それによって仮数が乗算されるべき10の冪を指し示す指数を、仮数に続けて含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A description of what went wrong, for debugging purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何がうまくいかなかったかの記述、デバッグ目的のため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary containing the keys and non-&lt;c0&gt;nil&lt;/c0&gt; transformed values of this dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この辞書のキーと非&lt;c0&gt;nil&lt;/c0&gt;の変換済値を含んでいるある辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary containing the keys and transformed values of this dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この辞書のキーと変換された値を含んでいる辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary is a type of hash table, providing fast access to the entries it contains.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書はある種のハッシュテーブルであり、それが含んでいる登録項目への高速なアクセスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary literal is &lt;e0&gt;not&lt;/e0&gt; the same as an instance of &lt;c1&gt;Dictionary&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書リテラルは、&lt;c1&gt;Dictionary&lt;/c1&gt;のインスタンスと同じ&lt;e0&gt;ではありません&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary literal is a comma-separated list of key-value pairs, in which a colon separates each key from its associated value, surrounded by square brackets.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書リテラルは、「キーと値」の組（キー値ペア）のコンマ区切りのリストで角括弧で囲まれています、このキー値ペアではコロンが各キーをそれの関連値から切り離します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary literal is a simple way of writing a list of key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書リテラルは、「キー値」ペアのリストを書く簡単な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary of the key-value pairs that &lt;c0&gt;is&lt;w1&gt;Included&lt;/w1&gt;&lt;/c0&gt; allows.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Included&lt;/w1&gt;&lt;/c0&gt;が認めるキー値ペアからなる辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary to merge.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結合することになる辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary value converts to an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.dictionary&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書値は、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.dictionary&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary’s indices stay valid across additions to the dictionary as long as the dictionary has enough capacity to store the added values without allocating more buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書のインデックスは、その辞書への追加をまたいで有効なままです、加えられた値をもっとバッファを割り当てることなく格納するために辞書が十分な容量を持つ限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A double value converts to an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.double&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>double値は、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.double&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A double-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>倍精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A error-throwing closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the modified sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるエラースロークロージャ、それは非同期シーケンスの１つの要素をそれの引数として取り、その要素をこの修正されたシーケンスに含むことになるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A false value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるfalse値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A flattened view of the elements of this sequence of sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複数のシーケンスからなるこのシーケンスの要素のある平坦なビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point numeric type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point value to be converted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point value to compare to this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と比較される浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point value to convert to an integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数へと変換する浮動小数点値．</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A half-open interval from a lower bound up to, but not including, an upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下側の境界から、上側の境界まで、しかしそれを含んでいない、半開間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A half-precision (16b), floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>半精度（16b）、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A hashable value to wrap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ラップすることになるハッシュ可能値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A hexadecimal value may also include an exponent following the significand, indicating the power of 2 by which the significand should be multiplied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16進数値はまた、それによって仮数が乗算されるべき２の冪を指し示す指数を、仮数に続けて含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path from a specific root type to a specific resulting value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特定の根本の型から特定の結果値の型へのキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path from the root of this key path and the value type of &lt;c0&gt;path&lt;/c0&gt;, if &lt;c1&gt;path&lt;/c1&gt; can be appended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーパスのルートからのキーパスと&lt;c0&gt;path&lt;/c0&gt;の値型、もし&lt;c1&gt;path&lt;/c1&gt;が追加されるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path from the root of this key path to the value type of &lt;c0&gt;path&lt;/c0&gt;, if &lt;c1&gt;path&lt;/c1&gt; can be appended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーパスのルートから&lt;c0&gt;path&lt;/c0&gt;の値型へのキーパス、もし&lt;c1&gt;path&lt;/c1&gt;が追加できるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path from the root of this key path to the value type of &lt;c0&gt;path&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーパスのルートから、&lt;c0&gt;path&lt;/c0&gt;の値型へのキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A keyed decoding container view into this decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このデコーダへのキー付きデコーディングコンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A label to use when writing the contents of &lt;c0&gt;value&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;の内容を書き込むときに使うラベル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lightweight collection of key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値ペアの軽量コレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mapping closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マップを行うクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mechanism to interface between synchronous and asynchronous code, logging correctness violations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同期と非同期のコードの間を取り持つためのある仕組み、それは正確さ侵害を記録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mechanism to interface between synchronous and asynchronous code, without correctness checking.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同期と非同期のコードの間を取り持つための仕組み、正確さ検査なしで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Bool&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bool&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Character&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Character&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Double&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Double&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Float&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Int16&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int16&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Int32&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int32&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Int&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the Float80 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Float80インスタンスを反映するあるミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その配列を反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その辞書を反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのイテレータを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mutable pointer addressing an Objective-C reference that doesn’t own its target.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのターゲットを所有しないObjective-C参照をアドレス指定している可変ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A negative value that uses the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の値、それは浮動小数点型の最大精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A negative, nonzero number that does not use the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の、非ゼロの数、それは浮動小数点型の最大精度を使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new &lt;c0&gt;.data&lt;w1&gt;Corrupted&lt;/w1&gt;&lt;/c0&gt; error with the given information.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>を与えられた情報を持つ新しい&lt;c0&gt;.data&lt;w1&gt;Corrupted&lt;/w1&gt;&lt;/c0&gt;エラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new dictionary initialized with the elements of &lt;c0&gt;keys&lt;w1&gt;And&lt;w2&gt;Values&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;keys&lt;w1&gt;And&lt;w2&gt;Values&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;の要素で初期化された新しい辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new dictionary with the combined keys and values of this dictionary and &lt;c0&gt;other&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この辞書と&lt;c0&gt;other&lt;/c0&gt;のキーと値を組み合わせた新しい辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new empty single value container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい空の単一値コンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new empty unkeyed container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい空のキー付けされないコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new instance initialized with &lt;c0&gt;raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; will be equivalent to this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;で初期化された新しいインスタンスは、このインスタンスに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new instance of type &lt;c0&gt;U&lt;/c0&gt;, cast from &lt;c1&gt;x&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;U&lt;/c0&gt;の新しいインスタンス、&lt;c1&gt;x&lt;/c1&gt;からキャストされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new keyed encoding container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいキー付けされるエンコーディングコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new range clamped to the bounds of &lt;c0&gt;limits&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;limits&lt;/c0&gt;の境界内に制限された、新しい範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A nil-coalescing operation unwraps the left-hand side if it has a value, or it returns the right-hand side as a default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil合体演算は、左手側をそれが値を持つならばアンラップします、またはそれは右手側を省略時のものとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A nil-coalescing operation unwraps the left-hand side if it has a value, or returns the right-hand side as a default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil合体演算は、左手側をそれが値を持つならばアンラップします、または右手側を省略時のものとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A non-&lt;c1&gt;nil&lt;/c1&gt; &lt;c2&gt;associated&lt;w3&gt;With&lt;/w3&gt;&lt;/c2&gt; value is the offset of the complementary change.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非&lt;c1&gt;nil&lt;/c1&gt;の&lt;c2&gt;associated&lt;w3&gt;With&lt;/w3&gt;&lt;/c2&gt;値は、補足的変更のオフセットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A nonescaping closure value that is made escapable for the duration of the execution of the &lt;c0&gt;body&lt;/c0&gt; closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非脱出クロージャ値で、&lt;c0&gt;body&lt;/c0&gt;クロージャの実行の間に脱出可能にされるもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A numeric value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A parameterized class written in Objective-C is imported into Swift as a generic class with the same number of type parameters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cにおいて書かれたパラメータ化されたクラスは、同じ数の型パラメータを持つ総称体クラスとしスウィフトにインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A partially type-erased key path, from a concrete root type to any resulting value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある部分的な型消去キーパス、具体的な根本の型から何らかの結果値の型への。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer advanced from this pointer by &lt;c0&gt;Memory&lt;w1&gt;Layout&lt;Pointee&gt;.stride&lt;/w1&gt;&lt;/c0&gt; bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから&lt;c0&gt;Memory&lt;w1&gt;Layout&lt;Pointee&gt;.stride&lt;/w1&gt;&lt;/c0&gt;バイトだけ繰り上げられるポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer offset from this pointer by &lt;c0&gt;n&lt;/c0&gt; instances of the &lt;c1&gt;Pointee&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから&lt;c0&gt;n&lt;/c0&gt;個の&lt;c1&gt;Pointee&lt;/c1&gt;型のインスタンス分だけ補われたポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer shifted backward from this pointer by &lt;c0&gt;Memory&lt;w1&gt;Layout&lt;Pointee&gt;.stride&lt;/w1&gt;&lt;/c0&gt; bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから後ろへ&lt;c0&gt;Memory&lt;w1&gt;Layout&lt;Pointee&gt;.stride&lt;/w1&gt;&lt;/c0&gt;バイトだけずらされるポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer that can be used with C functions that take a &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;引数を取るC関数で使用できるポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in a FlattenCollection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>FlattenCollectionの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A positive &lt;c0&gt;stride&lt;/c0&gt; iterates upward; a negative &lt;c1&gt;stride&lt;/c1&gt; iterates downward.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の&lt;c0&gt;stride&lt;/c0&gt;は上向きに反復していきます；負の&lt;c1&gt;stride&lt;/c1&gt;は下向きに反復していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A positive value that uses the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の値、それは浮動小数点型の最大精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A positive, nonzero number that does not use the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の、非ゼロの数、それは浮動小数点型の最大精度を使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A predicate that returns &lt;c0&gt;true&lt;/c0&gt; if its first argument should be ordered before its second argument; otherwise, &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある述部、それはそれの最初の引数がそれの２番目の引数の前に並べられるべきならば&lt;c0&gt;true&lt;/c0&gt;を返します；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A predicate that returns &lt;c0&gt;true&lt;/c0&gt; if its two arguments are equivalent; otherwise, &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある述部、それはそれの２つの引数が等しいならば&lt;c0&gt;true&lt;/c0&gt;を返します；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A predicate that throws an error also never executes again.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラーをスローする述部は、同様に決して再び遂行しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A predicate used to partition the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションに仕切りをするのに使われる述部。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A protocol that enables an object to be encoded and decoded for archiving and distribution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるオブジェクトにアーカイブと配布のためにエンコードおよびデコードされることを可能にするプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A protocol that enables encoding and decoding in a manner that is robust against object substitution attacks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングとデコーディングを、オブジェクト置き換え攻撃に対して強固であるある流儀で可能にするプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A quiet NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クワイエットNaN（非数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A radix-2 (binary) floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるradix-2（バイナリ）浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A random element from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションからのある無作為の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A random value within the bounds of &lt;c0&gt;range&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;range&lt;/c0&gt;の境界内のある無作為な値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range of integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数からなる範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range of the collection’s indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのもつインデックスのある範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range suitable for slicing &lt;c0&gt;collection&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスする&lt;c0&gt;collection&lt;/c0&gt;に対して適している範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range to check for elements in common.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>共通の要素を調べる範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range-replaceable collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲置換可能なコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A raw memory buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のメモリバッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A raw-representable instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生の表現が可能なインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A reference to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A removal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある削除。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A representation of the substructure and display style of an instance of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位構造体の表現と何らかの型のインスタンスの表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A representation of this integer with the byte order swapped.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のバイト順交換した表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A result of yielding values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を生み出すことの結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A result to yield from the continuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その継続から生まれた結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A rule for rounding a floating-point number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点数を丸める為のある規則。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A second raw-representable instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>第２の生の表現が可能なインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence built around an iterator of type &lt;c0&gt;Base&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;Base&lt;/c0&gt;のイテレータに基づいて構築されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence consisting of all the elements contained in each segment contained in some &lt;c0&gt;Base&lt;/c0&gt; sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの&lt;c0&gt;Base&lt;/c0&gt;シーケンスに含まれる各断片の中に含まれるいくらかの要素から成るシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence containing the same elements as this sequence, but on which some operations, such as &lt;c0&gt;map&lt;/c0&gt; and &lt;c1&gt;filter&lt;/c1&gt;, are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスと同じ要素を含んでいるシーケンス、しかしそれの上で何らかの演算、例えば&lt;c0&gt;map&lt;/c0&gt;や&lt;c1&gt;filter&lt;/c1&gt;が遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence from &lt;c0&gt;start&lt;/c0&gt; toward, and possibly including, &lt;c1&gt;end&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;/c0&gt;から、そして可能なら含めて、&lt;c1&gt;end&lt;/c1&gt;へ向かってのシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence from &lt;c0&gt;start&lt;/c0&gt; toward, but not including, &lt;c1&gt;end&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;/c0&gt;から、そして含めずに、&lt;c1&gt;end&lt;/c1&gt;へ向かってのシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence leaving off the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素を取り除いたあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of key-value pairs to use for the new dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値ペアからなるシーケンス、新しい辞書に使うためのもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかのキー値ペアからなるシーケンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of pairs built out of two underlying sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの根底にあるシーケンスから組み立てられるペアからなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of pairs enumerating the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスを列挙している、ペアからなるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of the initial, consecutive elements that satisfy &lt;c0&gt;predicate&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;を満たす冒頭の、隣接する要素からなるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of tuple pairs, where the elements of each pair are corresponding elements of &lt;c0&gt;sequence1&lt;/c0&gt; and &lt;c1&gt;sequence2&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>対のタプルからなるシーケンス、そこにおいて各対の要素らは、&lt;c0&gt;sequence1&lt;/c0&gt;と&lt;c1&gt;sequence2&lt;/c1&gt;の要素に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of values formed by striding over a closed interval.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある完結間隔の全体をまたぐことで形成されるいくつかの値からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of values formed by striding over a half-open interval.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある半開間隔の全体をまたぐことで形成されるいくつかの値からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of values to group into a dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書へとグループにする幾つかの値からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence starting after the initial, consecutive elements that satisfy &lt;c0&gt;predicate&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;を満たす冒頭の、隣接する要素の後で始まるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence starting after the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素の後で始まるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence starting at the beginning of this sequence with at most &lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの先端で始まる多くとも&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt;要素のあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that can represent a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素の隣接下位範囲を表すことのできるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that lazily consumes and drops &lt;c0&gt;n&lt;/c0&gt; elements from an underlying &lt;c1&gt;Base&lt;/c1&gt; iterator before possibly returning the first available element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>おそらくは最初の利用可能な要素が返る前に&lt;c0&gt;n&lt;/c0&gt;個の要素をある基礎をなす&lt;c1&gt;Base&lt;/c1&gt;イテレータから遅延に消費して落とすあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that only consumes up to &lt;c0&gt;n&lt;/c0&gt; elements from an underlying &lt;c1&gt;Base&lt;/c1&gt; iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大で&lt;c0&gt;n&lt;/c0&gt;個の要素まで基礎をなす&lt;c1&gt;Base&lt;/c1&gt;イテレータからただ消費しきるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that presents the elements of a base sequence of sequences concatenated using a given separator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それはいくらかのシーケンスからなるある基盤となるシーケンスの要素らを、与えられた分離子を使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that represents a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素の隣接下位範囲を表すシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that starts with &lt;c0&gt;first&lt;/c0&gt; and continues with every value returned by passing the previous element to &lt;c1&gt;next&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それは&lt;c0&gt;first&lt;/c0&gt;で始まり、そして前の要素を&lt;c1&gt;next&lt;/c1&gt;に渡すことによって返される値どれもが続きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that yields each successive value from &lt;c0&gt;next&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それは&lt;c0&gt;next&lt;/c0&gt;から連続した値各々をもたらします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence to compare to this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、このシーケンスと比べることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence to insert between each of this sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素それぞれの間に挿入されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements are produced via repeated applications of a closure to some mutable state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャをある何らかの可変の状態へ繰り返し適用することでその要素が生み出されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それの要素は複数回探査されることが非破壊的に可能です、そしてある添え字で指し示すことによってアクセスされることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A service which can execute jobs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ジョブを遂行できるあるサービス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A shuffled array of this sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの持つ要素からなる、あるシャッフルされた配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A signaling NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaN（非数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A signaling NaN sets the floating-point exception status when used in many floating-point operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaNは、多くの浮動小数点演算において使われる時に、浮動小数点例外状態を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A signed number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付きの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A signed, fixed-width integer type can represent values from &lt;c3&gt;-(2 ** (bit&lt;w4&gt;Width - 1))&lt;/w4&gt;&lt;/c3&gt; through &lt;c5&gt;(2 ** (bit&lt;w6&gt;Width - 1)) - 1&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付きの、固定長整数型は、&lt;c3&gt;-(2 ** (bit&lt;w4&gt;Width - 1))&lt;/w4&gt;&lt;/c3&gt;から&lt;c5&gt;(2 ** (bit&lt;w6&gt;Width - 1)) - 1&lt;/w6&gt;&lt;/c5&gt;までの値を表せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A silent NaN (“not a number”) value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>silent NaN（非数）値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single change to a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションに対するある単一の変更。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single extended grapheme cluster that approximates a user-perceived character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一の拡張書記素クラスタで、１つのユーザ知覚文字におおよそ相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single value container view into this decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このデコーダへの単一コンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single, concatenated string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一の、連結された文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single, flattened asynchronous sequence that contains all elements in all the asychronous sequences produced by &lt;c0&gt;transform&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一の、平坦にされた非同期シーケンス、それは&lt;c0&gt;transform&lt;/c0&gt;によって生み出される全ての非同期シーケンスの中の全ての要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A singleton actor whose executor is equivalent to the main dispatch queue.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシングルトンアクター、それのエグゼキュータはメインディスパッチキューと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice holds a reference to the entire storage of a larger array, not just to the portion it presents, even after the original array’s lifetime ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライスは、単にそれが提示する一部分に対してではなく、より大きな配列のストレージ全体への参照を保持します、元の配列の寿命が終わった後でさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice inherits the value or reference semantics of its base collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスは、それの基盤コレクションのもつ値意味論もしくは参照意味論を継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのスライスは、ゼロまたはそれ以上の元のコレクションの要素を含み、元のコレクションのもつ意味論を共有できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice of an &lt;c0&gt;Array&lt;/c0&gt;, &lt;c1&gt;Contiguous&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;, or &lt;c3&gt;Array&lt;w4&gt;Slice&lt;/w4&gt;&lt;/c3&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Array&lt;/c0&gt;、&lt;c1&gt;Contiguous&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;、または&lt;c3&gt;Array&lt;w4&gt;Slice&lt;/w4&gt;&lt;/c3&gt;インスタンスの断片。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sorted array of the sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンス要素のソート済み配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A specialized error that may be recoverable by presenting several potential recovery options to the user.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの可能性のある回復選択肢をユーザに提示することによって回復されるかもしれないある特殊化されたエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A specialized error that provides a domain, error code, and user-info dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある領域、エラーコード、そしてユーザ情報辞書を提供する特殊化されたエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A specialized error that provides localized messages describing the error and why it occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラーとなぜそれが起こったかを記述しているローカライズされたメッセージを提供する特殊化されたエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A stable sort preserves the relative order of elements for which &lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; does not establish an order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>安定ソートは、それに対して&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が順序を確立しない要素らの相対順序を保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A stable sort preserves the relative order of elements that compare equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>安定ソートは、等しいと比較される要素それらの相対順序を保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A strategy that handles exhaustion of a buffer’s capacity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある戦略、それはあるバッファのもつ容量の枯渇を取り扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string identifying the declaration that is the notional source for the continuation, used to identify the continuation in runtime diagnostics related to misuse of this continuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続に対する概念的ソースであるところの宣言を識別しているある文字列、この継続の誤用に関する実行時診断において継続を識別するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string representation of the Boolean value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブール値の文字列表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string that represents the contents of the dictionary, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の内容を表す文字列、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string that represents the contents of the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の内容を表す文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string to insert between each of the elements in this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素のそれぞれの間に挿入されることになる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string to print between each item.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各項目の間に出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string to print if &lt;c0&gt;condition&lt;/c0&gt; is evaluated to &lt;c1&gt;false&lt;/c1&gt; in a playground or &lt;c2&gt;-Onone&lt;/c2&gt; build.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドまたは&lt;c2&gt;-Onone&lt;/c2&gt;ビルドにおいて&lt;c0&gt;condition&lt;/c0&gt;が&lt;c1&gt;false&lt;/c1&gt;に評価されるならば出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string to print if &lt;c0&gt;condition&lt;/c0&gt; is evaluated to &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;condition&lt;/c0&gt;が&lt;c1&gt;false&lt;/c1&gt;に評価されるならば出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string to print in a playground or &lt;c0&gt;-Onone&lt;/c0&gt; build.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドまたは&lt;c0&gt;-Onone&lt;/c0&gt;ビルドにおいて出力される文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subscript that provides at least read-only access to your type’s elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>少なくとも読み出し専用のアクセスをあなたの型のもつ要素に提供する添え字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence starting after the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素の後から始まる下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence starting at the &lt;c0&gt;start&lt;/c0&gt; position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;/c0&gt;位置から始まる下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence starting at the beginning of this collection with at most &lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの先端で始まる多くとも&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt;要素の下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence terminating at the end of the collection with at most &lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの末端で終わっていて多くとも&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt;の要素を持つ下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence that leaves off &lt;c0&gt;k&lt;/c0&gt; elements from the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;k&lt;/c0&gt;個の要素を終わりから取り除いた下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence that leaves off the specified number of elements at the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素が末尾から無くなっているシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence up to, and including, the &lt;c0&gt;end&lt;/c0&gt; position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;位置に至るまでの、そしてそれを含む、下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence up to, but not including, the &lt;c0&gt;end&lt;/c0&gt; position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;位置に至るまでの、しかしそれを含まないシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual description of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターのテキスト記述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the Boolean value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブール値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the array and its elements, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列とそれの要素のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the array and its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列とそれの要素のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the character, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その文字のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the collection, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the pointer, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのポインタのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the range, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the value, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その値のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this instance, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのインスタンスのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this key, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A third value to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する３番目の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A trivial use case producing values from a detached task would work as such:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値それらをある分離されたタスクから生み出す平凡な使用実例は、このように働くでしょう：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the high and low parts of a double-width integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２倍幅整数の高および低部分を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the high and low parts of the result of multiplying this value and &lt;c0&gt;other&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と&lt;c0&gt;other&lt;/c0&gt;を乗算する結果の高および低部分を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the quotient and remainder obtained by dividing &lt;c0&gt;dividend&lt;/c0&gt; by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;dividend&lt;/c0&gt;をこの値で除算することによって入手される商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the quotient and remainder of &lt;c0&gt;dividend&lt;/c0&gt; divided by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;dividend&lt;/c0&gt;をこの値で除算した商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the quotient and remainder of this value divided by &lt;c0&gt;rhs&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;によって除算されたこの値の商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算の結果とそれだけでなくオーバーフローがその演算において起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the division along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算の結果とそれだけでなくオーバーフローがその演算において起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple of &lt;c0&gt;Comparable&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Comparable&lt;/c0&gt;要素からなるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple of &lt;c0&gt;Equatable&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Equatable&lt;/c0&gt;要素のタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple of the lower and upper bounds of the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の下方および上方境界からなるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A two-element tuple with the key and value corresponding to &lt;c0&gt;position&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;に該当するキーと値を持つ２要素タプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type for propagating an unmanaged object reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある管理されないオブジェクト参照を伝達するための型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type is eligible for automatic conformance to &lt;c0&gt;Equatable&lt;/c0&gt; and &lt;c1&gt;Hashable&lt;/c1&gt; when it's a structure or an enumeration that meets these criteria:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型が&lt;c0&gt;Equatable&lt;/c0&gt;および&lt;c1&gt;Hashable&lt;/c1&gt;への自動式準拠に適格であるのは、それが構造体または列挙であり、これらの基準に合う場合です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing an error value that can be thrown.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スローされることが可能なあるエラー値を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing continuous, one-dimensional values that can be offset and measured.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オフセットできて計測できる、連続的な、一次元の値を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing the sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの持つ要素を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing the stable identity of the entity associated with an instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるインスタンスと結び付けられた登録項目の安定した同一性を表しているある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that asynchronously supplies the values of a sequence one at a time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それはあるシーケンスの値それらを非同期に一度に１つ提供するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be compared for value equality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の同等性について比較されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be compared using the relational operators &lt;c0&gt;&lt;&lt;/c0&gt;, &lt;c1&gt;&lt;=&lt;/c1&gt;, &lt;c2&gt;&gt;=&lt;/c2&gt;, and &lt;c3&gt;&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関係演算子&lt;c0&gt;&lt;&lt;/c0&gt;、&lt;c1&gt;&lt;=&lt;/c1&gt;、&lt;c2&gt;&gt;=&lt;/c2&gt;、そして&lt;c3&gt;&gt;&lt;/c3&gt;を使って比較されるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be converted to and from an associated raw value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある結び付けられた生の値へおよびそれから変換できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be hashed into a &lt;c0&gt;Hasher&lt;/c0&gt; to produce an integer hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Hasher&lt;/c0&gt;へとハッシュ化されることで整数ハッシュ値を生成することが可能な型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized by string interpolation with a string literal that includes expressions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの式を含むある文字列リテラルを使う文字列補間によって初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized using a dictionary literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized using an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized using the nil literal, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nilリテラル、&lt;c0&gt;nil&lt;/c0&gt;を使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a floating-point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある浮動小数点リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a string literal containing a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一のユニコードスカラー値を含んでいるある文字列リテラルで初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a string literal containing a single extended grapheme cluster.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ただ１つの拡張書記素クラスタを含んでいるある文字列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with an integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数リテラルで初期化できるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with the Boolean literals &lt;c0&gt;true&lt;/c0&gt; and &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブールリテラルの&lt;c0&gt;true&lt;/c0&gt;と&lt;c1&gt;false&lt;/c1&gt;を使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be represented as a string in a lossless, unambiguous way.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるロスレスの、曖昧さのない方法で、文字列として表現できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used as a key for encoding and decoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングとデコーディングのためのキーとして使われる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can convert itself into and out of an external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身を外部表現へとそしてそれをもとに変換できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can decode itself from an external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身が外部表現からデコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can decode values from a native format into in-memory representations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値をネイティブ形式からインメモリ表現へとデコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can encode itself to an external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身を外部表現へとエンコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can encode values into a native format for external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を外部表現のためにネイティブ形式へとエンコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent a collection of all values of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の全ての値からなるコレクションを表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent any written exponent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの書かれた指数を表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent both positive and negative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正と負の値の両方を表せる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent the absolute value of any possible value of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型の何らかの可能な値の絶対値を表すことのできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent the absolute value of any possible value of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の何らかの可能な値の絶対値を表すことのできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that conforms to the &lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; protocol provides the value for &lt;c2&gt;pi&lt;/c2&gt; at its best possible precision.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する型は、&lt;c2&gt;pi&lt;/c2&gt;に対する値をそれの最もよい可能な精度で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that conforms to the &lt;c0&gt;Global&lt;w1&gt;Actor&lt;/w1&gt;&lt;/c0&gt; protocol and is marked with the the &lt;c2&gt;@global&lt;w3&gt;Actor&lt;/w3&gt;&lt;/c2&gt; attribute can be used as a custom attribute.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Global&lt;w1&gt;Actor&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠して、そして&lt;c2&gt;@global&lt;w3&gt;Actor&lt;/w3&gt;&lt;/c2&gt;属性で印される型は、あるあつらえの属性として使われることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that explicitly supplies its own mirror, but whose descendant classes are not represented in the mirror unless they also override &lt;c0&gt;custom&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>明示的にそれ独自のMirrorを提供するある型、しかしそれの子孫クラスはそれらがまた&lt;c0&gt;custom&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt;をオーバーライドしない限りはMirrorで表現されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that explicitly supplies its own mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>明示的にそれ自身のMirrorを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that iterates over a collection using its indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション全体に渡ってそれのインデックスを使って繰り返し処理する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a collection of all of its values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの値の全てからなるコレクションを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides asynchronous, sequential, iterated access to its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それはそれの要素それらに対して非同期の、順次的な、反復したアクセスを提供するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides sequential, iterated access to its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>順次的な、繰り返されるアクセスをそれの要素に提供するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides the collection’s iteration interface and encapsulates its iteration state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションの持つ反復インターフェイスを提供してそれの反復状態をカプセル化するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides the sequence’s iteration interface and encapsulates its iteration state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのシーケンスの持つ反復インターフェイスを提供してそれの反復状態をカプセル化するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a Boolean literal, such as &lt;c0&gt;Bool&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブールリテラルを表すある型、例えば&lt;c0&gt;Bool&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a Unicode scalar literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーリテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a floating-point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点リテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a globally-unique actor that can be used to isolate various declarations anywhere in the program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それはあるグローバルに特有なアクターを表します、それはさまざまな宣言をどこでもプログラムの中で分離するために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a position in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中のある位置を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a valid position in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>有効な位置をそのコレクションにおいて表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents an extended grapheme cluster literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>拡張書記素クラスタリテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents an integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数リテラルを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the distance between two values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値の間の隔たりを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the encoded exponent of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のエンコードされた指数を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the encoded significand of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のエンコードされた仮数を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the indices that are valid for subscripting the collection, in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>昇順での、コレクションの添え字として有効なインデックスを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the words of a binary integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるバイナリ整数の単語を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the words of this integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のワードを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that supplies a custom description for playground logging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドログのためにあつらえの記述を提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type whose instances can be encoded, and appropriately passed, as elements of a C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのインスタンスが、符号化されること、そして適切に渡されることが、C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;の要素として可能である型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with a customized textual representation suitable for debugging purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デバッグ目的に都合がよいようにカスタマイズされた原文の表現を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with a customized textual representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>カスタマイズされた原文の表現を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with values that support addition and subtraction.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算と減算をサポートする値を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with values that support multiplication.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算をサポートする値をもつ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased hashable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去ハッシュ可能値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased iterator of &lt;c0&gt;Element&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;の型消去イテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased key path, from any root type to any resulting value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去キーパス、何らかの根本の型から何らかの結果値の型への。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased wrapper over any collection with indices that support bidirectional traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２方向に辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased wrapper over any collection with indices that support forward traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前へ辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased wrapper over any collection with indices that support random access traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為アクセスで辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A unique identifier for a class instance or metatype.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクラスインスタンスまたはメタタイプのための固有な識別子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A unit of scheduleable work.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>予定可能な仕事の単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A user-defined key for providing context during encoding and decoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングおよびデコーディングの間にコンテキストを提供するためのユーザ定義のキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この配列の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the collection to use as a limit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>限度として使うためのそのコレクションの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value equal to &lt;c0&gt;+infinity&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;+infinity&lt;/c0&gt;に等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value equal to &lt;c0&gt;-infinity&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-infinity&lt;/c0&gt;に等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value equal to zero with a negative sign.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の符号を持つゼロに等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value equal to zero with a positive sign.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の符号を持つゼロに等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value from which to use the magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこからの値が規模に使われることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value from which to use the sign.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それからの値が符号に使われることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value less than or equal to the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの中の要素の数より少ないか等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value less than or equal to the number of elements in the sequence, calculated nondestructively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの要素数より少ないか等しい値、非破壊的に計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value of &lt;e0&gt;NaN&lt;/e0&gt; contains the string &lt;c1&gt;"nan"&lt;/c1&gt;, case insensitive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;NaN&lt;/e0&gt;の値は、文字列&lt;c1&gt;"nan"&lt;/c1&gt;を含みます、大文字小文字に影響されずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value of &lt;e0&gt;infinity&lt;/e0&gt; contains one of the strings &lt;c1&gt;"inf"&lt;/c1&gt; or &lt;c2&gt;"infinity"&lt;/c2&gt;, case insensitive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;無限大&lt;/e0&gt;の値は、文字列&lt;c1&gt;"inf"&lt;/c1&gt;または&lt;c2&gt;"infinity"&lt;/c2&gt;のうちの１つを含みます、大文字小文字に影響されずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value that is NaN (“not a number”) cannot be represented exactly if its payload cannot be encoded exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaN（非数）である値は、それのペイロードが正確にエンコードされないならば、正確に表現できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value that is offset from this value by &lt;c0&gt;n&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値から&lt;c0&gt;n&lt;/c0&gt;をオフセットされる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to add to the hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャーに加える値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to convert to this type of integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の整数へと変換される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to either return or throw from the continuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その継続から返すまたはスローするどちらかの値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to match against &lt;c0&gt;pattern&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;pattern&lt;/c0&gt;と照合することになるある値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to use as a default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時のものとして使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to use as the big-endian representation of the new integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい整数のビッグエンディアン表現として使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to use as the little-endian representation of the new integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい整数のリトルエンディアン表現として使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to use as the source of the new instance’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスの持つバイナリ表現のソースとして使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value type whose instances are either &lt;c0&gt;true&lt;/c0&gt; or &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値型、そのインスタンスは&lt;c0&gt;true&lt;/c0&gt;か&lt;c1&gt;false&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value’s &lt;c0&gt;floating&lt;w1&gt;Point&lt;w2&gt;Class&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; property describes its “class” as described by the &lt;a3&gt;IEEE 754 specification&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の&lt;c0&gt;floating&lt;w1&gt;Point&lt;w2&gt;Class&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロパティは、それの“class”を&lt;a3&gt;IEEE 754仕様&lt;/a3&gt;で記述される通りに記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A variadic list of elements of the new array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい配列の要素からなる可変長引数リスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view of a character’s contents as a collection of UTF-16 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字のもつ内容のひとつの見方、いくらかのUTF-16コード単位のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view of a character’s contents as a collection of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字のもつ内容のひとつの見方、いくらかのUTF-8コード単位のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view of a dictionary’s keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書のもつキーのあるビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view of a dictionary’s values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書のもつ値のあるビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A wrapper around a C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt; pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;ポインタの周りのラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A wrapper around an opaque C pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不透明Cポインターの周りのラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A wrapper over an underlying index that hides the specific underlying type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>根底にあるインデックスを覆うラッパー、根底にある特定の型を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>About Imported Cocoa Error Parameters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされるCocoaエラーパラメータについて</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access Swift types and declarations from within your Objective-C codebase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift型と宣言にあなたのObjective-Cコードベース内からアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access classes and other declarations from your Objective-C code in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftにおいてあなたのObjective-Cコード由来のクラスおよび他の宣言にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access must only occur through the pointer argument to &lt;c4&gt;body&lt;/c4&gt; until &lt;c5&gt;body&lt;/c5&gt; returns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスは、&lt;c4&gt;body&lt;/c4&gt;に対するポインタ引数を通して、&lt;c5&gt;body&lt;/c5&gt;が返るまでに、発生するだけでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access the &lt;c0&gt;i&lt;/c0&gt;th element of the raw array pointed to by &lt;c1&gt;self&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;によって指し示される生の配列の&lt;c1&gt;i&lt;/c1&gt;番目の要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access to the raw argc value from C.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cからの生のargc値にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access to the raw argv value from C. Accessing the argument vector through this pointer is unsafe.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のargv値にCからアクセスします。引数ベクトルにこのポインタを通してアクセスすることは安全ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access to the swift arguments, also use lazy initialization of static properties to safely initialize the swift arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>swift引数にアクセスします、また静的プロパティの遅延初期化を使って安全にswift引数を初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access your Swift code from within your Objective-C codebase, and your Objective-C code from Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのSwiftコードにあなたのObjective-Cコードベース内からアクセスします、そしてあなたのObjective-CコードにSwiftからアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses a contiguous subrange of the array’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列のもつ要素らの中のある連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのもついくらかの要素からなるある連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the contiguous subrange of the collection’s elements specified by a range expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式によって指定される、コレクションの要素からなる連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at &lt;c0&gt;position&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;での要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置で要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at the given position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた位置での要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたインデックスでの要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置で要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element indicated by &lt;c0&gt;position&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;によって指し示される要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the key-value pair at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置でキー値ペアにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the value associated with the given key for reading and writing.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーに結び付けられる値に読出しと書き込みのためにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the value with the given key, falling back to the given default value if the key isn’t found.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値にこの与えられたキーでアクセスします、キーが見つけられないならばその与えられた省略時の値まで後退します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing &lt;c0&gt;pointee&lt;/c0&gt; as a type that is unrelated to the underlying memory’s bound type is undefined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基礎をなすメモリの境界型と関係のない型として&lt;c0&gt;pointee&lt;/c0&gt;にアクセスすることは、未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Arguments</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Array Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の値にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Cases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ケース節にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Individual Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個々の要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Keys and Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーと値にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Numeric Constants</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数に関する定数にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Objective-C Methods and Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cのメソッドやプロパティへのアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Raw Argument Data</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生の引数データにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Slices of a Collection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションのスライスにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Underlying Storage</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基礎をなすストレージにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing a Collection's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのもつ要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing a Pointer's Memory</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタの持つメモリにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing a type’s &lt;c0&gt;description&lt;/c0&gt; property directly or using &lt;c1&gt;Custom&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; as a generic constraint is discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型のもつ&lt;c0&gt;description&lt;/c0&gt;プロパティに直にアクセスすることや&lt;c1&gt;Custom&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;を総称体制約として使うことは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Actor types implicitly conform to this protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクター型それらは、暗黙的にこのプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adapting Textual Sequences</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テキストシーケンスに適応する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add &lt;c0&gt;Custom&lt;w1&gt;Debug&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to your custom types by defining a &lt;c4&gt;debug&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Custom&lt;w1&gt;Debug&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえの型に&lt;c4&gt;debug&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt;プロパティを定義することによって加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add &lt;c0&gt;Custom&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to your custom types by defining a &lt;c3&gt;description&lt;/c3&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Custom&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえの型に&lt;c3&gt;description&lt;/c3&gt;プロパティを定義することによって加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add &lt;c0&gt;Equatable&lt;/c0&gt; and &lt;c1&gt;Hashable&lt;/c1&gt; to the list of adopted protocols when declaring the type, and the compiler automatically fills in the requirements for the two protocols:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Equatable&lt;/c0&gt;および&lt;c1&gt;Hashable&lt;/c1&gt;を型を宣言する時に採用するプロトコルのリストに加えてください、するとコンパイラは自動的に２つのプロトコルに対する要件を満たします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add &lt;c2&gt;Comparable&lt;/c2&gt; conformance to your own custom types when you want to be able to compare instances using relational operators or use standard library methods that are designed for &lt;c3&gt;Comparable&lt;/c3&gt; types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが関係演算子を使ってインスタンスの比較ができること、または &lt;c3&gt;Comparable&lt;/c3&gt;型のために設計される標準ライブラリメソッドを使うことを望む場合は、&lt;c2&gt;Comparable&lt;/c2&gt;準拠をあなた独自のあつらえの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add multiple elements at the same time by passing another array or a sequence of any kind to the &lt;c1&gt;append(contents&lt;w2&gt;Of:)&lt;/w2&gt;&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;append(contents&lt;w2&gt;Of:)&lt;/w2&gt;&lt;/c1&gt;メソッドに別の配列や何らかの種類のシーケンスを渡すことによって、複数の要素を同時に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add new interpolation behavior to existing types by extending &lt;c0&gt;Default&lt;w1&gt;String&lt;w2&gt;Interpolation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, the type that implements interpolation for types like &lt;c3&gt;String&lt;/c3&gt; and &lt;c4&gt;Substring&lt;/c4&gt;, to add an overload of &lt;c5&gt;append&lt;w6&gt;Interpolation(_:)&lt;/w6&gt;&lt;/c5&gt; with their new behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい補間挙動を既存の型それらに追加することを&lt;c0&gt;Default&lt;w1&gt;String&lt;w2&gt;Interpolation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;、&lt;c3&gt;String&lt;/c3&gt;および&lt;c4&gt;Substring&lt;/c4&gt;のような型に補間を実装する型、を拡張してそれらの新しい挙動をもつ&lt;c5&gt;append&lt;w6&gt;Interpolation(_:)&lt;/w6&gt;&lt;/c5&gt;のオーバーロードを加えることで行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add the capability to be initialized with an array literal to your own custom types by declaring an &lt;c0&gt;init(array&lt;w1&gt;Literal:)&lt;/w1&gt;&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;init(array&lt;w1&gt;Literal:)&lt;/w1&gt;&lt;/c0&gt;イニシャライザを宣言することによって、配列リテラルで初期化される能力をあなた独自のあつらえの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding &lt;c0&gt;Equatable&lt;/c0&gt; conformance to your custom types means that you can use more convenient APIs when searching for particular instances in a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Equatable&lt;/c0&gt;準拠をあなたのあつらえの型に追加することが意味するのは、あなたがより便利なAPIを特定のインスタンスをあるコレクションの中で探す時に使用できるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の追加</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding Keys and Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーと値を追加する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding and Removing Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の追加と削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Additional Considerations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加の考慮すべきこと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Additive&lt;w0&gt;Arithmetic Implementations &lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加法&lt;w0&gt;算術の実装&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds a new element at the end of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい要素を配列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the contents of the given buffer to this hasher, mixing it into the hasher state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたバッファの内容をこのハーシャーに加えます、それをハーシャー状態へと混ぜ入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the elements of a sequence or collection to the end of this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスまたコレクションに属するいくつかの要素をこのコレクションの終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the elements of a sequence to the end of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスに属する要素を配列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the given value to this hasher, mixing its essential parts into the hasher state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をこのハーシャーに加えます、それの本質的部分それらをハーシャー状態に混ぜ合わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the product of the two given values to this value in place, computed without intermediate rounding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の積をこの値にその場で加えます、中間の丸めなしで計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and produces their sum, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算してそれらの合計を生成します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and produces their sum.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算してそれらの合計を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and stores the result in the left-hand-side variable, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算して、結果を左手側の変数に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and stores the result in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算して結果を左手側の変数に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算して、結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adopt a Delegate Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>委任先プロトコルを採用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adopt and interoperate with Cocoa design patterns in your Swift apps.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CocoaデザインパターンをあなたのSwiftアプリにおいて採用および相互運用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adopting Common Protocols</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般的なプロトコルを採用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Advances to the next element and returns it, or &lt;c0&gt;nil&lt;/c0&gt; if no next element exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の要素へ進んでそれを返します、または次の要素が存在しないならば&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After &lt;c0&gt;resume&lt;/c0&gt; enqueues the task, control immediately returns to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;resume&lt;/c0&gt;がタスクを待ち行列に入れた後、制御はすぐに呼び出し側へと返ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After adding &lt;c0&gt;Custom&lt;w1&gt;Debug&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance by implementing the &lt;c4&gt;debug&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt; property, &lt;c6&gt;Point&lt;/c6&gt; provides its own custom debugging representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Custom&lt;w1&gt;Debug&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠を&lt;c4&gt;debug&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt;プロパティを実装することによって追加後は、&lt;c6&gt;Point&lt;/c6&gt;はそれ独自のあつらえのデバッグ表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After assigning the new value (&lt;c0&gt;"Butler"&lt;/c0&gt;) at a specific position, that value is immediately available at that same position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値（&lt;c0&gt;"Butler"&lt;/c0&gt;）を指定された位置で割り当てた後、その値はすぐにその同じ位置で利用可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After implementing the &lt;c0&gt;description&lt;/c0&gt; property and declaring &lt;c1&gt;Custom&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; conformance, the &lt;c4&gt;Point&lt;/c4&gt; type provides its own custom representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;description&lt;/c0&gt;プロパティの実装と&lt;c1&gt;Custom&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;準拠の宣言の後は、&lt;c4&gt;Point&lt;/c4&gt;型はそれ自身のあつらえの表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After partitioning a collection, there is a pivot index &lt;c0&gt;p&lt;/c0&gt; where no element before &lt;c1&gt;p&lt;/c1&gt; satisfies the &lt;c2&gt;belongs&lt;w3&gt;In&lt;w4&gt;Second&lt;w5&gt;Partition&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; predicate and every element at or after &lt;c6&gt;p&lt;/c6&gt; satisfies &lt;c7&gt;belongs&lt;w8&gt;In&lt;w9&gt;Second&lt;w10&gt;Partition&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションを仕切った後、あるピボットインデックス&lt;c0&gt;p&lt;/c0&gt;があります、そこで&lt;c1&gt;p&lt;/c1&gt;の前の要素は１つも&lt;c2&gt;belongs&lt;w3&gt;In&lt;w4&gt;Second&lt;w5&gt;Partition&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;述部を満たさず、そして&lt;c6&gt;p&lt;/c6&gt;でのまたは後のあらゆる要素は&lt;c7&gt;belongs&lt;w8&gt;In&lt;w9&gt;Second&lt;w10&gt;Partition&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After passing the unsafe continuation to this initializer, don’t use it outside of this object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その非安全継続をこのイニシャライザに渡した後、それをこのオブジェクトの外側で使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After reaching the maximum number of elements, subsequent calls to &lt;c1&gt;next()&lt;/c1&gt; return &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の最大数に到達した後、&lt;c1&gt;next()&lt;/c1&gt;へのその後の呼び出しは&lt;c2&gt;nil&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After reaching the number of elements to drop, this iterator passes along the result of calling &lt;c3&gt;next()&lt;/c3&gt; on the base iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>抜かす要素の数に到達した後、このイテレータは&lt;c3&gt;next()&lt;/c3&gt;を基底イテレータ上で呼び出す結果をずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After returning &lt;c1&gt;nil&lt;/c1&gt; (or throwing an error) from &lt;c2&gt;next()&lt;/c2&gt;, the iterator enters a terminal state, and all future calls to &lt;c3&gt;next()&lt;/c3&gt; must return &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;next()&lt;/c2&gt;から&lt;c1&gt;nil&lt;/c1&gt;を返す（またはエラーをスローする）後、イテレータはある終端状態に入ります、そして&lt;c3&gt;next()&lt;/c3&gt;への全ての未来の呼び出しは、&lt;c4&gt;nil&lt;/c4&gt;を返さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After that, the iterator returns values received from its base iterator as-is, and never executes the predicate closure again.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その後、イテレータはそれの基底イテレータから受け取った値をそのまま返します、そして決して述部クロージャを再び遂行しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the &lt;c0&gt;Cake&lt;/c0&gt; structure has been imported, you can use the default initializer to create an instance and use it as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Cake&lt;/c0&gt;構造体がインポートされた後、あなたは省略時のイニシャライザを使うことでインスタンスを作成してそれを以下のように使用できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the predicate returns &lt;c0&gt;false&lt;/c0&gt;, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部が&lt;c0&gt;false&lt;/c0&gt;を返した後、シーケンスはそれを決して再び遂行しません、そしてそれからシーケンス上では、要素それらをそれの基礎をなすシーケンスからそのままでずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the predicate returns &lt;c0&gt;false&lt;/c0&gt;, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部が&lt;c0&gt;false&lt;/c0&gt;を返した後、シーケンスはそれを決して再び遂行しません、そしてその時からシーケンスは要素それらをそれの基礎をなすシーケンスからずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the predicate returns &lt;c4&gt;false&lt;/c4&gt;, for a value received from the base iterator, this method returns that value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部が&lt;c4&gt;false&lt;/c4&gt;を返した後、基底イテレータから受け取った値に対して、このメソッドはその値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After this method returns, the task group is guaranteed to be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドが復帰した後、タスクグループは空であることを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After using &lt;c0&gt;first&lt;w1&gt;Index(of:)&lt;/w1&gt;&lt;/c0&gt; to find the position of a particular element in a collection, you can use it to access the element by subscripting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;first&lt;w1&gt;Index(of:)&lt;/w1&gt;&lt;/c0&gt;を使って特定の要素の位置をあるコレクションの中で見つけた後、あなたは添え字によって要素にアクセスするのにそれを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After using &lt;c0&gt;last&lt;w1&gt;Index(of:)&lt;/w1&gt;&lt;/c0&gt; to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;last&lt;w1&gt;Index(of:)&lt;/w1&gt;&lt;/c0&gt;を使って特定の要素の最後のインスタンスの位置をあるコレクションの中で見つけた後、あなたは添え字によって要素にアクセスするのにそれを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After you import an Objective-C framework, a C library, or a header file, you can work with Objective-C classes and protocols, as well as common C constructs, functions, and patterns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがObjective-Cフレームワーク、Cライブラリ、またはあるヘッダファイルをインポートした後、あなたはObjective-Cのクラスとプロトコル、それだけでなく一般的なC構造体、関数、そしてパターンを扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Aliases for Imported C Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC型に対するエイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All Objective-C generic type parameters imported by Swift have a type constraint that requires that type to be a class (&lt;c0&gt;T: Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトによってインポートされる全てのObjective-C総称体型パラメータは、ある型制約を持ちます、それはあるクラス（&lt;c0&gt;T: Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt;）であることをその型に要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All arity zero tuples are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>項数ゼロのタプルはすべて等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All associations between insertions and removals are symmetric</seg>
      </tuv>
      <tuv lang="ja">
        <seg>挿入それらと除去それらの間の全ての関係は、対照的である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All elements satisfying this predicate are ordered after all elements not satisfying it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この述部を満たす全ての要素は、それを満たさない全ての要素の後に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All indirectly returned Core Foundation objects are unmanaged as well.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての間接的に返されたコアファウンデーション・オブジェクトは、同様に管理されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All insertion offsets are unique</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての挿入オフセットは、特有である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All of the standard library’s integer types, such as &lt;c2&gt;Int&lt;/c2&gt; and &lt;c3&gt;UInt32&lt;/c3&gt;, conform to &lt;c4&gt;Binary&lt;w5&gt;Integer&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの持つ整数型の全て、例えば&lt;c2&gt;Int&lt;/c2&gt;と&lt;c3&gt;UInt32&lt;/c3&gt;などは、&lt;c4&gt;Binary&lt;w5&gt;Integer&lt;/w5&gt;&lt;/c4&gt;に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All other values of the &lt;c4&gt;Index&lt;/c4&gt; type, such as the &lt;c5&gt;start&lt;w6&gt;Index&lt;/w6&gt;&lt;/c5&gt; property of a different collection, are invalid indices for this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Index&lt;/c4&gt;型の他の値すべて、例えば異なるコレクションの&lt;c5&gt;start&lt;w6&gt;Index&lt;/w6&gt;&lt;/c5&gt;プロパティなどは、このコレクションに対する無効なインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All removal offsets are unique</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての除去オフセットは、特有である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All the elements following the specified position are moved to close the gap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置に続く要素すべては、隙間を埋めるように移動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All the elements following the specified position are moved up to close the gap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置に続く要素すべては、隔たりを埋めるように繰り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All values other than NaN and infinity are considered finite, whether normal or subnormal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNと無限大の他の全ての値は、ノーマルまたはサブノーマルかにかかわらず、有限と見なされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows a nonescaping closure to temporarily be used as if it were allowed to escape.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非脱出クロージャに、一時的にそれが脱出することを許可されたかのように使われることを許可します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Along with defining the type of values as an associated type called &lt;c2&gt;Element&lt;/c2&gt;, the &lt;c3&gt;Async&lt;w4&gt;Sequence&lt;/w4&gt;&lt;/c3&gt; defines a &lt;c5&gt;make&lt;w6&gt;Async&lt;w7&gt;Iterator()&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値それらの型を&lt;c2&gt;Element&lt;/c2&gt;と呼ばれる関連型として定義することに加えて、&lt;c3&gt;Async&lt;w4&gt;Sequence&lt;/w4&gt;&lt;/c3&gt;は&lt;c5&gt;make&lt;w6&gt;Async&lt;w7&gt;Iterator()&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;メソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Also, the dictionary doesn’t provide a key for &lt;c14&gt;4&lt;/c14&gt;, and the closure throws an error for any key it can’t look up, so receiving this value from &lt;c15&gt;Counter&lt;/c15&gt; ends the modified sequence with an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>また、辞書は&lt;c14&gt;4&lt;/c14&gt;に対するキーを提供しません、そしてクロージャはそれが見つけることが出来ない何らかのキーに対してエラーをスローします、それでこの値を&lt;c15&gt;Counter&lt;/c15&gt;から受け取ることはこの修正されたシーケンスをエラーで終わらせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, a predicate can be satisfied by a range of &lt;c0&gt;Equatable&lt;/c0&gt; elements or a general condition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいは、述部は、&lt;c0&gt;Equatable&lt;/c0&gt;要素のある範囲またはある一般的条件によって満たされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, if you need to test whether &lt;c0&gt;obj&lt;w1&gt;.get&lt;w2&gt;Integer&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; exists, use optional binding before calling the method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいは、あなたが&lt;c0&gt;obj&lt;w1&gt;.get&lt;w2&gt;Integer&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が存在するかテストする必要があるならば、オプショナル束縛をそのメソッドを呼び出す前に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, use this method to sort a collection of elements that do conform to &lt;c0&gt;Comparable&lt;/c0&gt; when you want the sort to be descending instead of ascending.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうではなくて、あなたが昇順ではなく降順でソートしたい場合は、このメソッドを使って&lt;c0&gt;Comparable&lt;/c0&gt;に準拠する要素からなるコレクションをソートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can call &lt;c2&gt;async&lt;w3&gt;Unless&lt;w4&gt;Cancelled(priority:&lt;w5&gt;operation:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;, which doesn’t create the task if the group has already been canceled Choosing between these two functions lets you control how to react to cancellation within a group: some child tasks need to run regardless of cancellation and others are better not even being created knowing they can’t produce useful results.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その代わりに、あなたは&lt;c2&gt;async&lt;w3&gt;Unless&lt;w4&gt;Cancelled(priority:&lt;w5&gt;operation:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;を呼び出せます、それはグループが既に取り消されてしまっているならばタスクを作成しません。これら２つの関数の間から選ぶことは、あなたにグループ内の取り消しにどのように反応するかを制御させます：いくつかの子タスクは取り消しにかかわらず動作する必要があります、そして他のものは、それらが有用な結果を生み出せないのがわかっていて、作成すらされない方が良いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can create a bridging header yourself by choosing File &gt; New &gt; File &gt; [&lt;e2&gt;operating system&lt;/e2&gt;] &gt; Source &gt; Header File.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいはまた、あなたはブリッジヘッダを、File &gt; New &gt; File &gt; [&lt;e2&gt;オペレーションシステム&lt;/e2&gt;] &gt; Source &gt; Header File を選択することであなた自身で作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although Swift doesn’t support natively declared unions, a C union imported as a Swift structure still behaves like a C union.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは生得的に宣言された共用体をサポートしないにもかかわらず、Swift構造体としてインポートされたC共用体は依然としてC共用体のように振る舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be &lt;e0&gt;multipass&lt;/e0&gt;: Any element can be repeatedly accessed by saving its index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスはそれが辿って行かれるとき消費されることが可能な一方、コレクションは&lt;e0&gt;マルチパス&lt;/e0&gt;であることを保証されます：どんな要素もそれのインデックスを保存することによって繰り返しアクセスされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always traps.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常にトラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always use the same properties in both your &lt;c0&gt;==&lt;/c0&gt; and &lt;c1&gt;hash(into:)&lt;/c1&gt; methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常に同じプロパティをあなたの&lt;c0&gt;==&lt;/c0&gt;および&lt;c1&gt;hash(into:)&lt;/c1&gt;メソッドの両方において使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always use the slice’s &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property instead of assuming that its indices start at a particular value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常にスライスの&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティを使ってください、それのインデックスが特定の値で始まると決めてかかるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always use the slice’s &lt;c7&gt;start&lt;w8&gt;Index&lt;/w8&gt;&lt;/c7&gt; and &lt;c9&gt;end&lt;w10&gt;Index&lt;/w10&gt;&lt;/c9&gt; properties instead of assuming that its indices start or end at a particular value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常にスライスの&lt;c7&gt;start&lt;w8&gt;Index&lt;/w8&gt;&lt;/c7&gt;と&lt;c9&gt;end&lt;w10&gt;Index&lt;/w10&gt;&lt;/c9&gt;プロパティを使ってください、それのインデックスが特定の値で始まると決めてかかるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always zero, just like &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常にゼロ、ちょうど&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always zero, just like &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常にゼロ、ちょうど&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An 8-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>8ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Any&lt;w1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance forwards its operations to a base collection having the same &lt;c3&gt;Element&lt;/c3&gt; type, hiding the specifics of the underlying collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスは、それの操作を同じ&lt;c3&gt;Element&lt;/c3&gt;型を持っている基盤コレクションへと転送して、基礎をなすコレクションの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Any&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt; instance forwards its operations to a base collection having the same &lt;c2&gt;Element&lt;/c2&gt; type, hiding the specifics of the underlying collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;インスタンスは、それの操作を同じ&lt;c2&gt;Element&lt;/c2&gt;型を持っている基盤コレクションへと転送して、基礎をなすコレクションの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Any&lt;w1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance forwards its operations to a base collection having the same &lt;c4&gt;Element&lt;/c4&gt; type, hiding the specifics of the underlying collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスは、それの操作を同じ&lt;c4&gt;Element&lt;/c4&gt;型を持っている基盤コレクションへと転送して、基礎をなすコレクションの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt; doesn’t generate or contain the values; it just defines how you access them.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;は、値それらを生成または含みません；それはただどのようにあなたがそれらにアクセスするかを定義するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt; resembles the &lt;c2&gt;Sequence&lt;/c2&gt; type — offering a list of values you can step through one at a time — and adds asynchroncity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;は、&lt;c2&gt;Sequence&lt;/c2&gt;型に類似して — あなたが一度に１つずつ段階処理していくことができるいくつかの値からなるあるリストを提供します — そして非同期性をつけ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c3&gt;Async&lt;w4&gt;Sequence&lt;/w4&gt;&lt;/c3&gt; may have all, some, or none of its values available when you first use it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c3&gt;Async&lt;w4&gt;Sequence&lt;/w4&gt;&lt;/c3&gt;は、それの値の全て、いくつか、または０個を、あなたがそれを最初に使う時に利用可能とするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;e0&gt;extended grapheme cluster&lt;/e0&gt; is a group of one or more Unicode scalar values that approximates a single user-perceived character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;拡張書記素クラスタ&lt;/e0&gt;は、ひとまとめにした１つ以上のユニコードスカラー値です、それは単一のユーザ知覚文字におおよそ相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An Objective-C protocol-qualified metaclass is imported by Swift as a protocol metatype, which is a type that represents the type of a protocol itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cプロトコル適格メタクラスは、Swiftによってプロトコルメタタイプとしてインポートされます、それはプロトコルそれ自体の型を表す型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An all-zeros exponent is reserved for subnormals and zeros, and an all-ones exponent is reserved for infinity and NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全てゼロの指数は非正規化数とゼロのために予約されます、そして全て１の指数は無限大とNaNのために予約されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An arity zero tuple is always after or the same as another arity zero tuple in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>項数ゼロのタプルは、常に語彙筆記的順序において別の項数ゼロのタプルの後またはそれと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An arity zero tuple is always before or the same as another arity zero tuple in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>項数ゼロのタプルは、常に語彙筆記的順序において別の項数ゼロのタプルの前またはそれと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An arity zero tuple is never strictly after another arity zero tuple in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>項数ゼロのタプルは、厳密に決して語彙筆記的順序において別の項数ゼロのタプルの後ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An arity zero tuple is never strictly before another arity zero tuple in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>項数ゼロのタプルは、厳密に決して語彙筆記的順序において別の項数ゼロのタプルの前ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array can store any kind of elements—from integers to strings to classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある配列は、整数から文字列まで、あるクラスであるどんなものであることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array containing the elements of this sequence in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素を逆順に含んでいる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array containing the transformed elements of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの変換済み要素を含んでいる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array literal is a simple way of expressing a list of values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルは、値のリストを表す簡単な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array literal is not the same as an &lt;c0&gt;Array&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルは、&lt;c0&gt;Array&lt;/c0&gt;インスタンスと同じではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of arguments to convert to a C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt; pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるC &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;ポインタに変換することになる、いくつかの引数からなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of subsequences, split from this collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの要素を分割した、下位シーケンスいくらかからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of subsequences, split from this sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素を分割した、下位シーケンスいくらかからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of the elements that &lt;c0&gt;is&lt;w1&gt;Included&lt;/w1&gt;&lt;/c0&gt; allowed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Included&lt;/w1&gt;&lt;/c0&gt;が許可する要素からなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of the non-&lt;c0&gt;nil&lt;/c0&gt; results of calling &lt;c1&gt;transform&lt;/c1&gt; with each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの各要素で&lt;c1&gt;transform&lt;/c1&gt;を呼ぶことの非&lt;c0&gt;nil&lt;/c0&gt;の結果の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of this sequence’s elements in a shuffled order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの持つ要素からなる配列、シャッフルされた順番で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array that is the sole owner of its storage can perform mutating operations in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのストレージのただ一人のオーナーである配列は、変化を伴う操作をそこで実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array value converts to an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列値は、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asychronous sequence of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値それらからなるある非同期シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asychronous sequence of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列いくつかからなるある非同期シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asychronous sequence of lines of text.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テキスト行それらからなる非同期シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence called &lt;c3&gt;Rank&lt;w4&gt;Counter&lt;/w4&gt;&lt;/c3&gt; produces all elements of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;Rank&lt;w4&gt;Counter&lt;/w4&gt;&lt;/c3&gt;と呼ばれる非同期シーケンスは、その配列のすべての要素を取り出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence of the initial, consecutive elements that satisfy &lt;c0&gt;predicate&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>冒頭の、&lt;c0&gt;predicate&lt;/c0&gt;を満たす連続した要素それらからなるある非同期シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence starting at the beginning of the base sequence with at most &lt;c0&gt;count&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基底シーケンスの先端で始まる多くとも&lt;c0&gt;count&lt;/c0&gt;要素の非同期シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは与えられたエラースロー変換をこのシーケンスの各要素で呼び出すことの結果を連結します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは与えられた変換をこのシーケンスの各要素で呼び出すことの結果を連結します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは基底シーケンスの要素それらを、順番に含みます、それらは与えられた述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは基底シーケンスの要素それらを、順番に含みます、それらは与えられたエラースロー述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは基底シーケンスの要素それらを、順番に含みます、それらは与えられた述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that contains, in order, the elements produced by the &lt;c0&gt;transform&lt;/c0&gt; closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは&lt;c0&gt;transform&lt;/c0&gt;クロージャによって生み出された要素それらを、順番に含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that contains, in order, the non-&lt;c0&gt;nil&lt;/c0&gt; elements produced by the &lt;c1&gt;transform&lt;/c1&gt; closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは&lt;c1&gt;transform&lt;/c1&gt;クロージャによって生み出された非&lt;c0&gt;nil&lt;/c0&gt;要素それらを、順番に含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that drops the first &lt;c0&gt;count&lt;/c0&gt; elements from the base sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは最初の&lt;c0&gt;count&lt;/c0&gt;要素を基底シーケンスから抜かします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは与えられたクロージャを非同期シーケンスのもつ要素のすべてにわたってマップします、値を返さない結果を省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それはあるエラースロークロージャを基底シーケンスのもつ要素のすべてにわたってマップします、値を返さない結果を省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは与えられたクロージャを非同期シーケンスのもつ要素のすべてにわたってマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは与えられたエラースロークロージャを非同期シーケンスのもつ要素のすべてにわたってマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that skips over values from the base sequence until the provided closure returns &lt;c0&gt;false&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは基底シーケンスから値それらを、この提供されたクロージャが&lt;c0&gt;false&lt;/c0&gt;を返すまで飛び越えるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence that skips over values until the provided closure returns &lt;c0&gt;false&lt;/c0&gt; or throws an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは値それらを、この提供されたクロージャが&lt;c0&gt;false&lt;/c0&gt;を返すかエラーをスローするまで飛び越えるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは指定された数の要素を基底非同期シーケンスから省きます、それから全ての残りの要素をずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは要素を基底シーケンスから、ある与えられたクロージャがfalseを返すまで省きます、それの後それは全ての残りの要素をずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは要素を基底シーケンスから、ある与えられたエラースロークロージャがfalseを返すまで省きます、それの後それは全ての残りの要素をずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは基底シーケンスの冒頭の、連続する要素いくつかを含んでいます、それらは与えられた述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンス、それは基底シーケンスの冒頭の、連続する要素いくつかを含んでいます、それらは与えられたエラースロー述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An asynchronous sequence, up to a specified maximum length, containing the initial elements of a base asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された最大長まで、その基盤非同期シーケンスの冒頭の要素を含んでいる、ある非同期シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのある要素は、基盤となるコレクションの中と同じスライスの中のインデックスのもとに位置を突き止められます、コレクションもスライスもスライスが作成された時からずっと変化していない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element to search for in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションにおいて捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An empty array literal alone doesn’t provide enough information for the compiler to infer the intended type of the &lt;c0&gt;Array&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の配列リテラルそれだけでは、コンパイラが&lt;c0&gt;Array&lt;/c0&gt;インスタンスの意図される型を推論するのに十分な情報を提供していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An empty tuple.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An end value to limit the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスに限界を設けるための終了値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An enumeration of the elements of a sequence or collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスまたはコレクションの要素の列挙。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An equivalent range must be representable as a closed range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等の範囲が、完結範囲として表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An error that occurs during the decoding of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のデコーディングの間に起こるエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An error that occurs during the encoding of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のエンコーディングの間に起こるエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An error-throwing closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるエラースロークロージャ、それはある要素をパラメータとして取り、その要素をこの修正後のシーケンスから抜かすことになるかどうかを指し示すブール値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An error-throwing closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるエラースロークロージャ、それは非同期シーケンスの１つの要素をそれの引数として取り、その要素をこの平坦化されたシーケンスに含むことになるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An error-throwing mapping closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるエラースローマッピングクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An extended-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>拡張倍精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An implementation detail of key path expressions; do not use this protocol directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス式の実装詳細；このプロトコルを直接に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by &lt;c0&gt;distance&lt;/c0&gt; from the index &lt;c1&gt;i&lt;/c1&gt;, unless that index would be beyond &lt;c2&gt;limit&lt;/c2&gt; in the direction of movement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance&lt;/c0&gt;だけインデックス&lt;c1&gt;i&lt;/c1&gt;から補われたインデックス、そのインデックスが&lt;c2&gt;limit&lt;/c2&gt;を移動方向において越える場合を除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by &lt;c0&gt;distance&lt;/c0&gt; from the index &lt;c1&gt;i&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance&lt;/c0&gt;だけインデックス&lt;c1&gt;i&lt;/c1&gt;から補われるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by &lt;c0&gt;n&lt;/c0&gt; from the index &lt;c1&gt;i&lt;/c1&gt;, unless that index would be beyond &lt;c2&gt;limit&lt;/c2&gt; in the direction of movement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックス&lt;c1&gt;i&lt;/c1&gt;から&lt;c0&gt;n&lt;/c0&gt;だけ補われたインデックス、そのインデックスが&lt;c2&gt;limit&lt;/c2&gt;を移動方向において越えない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by &lt;c0&gt;n&lt;/c0&gt; from the index &lt;c1&gt;i&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックス&lt;c1&gt;i&lt;/c1&gt;から&lt;c0&gt;n&lt;/c0&gt;だけ補われるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較するインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An indication that a keyed decoding container was asked for an entry for the given key, but did not contain one.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー付きデコーディングコンテナが与えられたキーに対する登録項目について尋ねられた、しかし含んでいるものがなかったことを指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An indication that a non-optional value of the given type was expected, but a null value was found.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型のある非オプショナル値が期待された、しかしnull値が見つけられたことを指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An indication that a value of the given type could not be decoded because it did not match the type of what was found in the encoded payload.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の値がデコードできなかった、なぜならエンコードされたペイロードの中に見つけられた何かの型とそれが合致しなかったことを指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An indication that an encoder or its containers could not encode the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーダまたはそれのコンテナが与えられた値をエンコードできなかったことを指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An indication that the data is corrupted or otherwise invalid.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データが不正またはそうでなくとも無効であることを指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An individual task throws its error in the corresponding call to &lt;c0&gt;Group&lt;w1&gt;.next()&lt;/w1&gt;&lt;/c0&gt;, which gives you a chance to handle individual error or to let the error be rethrown by the group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個々のタスクはそれのエラーをその対応する&lt;c0&gt;Group&lt;w1&gt;.next()&lt;/w1&gt;&lt;/c0&gt;への呼び出しの中でスローします、それはあなたに個々のエラーを取り扱うためのまたはそのエラーをグループによって再スローさせるための機会を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An insertion.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある挿入。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of &lt;c0&gt;Any&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt; forwards its operations to an underlying base sequence having the same &lt;c2&gt;Element&lt;/c2&gt; type, hiding the specifics of the underlying sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;のインスタンスは、同じ&lt;c2&gt;Element&lt;/c2&gt;型を持つある基礎をなす基盤シーケンスへと操作を転送します、基礎をなすシーケンスの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of &lt;c0&gt;String&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt; which has had each segment of the string literal appended to it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt;のインスタンス、それはそれへと加えられた文字列リテラルの各文節を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of &lt;c0&gt;Unsafe&lt;w1&gt;Continuation&lt;/w1&gt;&lt;/c0&gt; that hasn’t yet been resumed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Continuation&lt;/w1&gt;&lt;/c0&gt;のあるインスタンスで、まだ再開されていないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of a &lt;e0&gt;hashable&lt;/e0&gt; type can reduce its value mathematically to a single integer, which is used internally by sets and dictionaries to make lookups consistently fast.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;hashable&lt;/e0&gt;型のインスタンスは、それの値を単一の整数へと数学的に還元できます、それは検索を常に高速なものにするために集合と辞書によって内部的に使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of a class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクラスのインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of an observer class manages information about changes made to one or more properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブザーバクラスのあるインスタンスは、ひとつ以上のプロパティに対してなされる変更についての情報を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of the &lt;c0&gt;Async&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt; type used to produce elements of the asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスの要素それらを生み出すために使われる&lt;c0&gt;Async&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt;型のインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of this iterator wraps a base iterator and yields successive &lt;c0&gt;Int&lt;/c0&gt; values, starting at zero, along with the elements of the underlying base iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータのインスタンスは、基盤イテレータをラップして、連続する&lt;c0&gt;Int&lt;/c0&gt;値を、ゼロで開始して、基礎をなす基盤イテレータの要素と一緒に生じます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance representing the state of the receiver with the difference applied, or &lt;c0&gt;nil&lt;/c0&gt; if the difference is incompatible with the receiver’s state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>適用された差異をもつレシーバの状態を表しているインスタンス、または&lt;c0&gt;nil&lt;/c0&gt;、もし差異がレシーバのもつ状態と相容れないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance to cast to type &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;にキャストすることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance to preserve until the execution of &lt;c0&gt;body&lt;/c0&gt; is completed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;の実行が完了するまで保護するインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance to temporarily access through a mutable raw buffer pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変の生のバッファポインタを通して一時的にアクセスされることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance to temporarily access through a raw buffer pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のバッファポインタを通して一時的にアクセスされることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance to temporarily use via pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタ経由で一時的に使われることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer to convert to this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型へと変換する整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換する整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type that can represent both positive and negative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正および負の値の両方を表すことができる整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type that can represent only nonnegative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非負値だけを表すことができる整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type that uses a fixed size for every instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆるインスタンスに対して固定された大きさを使う整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type with a binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ表現での整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer value converts to an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.int&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数値は、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.int&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An interval from a lower bound up to, and including, an upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下側の境界から、上側の境界までの、そしてそれを含む、間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator for a &lt;c0&gt;Stride&lt;w1&gt;Through&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Stride&lt;w1&gt;Through&lt;/w1&gt;&lt;/c0&gt;インスタンスのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator for a &lt;c0&gt;Stride&lt;w1&gt;To&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Stride&lt;w1&gt;To&lt;/w1&gt;&lt;/c0&gt;インスタンスのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator of code units to be translated, encoded as &lt;c0&gt;input&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>翻訳されることになるいくらかのコードユニットからなるあるイテレータ、&lt;c0&gt;input&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;としてエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator over the dictionary with elements of type &lt;c0&gt;(key: Key, value: Value)&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;(key: Key, value: Value)&lt;/c0&gt;の要素を持つ辞書のすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator over the members of a &lt;c0&gt;Dictionary&lt;Key, Value&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Dictionary&lt;Key, Value&gt;&lt;/c0&gt;のメンバーすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator that never produces an element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>決して要素を生成しないイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator that produces one or zero instances of an element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある要素のインスタンスを１つまたは０個生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator to type-erase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去することになるイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An object representing a dynamic collection of key-value pairs, for use instead of a &lt;a0&gt;&lt;c1&gt;Dictionary&lt;/c1&gt;&lt;/a0&gt; variable in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値ペアからなる動的なコレクションを表しているオブジェクト、参照意味論を必要とする場合に&lt;a0&gt;&lt;c1&gt;Dictionary&lt;/c1&gt;&lt;/a0&gt;変数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An object representing a dynamic ordered collection, for use instead of an &lt;a0&gt;&lt;c1&gt;Array&lt;/c1&gt;&lt;/a0&gt; variable in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>静的な順序付きコレクションを表しているオブジェクト、参照意味論を必要とする場合に&lt;a0&gt;&lt;c1&gt;Array&lt;/c1&gt;&lt;/a0&gt;変数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An object representing a static collection of key-value pairs, for use instead of a &lt;a0&gt;&lt;c1&gt;Dictionary&lt;/c1&gt;&lt;/a0&gt; constant in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値ペアからなる静的なコレクションを表しているオブジェクト、参照意味論を必要とする場合に&lt;a0&gt;&lt;c1&gt;Dictionary&lt;/c1&gt;&lt;/a0&gt;定数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An object representing a static ordered collection, for use instead of an &lt;a0&gt;&lt;c1&gt;Array&lt;/c1&gt;&lt;/a0&gt; constant in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>静的な順序付きコレクションを表しているオブジェクト、参照意味論を必要とする場合に&lt;a0&gt;&lt;c1&gt;Array&lt;/c1&gt;&lt;/a0&gt;定数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナル値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An ordered, asynchronously generated sequence of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの要素からなる、順番をつけられた、非同期に生成されたシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An ordered, random-access collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>順序付けられた、無作為アクセスのコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An output stream to receive the text representation of each item.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各項目のテキスト表現を受け取る出力ストリーム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある出力ストリーム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An overshift results in &lt;c3&gt;-1&lt;/c3&gt; for a negative value of &lt;c4&gt;lhs&lt;/c4&gt; or &lt;c5&gt;0&lt;/c5&gt; for a nonnegative value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーシフトは、負の値の&lt;c3&gt;lhs&lt;/c3&gt;に対して&lt;c4&gt;-1&lt;/c4&gt;または非負値に対して&lt;c5&gt;0&lt;/c5&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unkeyed container view into this decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このデコーダへのキー無しコンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unowned reference to a serial executor (a &lt;c0&gt;Serial&lt;w1&gt;Executor&lt;/w1&gt;&lt;/c0&gt; value).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある直列遂行者（シリアルエグゼキュータ）への非所有参照（&lt;c0&gt;Serial&lt;w1&gt;Executor&lt;/w1&gt;&lt;/c0&gt;値）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unsigned, fixed-width integer type can represent values from 0 through &lt;c0&gt;(2 ** bit&lt;w1&gt;Width) - 1&lt;/w1&gt;&lt;/c0&gt;, where &lt;c2&gt;**&lt;/c2&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なしの、固定長整数型は、０から&lt;c0&gt;(2 ** bit&lt;w1&gt;Width) - 1&lt;/w1&gt;&lt;/c0&gt;までの値を表せます、そこで&lt;c2&gt;**&lt;/c2&gt;は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>And because &lt;c4&gt;Array&lt;w5&gt;Slice&lt;/w5&gt;&lt;/c4&gt; presents the same interface as &lt;c6&gt;Array&lt;/c6&gt;, you can generally perform the same operations on a slice as you could on the original array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そして&lt;c4&gt;Array&lt;w5&gt;Slice&lt;/w5&gt;&lt;/c4&gt;は&lt;c6&gt;Array&lt;/c6&gt;と同じインターフェイスを提供するので、あなたは一般的にあなたが元の配列上でできるのと同じ操作をスライス上で実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>And here’s how Swift imports it:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そしてここにスウィフトがそれをインポートする方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Annotate a Property for Key-Value Observing</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値監視のためのプロパティに注釈をつける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another array to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較するもう一方の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう１つの浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another index to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の比較するインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another integer to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較するもう一方の整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう１つの整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another range to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の比較する範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another range-replaceable collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の範囲置換可能なコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another reference to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の比較する参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another tuple of elements of the same type as &lt;c0&gt;lhs&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;lhs&lt;/c0&gt;と同じ型の要素からなる別のタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another type to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較するもう一方の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another type-erased hashable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の型消去ハッシュ可能値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの別の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another value to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any contextual information set by the user for decoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコーディングに対するユーザによって設定される何らかの前後関係情報。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any contextual information set by the user for encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングのためのユーザによって設定される何らかの前後関係情報。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any fractional part of &lt;c0&gt;value&lt;/c0&gt; is removed, rounding the resulting value toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;の小数部分は何であれ取り除かれます、結果となる値はゼロへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any fractional part of the value passed as &lt;c0&gt;source&lt;/c0&gt; is removed, rounding the value toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡される値の小数部分は何であれ取り除かれます、値はゼロへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any fractional part of the value passed as &lt;c0&gt;source&lt;/c0&gt; is removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡される値の小数部分は何であれ取り除かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any padding is performed by &lt;e0&gt;sign-extending&lt;/e0&gt; the passed value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる詰め物は、渡された値を&lt;e0&gt;符号拡張&lt;/e0&gt;することによって実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any public Objective-C headers listed in the bridging header are visible to Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジヘッダにおいて列記されるあらゆるパブリックObjective-Cヘッダは、Swiftにとって見ることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any such case that next is invoked concurrently and contends with another call to next is a programmer error and will fatalError.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nextが並行的に発動されるそしてnextへの別の呼び出しと争うようなどんな場合も、プログラマの誤りです、そしてfatalErrorでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any type that conforms to the &lt;c0&gt;Hashable&lt;/c0&gt; protocol can be used as a dictionary’s &lt;c1&gt;Key&lt;/c1&gt; type, including all of Swift’s basic types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftの基本的な型のすべてを含めて、&lt;c0&gt;Hashable&lt;/c0&gt;プロトコルに準拠するあらゆる型は、辞書の&lt;c1&gt;Key&lt;/c1&gt;型として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any type that declares conformance to the &lt;c0&gt;Error&lt;/c0&gt; protocol can be used to represent an error in Swift’s error handling system.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Error&lt;/c0&gt;プロトコルへの準拠を宣言するあらゆる型は、エラーをSwiftのエラー処理システムにおいて表すために使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any value whose magnitude is so great that it would round to a value outside the range of representable numbers is rounded to &lt;e0&gt;infinity&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの規模が大きすぎるので表現可能な数の範囲外の値に丸められるであろう何らかの値は、&lt;e0&gt;無限大&lt;/e0&gt;に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>再割り当ての引き金となる追加操作はある性能コストを持ちます、しかしそれらは配列がより大きく成長するにつれて大抵ますます少ない頻度でしか生じません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appending the key path passed as &lt;c0&gt;path&lt;/c0&gt; is successful only if the root type for &lt;c1&gt;path&lt;/c1&gt; matches this key path’s value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;path&lt;/c0&gt;として渡されるキーパスの追加は、&lt;c1&gt;path&lt;/c1&gt;のルート型がこのキーパスの持つ値型と合致する場合にのみ成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends a literal segment of a string interpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列補間のリテラル断片を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the elements of a sequence to a range-replaceable collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスの要素を範囲置換コレクションに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the given string to the stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列をストリームへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applies the given difference to this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた差異をこのコレクションに適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Apply macros to your Objective-C APIs to customize how they're imported into Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マクロをあなたのObjective-C APIに適用して、それらがSwiftにインポートされる方法をカスタマイズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Archives and Serialization</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アーカイブとシリアライゼーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Arithmetic with Assignment</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代入での算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Arrays are one of the most commonly used data types in an app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列は、アプリにおいて最も一般的に使われるデータ型の１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Arrays need to follow a geometric allocation pattern for appending elements to achieve amortized constant-time performance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ならし定数時間性能を達成するために、配列は要素を追加するのにある幾何数級的なアロケートパターンに従う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Arrays, like all variable-size collections in the standard library, use copy-on-write optimization.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列は、標準ライブラリにおける可変サイズコレクションのすべてと同じく、コピーオンライト最適化を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Arrays, sets, and option sets all conform to &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Array&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, and your own custom types can as well.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列、集合、またはオプションセットは、すべて&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Array&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠します、そしてあなた独自のあつらえの型もまたそうできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, &lt;c3&gt;type(of:)&lt;/c3&gt; can only produce the concrete metatype &lt;c4&gt;P&lt;w5&gt;.Protocol&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、&lt;c3&gt;type(of:)&lt;/c3&gt;は具象メタタイプ&lt;c4&gt;P&lt;w5&gt;.Protocol&lt;/w5&gt;&lt;/c4&gt;を生成することだけが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, changing the value of a property on an instance of the imported structure changes the value of all other properties defined by that structure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、インポートされた構造体上でプロパティを変更することは、その構造体によって定義される全ての他のプロパティの値を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, requests to the database won't accidentally change the wrong record.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、データベースに対する要請は誤って相応しくないレコードを変更することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, you can look at a section of code and be more confident that changes to instances in that section will be made explicitly, rather than being made invisibly from a tangentially related function call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、あなたはコードのある区画を調べて、その区画のインスタンスに対する変更が明確だということを、ほとんど無関係な関連する関数呼び出しから不可視に行われるよりむしろずっと自信を持てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an associated value, this case contains the context for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある関連値として、この場合はデバッグのための前後関係を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example, consider a &lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; type that describes a location in a grid of buttons.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの例として、&lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;型を考えてみてください、それはある格子状配列のボタンにおけるある場所を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example, consider a &lt;c0&gt;Street&lt;w1&gt;Address&lt;/w1&gt;&lt;/c0&gt; class that holds the parts of a street address: a house or building number, the street name, and an optional unit number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例として、&lt;c0&gt;Street&lt;w1&gt;Address&lt;/w1&gt;&lt;/c0&gt;クラスを考えてください、それは通り住所の部分；家またはビル番地、通りの名、そして随意に戸番号を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example, here’s an implementation of a &lt;c0&gt;Date&lt;/c0&gt; structure that stores the year, month, and day of a date:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例として、ある日付の年、月、そして日を格納するある&lt;c0&gt;Date&lt;/c0&gt;構造体の実装がここにあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As associated values, this case contains the attempted key and context for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連値いくつかとして、この場合は試みられたキーとデバッグのための前後関係を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As associated values, this case contains the attempted type and context for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連値いくつかとして、この場合は試みられた型とデバッグのための前後関係を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As associated values, this case contains the attempted value and context for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連値いくつかとして、この場合は試みられた値とデバッグのための前後関係を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As in the previous example, Swift imports this Objective-C method as two methods: an asynchronous method that takes a closure, and an asynchronous throwing method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前の例でのように、SwiftはこのObjective-Cメソッドを２つのメソッドとしてインポートします：クロージャを取る非同期メソッド、そして非同期スローメソッド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As long as the predicate returns &lt;c2&gt;true&lt;/c2&gt;, this method returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部が&lt;c2&gt;true&lt;/c2&gt;を返す限り、このメソッドは&lt;c3&gt;nil&lt;/c3&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As noted in the previous section, two instances that are considered equal must have the same hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前の節で注記されるように、等しいとみなされる２つのインスタンスは、同じハッシュ値を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As soon as the sequence has run out of elements, all subsequent calls return &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが要素を使い果たすやいなや、全てのその後の呼び出しは&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As the dictionary is built, the initializer calls the &lt;c0&gt;combine&lt;/c0&gt; closure with the current and new values for any duplicate keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書が組み立てられるとき、このイニシャライザは&lt;c0&gt;combine&lt;/c0&gt;クロージャを何らかの重複キーに対してその現在および新規の値とともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As the key-value pairs are merged with the dictionary, the &lt;c1&gt;combine&lt;/c1&gt; closure is called with the current and new values for any duplicate keys that are encountered.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらキー値ペアが辞書に結合されるときに、出くわした全ての重複キーに対してその現在および新規の値とともに&lt;c1&gt;combine&lt;/c1&gt;クロージャが呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As the key-value pairs in &lt;c1&gt;other&lt;/c1&gt; are merged with this dictionary, the &lt;c2&gt;combine&lt;/c2&gt; closure is called with the current and new values for any duplicate keys that are encountered.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;other&lt;/c1&gt;の中のキー値ペアがこの辞書と結合される時、&lt;c2&gt;combine&lt;/c2&gt;クロージャは、遭遇される何らかの重複キーに対して現在および新規の値とともに呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As the key-values pairs in &lt;c1&gt;other&lt;/c1&gt; are merged with this dictionary, the &lt;c2&gt;combine&lt;/c2&gt; closure is called with the current and new values for any duplicate keys that are encountered.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;other&lt;/c1&gt;の中のキー値ペアがこの辞書と結合されるとき、&lt;c2&gt;combine&lt;/c2&gt;クロージャは、遭遇される何らかの重複キーに対して現在および新規の値とともに呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with &lt;c0&gt;Sequence&lt;/c0&gt;, you typically iterate through an &lt;c1&gt;Async&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt; with a &lt;c3&gt;for await&lt;/c3&gt;-&lt;c4&gt;in&lt;/c4&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Sequence&lt;/c0&gt;でのように、あなたは概して&lt;c1&gt;Async&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt;を&lt;c3&gt;for await&lt;/c3&gt;-&lt;c4&gt;in&lt;/c4&gt;ループで始めから終わりまで反復処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with any basic operation, if this value is outside the representable range of the type, overflow or underflow occurs, and zero, a subnormal value, or infinity may result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる基本的演算でのように、この値がその型の表現可能な範囲の外側ならば、オーバーフローまたはアンダーフローが起こります、そしてゼロ、サブノーマル値、または無限大が結果となるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Associate the Observer with the Property to Observe</seg>
      </tuv>
      <tuv lang="ja">
        <seg>監視するプロパティとオブザーバを結びつける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Associated Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな関連型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>AsyncStream can be initialized with the option to buffer to a given limit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AsyncStreamは、あるオプションで初期化されることで、ある与えられた限界までバッファすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>AsyncStream is an interface type to adapt from code producing values to an asynchronous context iterating them.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AsyncStreamは、値それらを生み出しているコードから、それらを反復処理している非同期な文脈へと適合させるあるインターフェイス型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>AsyncStream offers a initialization strategy that provides a method of yielding values into iteration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AsyncStreamは、ある初期化戦略を申し出ます、それは反復へと値を生み出す手法を提供するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Asynchronous calls are another type of API that typically escape their closure arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期呼び出しは別の種類のAPIで、それは一般的にそれらのクロージャ引数を脱出させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Asynchronously advances to the next element and returns it, or ends the sequence if there is no next element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期に次の要素に前進して、それを返します、または次の要素がないならばそのシーケンスを終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At least one of the sequences must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>少なくともシーケンスのうちの一方は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At the call site, this looks like:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>呼び出し場所で、これは次のように見えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At this point, &lt;c6&gt;next()&lt;/c6&gt; is ready to receive the next value from the base sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この時点で、&lt;c6&gt;next()&lt;/c6&gt;は次の要素を基底シーケンスから受け取る準備ができています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempt to cancel the task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクの取り消しを試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to access an element by using an index outside the bounds of the slice may result in a runtime error, even if that index is valid for the original collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある要素にスライスの境界外のインデックスを使ってアクセスを試みることは、実行時エラーという結果になるでしょう、たとえそのインデックスが元々のコレクションに対して有効であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある要素にスライスのもつインデックスの境界外のインデックスを使ってアクセスを試みることは、実行時エラーという結果になるでしょう、たとえそのインデックスが元々のコレクションに対して有効であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to remove more elements than exist in the collection triggers a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中に存在するより多くの要素の削除を試みることは実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Array&lt;w2&gt;Literal&lt;w3&gt;Element&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c4&gt;&lt;/c4&gt;&lt;c5&gt;Element&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Array&lt;w2&gt;Literal&lt;w3&gt;Element&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が&lt;c4&gt;&lt;/c4&gt;&lt;c5&gt;Element&lt;/c5&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Element&lt;/c1&gt; conforms to &lt;c2&gt;Comparable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Element&lt;/c1&gt;が&lt;c2&gt;Comparable&lt;/c2&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Element&lt;/c1&gt; conforms to &lt;c2&gt;Equatable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Element&lt;/c1&gt;が&lt;c2&gt;Equatable&lt;/c2&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Element&lt;/c1&gt; is &lt;c2&gt;String&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Element&lt;/c1&gt;が&lt;c2&gt;String&lt;/c2&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Element&lt;/c1&gt; is &lt;c2&gt;UInt8&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Element&lt;/c1&gt;が&lt;c2&gt;UInt8&lt;/c2&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Extended&lt;w2&gt;Grapheme&lt;w3&gt;Cluster&lt;w4&gt;Literal&lt;w5&gt;Type&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c6&gt;&lt;/c6&gt;&lt;c7&gt;String&lt;w8&gt;Literal&lt;w9&gt;Type&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Extended&lt;w2&gt;Grapheme&lt;w3&gt;Cluster&lt;w4&gt;Literal&lt;w5&gt;Type&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が&lt;c6&gt;&lt;/c6&gt;&lt;c7&gt;String&lt;w8&gt;Literal&lt;w9&gt;Type&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Extended&lt;w2&gt;Grapheme&lt;w3&gt;Cluster&lt;w4&gt;Literal&lt;w5&gt;Type&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c6&gt;&lt;/c6&gt;&lt;c7&gt;Unicode&lt;w8&gt;Scalar&lt;w9&gt;Literal&lt;w10&gt;Type&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Extended&lt;w2&gt;Grapheme&lt;w3&gt;Cluster&lt;w4&gt;Literal&lt;w5&gt;Type&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が&lt;c6&gt;&lt;/c6&gt;&lt;c7&gt;Unicode&lt;w8&gt;Scalar&lt;w9&gt;Literal&lt;w10&gt;Type&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Indices&lt;/c1&gt; is &lt;c2&gt;Default&lt;w3&gt;Indices&lt;/w3&gt;&lt;/c2&gt;&lt;c4&gt;&lt;&lt;/c4&gt;&lt;c5&gt;Self&lt;/c5&gt;&lt;c6&gt;&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Indices&lt;/c1&gt;が&lt;c2&gt;Default&lt;w3&gt;Indices&lt;/w3&gt;&lt;/c2&gt;&lt;c4&gt;&lt;&lt;/c4&gt;&lt;c5&gt;Self&lt;/c5&gt;&lt;c6&gt;&gt;&lt;/c6&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Iterator&lt;/c1&gt; is &lt;c2&gt;Indexing&lt;w3&gt;Iterator&lt;/w3&gt;&lt;/c2&gt;&lt;c4&gt;&lt;&lt;/c4&gt;&lt;c5&gt;Self&lt;/c5&gt;&lt;c6&gt;&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Iterator&lt;/c1&gt;が&lt;c2&gt;Indexing&lt;w3&gt;Iterator&lt;/w3&gt;&lt;/c2&gt;&lt;c4&gt;&lt;&lt;/c4&gt;&lt;c5&gt;Self&lt;/c5&gt;&lt;c6&gt;&gt;&lt;/c6&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Raw&lt;w2&gt;Significand&lt;/w2&gt;&lt;/c1&gt; conforms to &lt;c3&gt;Fixed&lt;w4&gt;Width&lt;w5&gt;Integer&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Raw&lt;w2&gt;Significand&lt;/w2&gt;&lt;/c1&gt;が&lt;c3&gt;Fixed&lt;w4&gt;Width&lt;w5&gt;Integer&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;String&lt;w2&gt;Interpolation&lt;/w2&gt;&lt;/c1&gt; is &lt;c3&gt;Default&lt;w4&gt;String&lt;w5&gt;Interpolation&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;String&lt;w2&gt;Interpolation&lt;/w2&gt;&lt;/c1&gt;が&lt;c3&gt;Default&lt;w4&gt;String&lt;w5&gt;Interpolation&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Sub&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt; is &lt;c3&gt;Slice&lt;/c3&gt;&lt;c4&gt;&lt;&lt;/c4&gt;&lt;c5&gt;Self&lt;/c5&gt;&lt;c6&gt;&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;/c0&gt;&lt;c1&gt;Sub&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt;が&lt;c3&gt;Slice&lt;/c3&gt;&lt;c4&gt;&lt;&lt;/c4&gt;&lt;c5&gt;Self&lt;/c5&gt;&lt;c6&gt;&gt;&lt;/c6&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;Base&lt;/c3&gt;&lt;c4&gt;.&lt;/c4&gt;&lt;c5&gt;Element&lt;/c5&gt; conforms to &lt;c6&gt;Bidirectional&lt;w7&gt;Collection&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c3&gt;Base&lt;/c3&gt;&lt;c4&gt;.&lt;/c4&gt;&lt;c5&gt;Element&lt;/c5&gt;が&lt;c6&gt;Bidirectional&lt;w7&gt;Collection&lt;/w7&gt;&lt;/c6&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Collection&lt;/c1&gt; and &lt;c2&gt;Base&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt; conforms to &lt;c5&gt;Collection&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Collection&lt;/c1&gt;に準拠するそして&lt;c2&gt;Base&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt;が&lt;c5&gt;Collection&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Collection&lt;/c1&gt;, &lt;c2&gt;Base&lt;w3&gt;.Element&lt;/w3&gt;&lt;/c2&gt; conforms to &lt;c4&gt;Collection&lt;/c4&gt;, &lt;c5&gt;Base&lt;/c5&gt;&lt;c6&gt;.&lt;/c6&gt;&lt;c7&gt;Index&lt;/c7&gt; conforms to &lt;c8&gt;Hashable&lt;/c8&gt;, and &lt;c9&gt;Base&lt;/c9&gt;&lt;c10&gt;.&lt;/c10&gt;&lt;c11&gt;Element&lt;/c11&gt;&lt;c12&gt;.&lt;/c12&gt;&lt;c13&gt;Index&lt;/c13&gt; conforms to &lt;c14&gt;Hashable&lt;/c14&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Collection&lt;/c1&gt;に準拠する、&lt;c2&gt;Base&lt;w3&gt;.Element&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Collection&lt;/c4&gt;に準拠する、&lt;c5&gt;Base&lt;/c5&gt;&lt;c6&gt;.&lt;/c6&gt;&lt;c7&gt;Index&lt;/c7&gt;が&lt;c8&gt;Hashable&lt;/c8&gt;に準拠する、そして&lt;c9&gt;Base&lt;/c9&gt;&lt;c10&gt;.&lt;/c10&gt;&lt;c11&gt;Element&lt;/c11&gt;&lt;c12&gt;.&lt;/c12&gt;&lt;c13&gt;Index&lt;/c13&gt;が&lt;c14&gt;Hashable&lt;/c14&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt; conforms to &lt;c3&gt;Comparable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;が&lt;c3&gt;Comparable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt; conforms to &lt;c3&gt;Sequence&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;が&lt;c3&gt;Sequence&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt; conforms to &lt;c3&gt;String&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;が&lt;c3&gt;String&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt; conforms to &lt;c5&gt;Comparable&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt;が&lt;c5&gt;Comparable&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt; conforms to &lt;c5&gt;Equatable&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt;が&lt;c5&gt;Equatable&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt; conforms to &lt;c5&gt;Sequence&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt;が&lt;c5&gt;Sequence&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt; conforms to &lt;c5&gt;String&lt;w6&gt;Protocol&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt;が&lt;c5&gt;String&lt;w6&gt;Protocol&lt;/w6&gt;&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する時に利用可能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に利用可能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;, &lt;c2&gt;Bound&lt;/c2&gt; conforms to &lt;c3&gt;Strideable&lt;/c3&gt;, and &lt;c4&gt;Bound&lt;/c4&gt;&lt;c5&gt;.&lt;/c5&gt;&lt;c6&gt;Stride&lt;/c6&gt; conforms to &lt;c7&gt;Signed&lt;w8&gt;Integer&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する、&lt;c2&gt;Bound&lt;/c2&gt;が&lt;c3&gt;Strideable&lt;/c3&gt;に準拠する、そして&lt;c4&gt;Bound&lt;/c4&gt;&lt;c5&gt;.&lt;/c5&gt;&lt;c6&gt;Stride&lt;/c6&gt;が&lt;c7&gt;Signed&lt;w8&gt;Integer&lt;/w8&gt;&lt;/c7&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;, &lt;c2&gt;Bound&lt;/c2&gt; conforms to &lt;c3&gt;Strideable&lt;/c3&gt;, and &lt;c4&gt;Bound&lt;w5&gt;.Stride&lt;/w5&gt;&lt;/c4&gt; conforms to &lt;c6&gt;Signed&lt;w7&gt;Integer&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する、&lt;c2&gt;Bound&lt;/c2&gt;が&lt;c3&gt;Strideable&lt;/c3&gt;に準拠する、そして&lt;c4&gt;Bound&lt;w5&gt;.Stride&lt;/w5&gt;&lt;/c4&gt;が&lt;c6&gt;Signed&lt;w7&gt;Integer&lt;/w7&gt;&lt;/c6&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Sequence&lt;/c1&gt;, &lt;c2&gt;Bound&lt;/c2&gt; conforms to &lt;c3&gt;Strideable&lt;/c3&gt;, and &lt;c4&gt;Bound&lt;/c4&gt;&lt;c5&gt;.&lt;/c5&gt;&lt;c6&gt;Stride&lt;/c6&gt; conforms to &lt;c7&gt;Signed&lt;w8&gt;Integer&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Sequence&lt;/c1&gt;に準拠する、&lt;c2&gt;Bound&lt;/c2&gt;が&lt;c3&gt;Strideable&lt;/c3&gt;に準拠する、そして&lt;c4&gt;Bound&lt;/c4&gt;&lt;c5&gt;.&lt;/c5&gt;&lt;c6&gt;Stride&lt;/c6&gt;が&lt;c7&gt;Signed&lt;w8&gt;Integer&lt;/w8&gt;&lt;/c7&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Strideable&lt;/c1&gt; and &lt;c2&gt;Bound&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Stride&lt;/c4&gt; conforms to &lt;c5&gt;Signed&lt;w6&gt;Integer&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Strideable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Bound&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Stride&lt;/c4&gt;が&lt;c5&gt;Signed&lt;w6&gt;Integer&lt;/w6&gt;&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;, &lt;c3&gt;Bound&lt;/c3&gt; conforms to &lt;c4&gt;Strideable&lt;/c4&gt;, and &lt;c5&gt;Bound&lt;/c5&gt;&lt;c6&gt;.&lt;/c6&gt;&lt;c7&gt;Stride&lt;/c7&gt; conforms to &lt;c8&gt;Signed&lt;w9&gt;Integer&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;に準拠する、&lt;c3&gt;Bound&lt;/c3&gt;が&lt;c4&gt;Strideable&lt;/c4&gt;に準拠する、そして&lt;c5&gt;Bound&lt;/c5&gt;&lt;c6&gt;.&lt;/c6&gt;&lt;c7&gt;Stride&lt;/c7&gt;が&lt;c8&gt;Signed&lt;w9&gt;Integer&lt;/w9&gt;&lt;/c8&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; is &lt;c1&gt;Int&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Int&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; is &lt;c1&gt;String&lt;/c1&gt;, &lt;c2&gt;Bound&lt;/c2&gt; conforms to &lt;c3&gt;Strideable&lt;/c3&gt;, and &lt;c4&gt;Bound&lt;/c4&gt;&lt;c5&gt;.&lt;/c5&gt;&lt;c6&gt;Stride&lt;/c6&gt; conforms to &lt;c7&gt;Signed&lt;w8&gt;Integer&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;String&lt;/c1&gt;である、&lt;c2&gt;Bound&lt;/c2&gt;が&lt;c3&gt;Strideable&lt;/c3&gt;に準拠する、そして&lt;c4&gt;Bound&lt;/c4&gt;&lt;c5&gt;.&lt;/c5&gt;&lt;c6&gt;Stride&lt;/c6&gt;が&lt;c7&gt;Signed&lt;w8&gt;Integer&lt;/w8&gt;&lt;/c7&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Decodable&lt;/c2&gt; and &lt;c3&gt;Encodable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Decodable&lt;/c2&gt;と&lt;c3&gt;Encodable&lt;/c3&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Equatable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Equatable&lt;/c2&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Hashable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Hashable&lt;/c2&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Comparable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;w2&gt;With&lt;w3&gt;Configuration&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;w2&gt;With&lt;w3&gt;Configuration&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;w2&gt;With&lt;w3&gt;Configuration&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;w2&gt;With&lt;w3&gt;Configuration&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Sequence&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Sequence&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;Double&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Double&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;Float&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Float&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;String&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;String&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;UInt8&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;UInt8&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;w1&gt;Of&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Comparable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;w1&gt;Of&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Comparable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;w1&gt;Of&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;w1&gt;Of&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt; conforms to &lt;c3&gt;Comparable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;が&lt;c3&gt;Comparable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt; conforms to &lt;c3&gt;Sequence&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;が&lt;c3&gt;Sequence&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt; conforms to &lt;c3&gt;String&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Element&lt;/c2&gt;が&lt;c3&gt;String&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt; conforms to &lt;c3&gt;Comparable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt;が&lt;c3&gt;Comparable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt; and &lt;c4&gt;Elements&lt;/c4&gt; conforms to &lt;c5&gt;Bidirectional&lt;w6&gt;Collection&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠するそして&lt;c4&gt;Elements&lt;/c4&gt;が&lt;c5&gt;Bidirectional&lt;w6&gt;Collection&lt;/w6&gt;&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt; conforms to &lt;c3&gt;Sequence&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt;が&lt;c3&gt;Sequence&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt; conforms to &lt;c3&gt;String&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt;が&lt;c3&gt;String&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt; is &lt;c3&gt;String&lt;/c3&gt; and &lt;c4&gt;Elements&lt;/c4&gt; conforms to &lt;c5&gt;Bidirectional&lt;w6&gt;Collection&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;&lt;c1&gt;.&lt;/c1&gt;&lt;c2&gt;Index&lt;/c2&gt;が&lt;c3&gt;String&lt;/c3&gt;であるそして&lt;c4&gt;Elements&lt;/c4&gt;が&lt;c5&gt;Bidirectional&lt;w6&gt;Collection&lt;/w6&gt;&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Comparable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Comparable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;, &lt;c4&gt;Base&lt;/c4&gt; conforms to &lt;c5&gt;Bidirectional&lt;w6&gt;Collection&lt;/w6&gt;&lt;/c5&gt;, and &lt;c7&gt;Base&lt;/c7&gt;&lt;c8&gt;.&lt;/c8&gt;&lt;c9&gt;Element&lt;/c9&gt; conforms to &lt;c10&gt;Bidirectional&lt;w11&gt;Collection&lt;/w11&gt;&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠するそして&lt;c4&gt;Base&lt;/c4&gt;が&lt;c5&gt;Bidirectional&lt;w6&gt;Collection&lt;/w6&gt;&lt;/c5&gt;に準拠する、そして&lt;c7&gt;Base&lt;/c7&gt;&lt;c8&gt;.&lt;/c8&gt;&lt;c9&gt;Element&lt;/c9&gt;が&lt;c10&gt;Bidirectional&lt;w11&gt;Collection&lt;/w11&gt;&lt;/c10&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;, &lt;c4&gt;Base&lt;/c4&gt; conforms to &lt;c5&gt;Collection&lt;/c5&gt;, and &lt;c6&gt;Base&lt;/c6&gt;&lt;c7&gt;.&lt;/c7&gt;&lt;c8&gt;Element&lt;/c8&gt; conforms to &lt;c9&gt;Collection&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する、&lt;c4&gt;Base&lt;/c4&gt;が&lt;c5&gt;Collection&lt;/c5&gt;に準拠する、そして&lt;c6&gt;Base&lt;/c6&gt;&lt;c7&gt;.&lt;/c7&gt;&lt;c8&gt;Element&lt;/c8&gt;が&lt;c9&gt;Collection&lt;/c9&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Sequence&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Sequence&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;String&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;String&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c3&gt;String&lt;/c3&gt;, &lt;c4&gt;Base&lt;/c4&gt; conforms to &lt;c5&gt;Bidirectional&lt;w6&gt;Collection&lt;/w6&gt;&lt;/c5&gt;, and &lt;c7&gt;Base&lt;/c7&gt;&lt;c8&gt;.&lt;/c8&gt;&lt;c9&gt;Element&lt;/c9&gt; conforms to &lt;c10&gt;Bidirectional&lt;w11&gt;Collection&lt;/w11&gt;&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Flatten&lt;w1&gt;Sequence&lt;Base&gt;.Iterator&lt;w2&gt;.Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;String&lt;/c3&gt;である、&lt;c4&gt;Base&lt;/c4&gt;が&lt;c5&gt;Bidirectional&lt;w6&gt;Collection&lt;/w6&gt;&lt;/c5&gt;に準拠する、そして&lt;c7&gt;Base&lt;/c7&gt;&lt;c8&gt;.&lt;/c8&gt;&lt;c9&gt;Element&lt;/c9&gt;が&lt;c10&gt;Bidirectional&lt;w11&gt;Collection&lt;/w11&gt;&lt;/c10&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Key&lt;/c0&gt; conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;Comparable&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Key&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Value&lt;/c2&gt; conforms to &lt;c3&gt;Decodable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Value&lt;/c2&gt;が&lt;c3&gt;Decodable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Key&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Value&lt;/c2&gt; conforms to &lt;c3&gt;Encodable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Value&lt;/c2&gt;が&lt;c3&gt;Encodable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Key&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Key&lt;/c0&gt; conforms to &lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and &lt;c4&gt;Value&lt;/c4&gt; conforms to &lt;c5&gt;MLData&lt;w6&gt;Value&lt;w7&gt;Convertible&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c4&gt;Value&lt;/c4&gt;が&lt;c5&gt;MLData&lt;w6&gt;Value&lt;w7&gt;Convertible&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Key&lt;/c0&gt; conforms to &lt;c1&gt;Sequence&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;Sequence&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Key&lt;/c0&gt; conforms to &lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Key&lt;/c0&gt; is &lt;c1&gt;NSAttributed&lt;w2&gt;String&lt;/w2&gt;&lt;/c1&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Key&lt;/c4&gt; and &lt;c5&gt;Value&lt;/c5&gt; is &lt;c6&gt;Any&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;NSAttributed&lt;w2&gt;String&lt;/w2&gt;&lt;/c1&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Key&lt;/c4&gt;であるそして&lt;c5&gt;Value&lt;/c5&gt;が&lt;c6&gt;Any&lt;/c6&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Segment&lt;w1&gt;Of&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt; conforms to &lt;c5&gt;Comparable&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Segment&lt;w1&gt;Of&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt;が&lt;c5&gt;Comparable&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Segment&lt;w1&gt;Of&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt; conforms to &lt;c5&gt;Equatable&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Segment&lt;w1&gt;Of&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Element&lt;/c4&gt;が&lt;c5&gt;Equatable&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Any&lt;w2&gt;Object&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Any&lt;w2&gt;Object&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Expressible&lt;w2&gt;By&lt;w3&gt;Integer&lt;w4&gt;Literal&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Expressible&lt;w2&gt;By&lt;w3&gt;Integer&lt;w4&gt;Literal&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Fixed&lt;w2&gt;Width&lt;w3&gt;Integer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Fixed&lt;w2&gt;Width&lt;w3&gt;Integer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;_Expressible&lt;w2&gt;By&lt;w3&gt;Builtin&lt;w4&gt;Integer&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;_Expressible&lt;w2&gt;By&lt;w3&gt;Builtin&lt;w4&gt;Integer&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; is &lt;c1&gt;&lt;/c1&gt;&lt;c2&gt;Sub&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;&lt;/c1&gt;&lt;c2&gt;Sub&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/c2&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; is &lt;c1&gt;Any&lt;w2&gt;Key&lt;w3&gt;Path&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Any&lt;w2&gt;Key&lt;w3&gt;Path&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Success&lt;/c0&gt; is &lt;c1&gt;Never&lt;/c1&gt; and &lt;c2&gt;Failure&lt;/c2&gt; is &lt;c3&gt;Never&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Success&lt;/c0&gt;が&lt;c1&gt;Never&lt;/c1&gt;であるそして&lt;c2&gt;Failure&lt;/c2&gt;が&lt;c3&gt;Never&lt;/c3&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Transformed&lt;/c0&gt; conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Transformed&lt;/c0&gt;が&lt;c1&gt;Comparable&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Transformed&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Transformed&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;Comparable&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;Sequence&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;Sequence&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Behaviors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本の挙動</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because &lt;c0&gt;Array&lt;/c0&gt; is the default type for an array literal, without writing any other code, you can declare an array with a particular element type by providing one or more values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Array&lt;/c0&gt;は配列リテラルのための省略時の型なので、なんら他のコードを書くことなく、あなたはひとつ以上の値を提供することによって特定の要素型を持つ配列を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because &lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;Two&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; doesn’t define its own &lt;c3&gt;make&lt;w4&gt;Iterator()&lt;/w4&gt;&lt;/c3&gt; method or &lt;c5&gt;Iterator&lt;/c5&gt; associated type, it uses the default iterator type, &lt;c6&gt;Indexing&lt;w7&gt;Iterator&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;Two&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は独自の&lt;c3&gt;make&lt;w4&gt;Iterator()&lt;/w4&gt;&lt;/c3&gt;メソッドまたは&lt;c5&gt;Iterator&lt;/c5&gt;関連型を定義しないことから、それは省略時のイテレータ型、&lt;c6&gt;Indexing&lt;w7&gt;Iterator&lt;/w7&gt;&lt;/c6&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because &lt;c0&gt;Integer&lt;w1&gt;Ref&lt;/w1&gt;&lt;/c0&gt; is a class, its instances can be compared using the identical-to operator (&lt;c2&gt;===&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Integer&lt;w1&gt;Ref&lt;/w1&gt;&lt;/c0&gt;がクラスであるので、それのインスタンスは同一性演算子（&lt;c2&gt;===&lt;/c2&gt;）を使って比較されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because Cocoa methods with errors parameters are imported as throwing methods, you handle them using Swift's &lt;c0&gt;do&lt;/c0&gt;-&lt;c1&gt;catch&lt;/c1&gt; statement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラーパラメータを持つCocoaメソッドはスローメソッドとしてインポートされることから、あなたはそれらをSwiftの&lt;c0&gt;do&lt;/c0&gt;-&lt;c1&gt;catch&lt;/c1&gt;文で処理できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because NaN compares not less than nor greater than any value, this method returns &lt;c0&gt;false&lt;/c0&gt; when called on NaN or when NaN is passed as &lt;c1&gt;other&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNはあらゆる値より少なくもないし大きくもないと比較されるので、このメソッドは、NaN上で呼ばれた時またはNaNが&lt;c1&gt;other&lt;/c1&gt;として渡された時に&lt;c0&gt;false&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because NaN is incomparable with any value, this method returns &lt;c0&gt;false&lt;/c0&gt; when called on NaN or when NaN is passed as &lt;c1&gt;other&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNはあらゆる値と比較可能でないので、このメソッドは、NaN上で呼ばれた時またはNaNが&lt;c1&gt;other&lt;/c1&gt;として渡された時に&lt;c0&gt;false&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because NaN is not equal to any value, including NaN, use this property instead of the equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) or not-equal-to operator (&lt;c1&gt;!=&lt;/c1&gt;) to test whether a value is or is not NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは、NaNを含めてあらゆる値と等しくないので、同等演算子（&lt;c0&gt;==&lt;/c0&gt;）または不等演算子（&lt;c1&gt;!=&lt;/c1&gt;）の代わりにこのプロパティを使うことで、ある値がNaNであるのかまたはないのかをテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because Swift can’t guarantee at compile time that these methods and properties are actually available on an &lt;c4&gt;Any&lt;w5&gt;Object&lt;/w5&gt;&lt;/c4&gt; instance’s underlying type, these &lt;c6&gt;@objc&lt;/c6&gt; symbols are available as implicitly unwrapped optional methods and properties, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftはそれらのメソッドやプロパティが&lt;c4&gt;Any&lt;w5&gt;Object&lt;/w5&gt;&lt;/c4&gt;インスタンスの下に横たわる型で実際に利用可能であるとコンパイル時に保証しないため、これら&lt;c6&gt;@objc&lt;/c6&gt;シンボルは暗黙的にアンラップされるオプショナルのメソッドやプロパティとしてそれぞれ利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a NaN always compares not equal to itself, to test whether a floating-point value is NaN, use its &lt;c0&gt;is&lt;w1&gt;Na&lt;w2&gt;N&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; property instead of the equal-to operator (&lt;c3&gt;==&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは常にそれ自身に対して等しくないと比較されることから、浮動小数点値がNaNかどうかテストするには、それの&lt;c0&gt;is&lt;w1&gt;Na&lt;w2&gt;N&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロパティを同等演算子（&lt;c3&gt;==&lt;/c3&gt;）の代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a closed range cannot represent an empty range, this property is always &lt;c0&gt;false&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結範囲は空の範囲を表すことができないので、このプロパティは常に&lt;c0&gt;false&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a closed range includes its upper bound, a closed range whose lower bound is equal to the upper bound contains that value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結範囲はそれの上側の境界を含むことから、それの下側の境界が上側の境界と等しい完結範囲はその値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a closed range includes its upper bound, the ranges in the following example also overlap:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結範囲はそれの上方の境界を含むことから、以下の例の範囲もまた重なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because any arbitrary subclass of &lt;c4&gt;NSArray&lt;/c4&gt; can become an &lt;c5&gt;Array&lt;/c5&gt;, there are no guarantees about representation or efficiency in this case.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何であれ随意の&lt;c4&gt;NSArray&lt;/c4&gt;のサブクラスが&lt;c5&gt;Array&lt;/c5&gt;になることが可能であるので、表現や効率についてはこの場合保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because arrays increase their allocated capacity using an exponential strategy, appending a single element to an array is an O(1) operation when averaged over many calls to the &lt;c0&gt;append(_:)&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列はそれらの割り当てられた容量を指数戦略で増やすので、ある単一の要素を配列に加えることは、&lt;c0&gt;append(_:)&lt;/c0&gt;メソッドへの多くの呼び出しにわたって平均した場合は、O(1)演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because both Swift methods have the same behavior, they share the same page in the documentation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方のSwiftメソッドは同じ挙動を持つことから、それらは文書化において同じページを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because both types have the same interface, you can replace one with the other in most circumstances, without making other changes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方の型は同じインターフェイスを持つため、あなたは多くの状況で一方を他方で置き換えることが、他の変更をすることなく可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because calculating the average of the observations involves combining every value of the &lt;c0&gt;temps&lt;w1&gt;Fahrenheit&lt;/w1&gt;&lt;/c0&gt; array, any NaN values cause the result to also be NaN, as seen in this example:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>観測の平均の算出は&lt;c0&gt;temps&lt;w1&gt;Fahrenheit&lt;/w1&gt;&lt;/c0&gt;配列のすべての値を足し合わせることを必然的に含むことから、何らかのNaN値はまたNaNになるという結果を引き起こします、この例で見られるように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because case conversion can result in multiple characters, the result of &lt;c0&gt;lowercased()&lt;/c0&gt; is a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ケース変換が複数の文字という結果になり得ることから、&lt;c0&gt;lowercased()&lt;/c0&gt;の結果はある文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because case conversion can result in multiple characters, the result of &lt;c0&gt;uppercased()&lt;/c0&gt; is a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ケース変換が複数の文字という結果になり得ることから、&lt;c0&gt;uppercased()&lt;/c0&gt;の結果はある文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because default implementations of the remainder of the relational operators are provided by the standard library, you’ll be able to use &lt;c6&gt;!=&lt;/c6&gt;, &lt;c7&gt;&gt;&lt;/c7&gt;, &lt;c8&gt;&lt;=&lt;/c8&gt;, and &lt;c9&gt;&gt;=&lt;/c9&gt; with instances of your type without any further code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関係演算子の残りの省略時の実装は標準ライブラリによって提供されることから、あなたは&lt;c6&gt;!=&lt;/c6&gt;、&lt;c7&gt;&gt;&lt;/c7&gt;、&lt;c8&gt;&lt;=&lt;/c8&gt;、そして&lt;c9&gt;&gt;=&lt;/c9&gt;をあなたの型のインスタンスにおいてなんらこれ以上のコード無しに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because each character in a string can be made up of one or more Unicode scalar values, the number of characters in a string may not match the length of the Unicode scalar value representation or the length of the string in a particular binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列中の各文字はひとつ以上のユニコードスカラー値から成り立つので、ある文字列の文字数はユニコードスカラー値表現の長さ、または特定のバイナリ表現での文字列の長さと一致しないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because floating-point types such as &lt;c0&gt;Float&lt;/c0&gt; and &lt;c1&gt;Double&lt;/c1&gt; are their own &lt;c2&gt;Stride&lt;/c2&gt; types, they cannot be used as the bounds of a countable range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型、例えば&lt;c0&gt;Float&lt;/c0&gt;および&lt;c1&gt;Double&lt;/c1&gt;は、それら独自の&lt;c2&gt;Stride&lt;/c2&gt;型であるので、それらは可付番範囲の境界として使われることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because many functions and initializers fully specify the types of their parameters, you can often use an array literal with or without elements as a parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くの関数とイニシャライザはそれらのパラメータの型を完全に指定することから、あなたはしばしば要素のあるまたはない配列リテラルをパラメータとして使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because structures are value types—unlike classes—local changes to a structure aren't visible to the rest of your app unless you intentionally communicate those changes as part of the flow of your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体が値型であることから — クラスとは違い — 構造体への局所的変更はあなたのアプリの残りには不可視です、あなたが意図的にそれら変更をあなたのアプリのフローの一部として伝達しない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because testing whether one NaN is equal to another NaN results in &lt;c0&gt;false&lt;/c0&gt;, use the &lt;c1&gt;is&lt;w2&gt;Na&lt;w3&gt;N&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; property to test whether a value is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるNaNが別のNaNと等しいかどうかテストすることは&lt;c0&gt;false&lt;/c0&gt;の結果になることから、&lt;c1&gt;is&lt;w2&gt;Na&lt;w3&gt;N&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロパティを使うことである値がNaNかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; type is not hashable yet, it can’t be used in a set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;型はまだハッシュ可能でないことから、それは集合において使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c0&gt;String(reflecting:)&lt;/c0&gt; initializer works for instances of &lt;e1&gt;any&lt;/e1&gt; type, returning an instance’s &lt;c2&gt;debug&lt;w3&gt;Description&lt;/w3&gt;&lt;/c2&gt; if the value passed conforms to &lt;c4&gt;Custom&lt;w5&gt;Debug&lt;w6&gt;String&lt;w7&gt;Convertible&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;, accessing a type’s &lt;c8&gt;debug&lt;w9&gt;Description&lt;/w9&gt;&lt;/c8&gt; property directly or using &lt;c10&gt;Custom&lt;w11&gt;Debug&lt;w12&gt;String&lt;w13&gt;Convertible&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt; as a generic constraint is discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String(reflecting:)&lt;/c0&gt;イニシャライザが&lt;e1&gt;あらゆる&lt;/e1&gt;型のインスタンスに対して働いて、渡される値が&lt;c2&gt;debug&lt;w3&gt;Description&lt;/w3&gt;&lt;/c2&gt;に準拠するならばインスタンスの&lt;c4&gt;Custom&lt;w5&gt;Debug&lt;w6&gt;String&lt;w7&gt;Convertible&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;を返すので、ある型のもつ&lt;c8&gt;debug&lt;w9&gt;Description&lt;/w9&gt;&lt;/c8&gt;プロパティに直にアクセスすることや、総称体制約として&lt;c10&gt;Custom&lt;w11&gt;Debug&lt;w12&gt;String&lt;w13&gt;Convertible&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;を使うことは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c1&gt;Cake&lt;/c1&gt; structure has fields with unnamed types, you use the &lt;c2&gt;.init&lt;/c2&gt; initializers (allowed due to Swift's type inference) to set the initial value for each of the structure’s unnamed fields.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Cake&lt;/c1&gt;構造体は無名型でのフィールドを持つことから、あなたは&lt;c2&gt;.init&lt;/c2&gt;イニシャライザ（Swiftの持つ型推論によって与えられるもの）を使用して、初期値をその構造体の持つ無名フィールドの各々に設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c1&gt;Error&lt;/c1&gt; protocol has no requirements of its own, you can declare conformance on any custom type you create.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Error&lt;/c1&gt;プロトコルはそれ自身の要件を持たないので、あなたは準拠を宣言することがあなたが作成するあらゆるあつらえの型で可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c2&gt;hypotenuse(_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/c2&gt; function uses a generic parameter constrained to the &lt;c4&gt;Floating&lt;w5&gt;Point&lt;/w5&gt;&lt;/c4&gt; protocol, you can call it using any floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;hypotenuse(_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/c2&gt;関数は&lt;c4&gt;Floating&lt;w5&gt;Point&lt;/w5&gt;&lt;/c4&gt;プロトコルに制約された総称体パラメータを使うので、あなたはそれを呼び出すことがあらゆる浮動小数点型を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c2&gt;my&lt;w3&gt;ID&lt;/w3&gt;&lt;/c2&gt; property is declared as a constant, it can't change locally.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>なぜなら&lt;c2&gt;my&lt;w3&gt;ID&lt;/w3&gt;&lt;/c2&gt;プロパティは定数として宣言されるからです、それはローカルに変更できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c3&gt;Pen&lt;w4&gt;Pal&lt;w5&gt;Record&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; structure doesn't control the identity of the underlying database records, there's no risk that the changes made to local &lt;c6&gt;Pen&lt;w7&gt;Pal&lt;w8&gt;Record&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; instances accidentally change values in the database.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;Pen&lt;w4&gt;Pal&lt;w5&gt;Record&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;構造体が基礎をなすデータベースレコードの同一性を制御しないことから、ローカルの&lt;c6&gt;Pen&lt;w7&gt;Pal&lt;w8&gt;Record&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;インスタンスになされる変更が誤って値をデータベースにおいて変更する危険はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c4&gt;Int8&lt;/c4&gt; type can represent &lt;c5&gt;127&lt;/c5&gt; at maximum, the attempt to create &lt;c6&gt;z&lt;/c6&gt; with a value of &lt;c7&gt;1000&lt;/c7&gt; results in a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Int8&lt;/c4&gt;型は、最大で&lt;c5&gt;127&lt;/c5&gt;を表せることから、&lt;c6&gt;z&lt;/c6&gt;を&lt;c7&gt;1000&lt;/c7&gt;の値で作成する試みは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the first field of the &lt;c0&gt;Cake&lt;/c0&gt; structure is unnamed, its initializer’s first parameter doesn't have a label.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Cake&lt;/c0&gt;構造体の最初のフィールドが無名であるため、それのイニシャライザの持つ最初のパラメータはラベルを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the generated header is part of the framework’s public interface, only declarations marked with the &lt;c0&gt;public&lt;/c0&gt; or &lt;c1&gt;open&lt;/c1&gt; modifier appear in the generated header for a framework target.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生成されたヘッダがフレームワークのパブリックインターフェイスの一部であることから、&lt;c0&gt;public&lt;/c0&gt;または&lt;c1&gt;open&lt;/c1&gt;修飾子で印された宣言だけがフレームワークターゲットに対する生成ヘッダに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the predicate throws when it receives &lt;c7&gt;2&lt;/c7&gt; from the base sequence, this example throws without ever printing anything.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部はそれが&lt;c7&gt;2&lt;/c7&gt;を基底シーケンスから受け取る時にスローすることから、この例は決して何かを印字することなくスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the quotient is representable as an &lt;c2&gt;Int&lt;/c2&gt;, the division succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>商が&lt;c2&gt;Int&lt;/c2&gt;として表現可能であることから、除算は成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the result of this nil-coalescing operation is itself an optional value, you can chain default values by using &lt;c0&gt;??&lt;/c0&gt; multiple times.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このnil合体演算の結果がそれ自体オプショナル値であることから、あなたは幾らかの省略時の値を&lt;c0&gt;??&lt;/c0&gt;を複数回使うことで連鎖することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the tasks you add to a group with this method are nonthrowing, those tasks can’t respond to cancellation by throwing &lt;c0&gt;Cancellation&lt;w1&gt;Error&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがグループにこのメソッドで加えるタスクはスローしないことから、それらタスクは、&lt;c0&gt;Cancellation&lt;w1&gt;Error&lt;/w1&gt;&lt;/c0&gt;をスローすることによって取り消しに応答できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because there is no key for &lt;c11&gt;4&lt;/c11&gt;, the closure returns &lt;c12&gt;nil&lt;/c12&gt; in this case, which &lt;c13&gt;compact&lt;w14&gt;Map(_:)&lt;/w14&gt;&lt;/c13&gt; omits from the transformed asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c11&gt;4&lt;/c11&gt;に対するキーがないことから、クロージャは&lt;c12&gt;nil&lt;/c12&gt;をその場合には返します、それは&lt;c13&gt;compact&lt;w14&gt;Map(_:)&lt;/w14&gt;&lt;/c13&gt;がこの変換された非同期シーケンスから省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because this initializer does not perform any checks, it should be used as an optimization only when you are absolutely certain that &lt;c0&gt;lower&lt;/c0&gt; is less than or equal to &lt;c1&gt;upper&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは何ら確認を行わないので、それは、あなたが&lt;c0&gt;lower&lt;/c0&gt;が&lt;c1&gt;upper&lt;/c1&gt;より少ないか等しいことを絶対に確信している場合にのみ１つの最適化として使われるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because unions in C use the same base memory address for all of their fields, all of the computed properties in a union imported by Swift use the same underlying memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cでの共用体は同じ基盤メモリアドレスをすべてのそれのフィールドに対して使うことから、スウィフトによってインポートされる共用体の中の計算プロパティのすべては同じ基礎をなすメモリを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because weak and unowned references cannot be the only reference to an object, passing a weak or unowned reference as &lt;c6&gt;object&lt;/c6&gt; always results in &lt;c7&gt;false&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>弱いおよび非所有の参照は、あるオブジェクトに対する唯一の参照ではありえないので、弱いまたは非所有参照を&lt;c6&gt;object&lt;/c6&gt;として渡すことは常に&lt;c7&gt;false&lt;/c7&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before appending, the array allocates new storage that is large enough store the resulting elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加の前に、この配列は新しいストレージを割り当てます、それは結果として生じる要素らを格納するのに十分に大きいものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before shifting, the masking left shift operator masks the shift to this range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトする前に、マスク左シフト演算子は、シフトをマスクしてこの範囲にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before shifting, the masking right shift operator masks the shift to this range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトする前に、マスク右シフト演算子は、シフトをマスクしてこの範囲にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before you call a method on an object's delegate, make sure that the delegate isn't &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがメソッドをオブジェクトの持つ委任先で呼び出す前に、委任先が&lt;c0&gt;nil&lt;/c0&gt;でないことを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bidirectional collections can therefore offer additional operations, such as a &lt;c2&gt;last&lt;/c2&gt; property that provides efficient access to the last element and a &lt;c3&gt;reversed()&lt;/c3&gt; method that presents the elements in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>二方向性のコレクションは、従って追加の演算を提案します、例えば最後の要素への手際のよいアクセスを提供する&lt;c2&gt;last&lt;/c2&gt;プロパティ、そして要素を逆順で提示する&lt;c3&gt;reversed()&lt;/c3&gt;メソッドなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bidirectional collections offer traversal backward from any valid index, not including a collection’s &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>二方向性のコレクションは、あらゆる有効な、しかしコレクションの&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;を含まないインデックスから後方へ辿っていくことを提案します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bidirectional&lt;w0&gt;Collection Implementations &lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>双方向&lt;w0&gt;コレクションの実装 &lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binary Integer Operators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２進整数演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binary&lt;w0&gt;Floating&lt;w1&gt;Point Implementations &lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ&lt;w0&gt;浮動&lt;w1&gt;小数点の実装 &lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binary&lt;w0&gt;Integer Implementations &lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ&lt;w0&gt;整数の実装&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>BinaryFloatingPoint Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ浮動小数点実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bit Fields</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビットフィールド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bit Pattern Conversion</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビットパターン変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bit Shift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビットシフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise Operations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise conversion from one integer type to another.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数型から別のものへのビット単位変換。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both of these methods return the original, unwrapped type of the object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのメソッドの両方とも、元の、オブジェクトのアンラップされた型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both parameters must be valid indices of the collection and not equal to &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方のパラメータは、このコレクションの有効なインデックスであり、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;と等しくない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both parameters must be valid indices of the collection that are not equal to &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方のパラメータは、このコレクションの有効なインデックスで、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;と等しくない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both processes are described below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>双方の行程は下で記述されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bridging Between Array and NSArray</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ArrayとNSArrayの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bridging Between Dictionary and NSDictionary</seg>
      </tuv>
      <tuv lang="ja">
        <seg>DictionaryとNSDictionaryの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bridging from &lt;c0&gt;Array&lt;/c0&gt; to &lt;c1&gt;NSArray&lt;/c1&gt; takes O(1) time and O(1) space if the array’s elements are already instances of a class or an &lt;c2&gt;@objc&lt;/c2&gt; protocol; otherwise, it takes O(&lt;e3&gt;n&lt;/e3&gt;) time and space.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Array&lt;/c0&gt;から&lt;c1&gt;NSArray&lt;/c1&gt;へのブリッジは、配列のもつ要素がすでにあるクラスまたは&lt;c2&gt;@objc&lt;/c2&gt;プロトコルのインスタンスであるならば、O(1)時間とO(1)空間をとります；そうでなければ、それはO(&lt;e3&gt;n&lt;/e3&gt;)の時間と空間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bridging from &lt;c0&gt;Dictionary&lt;/c0&gt; to &lt;c1&gt;NSDictionary&lt;/c1&gt; always takes O(1) time and space.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Dictionary&lt;/c0&gt;から&lt;c1&gt;NSDictionary&lt;/c1&gt;へのブリッジは、常にO(1)時間と空間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bridging from &lt;c0&gt;NSDictionary&lt;/c0&gt; to &lt;c1&gt;Dictionary&lt;/c1&gt; first calls the &lt;c2&gt;copy(with:)&lt;/c2&gt; method (&lt;c3&gt;- copy&lt;w4&gt;With&lt;w5&gt;Zone:&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; in Objective-C) on the dictionary to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NSDictionary&lt;/c0&gt;から&lt;c1&gt;Dictionary&lt;/c1&gt;へのブリッジは、最初に&lt;c2&gt;copy(with:)&lt;/c2&gt;メソッド（Objective-Cでの&lt;c3&gt;- copy&lt;w4&gt;With&lt;w5&gt;Zone:&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;）をその辞書上で呼び出して可変のコピーを取得して、それからO(1)時間を取る追加的なSwift簿記作業を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build apps using a powerful open language.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>強力でオープンな言語を使ってアプリを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default this limit is unlimited.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態ではこの限界は、制限されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, a collection conforms to the &lt;c0&gt;Sequence&lt;/c0&gt; protocol by supplying &lt;c1&gt;Indexing&lt;w2&gt;Iterator&lt;/w2&gt;&lt;/c1&gt; as its associated &lt;c3&gt;Iterator&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態で、あるコレクションは&lt;c0&gt;Sequence&lt;/c0&gt;プロトコルに、&lt;c1&gt;Indexing&lt;w2&gt;Iterator&lt;/w2&gt;&lt;/c1&gt;をそれの関連&lt;c3&gt;Iterator&lt;/c3&gt;型として提供することによって準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, any custom collection type you create will inherit a &lt;c0&gt;make&lt;w1&gt;Iterator()&lt;/w1&gt;&lt;/c0&gt; method that returns an &lt;c2&gt;Indexing&lt;w3&gt;Iterator&lt;/w3&gt;&lt;/c2&gt; instance, making it unnecessary to declare your own.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態で、あなたが作成するあらゆるあつらえのコレクション型は、&lt;c0&gt;Indexing&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt;インスタンスを返す&lt;c2&gt;make&lt;w3&gt;Iterator()&lt;/w3&gt;&lt;/c2&gt;メソッドを継承していて、それをあなた自身で宣言する必要がないようにしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, the generated header contains interfaces for Swift declarations marked with the &lt;c0&gt;public&lt;/c0&gt; or &lt;c1&gt;open&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特に何もしなければ、生成されたヘッダは&lt;c0&gt;public&lt;/c0&gt;または&lt;c1&gt;open&lt;/c1&gt;修飾子で印されたSwift宣言を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, this name is the same as your product name, with any nonalphanumeric characters replaced with an underscore (&lt;c2&gt;_&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時には、この名前は、あらゆる非アルファベット文字がアンダースコア（&lt;c2&gt;_&lt;/c2&gt;）で置き換えられたあなたの製品名と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C &lt;c0&gt;struct&lt;/c0&gt; and &lt;c1&gt;union&lt;/c1&gt; types can define fields that have no name or that are of an unnamed type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cの&lt;c0&gt;struct&lt;/c0&gt;と&lt;c1&gt;union&lt;/c1&gt;型は、名前を持たないまたは無名型であるフィールドを定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C Interoperability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C互換性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C Syntax</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C構文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C Variadic Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C可変長引数関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C and Objective-C Pointers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CおよびObjective-Cポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C function pointers are imported into Swift as closures with the C function pointer calling convention, denoted by the &lt;c0&gt;@convention(c)&lt;/c0&gt; attribute.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C関数ポインターは、&lt;c0&gt;@convention(c)&lt;/c0&gt;属性によって示される、C関数呼出規約を持つクロージャとしてSwiftにインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C functions that use the &lt;c2&gt;...&lt;/c2&gt; syntax for variadic arguments are not imported, and therefore can’t be called using &lt;c3&gt;CVar&lt;w4&gt;Arg&lt;/w4&gt;&lt;/c3&gt; arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;...&lt;/c2&gt;構文を可変長引数に使うC関数はインポートされません、そしてそれゆえ&lt;c3&gt;CVar&lt;w4&gt;Arg&lt;/w4&gt;&lt;/c3&gt;引数を使って呼び出されることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C macros that are more complex than simple constant definitions have no counterpart in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単純な定数宣言よりもっと複雑なCマクロは、相当するものをSwiftにおいて持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calculates the additive inverse of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の加法の逆元を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を計算します、シフト量をその型のもつビット幅にマスクしています、そして結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calculating &lt;c3&gt;count&lt;/c3&gt; can be an O(&lt;e4&gt;n&lt;/e4&gt;) operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;count&lt;/c3&gt;の算出は、O(&lt;e4&gt;n&lt;/e4&gt;)演算であるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;body(p)&lt;/c0&gt;, where &lt;c1&gt;p&lt;/c1&gt; is a pointer to the collection’s contiguous storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body(p)&lt;/c0&gt;を呼び出します、ここで&lt;c1&gt;p&lt;/c1&gt;はコレクションのもつ隣接ストレージへのポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;body(p)&lt;/c0&gt;, where &lt;c1&gt;p&lt;/c1&gt; is a pointer to the collection’s mutable contiguous storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body(p)&lt;/c0&gt;を呼び出します、ここで&lt;c1&gt;p&lt;/c1&gt;はコレクションのもつ可変の隣接ストレージへのポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;first&lt;w1&gt;Index(where:)&lt;/w1&gt;&lt;/c0&gt; again, this time on the slice created in step 2.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;first&lt;w1&gt;Index(where:)&lt;/w1&gt;&lt;/c0&gt;もう一度呼び出します、今回は手順にで作成したスライス上で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;first&lt;w1&gt;Index(where:)&lt;/w1&gt;&lt;/c0&gt; to find the index of the first element in the &lt;c2&gt;absences&lt;/c2&gt; array that is greater than zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;first&lt;w1&gt;Index(where:)&lt;/w1&gt;&lt;/c0&gt;を呼んで&lt;c2&gt;absences&lt;/c2&gt;配列の中の、ゼロより大きい最初の要素がもつインデックスを手に入れてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;random&lt;w1&gt;Element()&lt;/w1&gt;&lt;/c0&gt; to select a random element from an array or another collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;random&lt;w1&gt;Element()&lt;/w1&gt;&lt;/c0&gt;を呼び出して、ある無作為な要素を配列または別のコレクションから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;random&lt;w1&gt;Element(using:)&lt;/w1&gt;&lt;/c0&gt; to select a random element from an array or another collection when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;random&lt;w1&gt;Element(using:)&lt;/w1&gt;&lt;/c0&gt;を呼び出して、あなたがあつらえの無作為数生成子を使っている場合に、ある無作為な要素を配列または別のコレクションから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c2&gt;hasher&lt;w3&gt;.combine(_:)&lt;/w3&gt;&lt;/c2&gt; with each of these components.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;hasher&lt;w3&gt;.combine(_:)&lt;/w3&gt;&lt;/c2&gt;をそれら構成要素とともに呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call Functions with Pointer Parameters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数をポインタパラメータを使って呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Callers should apply the same preconditions to the return value as they would to a range provided directly by the user.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>呼び出し側は、同じ前提条件を戻り値に適用すべきです、それらがユーザによって直接に提供される範囲にするように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling &lt;c0&gt;appending(path:)&lt;/c0&gt; results in the same key path as if the given key path had been specified using dot notation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;appending(path:)&lt;/c0&gt;を呼び出すことは、与えられたキーパスがドット表記法を使って指定された場合と同じキーパスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling &lt;c0&gt;check&lt;w1&gt;Cancellation()&lt;/w1&gt;&lt;/c0&gt; on the &lt;c2&gt;Task&lt;/c2&gt;, which throws a &lt;c3&gt;Cancellation&lt;w4&gt;Error&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;check&lt;w1&gt;Cancellation()&lt;/w1&gt;&lt;/c0&gt;を&lt;c2&gt;Task&lt;/c2&gt;上で呼び出す、それは&lt;c3&gt;Cancellation&lt;w4&gt;Error&lt;/w4&gt;&lt;/c3&gt;をスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling &lt;c2&gt;swap&lt;w3&gt;At(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; with the same index as both &lt;c5&gt;i&lt;/c5&gt; and &lt;c6&gt;j&lt;/c6&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;swap&lt;w3&gt;At(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;を&lt;c5&gt;i&lt;/c5&gt;と&lt;c6&gt;j&lt;/c6&gt;両方で同じインデックスで呼び出すことは、効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling Objective-C APIs Asynchronously</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C APIを非同期に呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c0&gt;dump(_:&lt;w1&gt;_:&lt;w2&gt;_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function and printing in the debugger uses both &lt;c4&gt;String(reflecting:)&lt;/c4&gt; and &lt;c5&gt;Mirror(reflecting:)&lt;/c5&gt; to collect information about an instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;dump(_:&lt;w1&gt;_:&lt;w2&gt;_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数を呼び出してデバッガに出力することは、&lt;c4&gt;String(reflecting:)&lt;/c4&gt;と&lt;c5&gt;Mirror(reflecting:)&lt;/c5&gt;の両方を使ってインスタンスの情報を収集します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c0&gt;numeric&lt;w1&gt;Cast(_:)&lt;/w1&gt;&lt;/c0&gt; function is equivalent to calling an initializer for the destination type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;numeric&lt;w1&gt;Cast(_:)&lt;/w1&gt;&lt;/c0&gt;関数を呼び出すことは、行き先型に対するイニシャライザを呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt; method on a dictionary with bridged storage triggers a copy to contiguous storage even if the existing storage has room to store &lt;c2&gt;minimum&lt;w3&gt;Capacity&lt;/w3&gt;&lt;/c2&gt; key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;メソッドをブリッジされたストレージを持つ辞書で呼び出すことは、隣接ストレージへのコピーを引き起こします、たとえ既存のストレージに&lt;c2&gt;minimum&lt;w3&gt;Capacity&lt;/w3&gt;&lt;/c2&gt;キー値ペアを格納する余地があるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt; method on an array with bridged storage triggers a copy to contiguous storage even if the existing storage has room to store &lt;c2&gt;minimum&lt;w3&gt;Capacity&lt;/w3&gt;&lt;/c2&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;メソッドをブリッジされたストレージを持つ配列で呼び出すことは、隣接ストレージへのコピーを引き起こします、たとえ既存のストレージに&lt;c2&gt;minimum&lt;w3&gt;Capacity&lt;/w3&gt;&lt;/c2&gt;要素を格納する余地があるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c2&gt;remove&lt;w3&gt;Subrange(_:)&lt;/w3&gt;&lt;/c2&gt; method instead is preferred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;remove&lt;w3&gt;Subrange(_:)&lt;/w3&gt;&lt;/c2&gt;メソッドを代わりに呼ぶことが好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c6&gt;insert(contents&lt;w7&gt;Of:&lt;w8&gt;at:)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; method instead is preferred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;insert(contents&lt;w7&gt;Of:&lt;w8&gt;at:)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;メソッドを代わりに呼ぶことが好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the function with different class types shows how the &lt;c4&gt;get&lt;w5&gt;Default&lt;w6&gt;Value()&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; class method is only conditionally available.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数を異なるクラス型で呼び出すことは、どのように&lt;c4&gt;get&lt;w5&gt;Default&lt;w6&gt;Value()&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;クラスメソッドが条件付きでのみ利用可能であるのかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the related &lt;c0&gt;sorted()&lt;/c0&gt; method is equivalent to calling this method and passing the less-than operator (&lt;c1&gt;&lt;&lt;/c1&gt;) as the predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連した&lt;c0&gt;sorted()&lt;/c0&gt;メソッドを呼び出すことは、このメソッドを呼び出して、より小さい演算子（&lt;c1&gt;&lt;&lt;/c1&gt;）を述部として渡すことと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this function breaks the guarantees of the Swift type system; use with extreme care.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数を呼ぶことは、Swift型システムの保証を壊します；最大限の注意を払ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this function more than once is idempotent; i.e. finishing more than once does not alter the state beyond the requirements of AsyncSequence; which claims that all values past a terminal state are nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数を一回以上呼び出すことは冪等です；すなわち、一回以上終了することはAsyncSequenceの要件を越えてその状態を改めません；それは終端状態を過ぎた全ての値はnilであると主張します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method invalidates all indices with respect to the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、この辞書に関するすべてのインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method invalidates any existing indices for use with this dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、この辞書で使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method may invalidate all saved indices of this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、このコレクションの全ての保存されたインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method may invalidate any existing indices for use with this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、このコレクションで使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this property directly is discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティを直接に呼び出すことは、推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls a closure with a pointer to the array’s contiguous storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャを配列のもつ隣接ストレージへのポインタとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure on each element in the sequence in the same order as a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたクロージャをそのシーケンスの各要素上で&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループと同じ順番で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with a mutable pointer to the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを与えられた引数に対する可変ポインタを使って呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with a pointer to the array’s mutable contiguous storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを配列のもつ可変の隣接ストレージへのポインタとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with a pointer to the underlying bytes of the array’s contiguous storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、配列の隣接ストレージの基礎をなすバイトへのポインタとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with a pointer to the underlying bytes of the array’s mutable contiguous storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、配列の可変の隣接ストレージの基礎をなすバイトへのポインタとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with the with the “current” task in which this function was invoked.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、それにおいてこの関数が発動されたところの “現在の” タスクで呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Canceling Tasks</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクの取り消し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Canceling the task in which the group is running also cancels the group and all of its child tasks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その中においてグループが動作しているタスクを取り消すことはまた、そのグループと全てのそれの子タスクを取り消します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cancellation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取り消し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cancelling an active iteration will first invoke the onTermination callback and then resume yeilding nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>活動中の反復が取れ消されることは、最初にonTerminationコールバックを発動します、その次にnilを生み出すことを再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cast between a Swift value type and its corresponding reference type by using the &lt;c1&gt;as&lt;/c1&gt; keyword.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift値型とそれの対応する参照型の間で&lt;c1&gt;as&lt;/c1&gt;キーワードを使ってキャストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cast instances of the Objective-C &lt;c0&gt;id&lt;/c0&gt; type to a specific Swift type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C &lt;c0&gt;id&lt;/c0&gt;のインスタンスをSwift型にキャストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Casting AnyObject Instances to a Known Type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AnyObjectインスタンスを既知の型へキャストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Casting an instance of a reference type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照型のインスタンスのキャスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Casting is always safe in the context of a &lt;c0&gt;switch&lt;/c0&gt; statement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キャストは&lt;c0&gt;switch&lt;/c0&gt;文の文脈においては常に安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Catch Errors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラーをキャッチする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cerating a Random Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為な値を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Check That Delegates Exist</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その委任先が存在するか確認する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Check if the task is cancelled and throw an &lt;c0&gt;Cancellation&lt;w1&gt;Error&lt;/w1&gt;&lt;/c0&gt; if it was.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクが取り消されるかどうか確認します、そしてそれがそうであったならば&lt;c0&gt;Cancellation&lt;w1&gt;Error&lt;/w1&gt;&lt;/c0&gt;をスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checking a Character’s Case</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字のケースを確認する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checking a Character’s Numeric Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字の数値プロパティを確認する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checking for Containment</seg>
      </tuv>
      <tuv lang="ja">
        <seg>制約を調べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checking the &lt;c0&gt;is&lt;w1&gt;Cancelled&lt;/w1&gt;&lt;/c0&gt; value of the current &lt;c2&gt;Task&lt;/c2&gt; inside &lt;c3&gt;next()&lt;/c3&gt; and returning &lt;c4&gt;nil&lt;/c4&gt; to terminate the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;next()&lt;/c3&gt;の内部の現在の&lt;c2&gt;Task&lt;/c2&gt;の&lt;c0&gt;is&lt;w1&gt;Cancelled&lt;/w1&gt;&lt;/c0&gt;値を調べるそして&lt;c4&gt;nil&lt;/c4&gt;を返してシーケンスを終端する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checks a necessary condition for making forward progress.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは進捗を前へ進めるために必要な条件を確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Choose Structures by Default</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体を通常は使ってください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Choosing Between Structures and Classes</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体かクラスのいずれかを選ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Choosing the Smallest and Largest Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最小および最大値を選ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Clamping Conversion</seg>
      </tuv>
      <tuv lang="ja">
        <seg>固定変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Clamping a Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を固定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Class clusters that include immutable and mutable subclasses, like &lt;c0&gt;NSArray&lt;/c0&gt; and &lt;c1&gt;NSMutable&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;, are bridged to a single value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NSArray&lt;/c0&gt;および&lt;c1&gt;NSMutable&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;のような、不変および可変のサブクラスを含むクラスクラスタは、単一の値型にブリッジされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Class instance identity, on the other hand, is compared using the triple-equals identical-to operator (&lt;c0&gt;===&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一方、クラスインスタンス同一性は、３つの等号の同一性演算子（&lt;c0&gt;===&lt;/c0&gt;）を使って比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Classes in Swift come with a built-in notion of identity because they're reference types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでのクラスそれらは、組み込みの同一性の概念を備えています、なぜならそれらが参照型だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Classes specific to Objective-C or inherently tied to the Objective-C runtime, like &lt;c0&gt;NSObject&lt;/c0&gt;, &lt;c1&gt;NSAutorelease&lt;w2&gt;Pool&lt;/w2&gt;&lt;/c1&gt;, &lt;c3&gt;NSException&lt;/c3&gt;, and &lt;c4&gt;NSProxy&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C特有の、またはObjective-Cランタイムに本質的に結びつけられ切り離せないクラス、&lt;c0&gt;NSObject&lt;/c0&gt;、&lt;c1&gt;NSAutorelease&lt;w2&gt;Pool&lt;/w2&gt;&lt;/c1&gt;、&lt;c3&gt;NSException&lt;/c3&gt;、そして&lt;c4&gt;NSProxy&lt;/c4&gt;のような</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Coalescing Nil Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil値の合体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cocoa APIs often provide protocols that include delegate methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cocoa APIは、しばしば委任先メソッドを含むプロトコルを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cocoa Design Patterns</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cocoaデザインパターン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cocoa Frameworks</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cocoaフレームワーク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Code outside the standard library can extend string interpolation on &lt;c0&gt;String&lt;/c0&gt; and many other common types by extending &lt;c1&gt;Default&lt;w2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and adding an &lt;c4&gt;append&lt;w5&gt;Interpolation(...)&lt;/w5&gt;&lt;/c4&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの外側のコードは、文字列補間を&lt;c0&gt;String&lt;/c0&gt;および多くの他の一般の型の上で拡張することが、&lt;c1&gt;Default&lt;w2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;を拡張することそして&lt;c4&gt;append&lt;w5&gt;Interpolation(...)&lt;/w5&gt;&lt;/c4&gt;メソッドを加えることで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Coding&lt;w0&gt;Key Implementations &lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コーディング&lt;w0&gt;キー実装&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collection Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクション実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collection Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションリテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collection Traversal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクション横断</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまなコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collections are used extensively throughout the standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションは標準ライブラリの至る所で広範囲にわたって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Combining Arrays</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列を結合する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Command Line Input</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コマンドライン入力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Command-line arguments for the current process.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のプロセスに対するコマンドライン引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Common Patterns</seg>
      </tuv>
      <tuv lang="ja">
        <seg>共通パターン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Common conversions supported by the Swift standard library include the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリによってサポートされる一般的な変換は、以下を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Common protocol to which all actors conform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それへと全てのアクターが準拠する共通プロコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Common use cases are file handles, network connections, and shared hardware intermediaries like &lt;a1&gt;&lt;c2&gt;CBCentral&lt;w3&gt;Manager&lt;/w3&gt;&lt;/c2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般的な利用事例は、ファイルハンドル、ネットワーク接続、そして&lt;a1&gt;&lt;c2&gt;CBCentral&lt;w3&gt;Manager&lt;/w3&gt;&lt;/c2&gt;&lt;/a1&gt;のような共有ハードウェア仲介です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparable Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Comparable実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparable Requirements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Comparable要件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compare each significant property for equality in your &lt;c5&gt;==&lt;/c5&gt; method's implementation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>重要なプロパティそれぞれを同等性についてあなたの&lt;c5&gt;==&lt;/c5&gt;メソッドの実装において比較してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compare tuples of between two and six &lt;c0&gt;Comparable&lt;/c0&gt; elements using these comparative operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つと６つの間の&lt;c0&gt;Comparable&lt;/c0&gt;要素のタプルをそれらの比較演算を使って比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compare tuples of between two and six &lt;c0&gt;Equatable&lt;/c0&gt; elements for equality or inequality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つと６つの間の&lt;c0&gt;Equatable&lt;/c0&gt;要素のタプルを同等性または不等性について比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Across Integer Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな整数型を比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Arrays</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Boolean Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブール値を比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Dictionaries</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Identity</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一性の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Pointers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタを比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Ranges</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Ranges as Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲をコレクションとして比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparison</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: Amortized O(1) if the dictionary does not wrap a bridged &lt;c0&gt;NSDictionary&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：この辞書が、ブリッジされた&lt;c0&gt;NSDictionary&lt;/c0&gt;をラップしないならば均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: Amortized O(1) if the dictionary does not wrap a bridged &lt;c0&gt;NSDictionary&lt;/c0&gt;; otherwise, the performance is unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：この辞書が、ブリッジされた&lt;c0&gt;NSDictionary&lt;/c0&gt;をラップしないならば均してO(1)；それ以外では、性能は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: Averages to O(1) over many calls to &lt;c0&gt;pop&lt;w1&gt;First()&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：多くの&lt;c0&gt;pop&lt;w1&gt;First()&lt;/w1&gt;&lt;/c0&gt;に対する呼び出しにわたって均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is equal to &lt;c5&gt;max&lt;w6&gt;Length&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば、O(1)；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は&lt;c5&gt;max&lt;w6&gt;Length&lt;/w6&gt;&lt;/c5&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the absolute value of &lt;c5&gt;distance&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば、O(1)；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は&lt;c5&gt;distance&lt;/c5&gt;の値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the number of elements to drop from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば、O(1)；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;はコレクションの冒頭から除外する要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the number of elements to drop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば、O(1)；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は除外される要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the number of elements to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は除去される要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the number of elements to select from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば、O(1)；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;はコレクションの冒頭から選択する要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the resulting distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は結果の隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は指定した要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;n&lt;/e3&gt;), where &lt;e4&gt;n&lt;/e4&gt; is the absolute value of &lt;c5&gt;n&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;n&lt;/e3&gt;)、そこで&lt;e4&gt;n&lt;/e4&gt;は&lt;c5&gt;n&lt;/c5&gt;の値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;n&lt;/e3&gt;), where &lt;e4&gt;n&lt;/e4&gt; is the length of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;n&lt;/e3&gt;)、そこで&lt;e4&gt;n&lt;/e4&gt;はコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;n&lt;/e3&gt;), where &lt;e4&gt;n&lt;/e4&gt; is the resulting distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;n&lt;/e3&gt;)、そこで&lt;e4&gt;n&lt;/e4&gt;は結果となる隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) on average, over many calls to &lt;c0&gt;append(_:)&lt;/c0&gt; on the same array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：同じ配列上での&lt;c0&gt;append(_:)&lt;/c0&gt;への多くの呼び出しに対して、均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1), except if the sequence also conforms to &lt;c0&gt;Collection&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、例外としてシーケンスが同様に&lt;c0&gt;Collection&lt;/c0&gt;に準拠する場合を除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1), with O(&lt;e0&gt;k&lt;/e0&gt;) deferred to each iteration of the result, where &lt;e1&gt;k&lt;/e1&gt; is the number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、結果の各反復に対してO(&lt;e0&gt;k&lt;/e0&gt;)延期されて、ここで&lt;e1&gt;k&lt;/e1&gt;はシーケンスの冒頭から除かれる要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;k&lt;/e0&gt;), where &lt;e1&gt;k&lt;/e1&gt; is the length of the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;k&lt;/e0&gt;)、ここで&lt;e1&gt;k&lt;/e1&gt;は結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;k&lt;/e0&gt;), where &lt;e1&gt;k&lt;/e1&gt; is the number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;k&lt;/e0&gt;)、ここで&lt;e1&gt;k&lt;/e1&gt;はシーケンスの冒頭から除かれる要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;k&lt;/e0&gt;), where &lt;e1&gt;k&lt;/e1&gt; is the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;k&lt;/e0&gt;)、ここで&lt;e1&gt;k&lt;/e1&gt;は指定された要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt; + &lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;m&lt;/e2&gt; is the length of this sequence and &lt;e3&gt;n&lt;/e3&gt; is the length of the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt; + &lt;e1&gt;n&lt;/e1&gt;)、ここで&lt;e2&gt;m&lt;/e2&gt;はこのシーケンスの長さで、&lt;e3&gt;n&lt;/e3&gt;は結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt; + &lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the length of the original dictionary and &lt;e3&gt;m&lt;/e3&gt; is the length of the resulting dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt; + &lt;e1&gt;n&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;は元の辞書の長さで、&lt;e3&gt;m&lt;/e3&gt;は結果の辞書の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt; + &lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the length of this sequence and &lt;e3&gt;m&lt;/e3&gt; is the length of the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt; + &lt;e1&gt;n&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;はこのシーケンスの長さで、&lt;e3&gt;m&lt;/e3&gt;は結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;) on average, where &lt;e1&gt;m&lt;/e1&gt; is the length of &lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;, over many calls to &lt;c4&gt;append(contents&lt;w5&gt;Of:)&lt;/w5&gt;&lt;/c4&gt; on the same array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;は&lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;の長さで、同じ配列上での&lt;c4&gt;append(contents&lt;w5&gt;Of:)&lt;/w5&gt;&lt;/c4&gt;への多くの呼び出しに対してで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;), where &lt;e1&gt;m&lt;/e1&gt; is the length of &lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;は&lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;), where &lt;e1&gt;m&lt;/e1&gt; is the length of the right-hand-side argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;は右手側の引数の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;), where &lt;e1&gt;m&lt;/e1&gt; is the lesser of the length of the sequence and the length of &lt;c2&gt;other&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;はシーケンスの長さと&lt;c2&gt;other&lt;/c2&gt;の長さのより短い方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;), where &lt;e1&gt;m&lt;/e1&gt; is the lesser of the length of the sequence and the length of &lt;c2&gt;possible&lt;w3&gt;Prefix&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;はシーケスの長さと&lt;c2&gt;possible&lt;w3&gt;Prefix&lt;/w3&gt;&lt;/c2&gt;の長さのより短い方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt; * log(&lt;e1&gt;n&lt;/e1&gt;)), where &lt;e2&gt;n&lt;/e2&gt; is the length of the parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt; * log(&lt;e1&gt;n&lt;/e1&gt;))、ここで&lt;e2&gt;n&lt;/e2&gt;はパラメータの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt; + &lt;e1&gt;c&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is &lt;c3&gt;self&lt;w4&gt;.count&lt;/w4&gt;&lt;/c3&gt; and &lt;e5&gt;c&lt;/e5&gt; is the number of changes contained by the parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt; + &lt;e1&gt;c&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;は&lt;c3&gt;self&lt;w4&gt;.count&lt;/w4&gt;&lt;/c3&gt;です、そして&lt;e5&gt;c&lt;/e5&gt;はパラメータによって含まれる変更の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt; + &lt;e1&gt;m&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is length of the array and &lt;e3&gt;m&lt;/e3&gt; is the length of &lt;c4&gt;new&lt;w5&gt;Elements&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt; + &lt;e1&gt;m&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;は配列の長さです、そして&lt;e3&gt;m&lt;/e3&gt;は&lt;c4&gt;new&lt;w5&gt;Elements&lt;/w5&gt;&lt;/c4&gt;の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt; + &lt;e1&gt;m&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is length of this collection and &lt;e3&gt;m&lt;/e3&gt; is the length of &lt;c4&gt;new&lt;w5&gt;Elements&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt; + &lt;e1&gt;m&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;は配列の長さです、そして&lt;e3&gt;m&lt;/e3&gt;は&lt;c4&gt;new&lt;w5&gt;Elements&lt;/w5&gt;&lt;/c4&gt;の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt; log &lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the length of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt; log &lt;e1&gt;n&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;はコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt; log &lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the length of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt; log &lt;e1&gt;n&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;はシーケンスの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;) where &lt;e1&gt;n&lt;/e1&gt; is the number of collection differences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;はコレクション差異それらの数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the length of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;は配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the length of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;はコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the length of the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;は辞書の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the length of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;はシーケンスの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the number of elements in the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;は配列の中の要素数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;はコレクションの中の要素数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the number of key-value pairs in the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;は辞書の中のキー値ペアの数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: Reading an element from an array is O(1).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：ある要素を配列から読み出すことはO(1)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: Worst case performance is O(&lt;e0&gt;n&lt;/e0&gt; * &lt;e1&gt;m&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the count of this collection and &lt;e3&gt;m&lt;/e3&gt; is &lt;c4&gt;other&lt;w5&gt;.count&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：最悪の場合の性能は、O(&lt;e0&gt;n&lt;/e0&gt; * &lt;e1&gt;m&lt;/e1&gt;)です、ここで&lt;e2&gt;n&lt;/e2&gt;はこのコレクションの総数です、そして&lt;e3&gt;m&lt;/e3&gt;は&lt;c4&gt;other&lt;w5&gt;.count&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conform Automatically to Equatable and Hashable</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自動的にequatableとhashableに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conform Manually to Equatable and Hashable</seg>
      </tuv>
      <tuv lang="ja">
        <seg>手動でequatableとhashableに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの型が準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to ExpressibleByArrayLiteral</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ExpressibleByArrayLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to ExpressibleByExtendedGraphemeClusterLiteral</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ExpressibleByExtendedGraphemeClusterLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to ExpressibleByFloatLiteral</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ExpressibleByFloatLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to ExpressibleByIntegerLiteral</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ExpressibleByIntegerLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to ExpressibleByStringLiteral</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ExpressibleByStringLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to ExpressibleByUnicodeScalarLiteral</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ExpressibleByUnicodeScalarLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the &lt;c0&gt;Equatable&lt;/c0&gt; and &lt;c1&gt;Hashable&lt;/c1&gt; protocols is straightforward and makes it easier to use your own types in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Equatable&lt;/c0&gt;と&lt;c1&gt;Hashable&lt;/c1&gt;プロトコルに準拠することは、あなた独自の型をSwiftで使うのをわかりやすいそしてより容易なものにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the AdditiveArithmetic Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AdditiveArithmeticプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the BidirectionalCollection Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>BidirectionalCollectionプロトコルへの準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the CaseIterable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CaseIterableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Collection Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Collectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Comparable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Comparableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the CustomDebugStringConvertible Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CustomDebugStringConvertibleプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the CustomPlaygroundDisplayConvertible Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CustomPlaygroundDisplayConvertibleプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the CustomStringConvertible Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CustomStringConvertibleプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Equatable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Equatableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the ExpressibleByDictionaryLiteral Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ExpressibleByDictionaryLiteralプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the FixedWidthInteger Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>FixedWidthIntegerプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Hashable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Hashableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Identifiable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Identifiableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms To</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;A&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;B&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;A&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するそして&lt;c2&gt;B&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;A&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;, &lt;c2&gt;B&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;, &lt;c4&gt;C&lt;/c4&gt; conforms to &lt;c5&gt;Equatable&lt;/c5&gt;, &lt;c6&gt;D&lt;/c6&gt; conforms to &lt;c7&gt;Equatable&lt;/c7&gt;, &lt;c8&gt;E&lt;/c8&gt; conforms to &lt;c9&gt;Equatable&lt;/c9&gt;, &lt;c10&gt;F&lt;/c10&gt; conforms to &lt;c11&gt;Equatable&lt;/c11&gt;, &lt;c12&gt;G&lt;/c12&gt; conforms to &lt;c13&gt;Equatable&lt;/c13&gt;, and &lt;c14&gt;H&lt;/c14&gt; conforms to &lt;c15&gt;Equatable&lt;/c15&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;A&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する、&lt;c2&gt;B&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する、&lt;c4&gt;C&lt;/c4&gt;が&lt;c5&gt;Equatable&lt;/c5&gt;に準拠する、&lt;c6&gt;D&lt;/c6&gt;が&lt;c7&gt;Equatable&lt;/c7&gt;に準拠する、&lt;c8&gt;E&lt;/c8&gt;が&lt;c9&gt;Equatable&lt;/c9&gt;に準拠する、&lt;c10&gt;F&lt;/c10&gt;が&lt;c11&gt;Equatable&lt;/c11&gt;に準拠する、&lt;c12&gt;G&lt;/c12&gt;が&lt;c13&gt;Equatable&lt;/c13&gt;に準拠する、そして&lt;c14&gt;H&lt;/c14&gt;が&lt;c15&gt;Equatable&lt;/c15&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;A&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;, &lt;c2&gt;B&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;, &lt;c4&gt;C&lt;/c4&gt; conforms to &lt;c5&gt;Equatable&lt;/c5&gt;, &lt;c6&gt;D&lt;/c6&gt; conforms to &lt;c7&gt;Equatable&lt;/c7&gt;, &lt;c8&gt;E&lt;/c8&gt; conforms to &lt;c9&gt;Equatable&lt;/c9&gt;, &lt;c10&gt;F&lt;/c10&gt; conforms to &lt;c11&gt;Equatable&lt;/c11&gt;, and &lt;c12&gt;G&lt;/c12&gt; conforms to &lt;c13&gt;Equatable&lt;/c13&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;A&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する、&lt;c2&gt;B&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する、&lt;c4&gt;C&lt;/c4&gt;が&lt;c5&gt;Equatable&lt;/c5&gt;に準拠する、&lt;c6&gt;D&lt;/c6&gt;が&lt;c7&gt;Equatable&lt;/c7&gt;に準拠する、&lt;c8&gt;E&lt;/c8&gt;が&lt;c9&gt;Equatable&lt;/c9&gt;に準拠する、&lt;c10&gt;F&lt;/c10&gt;が&lt;c11&gt;Equatable&lt;/c11&gt;に準拠する、そして&lt;c12&gt;G&lt;/c12&gt;が&lt;c13&gt;Equatable&lt;/c13&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;A&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;, &lt;c2&gt;B&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;, &lt;c4&gt;C&lt;/c4&gt; conforms to &lt;c5&gt;Equatable&lt;/c5&gt;, &lt;c6&gt;D&lt;/c6&gt; conforms to &lt;c7&gt;Equatable&lt;/c7&gt;, &lt;c8&gt;E&lt;/c8&gt; conforms to &lt;c9&gt;Equatable&lt;/c9&gt;, and &lt;c10&gt;F&lt;/c10&gt; conforms to &lt;c11&gt;Equatable&lt;/c11&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;A&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する、&lt;c2&gt;B&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する、&lt;c4&gt;C&lt;/c4&gt;が&lt;c5&gt;Equatable&lt;/c5&gt;に準拠する、&lt;c6&gt;D&lt;/c6&gt;が&lt;c7&gt;Equatable&lt;/c7&gt;に準拠する、&lt;c8&gt;E&lt;/c8&gt;が&lt;c9&gt;Equatable&lt;/c9&gt;に準拠する、そして&lt;c10&gt;F&lt;/c10&gt;が&lt;c11&gt;Equatable&lt;/c11&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;A&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;, &lt;c2&gt;B&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;, &lt;c4&gt;C&lt;/c4&gt; conforms to &lt;c5&gt;Equatable&lt;/c5&gt;, &lt;c6&gt;D&lt;/c6&gt; conforms to &lt;c7&gt;Equatable&lt;/c7&gt;, and &lt;c8&gt;E&lt;/c8&gt; conforms to &lt;c9&gt;Equatable&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;A&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する、&lt;c2&gt;B&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する、&lt;c4&gt;C&lt;/c4&gt;が&lt;c5&gt;Equatable&lt;/c5&gt;に準拠する、&lt;c6&gt;D&lt;/c6&gt;が&lt;c7&gt;Equatable&lt;/c7&gt;に準拠する、そして&lt;c8&gt;E&lt;/c8&gt;が&lt;c9&gt;Equatable&lt;/c9&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;A&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;, &lt;c2&gt;B&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;, &lt;c4&gt;C&lt;/c4&gt; conforms to &lt;c5&gt;Equatable&lt;/c5&gt;, and &lt;c6&gt;D&lt;/c6&gt; conforms to &lt;c7&gt;Equatable&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;A&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する、&lt;c2&gt;B&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する、&lt;c4&gt;C&lt;/c4&gt;が&lt;c5&gt;Equatable&lt;/c5&gt;に準拠する、そして&lt;c6&gt;D&lt;/c6&gt;が&lt;c7&gt;Equatable&lt;/c7&gt;に準拠する場合に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;A&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;, &lt;c2&gt;B&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;, and &lt;c4&gt;C&lt;/c4&gt; conforms to &lt;c5&gt;Equatable&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;A&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する、&lt;c2&gt;B&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する、そして&lt;c4&gt;C&lt;/c4&gt;が&lt;c5&gt;Equatable&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;Base&lt;/c3&gt;&lt;c4&gt;.&lt;/c4&gt;&lt;c5&gt;Index&lt;/c5&gt; conforms to &lt;c6&gt;Hashable&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c3&gt;Base&lt;/c3&gt;&lt;c4&gt;.&lt;/c4&gt;&lt;c5&gt;Index&lt;/c5&gt;が&lt;c6&gt;Hashable&lt;/c6&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Collection&lt;/c1&gt; and &lt;c2&gt;Base&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Index&lt;/c4&gt; conforms to &lt;c5&gt;Hashable&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Collection&lt;/c1&gt;に準拠するそして&lt;c2&gt;Base&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Index&lt;/c4&gt;が&lt;c5&gt;Hashable&lt;/c5&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Collection&lt;/c1&gt;, &lt;c2&gt;Base&lt;w3&gt;.Element&lt;/w3&gt;&lt;/c2&gt; conforms to &lt;c4&gt;Collection&lt;/c4&gt;, &lt;c5&gt;Base&lt;/c5&gt;&lt;c6&gt;.&lt;/c6&gt;&lt;c7&gt;Index&lt;/c7&gt; conforms to &lt;c8&gt;Hashable&lt;/c8&gt;, and &lt;c9&gt;Base&lt;/c9&gt;&lt;c10&gt;.&lt;/c10&gt;&lt;c11&gt;Element&lt;/c11&gt;&lt;c12&gt;.&lt;/c12&gt;&lt;c13&gt;Index&lt;/c13&gt; conforms to &lt;c14&gt;Hashable&lt;/c14&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Collection&lt;/c1&gt;に準拠する、&lt;c2&gt;Base&lt;w3&gt;.Element&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Collection&lt;/c4&gt;に準拠する、&lt;c5&gt;Base&lt;/c5&gt;&lt;c6&gt;.&lt;/c6&gt;&lt;c7&gt;Index&lt;/c7&gt;が&lt;c8&gt;Hashable&lt;/c8&gt;に準拠する、そして&lt;c9&gt;Base&lt;/c9&gt;&lt;c10&gt;.&lt;/c10&gt;&lt;c11&gt;Element&lt;/c11&gt;&lt;c12&gt;.&lt;/c12&gt;&lt;c13&gt;Index&lt;/c13&gt;が&lt;c14&gt;Hashable&lt;/c14&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;, &lt;c2&gt;Bound&lt;/c2&gt; conforms to &lt;c3&gt;Strideable&lt;/c3&gt;, and &lt;c4&gt;Bound&lt;w5&gt;.Stride&lt;/w5&gt;&lt;/c4&gt; conforms to &lt;c6&gt;Signed&lt;w7&gt;Integer&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する、&lt;c2&gt;Bound&lt;/c2&gt;が&lt;c3&gt;Strideable&lt;/c3&gt;に準拠する、そして&lt;c4&gt;Bound&lt;w5&gt;.Stride&lt;/w5&gt;&lt;/c4&gt;が&lt;c6&gt;Signed&lt;w7&gt;Integer&lt;/w7&gt;&lt;/c6&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Strideable&lt;/c1&gt; and &lt;c2&gt;Bound&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Stride&lt;/c4&gt; conforms to &lt;c5&gt;Signed&lt;w6&gt;Integer&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Strideable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Bound&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Stride&lt;/c4&gt;が&lt;c5&gt;Signed&lt;w6&gt;Integer&lt;/w6&gt;&lt;/c5&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; is &lt;c1&gt;Int&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Int&lt;/c1&gt;である時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Decodable&lt;/c2&gt; and &lt;c3&gt;Encodable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Decodable&lt;/c2&gt;と&lt;c3&gt;Encodable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Equatable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Equatable&lt;/c2&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Hashable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Hashable&lt;/c2&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Content&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;Modifier&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Content&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Modifier&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;CKRecord&lt;w2&gt;Value&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;CKRecord&lt;w2&gt;Value&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;w2&gt;With&lt;w3&gt;Configuration&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;w2&gt;With&lt;w3&gt;Configuration&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;w2&gt;With&lt;w3&gt;Configuration&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;w2&gt;With&lt;w3&gt;Configuration&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;UInt8&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;UInt8&lt;/c1&gt;である場合に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Elements&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Elements&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Failure&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Failure&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Failure&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Failure&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Failure&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Failure&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Failure&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Failure&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;First&lt;/c0&gt; conforms to &lt;c1&gt;Gesture&lt;/c1&gt;, &lt;c2&gt;Second&lt;/c2&gt; conforms to &lt;c3&gt;Gesture&lt;/c3&gt;, &lt;c4&gt;First&lt;/c4&gt;&lt;c5&gt;.&lt;/c5&gt;&lt;c6&gt;Value&lt;/c6&gt; conforms to &lt;c7&gt;Equatable&lt;/c7&gt;, and &lt;c8&gt;Second&lt;/c8&gt;&lt;c9&gt;.&lt;/c9&gt;&lt;c10&gt;Value&lt;/c10&gt; conforms to &lt;c11&gt;Equatable&lt;/c11&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;First&lt;/c0&gt;が&lt;c1&gt;Gesture&lt;/c1&gt;に準拠する、&lt;c2&gt;Second&lt;/c2&gt;が&lt;c3&gt;Gesture&lt;/c3&gt;に準拠する、&lt;c4&gt;First&lt;/c4&gt;&lt;c5&gt;.&lt;/c5&gt;&lt;c6&gt;Value&lt;/c6&gt;が&lt;c7&gt;Equatable&lt;/c7&gt;に準拠する、そして&lt;c8&gt;Second&lt;/c8&gt;&lt;c9&gt;.&lt;/c9&gt;&lt;c10&gt;Value&lt;/c10&gt;が&lt;c11&gt;Equatable&lt;/c11&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;First&lt;/c0&gt; conforms to &lt;c1&gt;Gesture&lt;/c1&gt;, &lt;c2&gt;Second&lt;/c2&gt; conforms to &lt;c3&gt;Gesture&lt;/c3&gt;, &lt;c4&gt;First&lt;/c4&gt;&lt;c5&gt;.&lt;/c5&gt;&lt;c6&gt;Value&lt;/c6&gt; conforms to &lt;c7&gt;Hashable&lt;/c7&gt;, and &lt;c8&gt;Second&lt;/c8&gt;&lt;c9&gt;.&lt;/c9&gt;&lt;c10&gt;Value&lt;/c10&gt; conforms to &lt;c11&gt;Hashable&lt;/c11&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;First&lt;/c0&gt;が&lt;c1&gt;Gesture&lt;/c1&gt;に準拠する、&lt;c2&gt;Second&lt;/c2&gt;が&lt;c3&gt;Gesture&lt;/c3&gt;に準拠する、&lt;c4&gt;First&lt;/c4&gt;&lt;c5&gt;.&lt;/c5&gt;&lt;c6&gt;Value&lt;/c6&gt;が&lt;c7&gt;Hashable&lt;/c7&gt;に準拠する、そして&lt;c8&gt;Second&lt;/c8&gt;&lt;c9&gt;.&lt;/c9&gt;&lt;c10&gt;Value&lt;/c10&gt;が&lt;c11&gt;Hashable&lt;/c11&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;ID&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;ID&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Key&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Value&lt;/c2&gt; conforms to &lt;c3&gt;Decodable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Value&lt;/c2&gt;が&lt;c3&gt;Decodable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Key&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Value&lt;/c2&gt; conforms to &lt;c3&gt;Encodable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Value&lt;/c2&gt;が&lt;c3&gt;Encodable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Key&lt;/c0&gt; conforms to &lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and &lt;c4&gt;Value&lt;/c4&gt; conforms to &lt;c5&gt;MLData&lt;w6&gt;Value&lt;w7&gt;Convertible&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;/c0&gt;が&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c4&gt;Value&lt;/c4&gt;が&lt;c5&gt;MLData&lt;w6&gt;Value&lt;w7&gt;Convertible&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Music&lt;w1&gt;Item&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Decodable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Music&lt;w1&gt;Item&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Decodable&lt;/c3&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Music&lt;w1&gt;Item&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Encodable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Music&lt;w1&gt;Item&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Encodable&lt;/c3&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Music&lt;w1&gt;Item&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Music&lt;w1&gt;Item&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Music&lt;w1&gt;Item&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c3&gt;Hashable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Music&lt;w1&gt;Item&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Hashable&lt;/c3&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Output&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;, &lt;c2&gt;Output&lt;/c2&gt; conforms to &lt;c3&gt;Encodable&lt;/c3&gt;, &lt;c4&gt;Failure&lt;/c4&gt; conforms to &lt;c5&gt;Decodable&lt;/c5&gt;, &lt;c6&gt;Failure&lt;/c6&gt; conforms to &lt;c7&gt;Encodable&lt;/c7&gt;, and &lt;c8&gt;Failure&lt;/c8&gt; conforms to &lt;c9&gt;Error&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Output&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する、&lt;c2&gt;Output&lt;/c2&gt;が&lt;c3&gt;Encodable&lt;/c3&gt;に準拠する、&lt;c4&gt;Failure&lt;/c4&gt;が&lt;c5&gt;Decodable&lt;/c5&gt;に準拠する、&lt;c6&gt;Failure&lt;/c6&gt;が&lt;c7&gt;Encodable&lt;/c7&gt;に準拠する、そして&lt;c8&gt;Failure&lt;/c8&gt;が&lt;c9&gt;Error&lt;/c9&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Output&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;, &lt;c2&gt;Output&lt;/c2&gt; conforms to &lt;c3&gt;Encodable&lt;/c3&gt;, &lt;c4&gt;Failure&lt;/c4&gt; conforms to &lt;c5&gt;Decodable&lt;/c5&gt;, and &lt;c6&gt;Failure&lt;/c6&gt; conforms to &lt;c7&gt;Encodable&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Output&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する、&lt;c2&gt;Output&lt;/c2&gt;が&lt;c3&gt;Encodable&lt;/c3&gt;に準拠する、&lt;c4&gt;Failure&lt;/c4&gt;が&lt;c5&gt;Decodable&lt;/c5&gt;に準拠する、そして&lt;c6&gt;Failure&lt;/c6&gt;が&lt;c7&gt;Encodable&lt;/c7&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Output&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Output&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Prefix&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;Suffix&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Prefix&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Suffix&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Signed&lt;w1&gt;Type&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Custom&lt;w3&gt;Debug&lt;w4&gt;String&lt;w5&gt;Convertible&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Signed&lt;w1&gt;Type&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Custom&lt;w3&gt;Debug&lt;w4&gt;String&lt;w5&gt;Convertible&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Signed&lt;w1&gt;Type&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Equatable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Signed&lt;w1&gt;Type&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Equatable&lt;/c2&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Signed&lt;w1&gt;Type&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Hashable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Signed&lt;w1&gt;Type&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Hashable&lt;/c2&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Success&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;Failure&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Success&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Failure&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Success&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt; and &lt;c2&gt;Failure&lt;/c2&gt; conforms to &lt;c3&gt;Hashable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Success&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Failure&lt;/c2&gt;が&lt;c3&gt;Hashable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;T&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;T&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Upstream&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;Other&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Upstream&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Other&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Upstream&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;Upstream&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Output&lt;/c4&gt; conforms to &lt;c5&gt;Equatable&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Upstream&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Upstream&lt;/c2&gt;&lt;c3&gt;.&lt;/c3&gt;&lt;c4&gt;Output&lt;/c4&gt;が&lt;c5&gt;Equatable&lt;/c5&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Upstream&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Upstream&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;Mutable&lt;w4&gt;Collection&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;と&lt;c3&gt;Mutable&lt;w4&gt;Collection&lt;/w4&gt;&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;Identifiable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;Identifiable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;Mutable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;Mutable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Decodable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Decodable&lt;/c2&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Encodable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Encodable&lt;/c2&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Equatable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Equatable&lt;/c2&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Hashable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Hashable&lt;/c2&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider a class called &lt;c0&gt;Integer&lt;w1&gt;Ref&lt;/w1&gt;&lt;/c0&gt; that wraps an integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Integer&lt;w1&gt;Ref&lt;/w1&gt;&lt;/c0&gt;と呼ばれるクラスを考えてください、それはある整数値をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider the following recommendations to help choose which option makes sense when adding a new data type to your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の忠告を考慮して、どちらの選択が道理にかなっているか、新しいデータ型をあなたのアプリに追加する時に選択する助けにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Construct a AsyncStream buffering given an Element type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたElement型をバッファするAsyncStreamを組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Construct a AsyncThrowingStream buffering given an Element type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたElement型をバッファするAsyncThrowingStreamを組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Construct an iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるイテレータを組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consult the IEEE 754 standard for additional details.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>IEEE 754標準をさらなる詳細として参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Continuations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな継続</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its &lt;c1&gt;count&lt;/c1&gt; property is an O(&lt;e2&gt;n&lt;/e2&gt;) operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>反対に、前方または双方向性のコレクションはコレクション全体を辿っていくことで含まれる要素の数を数えるので、それの&lt;c1&gt;count&lt;/c1&gt;プロパティにアクセスすることはO(&lt;e2&gt;n&lt;/e2&gt;)演算になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conversion from a pointer to an integer value with the bit pattern of the pointer’s address in memory, or vice versa.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるポインタからそのポインタのもつメモリでのアドレスのビットパターンをもつ整数値への変換、またはその逆。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convert Unmanaged Objects to Memory-Managed Objects</seg>
      </tuv>
      <tuv lang="ja">
        <seg>管理されないオブジェクトをメモリ管理オブジェクトに変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Between Arrays and Create ML Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列間で変換するそしてML型を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Between Dictionaries and Create ML Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の間で変換してML型を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Between Numeric Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数値型の間で変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Floating-Point Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Integers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Pointers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタの変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Ranges</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting an NSNumber to a Boolean</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NSNumberをブールに変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting with No Loss of Precision</seg>
      </tuv>
      <tuv lang="ja">
        <seg>精度の損失なしに変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Core Foundation objects returned from annotated APIs are automatically memory-managed in Swift—you don't need to invoke the &lt;c0&gt;CFRetain&lt;/c0&gt;, &lt;c1&gt;CFRelease&lt;/c1&gt;, or &lt;c2&gt;CFAutorelease&lt;/c2&gt; functions yourself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注釈をつけられたAPIから返されるCore Foundationオブジェクトは、自動的にSwiftにおいてメモリ管理されます ― あなたは、&lt;c0&gt;CFRetain&lt;/c0&gt;、&lt;c1&gt;CFRelease&lt;/c1&gt;、または&lt;c2&gt;CFAutorelease&lt;/c2&gt;関数をあなた自身で呼び出す必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a Singleton</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シングルトンの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a new dictionary by using a dictionary literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい辞書を辞書リテラルを使って作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a new range using the closed range operator (&lt;c0&gt;...&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい範囲を完結範囲演算子（&lt;c0&gt;...&lt;/c0&gt;）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a slice of the &lt;c0&gt;absences&lt;/c0&gt; array starting after the index found in step 1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;absences&lt;/c0&gt;配列のスライスを、手順１で見つけたインデックスの後から開始して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a slice of the &lt;c0&gt;absences&lt;/c0&gt; array that holds the second half of the days.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>学期後半の日付を保持する、&lt;c0&gt;absences&lt;/c0&gt;配列のスライスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create an enumeration that conforms to the &lt;c0&gt;Error&lt;/c0&gt; protocol with a case for each possible error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Error&lt;/c0&gt;プロトコルに準拠する列挙を、各ありうるエラーに対して１つのケース節で作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create instances of &lt;c1&gt;Bool&lt;/c1&gt; by using one of the Boolean literals &lt;c2&gt;true&lt;/c2&gt; or &lt;c3&gt;false&lt;/c3&gt;, or by assigning the result of a Boolean method or operation to a variable or constant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Bool&lt;/c1&gt;のインスタンスをブールリテラルの&lt;c2&gt;true&lt;/c2&gt;または&lt;c3&gt;false&lt;/c3&gt;のうち１つを使うことによって、またはブールのメソッドや演算の結果を変数や定数に代入することによって作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create new instances of floating-point types using integer or floating-point literals.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型の新しいインスタンスを、整数または浮動小数点リテラルを使って作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a Boolean from an integer wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブールをあるデータ値の中にラップされる整数から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a NaN (“not a number”) value with the specified payload.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたペイロードをもつNaN（「非数」）値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a character containing the given Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラー値を含んでいるひとつの文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a character from a single-character string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一文字の文字列から１つの文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a character with the specified value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値でひとつの文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a checked continuation from an unsafe continuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>検査済み継続を非安全継続から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a collection containing the specified number of the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の与えられた要素を含んでいるコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a dictionary by merging key-value pairs in a sequence into the dictionary, using a combining closure to determine the value for duplicate keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書を作成します、あるシーケンスの中のキー値ペアをその辞書に合併させることによってです、結合用のクロージャを使って重複キーに対する値を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a dictionary by merging the given dictionary into this dictionary, using a combining closure to determine the value for duplicate keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた辞書をこの辞書へと結合することによって１つの辞書を作成します、結び付けられているクロージャを使って何らかの重複キーに対して値を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a dictionary initialized with a dictionary literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書リテラルで初期化される辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a dictionary that contains the keys and values from an attribute container, using a specified attribute scope.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書を作成します、それはキーと値をある属性コンテナから含むものです、ある指定された属性スコープを使っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a dictionary that contains the keys and values from an attribute container, using an attribute scope that a key path identifies.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書を作成します、それはキーと値をある属性コンテナから含むものです、ある属性スコープを使っていてそれはあるキーパスを識別します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a double from another double wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるdoubleをデータ値の中にラップされる別のdoubleから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new Boolean value from the given string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列から新しいブール値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new array by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい配列を指定のエンコーダからエンコードすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new array containing the specified number of a single, repeated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の、ある単一の値の繰り返しを含んでいる新しい配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection by concatenating the elements of a collection and a sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションとあるシーケンスの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection by concatenating the elements of a sequence and a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスとあるコレクションの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection by concatenating the elements of two collections.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのコレクションの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection difference from a collection of changes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいコレクション差異を、変更それらからなるあるコレクションから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new context with the given path of coding keys and a description of what went wrong.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたコーディングキーのパスと何がうまくいかなかったかの説明で新しいコンテキストを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new contiguous array by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい隣接配列をこの与えられたデコーダから復号することによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new dictionary by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい辞書を、指定のデコーダからデコードすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new dictionary from the key-value pairs in the given sequence, using a combining closure to determine the value for any duplicate keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい辞書を、与えられたシーケンスの中のキー値ペアから作成します、結合用のクロージャを使って何らかの重複キーに対して値を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new dictionary from the key-value pairs in the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい辞書を、与えられたシーケンスの中のキー値ペアから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new dictionary whose keys are the groupings returned by the given closure and whose values are arrays of the elements that returned each key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい辞書を作成します、それのキーは与えられたクロージャによって返されるグループ分けです、そしてそれの値はいくらかの要素からなる配列で、それが各キーで返されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new floating-point value using the sign of one value and the magnitude of another.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の符号ともう一方の規模とを使って新しい浮動小数点値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいハーシャーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new index wrapping &lt;c0&gt;base&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;base&lt;/c0&gt;をラップしている新しいインデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたデコーダからデコードすることで新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from an interpolated string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスを補間文字列リテラルから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the bit pattern of the given instance by sign-extending or truncating to fit this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型に適合するように符号拡張または切り詰めることによって、指定インスタンスのビットパターンから新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もしこの型に適合するのに必要ならば切り詰めるか符号拡張によって、指定インスタンスのビットパターンから新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given integer, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数から新しいインスタンスを作成します、もしそれが正確に表現できるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数から新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値から新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given value, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられた値から作成します、もしそれが正確に表現できるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given value, rounded to the closest possible representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値から新しいインスタンスを作成します、最も近い可能な表現に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the specified integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された整数から新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the specified sign and bit patterns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された符号とビットパターンから新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance initialized to the given value, if it can be represented without rounding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それが丸めなしに表されるならば、与えられた値に初期化される新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance initialized to the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値に初期化される新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance of a collection containing the elements of a sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスの要素を含んでいるあるコレクションの新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance that approximates the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値におおよそ相当する新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the given raw value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた生の値で新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the representable value that’s closest to the given integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数に最も近い表現可能な値を使って新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the same memory representation as the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値と同じメモリ表現で新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the specified raw value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された生の値を持つ新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new integer value from the given string and radix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列と基数から新しい整数値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new integer value from the given string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列から新しい整数値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new pointer from the given address, specified as a bit pattern.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいポインタをこの与えられたアドレスから作成します、ビットパターンとして指定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new pointer from the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいボインタをこの与えられたポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new sequence that wraps and forwards operations to &lt;c0&gt;base&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;base&lt;/c0&gt;をラップしてそれへと演算を転送する新規シーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new typed pointer from the given opaque pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた不透明ポインタから新しい型付ポインタを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロに等しい新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value from the given sign, exponent, and significand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた符号、指数、そして仮数から新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value with the bit pattern of the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたポインタのビットパターンで新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value with the given bit pattern.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたビットパターンから新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value, if the given integer can be represented exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数が正確に表現できるならば、新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value, rounded to the closest possible representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値を作成します、最も近い可能な表現へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new vector by decoding scalars from the given decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しいベクターをこの与えられたデコーダからスカラーをデコードすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new, empty array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい、空の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a sequence of pairs built out of two underlying sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの根底にあるシーケンスから組み立てられるペアからなるシーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a sequence whose &lt;c0&gt;make&lt;w1&gt;Iterator()&lt;/w1&gt;&lt;/c0&gt; method forwards to &lt;c2&gt;make&lt;w3&gt;Underlying&lt;w4&gt;Iterator&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの&lt;c0&gt;make&lt;w1&gt;Iterator()&lt;/w1&gt;&lt;/c0&gt;メソッドを&lt;c2&gt;make&lt;w3&gt;Underlying&lt;w4&gt;Iterator&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;へと転送するあるシーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a set containing the elements of the given array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた配列リテラルの要素を含んでいる集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string interpolation with storage pre-sized for a literal with the indicated attributes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるリテラルに対してあらかじめサイズ指定されるストレージで、指し示される属性で、文字列補間を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a type-erased collection that wraps the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたコレクションをラップする型消去コレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a type-erased hashable value that wraps the given instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去ハッシュ可能値を作成します、それは与えられたインスタンスをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a value initialized to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロに初期化される値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a vector from the specified elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるベクターをこの指定された要素それらから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a vector with zero in all lanes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるベクターを全レーンにおいてゼロで作成します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an &lt;c0&gt;Any&lt;w1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; having the same underlying collection as &lt;c3&gt;other&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を作成します、&lt;c3&gt;other&lt;/c3&gt;と同じ基礎をなすコレクションを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an &lt;c0&gt;Any&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt; having the same underlying collection as &lt;c2&gt;other&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;を作成します、&lt;c2&gt;other&lt;/c2&gt;と同じ基礎をなすコレクションを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an &lt;c0&gt;Any&lt;w1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; having the same underlying collection as &lt;c4&gt;other&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を作成します、&lt;c4&gt;other&lt;/c4&gt;と同じ基盤コレクションを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an array containing the elements of a sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスの要素を含んでいる配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an array from a column in a machine learning data table.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>機械学習データテーブルの縦列から配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an array from a data-value dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列をデータ値辞書から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an array from a dictionary wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある配列をあるデータ値の中にラップされる辞書から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an array from a sequence wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある配列をあるデータ値の中にラップされるシーケンスから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an array from an untyped column in a machine learning data table.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>機械学習データテーブルの型無し縦列から配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an array from the given array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された配列リテラルから配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an array with the specified capacity, then calls the given closure with a buffer covering the array’s uninitialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい配列をこの指定された収納能力で作成します、それから与えられたクロージャを、配列のもつ初期化されないメモリを含むバッファで呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは与えられたエラースロー変換をこのシーケンスの各要素で呼び出すことの結果を連結します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは与えられた変換をこのシーケンスの各要素で呼び出すことの結果を連結します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは基底シーケンスの要素それらを、順番に含みます、それらは与えられたエラースロー述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは基底シーケンスの要素それらを、順番に含みます、それらは与えられた述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それはあるエラースロークロージャを基底シーケンスのもつ要素のすべてにわたってマップします、値を返さない結果を省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは与えられたクロージャを非同期シーケンスのもつ要素のすべてにわたってマップします、値を返さない結果を省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは与えられたクロージャを非同期シーケンスのもつ要素のすべてにわたってマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを作成します、それは与えられたエラースロークロージャを非同期シーケンスのもつ要素のすべてにわたってマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty dictionary with preallocated space for at least the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の辞書を、あらかじめアロケートされたスペースで少なくとも指定された要素数に対して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance containing just the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素だけを含んでいるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance equal to the given Boolean value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたブール値と同じインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance equivalent to the given &lt;c0&gt;Range&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた&lt;c0&gt;Range&lt;/c0&gt;と等しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance from a string interpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列補間からインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to &lt;c0&gt;false&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;false&lt;/c0&gt;に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the given Boolean value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたブール値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the given string value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列値へ初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the specified Boolean literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたブールリテラルに初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the specified floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された浮動小数点値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the specified integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された整数値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized with &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;nil&lt;/c0&gt;で初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized with the given elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素で初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized with the given key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた「キー値」ペアで初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance of the drop-while sequence iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drop-whileシーケンスイテレータのあるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance with the given bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた境界を使ってインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from another integer wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数をデータ値の中にラップされる別の整数から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from its big-endian representation, changing the byte order if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのビッグエンディアン表現から整数を作成します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from its little-endian representation, changing the byte order if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのリトルエンディアン表現から整数を作成します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from the given floating-point value, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた浮動小数点値から整数を作成します、もしそれが正確に表現可能ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from the given floating-point value, rounding toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた浮動小数点値から整数を作成します、ゼロへの丸めを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer that captures the full value of the given object identifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクト識別子の完全な値を捕獲する整数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an iterator that wraps a base iterator but whose type depends only on the base iterator’s element type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基盤イテレータをラップするイテレータを作成します、しかしそれの型は基盤イテレータのもつ要素型にのみ影響を受けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an iterator that wraps the given closure in its &lt;c0&gt;next()&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャをそれの&lt;c0&gt;next()&lt;/c0&gt;の中にラップするイテレータを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates the asynchronous iterator that produces elements of this asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期イテレータを作成します、それはこの非同期シーケンスの要素を取り出すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Binary Integer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２進整数を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Boolean From Another Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の値からあるブールを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Character</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Dictionary</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Dictionary from an Attribute Container</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書を属性コンテナから作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Hasher</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャーを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Random Integer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為な整数を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Random Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為な値を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Range Expression</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Type That Supports Custom String Interpolation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえの文字列補間をサボートする型を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Type That Supports the Default String Interpolation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の文字列補間をサポートする型を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating an Array</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating an Iterator</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating and Applying Differences</seg>
      </tuv>
      <tuv lang="ja">
        <seg>差異の作成と適用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Custom Encoding and Decoding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>カスタムエンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customize NSObject Subclass Behavior</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NSObjectサブクラス挙動をカスタマイズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing Your Type's Reflection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のリフレクションのカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Data Flow and Control Flow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データの流れと制御の流れ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Data Modeling</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データモデリング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Debugging and Reflection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デバッグとリフレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decide how to store data and model behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのようにデータを格納して挙動をモデル化するか決定を下します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decimal floating-point types admit a large number of non-canonical encodings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>10進浮動小数点型は、多数の非正準エンコーディングを認めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaration</seg>
      </tuv>
      <tuv lang="ja">
        <seg>宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declarations marked with the &lt;c3&gt;private&lt;/c3&gt; or &lt;c4&gt;fileprivate&lt;/c4&gt; modifier don't appear in the generated header, and aren't exposed to the Objective-C runtime unless they are explicitly marked with a &lt;c5&gt;@IBAction&lt;/c5&gt;, &lt;c6&gt;@IBOutlet&lt;/c6&gt;, or &lt;c7&gt;@objc&lt;/c7&gt; attribute.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;private&lt;/c3&gt;または&lt;c4&gt;fileprivate&lt;/c4&gt;修飾子で印された宣言は生成されたヘッダに現れません、そしてObjective-Cランタイムに露出されません、それらが明示的に&lt;c5&gt;@IBAction&lt;/c5&gt;、&lt;c6&gt;@IBOutlet&lt;/c6&gt;、または&lt;c7&gt;@objc&lt;/c7&gt;属性で印されない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring Iterator Topography</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータの構造的特徴を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring conformance to the &lt;c0&gt;CVar&lt;w1&gt;Arg&lt;/w1&gt;&lt;/c0&gt; protocol for types defined outside the standard library is not supported.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリ外で定義される型に対して&lt;c0&gt;CVar&lt;w1&gt;Arg&lt;/w1&gt;&lt;/c0&gt;プロトコルへの準拠を宣言することは、サポートされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default Literal Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時のリテラル型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Define an Observer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブザーバを定義する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Delegate methods can customize how an app responds to an event.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>委任先メソッドは、どのようにアプリがイベントに応答するかをカスタマイズできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depending on the size and span of &lt;c2&gt;range&lt;/c2&gt;, some concrete values may be represented more frequently than others.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;range&lt;/c2&gt;の大きさと幅に依存して、いくつかの具体的な値は他のものよりずっと頻繁に表現されるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depending on the size and span of &lt;c3&gt;range&lt;/c3&gt;, some concrete values may be represented more frequently than others.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;range&lt;/c3&gt;の大きさと幅に依存して、いくつかの具体的な値は他のものよりずっと頻繁に表現されるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deprecated</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非推奨</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a Boolean</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブールを記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a Character</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字の説明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a Dictionary</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書の記述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a Double</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるDoubleの記述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a Float</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Floatを記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing an Array</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing an Error</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラーを記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing an Integer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dictionaries are empty when created with an initializer or an empty dictionary literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書は、イニシャライザまたは空の辞書リテラルで作成した場合は空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dictionary has two subscripting interfaces:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書は２つの添え字インターフェイスを持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Digest Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要約実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Discussion</seg>
      </tuv>
      <tuv lang="ja">
        <seg>解説</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divides the first value by the second and stores the quotient in the left-hand-side variable, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算して、商を左手側の変数に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divides the first value by the second and stores the quotient in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算して、商を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divides the first value by the second and stores the remainder in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算して、余りを左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dividing by zero is not an error when using this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロによる除算は、このメソッドを使う場合はエラーではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not call this initializer directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを直接に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not call this method directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを直接に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not create an instance of this type directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型のインスタンスを直接に作成しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not escape it from the closure for later use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それを後で使うためにクロージャから脱出させないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not rely on &lt;c2&gt;Any&lt;w3&gt;Hashable&lt;/w3&gt;&lt;/c2&gt; generating such compatible hashes, as the hash encoding that it uses may change between any two releases of the standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Any&lt;w3&gt;Hashable&lt;/w3&gt;&lt;/c2&gt;がこのような比較可能ハッシュを生成することを当てにしないでください、それが使うハッシュ符号化が標準ライブラリの何らかの２つのリリースの間に変化するかもしれないので。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not rely on a previously stored index value after altering a collection with any operation that can change its length.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションをそれの長さを変える何らかの演算で手直し後に、以前に格納されたインデックス値を当てにしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not rely on anything about the array that is the target of this method during execution of the &lt;c0&gt;body&lt;/c0&gt; closure; it might not appear to have its correct value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドのターゲットである配列について&lt;c0&gt;body&lt;/c0&gt;クロージャの実行の間に何であれ依存しないでください：それは、それの正しい値を持つように見えないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not save hash values to use during a future execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>将来の実行の間に使うためにハッシュ値を保存しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not save or otherwise reuse hash values across executions of your program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのプログラムの実行それらにまたがってハッシュ値を保存または別なふうに再利用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not store or return the pointer for later use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>後で使うためにポインタを格納したり返したりしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not use &lt;c6&gt;unsafe&lt;w7&gt;Bit&lt;w8&gt;Cast(_:&lt;w9&gt;to:)&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; with class or pointer types; doing so may introduce undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;unsafe&lt;w7&gt;Bit&lt;w8&gt;Cast(_:&lt;w9&gt;to:)&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;をクラスまたはポインタ型で使わないでください；そうすることは未定義挙動を導きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not use this subscript to modify dictionary values if the dictionary’s &lt;c0&gt;Value&lt;/c0&gt; type is a class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この添え字を使って、辞書値を修正しないでください、もしその辞書の持つ&lt;c0&gt;Value&lt;/c0&gt;型がクラスであるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Doesn’t check for cancellation, and always executes the passed &lt;c0&gt;operation&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取り消しを調べないでください、そして常に渡された&lt;c0&gt;operation&lt;/c0&gt;を遂行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Doing so may become a compile-time error in the future.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうすることは、コンパイル時エラーに将来はなるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t call this initializer directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを直に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t expect any particular ordering of key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの特定のキー値ペア順番付けを当てにしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t store an unsafe task handle for use outside this method’s closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非安全タスクハンドルをこのメソッドのもつクロージャの外側で使うために格納しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t use the equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) to test whether a value is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等演算子（&lt;c0&gt;==&lt;/c0&gt;を使ってある値がNaNかどうかをテストしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t use this property to check whether a floating point value is negative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティを使って浮動小数点値が負かどうか調べないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Downcast Objects to Call Methods and Access Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブジェクトをダウンキャストしてメソッドの呼び出しおよびプロパティにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dumps the given object’s contents using its mirror to standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクトの内容をそれのミラーを使って標準出力にダンプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dumps the given object’s contents using its mirror to the specified output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクトの内容をそれのミラーを使って指定出力ストリームにダンプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>During the registration period, you need to add and remove names as students add and drop the class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>履修期間の間、あなたはそのクラスに生徒を加えたり落としたりするたびに名前を加えたり取り除いたりする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dynamic Sequences</seg>
      </tuv>
      <tuv lang="ja">
        <seg>動的なシーケンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each array has an independent value that includes the values of all of its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各配列はひとつの独立した値を持ち、それはそれのいくらかある要素の値すべてを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each element of the result is the maximum of the corresponding elements of the inputs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の各要素は、入力の対応する要素それらの最大です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each element of the result is the minimum of the corresponding elements of the inputs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の各要素は、入力の対応する要素それらの最小です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each entry in the table is identified using its key, which is a hashable type such as a string or number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのテーブル（表）の中の登録項目はそれのキーを使って特定され、そのキーはハッシュ化型、例えば文字列や数などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each floating-point type has its own possible range and precision.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各浮動小数点型は、それ独自の可能な範囲と精度を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each key in &lt;c0&gt;elements&lt;/c0&gt; must be unique.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各キーは&lt;c0&gt;elements&lt;/c0&gt;において特有でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each key in the keys collection has a unique value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーコレクションの中の各キーは、特有な値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each value in the sequence is separated by &lt;c2&gt;stride&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの各値は、&lt;c2&gt;stride&lt;/c2&gt;によって隔てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each value in the sequence steps by &lt;c2&gt;stride&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの各値は、&lt;c2&gt;stride&lt;/c2&gt;だけまたいで越えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Edit the bridging header to expose your Objective-C code to your Swift code:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジヘッダを編集して、あなたのObjective-CコードをあなたのSwiftコードに露出してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Either &lt;c0&gt;true&lt;/c0&gt; or &lt;c1&gt;false&lt;/c1&gt;, randomly chosen with equal probability.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;または&lt;c1&gt;false&lt;/c1&gt;のどちらか、等しい確率で無作為に選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements are sorted in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素は昇順にソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements that are used to split the collection are not returned as part of any subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションを分割するのに使われる要素らは、どれかの下位シーケンスの一部として返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements that are used to split the sequence are not returned as part of any subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスを分割するのに使われる要素らは、どれかの下位シーケンスの一部として返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoders and Decoders</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーダとデコーダ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the contents of this dictionary into the given encoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この辞書の内容を指定のエンコーダへとエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the elements of this array into the given encoder in an unkeyed container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この配列の要素を指定されたエンコーダへとあるキー付けされないコンテナにおいてエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the elements of this contiguous array into the given encoder in an unkeyed container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この隣接配列の要素をこの与えられたエンコーダへとキー付けされないコンテナにおいて符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the scalars of this vector into the given encoder in an unkeyed container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターのスカラーそれらをこの与えられたエンコーダへとキー付けされないコンテナの中に符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を与えられたエンコーダにエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Decoding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Decoding Custom Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえの型のエンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Decoding Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値をエンコードおよびデコードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Decoding a Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲を符号化そして復号する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding, Decoding, and Serialization</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコード、デコード、そしてシリアライズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>End of Iteration</seg>
      </tuv>
      <tuv lang="ja">
        <seg>反復の終わり</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumeration Case</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumeration Cases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumerations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equality and Ordering</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等性と順序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equality implies substitutability—any two instances that compare equally can be used interchangeably in any code that depends on their values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等性は代替可能性を暗黙的に意味します—同等性を比較されるあらゆる２つのインスタンスは、それらの値に影響を受けるあらゆるコードにおいて入れ替えて使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equality is Separate From Identity</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等性は同一性と別個のものです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equality is the inverse of inequality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等性は、不等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equatable Requirements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Equatable 要件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Errors and Exceptions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラーと例外</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Essential components are those that contribute to the type’s implementation of &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>本質的な構成要素は、その型のもつ&lt;c1&gt;Equatable&lt;/c1&gt;の実装に寄与するそれらです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Evaluates a closure while ensuring that the given instance is not destroyed before the closure returns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャを評価する一方で与えられたインスタンスがそのクロージャが返る前に破棄されないことを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Evaluation of the &lt;c2&gt;||&lt;/c2&gt; operator is one of the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;||&lt;/c2&gt;演算子の評価は、次のうちの１つです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Evaluation of the &lt;c3&gt;&amp;&amp;&lt;/c3&gt; operator is one of the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;&amp;&amp;&lt;/c3&gt;演算子の評価は、次のうちの１つです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Even though the barrier guarantees that neither closure will escape the function, the &lt;c6&gt;async(execute:)&lt;/c6&gt; method still requires that the closures passed be marked as &lt;c7&gt;@escaping&lt;/c7&gt;, so the first version of the function does not compile.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>たとえこの障壁がどちらのクロージャも関数を脱出しないことを保証するとしても、&lt;c6&gt;async(execute:)&lt;/c6&gt;メソッドは依然としてこれらの渡されるクロージャが&lt;c7&gt;@escaping&lt;/c7&gt;として印されることを要求します、それで最初のバージョンの関数はコンパイルしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every &lt;c0&gt;Character&lt;/c0&gt; instance is composed of one or more Unicode scalar values that are grouped together as an &lt;e1&gt;extended grapheme cluster&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべての&lt;c0&gt;Character&lt;/c0&gt;インスタンスは、１つの&lt;e1&gt;拡張書記素クラスタ&lt;/e1&gt;として一緒にまとめられる１つの以上のユニコードスカラー値から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every array reserves a specific amount of memory to hold its contents.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべての配列はある特定の量のメモリを確保することでその内容を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every dictionary is an unordered collection of key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべての辞書は、キー値ペアの順番付けられないコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every distinct value of the conforming type has a corresponding unique value of the &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; type, but there may be values of the &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; type that don’t have a corresponding value of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型のすべての個々の値は、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;型の対応する特有な値を持ちます、しかし準拠する型の値に対応しない&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;型の値があっても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every element of &lt;c2&gt;numbers&lt;/c2&gt; up to, but not including, the first negative value is included in the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の負の値までの、しかしそれを含まない、&lt;c2&gt;numbers&lt;/c2&gt;のすべての要素は、この結果の中に含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every key in &lt;c0&gt;keys&lt;w1&gt;And&lt;w2&gt;Values&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; must be unique.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;keys&lt;w1&gt;And&lt;w2&gt;Values&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;の中のすべてのキーは特有でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every value except NaN compares less than or equal to &lt;c0&gt;+infinity&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNを除くあらゆる値は、&lt;c0&gt;+infinity&lt;/c0&gt;より少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every value except for NaN and &lt;c0&gt;+infinity&lt;/c0&gt; compares less than &lt;c1&gt;+infinity&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNと&lt;c0&gt;+infinity&lt;/c0&gt;を除くあらゆる値は、&lt;c1&gt;+infinity&lt;/c1&gt;より少ないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exact Conversion</seg>
      </tuv>
      <tuv lang="ja">
        <seg>厳密変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exceptional values need not take part in the strict total order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら普通でない値は、全順序において役割を果たすには及びません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exchanges the values at the specified indices of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションの指定インデックスでの値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exchanges the values of the two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Excluding Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素を除外する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Execute an operation with a cancellation handler that’s immediately invoked if the current task is canceled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクが取り消されるならば直ちに発動されるある取り消しハンドラを備えた操作を遂行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Existential Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>存在型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exiting a Program</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プログラムの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Expanding this set to include types that represent more than simple Boolean values is discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単純なブール値より多く表現する型を含めるためにこの集合を拡大することは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Expected Performance</seg>
      </tuv>
      <tuv lang="ja">
        <seg>期待される性能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Explicit construction from an UnsafeMutablePointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutablePointerからの明示的な組み立て。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exponent</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exposing nonvalue aspects of &lt;c2&gt;Equatable&lt;/c2&gt; types other than class identity is discouraged, and any that &lt;e3&gt;are&lt;/e3&gt; exposed should be explicitly pointed out in documentation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Equatable&lt;/c2&gt;型の非値の面を露出することはクラス識別子を除いて推奨されません、そして露出&lt;e3&gt;される&lt;/e3&gt;ものは何でも、明白に文書において指摘されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Expressible&lt;w0&gt;By&lt;w1&gt;Extended&lt;w2&gt;Grapheme&lt;w3&gt;Cluster&lt;w4&gt;Literal Implementations &lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Expressible&lt;w0&gt;By&lt;w1&gt;Extended&lt;w2&gt;Grapheme&lt;w3&gt;Cluster&lt;w4&gt;Literal実装 &lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Expressible&lt;w0&gt;By&lt;w1&gt;String&lt;w2&gt;Interpolation Implementations &lt;/w2&gt;&lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Expressible&lt;w0&gt;By&lt;w1&gt;String&lt;w2&gt;Interpolation 実装&lt;/w2&gt;&lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Expressible&lt;w0&gt;By&lt;w1&gt;String&lt;w2&gt;Literal Implementations &lt;/w2&gt;&lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Expressible&lt;w0&gt;By&lt;w1&gt;String&lt;w2&gt;Literal実装&lt;/w2&gt;&lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extending default string interpolation behavior</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の文字列補間挙動を拡張する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extending the Default Interpolation Behavior</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の補間挙動を拡張する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Failure to satisfy that assumption is a serious programming error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>了解事項を満たすことの失敗は、重大なプログラミングエラーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizes the hasher state and returns the hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャー状態をファイナライズしてハッシュ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizing a Hasher</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャーをファイナライズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizing consumes the hasher: it is illegal to finalize a hasher you don’t own, or to perform operations on a finalized hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファイナライズすることは、ハーシャーを消費します：あなたが所有者でないハーシャーをファイナライズすること、またはファイナライズされたハーシャー上で演算を実行することは不正です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, report the average temperature and observation counts:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後に、平均温度と観測数を報告します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding the Dynamic Type in a Generic Context</seg>
      </tuv>
      <tuv lang="ja">
        <seg>総称体の文脈において動的型を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding the Sign and Magnitude</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号と規模を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First Steps</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初歩</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, a set of observations in Celsius is parsed from strings to &lt;c0&gt;Double&lt;/c0&gt; values:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>まず、摂氏での観測の一揃いは、文字列から&lt;c0&gt;Double&lt;/c0&gt;値へ解析されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, retrieve a sequence’s iterator, and then call the iterator’s &lt;c2&gt;next()&lt;/c2&gt; method until it returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>まず、あるシーケンスのもつイテレータを見つけて取ってきてください、そしてそのイテレータの持つ&lt;c2&gt;next()&lt;/c2&gt;メソッドを、それが&lt;c3&gt;nil&lt;/c3&gt;を返すまで呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fixed&lt;w0&gt;Width&lt;w1&gt;Integer Implementations &lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>固定&lt;w0&gt;長&lt;w1&gt;整数実装&lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>FixedWidthInteger Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>固定長整数実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating Point</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-Point Operators for Double</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Double用の浮動小数点演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-Point Operators for Float</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Float用の浮動小数点演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-Point Type Aliases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-Point Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-point types are used to represent fractional numbers, like 5.5, 100.0, or 3.14159274.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型は、5.5、100.0、または3.14159274のような、小数を表すために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-point types represent values that are neither finite numbers nor infinity as NaN, an abbreviation for “not a number.” Comparing a NaN with any value, including another NaN, results in &lt;c0&gt;false&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型は、有限数でも無限大でもない値を「not a number」の略語、NaNで表します。NaNを別のNaNを含む何らかの値と比較することは、&lt;c0&gt;false&lt;/c0&gt;の結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-point values are represented as a &lt;e0&gt;sign&lt;/e0&gt; and a &lt;e1&gt;magnitude&lt;/e1&gt;, where the magnitude is calculated using the type’s &lt;e2&gt;radix&lt;/e2&gt; and the instance’s &lt;e3&gt;significand&lt;/e3&gt; and &lt;e4&gt;exponent&lt;/e4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値は、&lt;e0&gt;符号&lt;/e0&gt;と&lt;e1&gt;規模&lt;/e1&gt;として表されます、そこにおいて規模はその型のもつ&lt;e2&gt;基数&lt;/e2&gt;とインスタンスの&lt;e3&gt;仮数&lt;/e3&gt;と&lt;e4&gt;指数&lt;/e4&gt;を使って計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating&lt;w0&gt;Point Implementations &lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数&lt;w0&gt;点実装&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For &lt;c5&gt;nan&lt;/c5&gt; or &lt;c6&gt;-infinity&lt;/c6&gt;, &lt;c7&gt;x&lt;w8&gt;.next&lt;w9&gt;Down&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; is &lt;c10&gt;x&lt;/c10&gt; itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;nan&lt;/c5&gt;または&lt;c6&gt;-infinity&lt;/c6&gt;に対して、&lt;c7&gt;x&lt;w8&gt;.next&lt;w9&gt;Down&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;は&lt;c10&gt;x&lt;/c10&gt;それ自身です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For &lt;c5&gt;nan&lt;/c5&gt; or &lt;c6&gt;infinity&lt;/c6&gt;, &lt;c7&gt;x&lt;w8&gt;.next&lt;w9&gt;Up&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; is &lt;c10&gt;x&lt;/c10&gt; itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;nan&lt;/c5&gt;または&lt;c6&gt;infinity&lt;/c6&gt;に対して、&lt;c7&gt;x&lt;w8&gt;.next&lt;w9&gt;Up&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;は&lt;c10&gt;x&lt;/c10&gt;それ自身です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For Foundation types that &lt;e0&gt;aren't&lt;/e0&gt; bridged to value types, the Swift overlay renames classes and protocols, as well as related enumerations and constants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値型にブリッジ&lt;e0&gt;されない&lt;/e0&gt;Foundation型に対して、Swiftオーバーレイはクラスとプロトコルを改名します、それだけでなく関連する列挙と定数も。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For NaN, both &lt;c0&gt;is&lt;w1&gt;Finite&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;is&lt;w3&gt;Infinite&lt;/w3&gt;&lt;/c2&gt; are false.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNに対して、&lt;c0&gt;is&lt;w1&gt;Finite&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;is&lt;w3&gt;Infinite&lt;/w3&gt;&lt;/c2&gt;は、falseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a &lt;c0&gt;struct&lt;/c0&gt;, all its stored properties must conform to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;struct&lt;/c0&gt;に対して、すべてのそれの格納プロパティは&lt;c1&gt;Equatable&lt;/c1&gt;に準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a &lt;c0&gt;struct&lt;/c0&gt;, all its stored properties must conform to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;struct&lt;/c0&gt;に対して、すべてのそれの格納プロパティは&lt;c1&gt;Hashable&lt;/c1&gt;に準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a structure, &lt;e0&gt;all&lt;/e0&gt; its stored properties must conform to &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;Hashable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体に対して、&lt;e0&gt;全ての&lt;/e0&gt;それの格納プロパティは、&lt;c1&gt;Equatable&lt;/c1&gt;および&lt;c2&gt;Hashable&lt;/c2&gt;に準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a type &lt;c1&gt;F&lt;/c1&gt;, positive and negative infinity are represented as &lt;c2&gt;F&lt;w3&gt;.infinity&lt;/w3&gt;&lt;/c2&gt; and &lt;c4&gt;-F&lt;w5&gt;.infinity&lt;/w5&gt;&lt;/c4&gt;, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c1&gt;F&lt;/c1&gt;に対して、正と負の無限大はそれぞれ&lt;c2&gt;F&lt;w3&gt;.infinity&lt;/w3&gt;&lt;/c2&gt;と&lt;c4&gt;-F&lt;w5&gt;.infinity&lt;/w5&gt;&lt;/c4&gt;のように表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a type &lt;c1&gt;T&lt;/c1&gt;, the resulting value is in the range &lt;c2&gt;T&lt;w3&gt;.min...T&lt;w4&gt;.max&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c1&gt;T&lt;/c1&gt;に対して、結果となる値は範囲&lt;c2&gt;T&lt;w3&gt;.min...T&lt;w4&gt;.max&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;の中です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value &lt;c0&gt;x&lt;/c0&gt;, a distance &lt;c1&gt;n&lt;/c1&gt;, and a value &lt;c2&gt;y = x&lt;w3&gt;.advanced(by: n)&lt;/w3&gt;&lt;/c2&gt;, &lt;c4&gt;x&lt;w5&gt;.distance(to: y) == n&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;x&lt;/c0&gt;、隔たり&lt;c1&gt;n&lt;/c1&gt;、および値&lt;c2&gt;y = x&lt;w3&gt;.advanced(by: n)&lt;/w3&gt;&lt;/c2&gt;に対して、&lt;c4&gt;x&lt;w5&gt;.distance(to: y) == n&lt;/w5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value &lt;c0&gt;x&lt;/c0&gt;, the comparison &lt;c1&gt;x&lt;w2&gt;.sign == .minus&lt;/w2&gt;&lt;/c1&gt; is not necessarily the same as &lt;c3&gt;x &lt; 0&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;x&lt;/c0&gt;に対して、比較&lt;c1&gt;x&lt;w2&gt;.sign == .minus&lt;/w2&gt;&lt;/c1&gt;は必ずしも&lt;c3&gt;x &lt; 0&lt;/c3&gt;と同じではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value &lt;c0&gt;x&lt;/c0&gt;, the result of &lt;c1&gt;x&lt;w2&gt;.divided&lt;w3&gt;Reporting&lt;w4&gt;Overflow(by: 0)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c5&gt;(x, true)&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x&lt;w2&gt;.divided&lt;w3&gt;Reporting&lt;w4&gt;Overflow(by: 0)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の結果は&lt;c5&gt;(x, true)&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value &lt;c0&gt;x&lt;/c0&gt;, the result of &lt;c1&gt;x&lt;w2&gt;.remainder&lt;w3&gt;Reporting&lt;w4&gt;Overflow(dividing&lt;w5&gt;By: 0)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c6&gt;(x, true)&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x&lt;w2&gt;.remainder&lt;w3&gt;Reporting&lt;w4&gt;Overflow(dividing&lt;w5&gt;By: 0)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の結果は&lt;c6&gt;(x, true)&lt;/c6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value &lt;c1&gt;x&lt;/c1&gt; of a floating-point type &lt;c2&gt;F&lt;/c2&gt;, the magnitude can be calculated as the following, where &lt;c3&gt;**&lt;/c3&gt; is exponentiation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型&lt;c2&gt;F&lt;/c2&gt;の値&lt;c1&gt;x&lt;/c1&gt;に対して、規模は次のように計算されることができます、ここで&lt;c3&gt;**&lt;/c3&gt;は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an &lt;c0&gt;enum&lt;/c0&gt;, all its associated values must conform to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;enum&lt;/c0&gt;に対して、すべてのそれの関連値は&lt;c1&gt;Equatable&lt;/c1&gt;に準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an &lt;c0&gt;enum&lt;/c0&gt;, all its associated values must conform to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;enum&lt;/c0&gt;に対して、すべてのそれの関連値は&lt;c1&gt;Hashable&lt;/c1&gt;に準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an enumeration, &lt;e0&gt;all&lt;/e0&gt; its associated values must conform to &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;Hashable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙に対して、&lt;e0&gt;全ての&lt;/e0&gt;それの関連値は、&lt;c1&gt;Equatable&lt;/c1&gt;および&lt;c2&gt;Hashable&lt;/c2&gt;に準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an index &lt;c0&gt;i&lt;/c0&gt; into a collection &lt;c1&gt;c&lt;/c1&gt;, calling &lt;c2&gt;c&lt;w3&gt;.index(after: i)&lt;/w3&gt;&lt;/c2&gt; returns the same index every time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクション&lt;c0&gt;c&lt;/c0&gt;へのインデックス&lt;c1&gt;i&lt;/c1&gt;に対して、&lt;c2&gt;c&lt;w3&gt;.index(after: i)&lt;/w3&gt;&lt;/c2&gt;を呼び出すことはいつでも同じインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an instance of &lt;c0&gt;Array&lt;/c0&gt;, &lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt; is always zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Array&lt;/c0&gt;のインスタンスに対して、&lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;は常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an instance of &lt;c0&gt;Contiguous&lt;w1&gt;Array&lt;/w1&gt;&lt;/c0&gt;, &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt; is always zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Contiguous&lt;w1&gt;Array&lt;/w1&gt;&lt;/c0&gt;のインスタンスに対して、&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;は常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an unspecialized Objective-C type, Swift infers the generic parameterization for the imported class type constraints.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特殊化されないObjective-C型に対して、スウィフトは総称体パラメータ化をインポートされたクラス型制約に対して推測します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any NaN value, the property’s value is “nan”, and for positive and negative infinity its value is “inf” and “-inf”.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆるNaN値に対して、このプロパティの持つ値は “nan” です、そして正と負の無限大に対してそれの値は “inf” と “-inf” です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any finite value &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Down&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is less than &lt;c4&gt;x&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの有限の値&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Down&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;は&lt;c4&gt;x&lt;/c4&gt;より小さいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any finite value &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Up&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is greater than &lt;c4&gt;x&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの有限値&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Up&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;は&lt;c4&gt;x&lt;/c4&gt;より大きいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any finite value, this property provides a string that can be converted back to an instance of &lt;c0&gt;Double&lt;/c0&gt; without rounding errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる有限の値に対して、このプロパティはある文字列を提供します、それは丸め誤差なしに逆に&lt;c0&gt;Double&lt;/c0&gt;のインスタンスへと変換されることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any finite value, this property provides a string that can be converted back to an instance of &lt;c0&gt;Float16&lt;/c0&gt; without rounding errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる有限の値に対して、このプロパティはある文字列を提供します、それは丸め誤差なしに逆に&lt;c0&gt;Float16&lt;/c0&gt;のインスタンスへと変換されることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any finite value, this property provides a string that can be converted back to an instance of &lt;c0&gt;Float80&lt;/c0&gt; without rounding errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる有限の値に対して、このプロパティはある文字列を提供します、それは丸め誤差なしに逆に&lt;c0&gt;Float80&lt;/c0&gt;のインスタンスへと変換されることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any finite value, this property provides a string that can be converted back to an instance of &lt;c0&gt;Float&lt;/c0&gt; without rounding errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる有限の値に対して、このプロパティはある文字列を提供します、それは丸め誤差なしに逆に&lt;c0&gt;Float&lt;/c0&gt;のインスタンスへと変換されることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any floating-point value &lt;c0&gt;x&lt;/c0&gt; of type &lt;c1&gt;F&lt;/c1&gt;, the result of the following is equal to &lt;c2&gt;x&lt;/c2&gt;, with the distinction that the result is canonicalized if &lt;c3&gt;x&lt;/c3&gt; is in a noncanonical encoding:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの浮動小数点値型&lt;c1&gt;F&lt;/c1&gt;の&lt;c0&gt;x&lt;/c0&gt;に対して、以下の結果は&lt;c2&gt;x&lt;/c2&gt;と等しいです、その違いは&lt;c3&gt;x&lt;/c3&gt;が非正準符号化になるならば結果は正準化されることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any numeric value &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x&lt;w2&gt;.magnitude&lt;/w2&gt;&lt;/c1&gt; is the absolute value of &lt;c3&gt;x&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの数値&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x&lt;w2&gt;.magnitude&lt;/w2&gt;&lt;/c1&gt;は&lt;c3&gt;x&lt;/c3&gt;の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any representable power of two, &lt;c0&gt;significand&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; is zero, because &lt;c2&gt;significand&lt;/c2&gt; is &lt;c3&gt;1&lt;w4&gt;.0&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる表現可能な２の冪に対して、&lt;c0&gt;significand&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;はゼロです、なぜなら&lt;c2&gt;significand&lt;/c2&gt;が&lt;c3&gt;1&lt;w4&gt;.0&lt;/w4&gt;&lt;/c3&gt;だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any two integers &lt;c0&gt;a&lt;/c0&gt; and &lt;c1&gt;b&lt;/c1&gt;, their quotient &lt;c2&gt;q&lt;/c2&gt;, and their remainder &lt;c3&gt;r&lt;/c3&gt;, &lt;c4&gt;a == b * q + r&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの２つの整数&lt;c0&gt;a&lt;/c0&gt;と&lt;c1&gt;b&lt;/c1&gt;、それらの商&lt;c2&gt;q&lt;/c2&gt;、そしてそれらの余り&lt;c3&gt;r&lt;/c3&gt;に対して、&lt;c4&gt;a == b * q + r&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any value, &lt;c0&gt;x + .zero == x&lt;/c0&gt; and &lt;c1&gt;.zero + x == x&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる値に対して、&lt;c0&gt;x + .zero == x&lt;/c0&gt;かつ&lt;c1&gt;.zero + x == x&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any values &lt;c0&gt;a&lt;/c0&gt; and &lt;c1&gt;b&lt;/c1&gt;, &lt;c2&gt;a != b&lt;/c2&gt; implies that &lt;c3&gt;a == b&lt;/c3&gt; is &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの&lt;c0&gt;a&lt;/c0&gt;と&lt;c1&gt;b&lt;/c1&gt;に対して、&lt;c2&gt;a != b&lt;/c2&gt;は&lt;c3&gt;a == b&lt;/c3&gt;が&lt;c4&gt;false&lt;/c4&gt;であることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any values &lt;c0&gt;a&lt;/c0&gt; and &lt;c1&gt;b&lt;/c1&gt;, &lt;c2&gt;a == b&lt;/c2&gt; implies that &lt;c3&gt;a != b&lt;/c3&gt; is &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの値&lt;c0&gt;a&lt;/c0&gt;と&lt;c1&gt;b&lt;/c1&gt;に対して、&lt;c2&gt;a == b&lt;/c2&gt;は&lt;c3&gt;a != b&lt;/c3&gt;が&lt;c4&gt;false&lt;/c4&gt;であることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For arrays of most &lt;c0&gt;Element&lt;/c0&gt; types, this storage is a contiguous block of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの&lt;c0&gt;Element&lt;/c0&gt;型の配列に対して、このストレージは隣接メモリブロックです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For arrays with an &lt;c1&gt;Element&lt;/c1&gt; type that is a class or &lt;c2&gt;@objc&lt;/c2&gt; protocol type, this storage can be a contiguous block of memory or an instance of &lt;c3&gt;NSArray&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラスや&lt;c2&gt;@objc&lt;/c2&gt;プロトコル型である&lt;c1&gt;Element&lt;/c1&gt;型を持つ配列に対して、このストレージは隣接メモリブロックまたは&lt;c3&gt;NSArray&lt;/c3&gt;のインスタンスであることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For bridging to be possible, the &lt;c3&gt;Element&lt;/c3&gt; type of your array must be a class, an &lt;c4&gt;@objc&lt;/c4&gt; protocol (a protocol imported from Objective-C or marked with the &lt;c5&gt;@objc&lt;/c5&gt; attribute), or a type that bridges to a Foundation type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジが可能にされるには、あなたの配列の&lt;c3&gt;Element&lt;/c3&gt;型は、あるクラス、&lt;c4&gt;@objc&lt;/c4&gt;プロトコル（Objective-Cからインポートされるまたは&lt;c5&gt;@objc&lt;/c5&gt;属性で印されるプロトコル）、またはあるFoundation型にブリッジされる型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For bridging to be possible, the &lt;c3&gt;Key&lt;/c3&gt; and &lt;c4&gt;Value&lt;/c4&gt; types of a dictionary must be classes, &lt;c5&gt;@objc&lt;/c5&gt; protocols, or types that bridge to Foundation types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジが可能にされるには、辞書の&lt;c3&gt;Key&lt;/c3&gt;と&lt;c4&gt;Value&lt;/c4&gt;型がクラス、&lt;c5&gt;@objc&lt;/c5&gt;プロトコル、またはFoundation型にブリッジする型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For class types, the following mappings apply:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラス型のために、以下のマッピングが適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For collections that don’t conform to &lt;c3&gt;Random&lt;w4&gt;Access&lt;w5&gt;Collection&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;, accessing the &lt;c6&gt;count&lt;/c6&gt; property iterates through the elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;Random&lt;w4&gt;Access&lt;w5&gt;Collection&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に準拠しないコレクションに対して、&lt;c6&gt;count&lt;/c6&gt;プロパティにアクセスすることはコレクションの要素を始めから終わりまで反復します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, &lt;c6&gt;Any&lt;w7&gt;Hashable(42)&lt;/w7&gt;&lt;/c6&gt; compares as equal to &lt;c8&gt;Any&lt;w9&gt;Hashable(42 as NSNumber)&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c6&gt;Any&lt;w7&gt;Hashable(42)&lt;/w7&gt;&lt;/c6&gt;は、&lt;c8&gt;Any&lt;w9&gt;Hashable(42 as NSNumber)&lt;/w9&gt;&lt;/c8&gt;と等しいとみなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, &lt;e6&gt;6&lt;/e6&gt; is a multiple of &lt;e7&gt;3&lt;/e7&gt; because &lt;e8&gt;6 = 2*3&lt;/e8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;e6&gt;6&lt;/e6&gt;は&lt;e7&gt;3&lt;/e7&gt;の倍数です、なぜなら&lt;e8&gt;6 = 2*3&lt;/e8&gt;なので。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a country’s Unicode flag character is made up of two regional indicator scalar values that correspond to that country’s ISO 3166-1 alpha-2 code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある国のユニコードの国旗文字は、その国のISO 3166-1 alpha-2コードに対応する２つの地域指定スカラー値から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a function pointer that has the type &lt;c1&gt;int (*)(void)&lt;/c1&gt; in C is imported into Swift as &lt;c2&gt;@convention(c) () -&gt; Int32&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、Cにおける&lt;c1&gt;int (*)(void)&lt;/c1&gt;型をもつ関数ポインターは、スウィフトに&lt;c2&gt;@convention(c) () -&gt; Int32&lt;/c2&gt;としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a program can import a C API like the one defined here:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あるプログラムはC APIをここで定義されるもののようにインポートできます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its &lt;c0&gt;count&lt;/c0&gt; property in O(1) time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ランダムアクセスのコレクションは、２つのインデックス間の隔たりをO(1)時間で測ることが可能で、それの&lt;c0&gt;count&lt;/c0&gt;プロパティをO(1)時間で計算できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a type might cache an expensive computed value so that it only needs to calculate it once.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある型は高くつく計算値をキャッシュするかもしれません、それを計算する必要がただ一度だけであるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an app might recommend multiple different penpals in response to user feedback.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あるアプリはユーザのフィードバックに答えて複数の異なる文通友達を勧めるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an instance of &lt;c1&gt;Int16&lt;/c1&gt; can represent the value &lt;c2&gt;500&lt;/c2&gt;, so the first conversion in the code sample below succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c1&gt;Int16&lt;/c1&gt;のインスタンスは値&lt;c2&gt;500&lt;/c2&gt;を表せます、それで下のコード例の最初の変換は成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, bridging from &lt;c3&gt;NSArray&lt;/c3&gt; to &lt;c4&gt;Array&lt;Int&gt;&lt;/c4&gt; performs such a copy.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c3&gt;NSArray&lt;/c3&gt;から&lt;c4&gt;Array&lt;Int&gt;&lt;/c4&gt;へのブリッジは、そのようなコピーを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider a C structure named &lt;c0&gt;Cake&lt;/c0&gt; that contains the fields &lt;c1&gt;layers&lt;/c1&gt; and &lt;c2&gt;height&lt;/c2&gt; nested within an unnamed union type, and a field &lt;c3&gt;toppings&lt;/c3&gt; of an unnamed struct type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;Cake&lt;/c0&gt;と名前を付けられるC構造体を考えてください、それはフィールド&lt;c1&gt;layers&lt;/c1&gt;および&lt;c2&gt;height&lt;/c2&gt;を無名のunion型内部に入れ子にされて、そしてフィールド&lt;c3&gt;toppings&lt;/c3&gt;を無名struct型で含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider a C union named &lt;c0&gt;Schroedingers&lt;w1&gt;Cat&lt;/w1&gt;&lt;/c0&gt; that has an &lt;c2&gt;is&lt;w3&gt;Alive&lt;/w3&gt;&lt;/c2&gt; and an &lt;c4&gt;is&lt;w5&gt;Dead&lt;/w5&gt;&lt;/c4&gt; field:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;Schroedingers&lt;w1&gt;Cat&lt;/w1&gt;&lt;/c0&gt;と名前を付けられるC共用体を考えてください、それは&lt;c2&gt;is&lt;w3&gt;Alive&lt;/w3&gt;&lt;/c2&gt;と&lt;c4&gt;is&lt;w5&gt;Dead&lt;/w5&gt;&lt;/c4&gt;フィールドを持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider the &lt;a0&gt;&lt;c1&gt;present(completion:)&lt;/c1&gt;&lt;/a0&gt; method from PassKit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例として、PassKit由来の&lt;a0&gt;&lt;c1&gt;present(completion:)&lt;/c1&gt;&lt;/a0&gt;メソッドを考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider the &lt;a0&gt;&lt;c1&gt;remove&lt;w2&gt;Item(at:)&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; method from &lt;a3&gt;&lt;c4&gt;File&lt;w5&gt;Manager&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;a0&gt;&lt;c1&gt;remove&lt;w2&gt;Item(at:)&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;メソッドで&lt;a3&gt;&lt;c4&gt;File&lt;w5&gt;Manager&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;からのものを考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider the &lt;a4&gt;&lt;c5&gt;write(_:&lt;w6&gt;timeout:&lt;w7&gt;completion&lt;w8&gt;Handler:)&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;&lt;/a4&gt; method from &lt;s9&gt;&lt;c10&gt;URLSession&lt;w11&gt;Stream&lt;w12&gt;Task&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;&lt;/s9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;s9&gt;&lt;c10&gt;URLSession&lt;w11&gt;Stream&lt;w12&gt;Task&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;&lt;/s9&gt;由来の&lt;a4&gt;&lt;c5&gt;write(_:&lt;w6&gt;timeout:&lt;w7&gt;completion&lt;w8&gt;Handler:)&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;&lt;/a4&gt;メソッドを考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider the following C function declarations:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のC関数宣言を考えてみてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider the following Objective-C class and category declarations:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、次のObjective-Cクラスおよびカテゴリ宣言を考えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, even if the operation is running code that never checks for cancellation, a cancellation handler still runs and provides a chance to run some cleanup code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、たとえ取り消しを決して調べないコードを演算が実行しているとしても、ある取り消しハンドラが依然として動作してそしてあるクリーンアップコードを実行する機会を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, given the following C structure:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のC構造体を与えられて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, given the following Objective-C method that performs an operation on the specified class:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、指定されたクラス上である演算を実行する以下のObjective-Cメソッドを与えられて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, given the following Objective-C property declarations:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のObjective-Cプロパティを与えられて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, here’s an unannotated C function:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ここに注釈をつけられなかったC関数があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, here’s how to call the &lt;c0&gt;vasprintf(_:&lt;w1&gt;_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function in Swift:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ここに&lt;c0&gt;vasprintf(_:&lt;w1&gt;_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数をSwiftにおいて呼び出す方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if the two &lt;c0&gt;year&lt;/c0&gt; properties are equal but the two &lt;c1&gt;month&lt;/c1&gt; properties are not, the date with the lesser value for &lt;c2&gt;month&lt;/c2&gt; is the lesser of the two dates.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、２つの&lt;c0&gt;year&lt;/c0&gt;プロパティは等しいけれども２つの&lt;c1&gt;month&lt;/c1&gt;プロパティは異なるならば、&lt;c2&gt;month&lt;/c2&gt;に対してより少ない値を持つ日付は２つの日付のうちより少ないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if you have a type that represents a local database connection, the code that manages access to that database needs full control over the state of the database as viewed from your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたがローカルデータベース接続を表す型を持つならば、そのデータベースへのアクセスを管理するコードは、データベースの状態すべてわたって完全な制御をあなたのアプリから眺められる際に必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if you update the last element of the &lt;c0&gt;absences&lt;/c0&gt; array from &lt;c1&gt;0&lt;/c1&gt; to &lt;c2&gt;2&lt;/c2&gt;, the &lt;c3&gt;second&lt;w4&gt;Half&lt;/w4&gt;&lt;/c3&gt; slice is unchanged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたが&lt;c0&gt;absences&lt;/c0&gt;配列の最後の要素を&lt;c1&gt;0&lt;/c1&gt;から&lt;c2&gt;2&lt;/c2&gt;に更新する場合、&lt;c3&gt;second&lt;w4&gt;Half&lt;/w4&gt;&lt;/c3&gt;スライスは変化していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたがある文字列の最初の単語のみを出力したいならば、最初の空白のインデックスを捜して、それからその位置までの下位文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if your array’s elements conform to &lt;c1&gt;Comparable&lt;/c1&gt;, you can call the &lt;c2&gt;sort()&lt;/c2&gt; method without using arguments to sort the elements of your array in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたの配列のもつ要素が&lt;c1&gt;Comparable&lt;/c1&gt;に準拠するならば、あなたは&lt;c2&gt;sort()&lt;/c2&gt;メソッドを引数を使うことなく呼び出して、あなたの配列の要素を昇順にソートすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in a fixed-width integer type with a &lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; value of 8, the number -8 has three trailing zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、8の&lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;値を持つ固定長整数型において、数-8は後に続くゼロを３つ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in a fixed-width integer type with a &lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; value of 8, the number &lt;e2&gt;31&lt;/e2&gt; has five bits equal to &lt;e3&gt;1&lt;/e3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、８の&lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;値を持つ固定長整数型において、数&lt;e2&gt;31&lt;/e2&gt;は&lt;e3&gt;1&lt;/e3&gt;に等しいビットを５つ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in a fixed-width integer type with a &lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; value of 8, the number &lt;e2&gt;31&lt;/e2&gt; has three leading zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、８の&lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;値を持つ固定長整数型において、数&lt;e2&gt;31&lt;/e2&gt;は３つの先頭のゼロを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in an integer type with a &lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; value of 8, the number &lt;e2&gt;31&lt;/e2&gt; has three leading zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、８の&lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;値を持つ整数型において、数&lt;e2&gt;31&lt;/e2&gt;は３つの先頭のゼロを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in the code below, nothing is canceled and the group doesn’t throw an error:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、下のコードにおいて、何も取り消されません、そしてグループはエラーをスローしません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, it would be reasonable to implement alternative operations in which operating on a signaling NaN triggers a runtime error or results in a diagnostic for debugging purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、それらにおいてはシグナルNaNに関する演算が実行時エラーを引き起こすまたはデバッグ目的の診断という結果になるといった、代替の演算を実装するのが妥当であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, many Objective-C frameworks expose classes that you are expected to subclass.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、多くのObjective-Cフレームワークは、あなたがサブクラスを作るべき様々なクラスを公開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, passing an empty range as &lt;c0&gt;other&lt;/c0&gt; triggers a runtime error, because an empty range cannot be represented by a closed range instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、空の範囲を&lt;c0&gt;other&lt;/c0&gt;として渡すことは実行時エラーの引き金となります、空の範囲は完結範囲インスタンスによって表現されることができないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, suppose the C function above doesn't retain the &lt;c0&gt;CFString&lt;/c0&gt; object before returning it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、上のC関数が&lt;c0&gt;CFString&lt;/c0&gt;オブジェクトを、それを返す前にリテインしないと思ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, suppose you have an array holding the number of absences from each class during a session.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたがある学期（２学期制）の各クラスの欠席者数が入った配列を持つと考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;a0&gt;&lt;c1&gt;sign(_:&lt;w2&gt;using:&lt;w3&gt;completion:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; method from PassKit is declared like this in Objective-C:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、PassKit由来の&lt;a0&gt;&lt;c1&gt;sign(_:&lt;w2&gt;using:&lt;w3&gt;completion:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;メソッドはObjective-Cにおいてこのように宣言されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;Compass&lt;w1&gt;Direction&lt;/w1&gt;&lt;/c0&gt; enumeration declared in this example conforms to &lt;c2&gt;Case&lt;w3&gt;Iterable&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、この例で定義される&lt;c0&gt;Compass&lt;w1&gt;Direction&lt;/w1&gt;&lt;/c0&gt;列挙は&lt;c2&gt;Case&lt;w3&gt;Iterable&lt;/w3&gt;&lt;/c2&gt;に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;Float&lt;/c0&gt; type has an &lt;c1&gt;exponent&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; of 8, which gives an exponent bias of &lt;c4&gt;127&lt;/c4&gt; by the calculation above.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;Float&lt;/c0&gt;型は、８の&lt;c1&gt;exponent&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;を持ちます、それは&lt;c4&gt;127&lt;/c4&gt;の指数バイアスを上記の計算によって与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;NSJSONReading&lt;w1&gt;Options&lt;/w1&gt;&lt;/c0&gt; option set is imported as &lt;c2&gt;JSONSerialization&lt;w3&gt;.Reading&lt;w4&gt;Options&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;NSJSONReading&lt;w1&gt;Options&lt;/w1&gt;&lt;/c0&gt;オプションセットは&lt;c2&gt;JSONSerialization&lt;w3&gt;.Reading&lt;w4&gt;Options&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;keys&lt;/c0&gt; property of a dictionary isn’t an array with its own storage, it’s a collection that maps its elements from the dictionary only when they’re accessed, saving the time and space needed to allocate an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、辞書の&lt;c0&gt;keys&lt;/c0&gt;プロパティはそれ自身のストレージを持つことになる配列ではありません、それはコレクションです、それはそれの要素らをそれらがアクセスされた時に限り辞書からマップします、そして配列を割り当てるのに必要とされる時間と空間を節約しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;sum(_:)&lt;/c0&gt; function shown here takes an &lt;c1&gt;Int&lt;/c1&gt; array as a parameter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ここで示す&lt;c0&gt;sum(_:)&lt;/c0&gt;関数は、&lt;c1&gt;Int&lt;/c1&gt;リテラルをパラメータとしてとります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c1&gt;log(name:&lt;w2&gt;value:)&lt;/w2&gt;&lt;/c1&gt; function shown here has an unconstrained generic &lt;c3&gt;value&lt;/c3&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ここで示す&lt;c1&gt;log(name:&lt;w2&gt;value:)&lt;/w2&gt;&lt;/c1&gt;関数は、制約のない総称体の&lt;c3&gt;value&lt;/c3&gt;パラメータを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c2&gt;.map(_:)&lt;/c2&gt; method returns a &lt;c3&gt;Async&lt;w4&gt;Map&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; (or a &lt;c6&gt;Async&lt;w7&gt;Throwing&lt;w8&gt;Map&lt;w9&gt;Sequence&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;, if the closure you provide to the &lt;c10&gt;map(_:)&lt;/c10&gt; method can throw an error).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c2&gt;.map(_:)&lt;/c2&gt;メソッドはある&lt;c3&gt;Async&lt;w4&gt;Map&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;を返します（または&lt;c6&gt;Async&lt;w7&gt;Throwing&lt;w8&gt;Map&lt;w9&gt;Sequence&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;を、あなたが&lt;c10&gt;map(_:)&lt;/c10&gt;メソッドに提供するクロージャがエラーをスローするならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c2&gt;digits()&lt;/c2&gt; function in the following example creates an iterator over a collection that lazily maps the elements of a &lt;c3&gt;Range&lt;Int&gt;&lt;/c3&gt; instance to strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の例の&lt;c2&gt;digits()&lt;/c2&gt;関数は、あるコレクションを覆うイテレータを作成します、それは&lt;c3&gt;Range&lt;Int&gt;&lt;/c3&gt;インスタンスの要素を文字列へと遅延にマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c3&gt;contains(_:)&lt;/c3&gt; method returns a Boolean value that indicates if a given value exists in the &lt;c4&gt;Async&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c3&gt;contains(_:)&lt;/c3&gt;メソッドはあるブール値を返します、それはある与えられた値が&lt;c4&gt;Async&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/c4&gt;の中に存在するかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c7&gt;Int8&lt;/c7&gt; type has a &lt;c8&gt;bit&lt;w9&gt;Width&lt;/w9&gt;&lt;/c8&gt; value of 8 and can store any integer in the range &lt;c10&gt;-128...127&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c7&gt;Int8&lt;/c7&gt;型は、８の&lt;c8&gt;bit&lt;w9&gt;Width&lt;/w9&gt;&lt;/c8&gt;値を持ち、範囲&lt;c10&gt;-128...127&lt;/c10&gt;の中の何らかの整数を格納できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the code sample below creates a dictionary with string keys and values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、下のコード見本はある辞書を文字列のキーと値で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the contents of a &lt;c0&gt;String&lt;/c0&gt; are logged, as are the components of an &lt;c1&gt;NSColor&lt;/c1&gt; or &lt;c2&gt;UIColor&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある&lt;c0&gt;String&lt;/c0&gt;のそれら内容が記録されます、ある&lt;c1&gt;NSColor&lt;/c1&gt;または&lt;c2&gt;UIColor&lt;/c2&gt;の構成要素それらのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following characters all represent currency symbols:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の表意文字は全て通貨記号を表します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following characters all represent math symbols:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の表意文字は全て数学シンボルを表します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following characters all represent newlines:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の表意文字は全てニューラインを表します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following characters all represent numbers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の表意文字は全て数字を表します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following characters all represent punctuation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の表意文字は全て句読点を表します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following characters all represent symbols:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の表意文字は全て記号を表します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following characters all represent whitespace:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の表意文字は全て空白を表します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following characters all represent whole numbers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の表意文字は全て整数を表します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following characters are all letters:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の文字は全て表音文字です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code provides a &lt;c3&gt;binary&lt;w4&gt;String&lt;/w4&gt;&lt;/c3&gt; property on every fixed-width integer that represents the number’s binary representation, split into 8-bit chunks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコードは&lt;c3&gt;binary&lt;w4&gt;String&lt;/w4&gt;&lt;/c3&gt;プロパティをあらゆる固定長整数に関して提供します、それは数のバイナリ表現を、８ビットの塊へと分割して表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code sample does not compile, because it attempts to use the integer &lt;c0&gt;i&lt;/c0&gt; in a logical context:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコードサンプルはコンパイルしません、なぜならそれが整数&lt;c0&gt;i&lt;/c0&gt;を論理的文脈において使おうとするからです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following conversions result in &lt;c2&gt;nil&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、次の変換は&lt;c2&gt;nil&lt;/c2&gt;という結果になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following conversions result in &lt;c4&gt;nil&lt;/c4&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の変換は&lt;c4&gt;nil&lt;/c4&gt;という結果になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the number &lt;e0&gt;-8&lt;/e0&gt; has three trailing zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、数&lt;e0&gt;-8&lt;/e0&gt;は後に続くゼロを３つ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the parameter passed as &lt;c0&gt;value&lt;/c0&gt; to the &lt;c1&gt;print&lt;w2&gt;Smiley&lt;w3&gt;Info(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; function in the example below is an instance of the &lt;c4&gt;Smiley&lt;/c4&gt; class or one of its subclasses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、下の例において&lt;c0&gt;value&lt;/c0&gt;として&lt;c1&gt;print&lt;w2&gt;Smiley&lt;w3&gt;Info(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;関数に渡されるパラメータは、&lt;c4&gt;Smiley&lt;/c4&gt;クラスまたはそれのサブクラスの１つのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the special “not a number” value for floating-point types (&lt;c1&gt;Floating&lt;w2&gt;Point&lt;w3&gt;.nan&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;) compares as neither less than, greater than, nor equal to any normal floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、浮動小数点型のための特別な「数でない」値（&lt;c1&gt;Floating&lt;w2&gt;Point&lt;w3&gt;.nan&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;）は、何らかの通常の浮動小数点値とより少ないでも、より大きいでも、等しいでもないような比較をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, this custom &lt;c0&gt;Point&lt;/c0&gt; struct uses the default representation supplied by the standard library:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このあつらえの&lt;c0&gt;Point&lt;/c0&gt; structは、標準ライブラリによって提供される省略時の表現を使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, this version of the &lt;c6&gt;update(with&lt;w7&gt;Value)&lt;/w7&gt;&lt;/c6&gt; method will re-copy &lt;c8&gt;my&lt;w9&gt;Storage&lt;/w9&gt;&lt;/c8&gt; on every call:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このバージョンの&lt;c6&gt;update(with&lt;w7&gt;Value)&lt;/w7&gt;&lt;/c6&gt;メソッドは&lt;c8&gt;my&lt;w9&gt;Storage&lt;/w9&gt;&lt;/c8&gt;を全ての呼び出しで再コピーします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to check whether an array contains a particular value, you can pass the value itself to the &lt;c1&gt;contains(_:)&lt;/c1&gt; method when the array’s element conforms to &lt;c2&gt;Equatable&lt;/c2&gt; instead of providing a closure that determines equivalence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある配列がある特定の値を含むかどうか調べるには、あなたはその値自体を&lt;c1&gt;contains(_:)&lt;/c1&gt;メソッドに渡すことが、その配列の要素が&lt;c2&gt;Equatable&lt;/c2&gt;に準拠する場合には、同等を判定するクロージャを提供する代わりに可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to find the key for a particular value in a dictionary, use the &lt;c0&gt;first&lt;w1&gt;Index(where:)&lt;/w1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、辞書において特定の値に対するキーを見つけるには、&lt;c0&gt;first&lt;w1&gt;Index(where:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to get the reversed version of a string, reverse its characters and initialize a new &lt;c0&gt;String&lt;/c0&gt; instance from the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある文字列の逆版を得るには、それの文字を逆にして、新しい&lt;c0&gt;String&lt;/c0&gt;インスタンスをその結果から初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, using a &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;From&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; range expression with an array accesses the subrange from the start of the range expression until the end of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;From&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;範囲式をある配列で使うことは、その下位範囲に範囲式の始まりから配列の終わりまでにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, when converting a 16-bit value to an 8-bit type, only the lower 8 bits of &lt;c3&gt;source&lt;/c3&gt; are used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、16bit値を8bit型へ変換する場合、&lt;c3&gt;source&lt;/c3&gt;の最も下位の8ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, when the transform receives &lt;c6&gt;3&lt;/c6&gt; from the base sequence, it creates a new &lt;c7&gt;Counter&lt;/c7&gt; that produces the values &lt;c8&gt;1&lt;/c8&gt;, &lt;c9&gt;2&lt;/c9&gt;, and &lt;c10&gt;3&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、変換が&lt;c6&gt;3&lt;/c6&gt;を基底シーケンスから受け取る場合、それは新しい&lt;c7&gt;Counter&lt;/c7&gt;を作成します、そしてそれが値&lt;c8&gt;1&lt;/c8&gt;、&lt;c9&gt;2&lt;/c9&gt;、そして&lt;c10&gt;3&lt;/c10&gt;を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can add a single element to an array by using a &lt;c3&gt;Collection&lt;w4&gt;Of&lt;w5&gt;One&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; instance with the concatenation operator (&lt;c6&gt;+&lt;/c6&gt;):</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは単一の要素を配列へと追加することが、&lt;c3&gt;Collection&lt;w4&gt;Of&lt;w5&gt;One&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;インスタンスを連結演算子（&lt;c6&gt;+&lt;/c6&gt;）とともに使うことによって可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can also access the first character of &lt;c1&gt;text&lt;/c1&gt; using the &lt;c2&gt;first&lt;/c2&gt; property, which has the value of the first element of the collection, or &lt;c3&gt;nil&lt;/c3&gt; if the collection is empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはまた&lt;c1&gt;text&lt;/c1&gt;の最初の文字にアクセスすることが&lt;c2&gt;first&lt;/c2&gt;プロパティを使って行えます、それはコレクションの最初の要素の値、またはコレクションが空ならば&lt;c3&gt;nil&lt;/c3&gt;を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can concatenate the elements of a &lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt; instance and an integer array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある&lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt;インスタンスとある整数配列とに属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can concatenate the elements of an integer array and a &lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある整数配列とある&lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt;インスタンスとに属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can concatenate the elements of two integer arrays.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは２つの整数配列に属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can replace an element of an array by using its subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは配列の中のある要素をそれの添え字を使うことによって置き換えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can shuffle the numbers between &lt;c0&gt;0&lt;/c0&gt; and &lt;c1&gt;9&lt;/c1&gt; by calling the &lt;c2&gt;shuffled()&lt;/c2&gt; method on that range:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは&lt;c0&gt;0&lt;/c0&gt;と&lt;c1&gt;9&lt;/c1&gt;の間の数をシャッフルすることが、&lt;c2&gt;shuffled()&lt;/c2&gt;メソッドをその範囲上で呼び出すことによって可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can shuffle the numbers between &lt;c0&gt;0&lt;/c0&gt; and &lt;c1&gt;9&lt;/c1&gt; by calling the &lt;c2&gt;shuffled(using:)&lt;/c2&gt; method on that range:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは&lt;c0&gt;0&lt;/c0&gt;と&lt;c1&gt;9&lt;/c1&gt;の間の数をシャッフルすることが、&lt;c2&gt;shuffled(using:)&lt;/c2&gt;メソッドをその範囲上で呼び出すことによって可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can test whether the first &lt;c3&gt;UInt8&lt;/c3&gt; value in a string’s UTF-8 encoding is equal to the first &lt;c4&gt;UInt32&lt;/c4&gt; value in its Unicode scalar view:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある文字列のUTF-8符号化の中の最初の&lt;c3&gt;UInt8&lt;/c3&gt;値が、それのユニコードスカラー値での最初の&lt;c4&gt;UInt32&lt;/c4&gt;と等しいかどうかを試験できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can test whether the first &lt;c3&gt;UInt8&lt;/c3&gt; value in a string’s UTF-8 encoding is not equal to the first &lt;c4&gt;UInt32&lt;/c4&gt; value in its Unicode scalar view:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある文字列のUTF-8符号化の中の最初の&lt;c3&gt;UInt8&lt;/c3&gt;値が、それのユニコードスカラー値での最初の&lt;c4&gt;UInt32&lt;/c4&gt;と等しくないかどうかを試験できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use the &lt;c0&gt;shuffle(using:)&lt;/c0&gt; method to randomly reorder the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは&lt;c0&gt;shuffle(using:)&lt;/c0&gt;メソッドを使って、配列の要素を無作為に再配列することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method on a sequence of numbers to find their sum or product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを数値からなるシーケンス上で使うことで、それらの和または積を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを整数からなる配列で使うことで、隣接する同等の項目をフィルタしたり頻度を数えたりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method on an array of numbers to find their sum or product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを数値いくつかからなる配列で使うことで、それらの和または積を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method on an sequence of numbers to find their sum or product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを数値からなるシーケンス上で使うことで、それらの和または積を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you could define a &lt;c1&gt;User&lt;/c1&gt; type with an &lt;c2&gt;id&lt;/c2&gt; property that is stable across your app and your app’s database storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある&lt;c1&gt;User&lt;/c1&gt;型を、あなたのアプリとあなたのアプリのもつデータベースストレージにわたって安定しているある&lt;c2&gt;id&lt;/c2&gt;プロパティで定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you might want to create an array with the integers from 1 through 7.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは配列を１から７までの整数で作成したいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, “ϰ” (U+03F0 GREEK KAPPA SYMBOL) is considered both a mathematical symbol and a letter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、 “ϰ” (U+03F0 GREEK KAPPA SYMBOL) は、数学シンボルと表音文字の両方にみなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For extensible floating-point types, &lt;c0&gt;significand&lt;w1&gt;Bit&lt;w2&gt;Count&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; should be the maximum allowed significand width (without counting any leading integral bit of the significand).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>拡張可能な浮動小数点型に対して、&lt;c0&gt;significand&lt;w1&gt;Bit&lt;w2&gt;Count&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は許される最大仮数幅であるべきです（全く仮数の先頭整数ビットを数えることなく）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For fixed-width floating-point types, this is the actual number of fractional significand bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>固定長浮動小数点型に対して、これは小数部仮数ビットの実際の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For information about asynchronous functions, see &lt;a0&gt;Concurrency&lt;/a0&gt; in The Swift Programming Language.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期関数についての情報として、&lt;a0&gt;並行性&lt;/a0&gt;をThe Swift Programming Languageで見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For instances of &lt;c6&gt;NSDictionary&lt;/c6&gt; that are already immutable, &lt;c7&gt;copy(with:)&lt;/c7&gt; usually returns the same dictionary in O(1) time; otherwise, the copying performance is unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すでに可変の&lt;c6&gt;NSDictionary&lt;/c6&gt;のインスタンスに対しては、&lt;c7&gt;copy(with:)&lt;/c7&gt;は通常同じ辞書をO(1)時間で返します；そうでなければ、このコピー性能は不定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For instances of &lt;c7&gt;NSArray&lt;/c7&gt; that are already immutable, &lt;c8&gt;copy(with:)&lt;/c8&gt; usually returns the same array in O(1) time; otherwise, the copying performance is unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>元から不変である&lt;c7&gt;NSArray&lt;/c7&gt;のインスタンスに対しては、&lt;c8&gt;copy(with:)&lt;/c8&gt;は大抵は同じ配列をO(1)時間で返します；そうでなければ、コピーする性能は不定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For integer types, any remainder of the division is discarded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数型に対して、除算の余りは何であれ破棄されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more about arithmetic with overflow operators, see &lt;a0&gt;Overflow Operators&lt;/a0&gt; in &lt;e1&gt;&lt;a2&gt;The Swift Programming Language&lt;/a2&gt;&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー演算子を使う算術についてさらには、&lt;a0&gt;オーバーフロー演算子&lt;/a0&gt;を&lt;e1&gt;&lt;a2&gt;Swiftプログラミング言語&lt;/a2&gt;&lt;/e1&gt;で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about index invalidation in mutable collections, see the reference for the &lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;Range&lt;w3&gt;Replaceable&lt;w4&gt;Collection&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; protocols, as well as for the specific type you’re using.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変コレクションにおけるインデックス無効化についてのさらなる情報は、&lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;Range&lt;w3&gt;Replaceable&lt;w4&gt;Collection&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;プロトコルに対してのリファレンスを見てください、もちろんあなたが使っている特定の型に対しても。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about the Unicode terms used in this discussion, see the &lt;a0&gt;Unicode.org glossary&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この解説において使われるユニコード用語についてのさらなる情報は、&lt;a0&gt;Unicode.org用語集&lt;/a0&gt;を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about the available rounding rules, see the &lt;c0&gt;Floating&lt;w1&gt;Point&lt;w2&gt;Rounding&lt;w3&gt;Rule&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; enumeration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>利用可能な丸め規則についてのさらなる情報として、&lt;c0&gt;Floating&lt;w1&gt;Point&lt;w2&gt;Rounding&lt;w3&gt;Rule&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;列挙を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about using arrays, see &lt;c0&gt;Array&lt;/c0&gt; and &lt;c1&gt;Array&lt;w2&gt;Slice&lt;/w2&gt;&lt;/c1&gt;, with which &lt;c3&gt;Contiguous&lt;w4&gt;Array&lt;/w4&gt;&lt;/c3&gt; shares most properties and methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の使用についてのさらなる情報は、&lt;c0&gt;Array&lt;/c0&gt;と&lt;c1&gt;Array&lt;w2&gt;Slice&lt;/w2&gt;&lt;/c1&gt;を見てください、それらと&lt;c3&gt;Contiguous&lt;w4&gt;Array&lt;/w4&gt;&lt;/c3&gt;はほとんどのプロパティとメソッドを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about using arrays, see &lt;c0&gt;Array&lt;/c0&gt; and &lt;c1&gt;Contiguous&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;, with which &lt;c3&gt;Array&lt;w4&gt;Slice&lt;/w4&gt;&lt;/c3&gt; shares most properties and methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の使用についてのさらなる情報として、&lt;c0&gt;Array&lt;/c0&gt;と&lt;c1&gt;Contiguous&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;を見てください、それらと&lt;c3&gt;Array&lt;w4&gt;Slice&lt;/w4&gt;&lt;/c3&gt;はほとんどのプロパティとメソッドを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information, see &lt;a0&gt;Ownership Policy&lt;/a0&gt; in &lt;a1&gt;Memory Management Programming Guide for Core Foundation&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>更なる情報のために、&lt;a0&gt;Ownership Policy&lt;/a0&gt;を&lt;a1&gt;Memory Management Programming Guide for Core Foundation&lt;/a1&gt;で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information, see the &lt;c0&gt;Default&lt;w1&gt;String&lt;w2&gt;Interpolation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c3&gt;String&lt;w4&gt;Interpolation&lt;w5&gt;Protocol&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; documentation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さらなる情報として、&lt;c0&gt;Default&lt;w1&gt;String&lt;w2&gt;Interpolation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と&lt;c3&gt;String&lt;w4&gt;Interpolation&lt;w5&gt;Protocol&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;文書化を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information, see the &lt;c0&gt;String&lt;w1&gt;Interpolation&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; documentation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さらなる情報として、&lt;c0&gt;String&lt;w1&gt;Interpolation&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;の文書化を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For most numbers &lt;c0&gt;x&lt;/c0&gt;, this is the difference between &lt;c1&gt;x&lt;/c1&gt; and the next greater (in magnitude) representable number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの数&lt;c0&gt;x&lt;/c0&gt;に対して、これは&lt;c1&gt;x&lt;/c1&gt;と次の（規模における）より大きい表現可能な数との間の差異です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For other collections the counters may be out of range or of the wrong type to use as an index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他のコレクションに対してこれらのカウンタは、インデックスとして使うのには範囲外または間違った型になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For other values of &lt;c3&gt;x&lt;/c3&gt;, &lt;c4&gt;x&lt;w5&gt;.significand&lt;/w5&gt;&lt;/c4&gt; is defined as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の値&lt;c3&gt;x&lt;/c3&gt;に対して、&lt;c4&gt;x&lt;w5&gt;.significand&lt;/w5&gt;&lt;/c4&gt;は次のように定義されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For performance reasons, the size of the newly allocated storage might be greater than the requested capacity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>性能上の理由から、新しく割り当てられたストレージは要請された容量より大きいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For pointers to untyped, raw memory, the following mappings apply:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型無しの、生のメモリへのポインタに対して、以下のマッピングを適用します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For return types, variables, and arguments, the following mappings apply:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り型、変数、そして引数のために、以下のマッピングが適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For signed integer types, this value is &lt;c0&gt;(2 ** (bit&lt;w1&gt;Width - 1)) - 1&lt;/w1&gt;&lt;/c0&gt;, where &lt;c2&gt;**&lt;/c2&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数型に対して、この値は&lt;c0&gt;(2 ** (bit&lt;w1&gt;Width - 1)) - 1&lt;/w1&gt;&lt;/c0&gt;です、そこで&lt;c2&gt;**&lt;/c2&gt;は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For signed integer types, this value is &lt;c0&gt;-(2 ** (bit&lt;w1&gt;Width - 1))&lt;/w1&gt;&lt;/c0&gt;, where &lt;c2&gt;**&lt;/c2&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数型に対して、この値は&lt;c0&gt;-(2 ** (bit&lt;w1&gt;Width - 1))&lt;/w1&gt;&lt;/c0&gt;です、そこで&lt;c2&gt;**&lt;/c2&gt;は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For signed integer types, this value is &lt;c1&gt;-(2 ** (bit&lt;w2&gt;Width - 1))&lt;/w2&gt;&lt;/c1&gt;, where &lt;c3&gt;**&lt;/c3&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数型に対して、この値は&lt;c1&gt;-(2 ** (bit&lt;w2&gt;Width - 1))&lt;/w2&gt;&lt;/c1&gt;です、そこで&lt;c3&gt;**&lt;/c3&gt;は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For signed integer types, this value is &lt;c3&gt;(2 ** (bit&lt;w4&gt;Width - 1)) - 1&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数型に対して、この値は&lt;c3&gt;(2 ** (bit&lt;w4&gt;Width - 1)) - 1&lt;/w4&gt;&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば整数および他の構造体のような単純な型にとって、これは、あなたがある配列の中のある値を変更する場合、その要素の値はその配列の何らかのコピーにおいては変化しないことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For structs whose stored properties are all &lt;c3&gt;Hashable&lt;/c3&gt;, and for enum types that have all-&lt;c4&gt;Hashable&lt;/c4&gt; associated values, the compiler is able to provide an implementation of &lt;c5&gt;hash(into:)&lt;/c5&gt; automatically.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらの格納プロパティが全て&lt;c3&gt;Hashable&lt;/c3&gt;であるstructに対して、そして全て&lt;c4&gt;Hashable&lt;/c4&gt;関連値を持つenum型に対して、コンパイラは&lt;c5&gt;hash(into:)&lt;/c5&gt;の実装を自動的に提供可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For tasks that need to handle cancellation by throwing an error, use the &lt;c3&gt;with&lt;w4&gt;Throwing&lt;w5&gt;Task&lt;w6&gt;Group(of:&lt;w7&gt;returning:&lt;w8&gt;body:)&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラーをスローすることによって取り消しを取り扱う必要があるタスクのために、&lt;c3&gt;with&lt;w4&gt;Throwing&lt;w5&gt;Task&lt;w6&gt;Group(of:&lt;w7&gt;returning:&lt;w8&gt;body:)&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;メソッドを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For this reason, imported Objective-C types frequently use &lt;c3&gt;Any&lt;w4&gt;Object&lt;/w4&gt;&lt;/c3&gt; as the type for properties, method parameters, and return values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この理由から、インポートされたObjective-C型はしばしば&lt;c3&gt;Any&lt;w4&gt;Object&lt;/w4&gt;&lt;/c3&gt;をプロパティ、メソッドパラメータ、そして戻り値の型として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For this reason, the first operation that uses the contents of the dictionary may take O(&lt;e5&gt;n&lt;/e5&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この理由のために、辞書の内容を使う最初の演算はO(&lt;e5&gt;n&lt;/e5&gt;)をとるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For this reason, you should almost never need to use a bridged reference type directly in your own code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この理由のために、あなたはブリッジ参照型を直接にあなた自身のコードにおいて使う必要はほとんどないはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two finite values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, the remainder &lt;c2&gt;r&lt;/c2&gt; of dividing &lt;c3&gt;x&lt;/c3&gt; by &lt;c4&gt;y&lt;/c4&gt; satisfies &lt;c5&gt;x == y * q + r&lt;/c5&gt;, where &lt;c6&gt;q&lt;/c6&gt; is the integer nearest to &lt;c7&gt;x / y&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの有限値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;に対して、&lt;c3&gt;x&lt;/c3&gt;を&lt;c4&gt;y&lt;/c4&gt;で割った余り&lt;c2&gt;r&lt;/c2&gt;は&lt;c5&gt;x == y * q + r&lt;/c5&gt;を満足させます、ここで&lt;c6&gt;q&lt;/c6&gt;は&lt;c7&gt;x / y&lt;/c7&gt;に最も近い整数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two integers &lt;e0&gt;a&lt;/e0&gt; and &lt;e1&gt;b&lt;/e1&gt;, &lt;e2&gt;a&lt;/e2&gt; is a multiple of &lt;e3&gt;b&lt;/e3&gt; if there exists a third integer &lt;e4&gt;q&lt;/e4&gt; such that &lt;e5&gt;a = q*b&lt;/e5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの整数&lt;e0&gt;a&lt;/e0&gt;と&lt;e1&gt;b&lt;/e1&gt;に対して、&lt;e2&gt;a&lt;/e2&gt;は&lt;e3&gt;b&lt;/e3&gt;の倍数です、もし第３の整数&lt;e4&gt;q&lt;/e4&gt;が存在して、&lt;e5&gt;a = q*b&lt;/e5&gt;であるようなところでは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two tuples to compare as equal, each corresponding pair of components must be equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのタプルが等しいと比較されるには、対応する構成要素同士がそれぞれ等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, and a distance &lt;c2&gt;n = x&lt;w3&gt;.distance(to: y)&lt;/w3&gt;&lt;/c2&gt;, &lt;c4&gt;x&lt;w5&gt;.advanced(by: n) == y&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;、そして隔たり&lt;c2&gt;n = x&lt;w3&gt;.distance(to: y)&lt;/w3&gt;&lt;/c2&gt;に対して、&lt;c4&gt;x&lt;w5&gt;.advanced(by: n) == y&lt;/w5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, the result of &lt;c2&gt;maximum(x, y)&lt;/c2&gt; is &lt;c3&gt;x&lt;/c3&gt; if &lt;c4&gt;x &gt; y&lt;/c4&gt;, &lt;c5&gt;y&lt;/c5&gt; if &lt;c6&gt;x &lt;= y&lt;/c6&gt;, or whichever of &lt;c7&gt;x&lt;/c7&gt; or &lt;c8&gt;y&lt;/c8&gt; is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;に対して、&lt;c2&gt;maximum(x, y)&lt;/c2&gt;の結果は&lt;c4&gt;x &gt; y&lt;/c4&gt;ならば&lt;c3&gt;x&lt;/c3&gt;、&lt;c6&gt;x &lt;= y&lt;/c6&gt;ならば&lt;c5&gt;y&lt;/c5&gt;、または他のものがクワイエットNaNならば&lt;c7&gt;x&lt;/c7&gt;か&lt;c8&gt;y&lt;/c8&gt;どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, the result of &lt;c2&gt;maximum&lt;w3&gt;Magnitude(x, y)&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;x&lt;/c4&gt; if &lt;c5&gt;x&lt;w6&gt;.magnitude &gt; y&lt;w7&gt;.magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;, &lt;c8&gt;y&lt;/c8&gt; if &lt;c9&gt;x&lt;w10&gt;.magnitude &lt;= y&lt;w11&gt;.magnitude&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;, or whichever of &lt;c12&gt;x&lt;/c12&gt; or &lt;c13&gt;y&lt;/c13&gt; is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;に対して、&lt;c2&gt;maximum&lt;w3&gt;Magnitude(x, y)&lt;/w3&gt;&lt;/c2&gt;の結果は、&lt;c5&gt;x&lt;w6&gt;.magnitude &gt; y&lt;w7&gt;.magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;ならば&lt;c4&gt;x&lt;/c4&gt;、&lt;c9&gt;x&lt;w10&gt;.magnitude &lt;= y&lt;w11&gt;.magnitude&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;ならば&lt;c8&gt;y&lt;/c8&gt;、または他のものがクワイエットNaNならば&lt;c12&gt;x&lt;/c12&gt;か&lt;c13&gt;y&lt;/c13&gt;どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, the result of &lt;c2&gt;minimum(x, y)&lt;/c2&gt; is &lt;c3&gt;x&lt;/c3&gt; if &lt;c4&gt;x &lt;= y&lt;/c4&gt;, &lt;c5&gt;y&lt;/c5&gt; if &lt;c6&gt;y &lt; x&lt;/c6&gt;, or whichever of &lt;c7&gt;x&lt;/c7&gt; or &lt;c8&gt;y&lt;/c8&gt; is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;に対して、&lt;c2&gt;minimum(x, y)&lt;/c2&gt;の結果は&lt;c4&gt;x &lt;= y&lt;/c4&gt;ならば&lt;c3&gt;x&lt;/c3&gt;、&lt;c6&gt;y &lt; x&lt;/c6&gt;ならば&lt;c5&gt;y&lt;/c5&gt;、または他のものがクワイエットNaNならば&lt;c7&gt;x&lt;/c7&gt;か&lt;c8&gt;y&lt;/c8&gt;どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, the result of &lt;c2&gt;minimum&lt;w3&gt;Magnitude(x, y)&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;x&lt;/c4&gt; if &lt;c5&gt;x&lt;w6&gt;.magnitude &lt;= y&lt;w7&gt;.magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;, &lt;c8&gt;y&lt;/c8&gt; if &lt;c9&gt;y&lt;w10&gt;.magnitude &lt; x&lt;w11&gt;.magnitude&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;, or whichever of &lt;c12&gt;x&lt;/c12&gt; or &lt;c13&gt;y&lt;/c13&gt; is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;に対して、&lt;c2&gt;minimum&lt;w3&gt;Magnitude(x, y)&lt;/w3&gt;&lt;/c2&gt;の結果は&lt;c5&gt;x&lt;w6&gt;.magnitude &lt;= y&lt;w7&gt;.magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;ならば&lt;c4&gt;x&lt;/c4&gt;、&lt;c9&gt;y&lt;w10&gt;.magnitude &lt; x&lt;w11&gt;.magnitude&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;ならば&lt;c8&gt;y&lt;/c8&gt;、または他のものがクワイエットNaNならば&lt;c12&gt;x&lt;/c12&gt;か&lt;c13&gt;y&lt;/c13&gt;どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For unsigned integer types, this value is &lt;c0&gt;(2 ** bit&lt;w1&gt;Width) - 1&lt;/w1&gt;&lt;/c0&gt;, where &lt;c2&gt;**&lt;/c2&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし整数型に対して、この値は&lt;c0&gt;(2 ** bit&lt;w1&gt;Width) - 1&lt;/w1&gt;&lt;/c0&gt;です、そこで&lt;c2&gt;**&lt;/c2&gt;は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For unsigned integer types, this value is always &lt;c0&gt;0&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし整数型に対して、この値は常に&lt;c0&gt;0&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For value equality, see the equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) and the &lt;c1&gt;Equatable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の同等性については、同等演算子（&lt;c0&gt;==&lt;/c0&gt;）そして&lt;c1&gt;Equatable&lt;/c1&gt;プロトコルを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For value inequality, see the not-equal-to operator (&lt;c0&gt;!=&lt;/c0&gt;) and the &lt;c1&gt;Equatable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の不等性については、不等演算子（&lt;c0&gt;!=&lt;/c0&gt;）そして&lt;c1&gt;Equatable&lt;/c1&gt;プロトコルを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt; and their truncated integer quotient &lt;c2&gt;q&lt;/c2&gt;, the remainder &lt;c3&gt;r&lt;/c3&gt; satisfies &lt;c4&gt;x == y * q + r&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;および切り捨てられる整数指数&lt;c2&gt;q&lt;/c2&gt;に対して、余り&lt;c3&gt;r&lt;/c3&gt;は&lt;c4&gt;x == y * q + r&lt;/c4&gt;を満足させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Forward declarations of Swift classes and protocols can be used only as types for method and property declarations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftのクラスとプロトコルの前方宣言は、メソッドおよびプロパティ宣言に対する型としてのみ使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Foundation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファウンデーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Foundation classes often declare enumeration or constant types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Foundationクラスは、しばしば列挙や定数型を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Framework</seg>
      </tuv>
      <tuv lang="ja">
        <seg>フレームワーク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>由来プロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Function</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Further modifications to &lt;c2&gt;numbers&lt;/c2&gt; are made in place, while the two copies continue to share the original storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;numbers&lt;/c2&gt;への以降の修正は、そこでなされます、一方２つのコピーは元々のストレージの共有を続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally, a &lt;c1&gt;Character&lt;/c1&gt; instance matches what the reader of a string will perceive as a single character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般的に、ある&lt;c1&gt;Character&lt;/c1&gt;インスタンスがマッチするのは、ある文字列の読み手が単一の文字と知覚するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally, native Swift types that do not contain strong or weak references are trivial, as are imported C structs and enums.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般に、生粋のSwift型で強いまたは弱い参照を含まないものは自明です、インポートされたCのstructとenumのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generic Instance Method</seg>
      </tuv>
      <tuv lang="ja">
        <seg>総称体インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generic Type Alias</seg>
      </tuv>
      <tuv lang="ja">
        <seg>総称体型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting and Setting Dictionary Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の値の取得と設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given the &lt;c6&gt;Counter&lt;/c6&gt; sequence from the previous example, you can test for the existence of a sequence member with a one-line call:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以前の例からの&lt;c6&gt;Counter&lt;/c6&gt;シーケンスを与えられて、あなたはあるシーケンスメンバーの存在を一行呼び出しで試験できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given two tuples &lt;c0&gt;(a1, a2, ..., a&lt;w1&gt;N)&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;(b1, b2, ..., b&lt;w3&gt;N)&lt;/w3&gt;&lt;/c2&gt;, the first tuple is after or the same as the second tuple if and only if &lt;c4&gt;a1 &gt; b1&lt;/c4&gt; or (&lt;c5&gt;a1 == b1&lt;/c5&gt; and &lt;c6&gt;(a2, ..., a&lt;w7&gt;N) &gt;= (b2, ..., b&lt;w8&gt;N)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのタプル&lt;c0&gt;(a1, a2, ..., a&lt;w1&gt;N)&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;(b1, b2, ..., b&lt;w3&gt;N)&lt;/w3&gt;&lt;/c2&gt;を与えられて、最初のタプルが２番目のタブルより後かそれと同じであるのは、&lt;c4&gt;a1 &gt; b1&lt;/c4&gt;または(&lt;c5&gt;a1 == b1&lt;/c5&gt;および&lt;c6&gt;(a2, ..., a&lt;w7&gt;N) &gt;= (b2, ..., b&lt;w8&gt;N)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;)である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given two tuples &lt;c0&gt;(a1, a2, ..., a&lt;w1&gt;N)&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;(b1, b2, ..., b&lt;w3&gt;N)&lt;/w3&gt;&lt;/c2&gt;, the first tuple is after the second tuple if and only if &lt;c4&gt;a1 &gt; b1&lt;/c4&gt; or (&lt;c5&gt;a1 == b1&lt;/c5&gt; and &lt;c6&gt;(a2, ..., a&lt;w7&gt;N) &gt; (b2, ..., b&lt;w8&gt;N)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのタプル&lt;c0&gt;(a1, a2, ..., a&lt;w1&gt;N)&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;(b1, b2, ..., b&lt;w3&gt;N)&lt;/w3&gt;&lt;/c2&gt;を与えられて、最初のタプルが２番目のタブルより後であるのは、&lt;c4&gt;a1 &gt; b1&lt;/c4&gt;または(&lt;c5&gt;a1 == b1&lt;/c5&gt;および&lt;c6&gt;(a2, ..., a&lt;w7&gt;N) &gt; (b2, ..., b&lt;w8&gt;N)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;)である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given two tuples &lt;c0&gt;(a1, a2, ..., a&lt;w1&gt;N)&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;(b1, b2, ..., b&lt;w3&gt;N)&lt;/w3&gt;&lt;/c2&gt;, the first tuple is before or the same as the second tuple if and only if &lt;c4&gt;a1 &lt; b1&lt;/c4&gt; or (&lt;c5&gt;a1 == b1&lt;/c5&gt; and &lt;c6&gt;(a2, ..., a&lt;w7&gt;N) &lt;= (b2, ..., b&lt;w8&gt;N)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのタプル&lt;c0&gt;(a1, a2, ..., a&lt;w1&gt;N)&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;(b1, b2, ..., b&lt;w3&gt;N)&lt;/w3&gt;&lt;/c2&gt;を与えられて、最初のタプルが２番目のタブルより前かそれと同じであるのは、&lt;c4&gt;a1 &lt; b1&lt;/c4&gt;または(&lt;c5&gt;a1 == b1&lt;/c5&gt;および&lt;c6&gt;(a2, ..., a&lt;w7&gt;N) &lt;= (b2, ..., b&lt;w8&gt;N)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;)である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given two tuples &lt;c0&gt;(a1, a2, ..., a&lt;w1&gt;N)&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;(b1, b2, ..., b&lt;w3&gt;N)&lt;/w3&gt;&lt;/c2&gt;, the first tuple is before the second tuple if and only if &lt;c4&gt;a1 &lt; b1&lt;/c4&gt; or (&lt;c5&gt;a1 == b1&lt;/c5&gt; and &lt;c6&gt;(a2, ..., a&lt;w7&gt;N) &lt; (b2, ..., b&lt;w8&gt;N)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのタプル&lt;c0&gt;(a1, a2, ..., a&lt;w1&gt;N)&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;(b1, b2, ..., b&lt;w3&gt;N)&lt;/w3&gt;&lt;/c2&gt;を与えられて、最初のタプルが２番目のタブルより後であるのは、&lt;c4&gt;a1 &lt; b1&lt;/c4&gt;または(&lt;c5&gt;a1 == b1&lt;/c5&gt; and &lt;c6&gt;(a2, ..., a&lt;w7&gt;N) &lt; (b2, ..., b&lt;w8&gt;N)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;)である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Global Numeric Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グローバルな数値関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Growing the Size of an Array</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の大きさの増大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Guaranteed always unique (e.g. UUIDs).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常に特有であると保証される（たとえば、UUID）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Handle Exceptions in Objective-C Only</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cにだけしかない例外を処理する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Handling Cocoa Errors in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CocoaエラーをSwiftにおいて処理する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Handling Dynamically Typed Methods and Objects in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>動的に型付メソッドとオブジェクトをSwiftにおいて取り扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hash values are not guaranteed to be equal across different executions of your program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ値は、あなたのプログラムの異なる実行をまたいで等しいことを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hashes the elements of the vector using the given hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの要素をこの与えられたハーシャーを使ってハッシュ化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hashes the essential components of this value by feeding them into the given hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の本質的な構成要素を、それらをその与えられたhasherへと与えることによって、ハッシュ化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hashing a value means feeding its essential components into a hash function, represented by the &lt;c0&gt;Hasher&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値をハッシュ化することは、それの本質的な構成要素を、&lt;c0&gt;Hasher&lt;/c0&gt;型によって表される、ハッシュ関数へと投入することを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here's how you handle the same error in Swift:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、あなたが同じエラーをSwiftで処理する方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, an array of strings is created from an array literal holding only strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここでは、文字列からなる配列が、文字列だけを保持している配列リテラルから作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, an array of strings is created from an array literal holding only strings:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここでは、文字列の配列が、文字列だけを保持する配列リテラルから作成されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, the value for the key &lt;c0&gt;"Coral"&lt;/c0&gt; is updated from &lt;c1&gt;16&lt;/c1&gt; to &lt;c2&gt;18&lt;/c2&gt; and a new key-value pair is added for the key &lt;c3&gt;"Cerise"&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここでは、キー&lt;c0&gt;"Coral"&lt;/c0&gt;に対する値が&lt;c1&gt;16&lt;/c1&gt;から&lt;c2&gt;18&lt;/c2&gt;に更新され、そして新しいキー値ペアがキー&lt;c3&gt;"Cerise"&lt;/c3&gt;に対して加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of a type that declares the minimal requirements for a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにある型の例があります、それはあるコレクションのための最小限の要件を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of accessing the first character in a string through its subscript:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにあるのはある文字列の最初の文字にそれの添え字を通してアクセスする例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of creating a set and an array using array literals:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに配列リテラルを使って集合と配列を作成する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of creating an array initialized with five strings containing the letter &lt;e0&gt;Z&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、字&lt;e0&gt;Z&lt;/e0&gt;を含んでいる５つの文字列で初期化される配列を作成する例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of how you handle an error when calling a method in Objective-C:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、メソッドをObejctive-Cにおいて呼び出す時に、あなたがエラーを処理する方法の例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of inserting a range of integers into an array of the same type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに整数の範囲を同じ型の配列へ挿入する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of sorting a list of students’ names.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、生徒名のリストをソートする例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of the number -8.5 represented as an instance of the &lt;c0&gt;Double&lt;/c0&gt; type, which defines a radix of 2.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに&lt;c0&gt;Double&lt;/c0&gt;型のあるインスタンスとして表される数-8.5の例があります、それは２の基数を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example that finds a student name that begins with the letter “A”:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、文字「A」で始まる生徒名を見つける例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an implementation of those steps:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにこれらの手順の実装があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s how Swift imports them:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにどのようにスウィフトがそれらをインポートするかがあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s how you can catch any &lt;c0&gt;XMLParsing&lt;w1&gt;Error&lt;/w1&gt;&lt;/c0&gt; errors thrown by the &lt;c2&gt;parse(_:)&lt;/c2&gt; function:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにあるのは、あなたが&lt;c2&gt;parse(_:)&lt;/c2&gt;関数によってスローされる何らかの&lt;c0&gt;XMLParsing&lt;w1&gt;Error&lt;/w1&gt;&lt;/c0&gt;エラーを捕まえる方法です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s how you would create a dictionary of HTTP response codes and their related messages:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにあるのは、あなたがHTTP応答コードとそれらの関連メッセージの辞書を作成する方法です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s the Swift version of those declarations when you import them:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、あなたがそれらをインポートする場合のSwiftバージョンのそれら宣言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s the definition for &lt;c2&gt;Integer&lt;w3&gt;Ref&lt;/w3&gt;&lt;/c2&gt; and the &lt;c4&gt;==&lt;/c4&gt; function that makes it conform to &lt;c5&gt;Equatable&lt;/c5&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに&lt;c2&gt;Integer&lt;w3&gt;Ref&lt;/w3&gt;&lt;/c2&gt;とそれを&lt;c4&gt;Equatable&lt;/c4&gt;に準拠させる&lt;c5&gt;==&lt;/c5&gt;関数の定義があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s the initial declaration of the &lt;c2&gt;Grid&lt;w3&gt;Point&lt;/w3&gt;&lt;/c2&gt; type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに&lt;c2&gt;Grid&lt;w3&gt;Point&lt;/w3&gt;&lt;/c2&gt;型の初期宣言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s the initial declaration of the &lt;c2&gt;Street&lt;w3&gt;Address&lt;/w3&gt;&lt;/c2&gt; type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに&lt;c2&gt;Street&lt;w3&gt;Address&lt;/w3&gt;&lt;/c2&gt;型の初期宣言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hexadecimal digits include 0-9, Latin letters a-f and A-F, and their fullwidth compatibility forms.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16進法桁は、0-9、Latin文字 a-f および A-F、そしてそれらの全角互換形式を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Historically “epsilon” has been used to refer to several different concepts in different languages, leading to confusion and bugs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>歴史的に “イプシロン” は、異なる言語でいくつかの異なる概念に言及するのに使われていて、混乱とバグに通じます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However if you call this function from the body of a synchronous function, and that function isn’t executing in the context of any task, the unsafe task handle is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたがこの関数を同期関数の本体から呼び出すならば、そしてその関数が何らかのタスクの文脈において遂行していないならば、非安全タスクハンドルは&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, because the &lt;c1&gt;Any&lt;/c1&gt; type can refer to any type, a downcast to a more specific type isn't guaranteed by the compiler to succeed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、&lt;c1&gt;Any&lt;/c1&gt;型がどんな型でも参照できることから、より具体的な型へのダウンキャストはコンパイラによって成功することが保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, because the caller must potentially wait for values, you use the &lt;c5&gt;await&lt;/c5&gt; keyword.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、呼び出し側が潜在的に値それらに対して待機することから、あなたは&lt;c5&gt;await&lt;/c5&gt;キーワードを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, during development, the ability to verify that the invariants are being upheld in testing is important.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、開発の間は、試験することで不変式それらが支持されていることを検証できることは重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if a forced downcast fails, a runtime error is triggered:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、強制型キャストが失敗するならば、実行時エラーが引き起こされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、２つの配列が同じオブジェクトへの参照を含むならば、あなたは両方の配列からそのオブジェクトの持つプロパティへの変更を観察するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if you call &lt;c0&gt;next()&lt;/c0&gt; in the task group and propogate its error, all other tasks are canceled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが&lt;c0&gt;next()&lt;/c0&gt;をタスクグループの中で呼び出してそしてそれのエラーを伝播するならば、全ての他のタスクは取り消されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if you pass &lt;c0&gt;19&lt;/c0&gt; as &lt;c1&gt;rhs&lt;/c1&gt;, the method first bitmasks &lt;c2&gt;rhs&lt;/c2&gt; to &lt;c3&gt;3&lt;/c3&gt;, and then uses that masked value as the number of bits to shift &lt;c4&gt;lhs&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが&lt;c0&gt;19&lt;/c0&gt;を&lt;c1&gt;rhs&lt;/c1&gt;として渡すならば、このメソッドは最初に&lt;c2&gt;rhs&lt;/c2&gt;を&lt;c3&gt;3&lt;/c3&gt;にビットマスクして、それからそのマスクされた値をビット数として使うことで&lt;c4&gt;lhs&lt;/c4&gt;をシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if you use &lt;c0&gt;19&lt;/c0&gt; as &lt;c1&gt;rhs&lt;/c1&gt;, the operation first bitmasks &lt;c2&gt;rhs&lt;/c2&gt; to &lt;c3&gt;3&lt;/c3&gt;, and then uses that masked value as the number of bits to shift &lt;c4&gt;lhs&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが&lt;c0&gt;19&lt;/c0&gt;を&lt;c1&gt;rhs&lt;/c1&gt;として使うならば、この演算は最初に&lt;c2&gt;rhs&lt;/c2&gt;を&lt;c3&gt;3&lt;/c3&gt;にビットマスクして、それからそのマスクされた値をビット数として使うことで&lt;c4&gt;lhs&lt;/c4&gt;をシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if you use &lt;c0&gt;8&lt;/c0&gt; as the shift amount, the method first masks the shift amount to zero, and then performs the shift, resulting in no change to the original value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが&lt;c0&gt;8&lt;/c0&gt;をシフト量として使うならば、メソッドは最初にそのシフト量をマスクしてゼロにして、それからシフトを実行して、元の値に対して変更しないという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, in Swift, it’s imported as two methods:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、Swiftでは、それは２つのメソッドとしてインポートされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, macros can make debugging and refactoring difficult.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかし、マクロはデバッグやリファクタリングを難しくすることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたがクラス継承で構築できる種類の継承階層はまた、プロトコル継承と構造体を使ってモデル化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, the underlying hash algorithm is designed to exhibit avalanche effects: slight changes to the seed or the input byte sequence will typically produce drastic changes in the generated hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、基礎をなすハッシュアルゴリズムは、雪崩効果を示すように設計されます：そのシードまたは入力バイト列に対するわずかな変更は、概して生成されたハッシュ値に徹底的な変化を生じさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, there’s no safe way to recover from Objective-C exceptions in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、スウィフトにはObjective-C例外から回復する安全な方法はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, they're inaccessible at compile time and don't appear in the generated header for a framework target.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、それらはコンパイル時にはアクセス不可能です、そしてフレームワークターゲットに対する生成ヘッダの中に現れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, when the closure receives &lt;c15&gt;4&lt;/c15&gt;, it throws an error, terminating the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、クロージャが&lt;c15&gt;4&lt;/c15&gt;を受け取る場合、それはシーケンスを終端して、エラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identifiable Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Identifiableの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identities could be any of the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一性は、以下のどれかでありえます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;are&lt;w1&gt;Equivalent(a, b)&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;are&lt;w3&gt;Equivalent(b, c)&lt;/w3&gt;&lt;/c2&gt; are both &lt;c4&gt;true&lt;/c4&gt;, then &lt;c5&gt;are&lt;w6&gt;Equivalent(a, c)&lt;/w6&gt;&lt;/c5&gt; is also &lt;c7&gt;true&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;Equivalent(a, b)&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;are&lt;w3&gt;Equivalent(b, c)&lt;/w3&gt;&lt;/c2&gt;が両方とも&lt;c4&gt;true&lt;/c4&gt;ならば、そのとき&lt;c5&gt;are&lt;w6&gt;Equivalent(a, c)&lt;/w6&gt;&lt;/c5&gt;もまた&lt;c7&gt;true&lt;/c7&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order(a, b)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c4&gt;are&lt;w5&gt;In&lt;w6&gt;Increasing&lt;w7&gt;Order(b, c)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; are both &lt;c8&gt;true&lt;/c8&gt;, then &lt;c9&gt;are&lt;w10&gt;In&lt;w11&gt;Increasing&lt;w12&gt;Order(a, c)&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt; is also &lt;c13&gt;true&lt;/c13&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order(a, b)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と&lt;c4&gt;are&lt;w5&gt;In&lt;w6&gt;Increasing&lt;w7&gt;Order(b, c)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;が両方とも&lt;c8&gt;true&lt;/c8&gt;ならば、そのとき&lt;c9&gt;are&lt;w10&gt;In&lt;w11&gt;Increasing&lt;w12&gt;Order(a, c)&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;もまた&lt;c13&gt;true&lt;/c13&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt; is zero, the result is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt;がゼロならば、結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;description&lt;/c0&gt; is in an invalid format, or if the value it denotes in base 10 is not representable, the result is &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;description&lt;/c0&gt;が無効な形式になっているならば、またはそれが底10で示す値が表現可能でないならば、結果は&lt;c1&gt;nil&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;distance &gt; 0&lt;/c0&gt;, &lt;c1&gt;limit&lt;/c1&gt; has no effect if it is less than &lt;c2&gt;i&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance &gt; 0&lt;/c0&gt;ならば、&lt;c1&gt;limit&lt;/c1&gt;はそれが&lt;c2&gt;i&lt;/c2&gt;より少ないならば効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;distance &gt; 0&lt;/c0&gt;, &lt;c1&gt;limit&lt;/c1&gt; should be greater than &lt;c2&gt;i&lt;/c2&gt; to have any effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance &gt; 0&lt;/c0&gt;ならば、&lt;c1&gt;limit&lt;/c1&gt;が何らかの効果を持つには&lt;c2&gt;i&lt;/c2&gt;より大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;distance &gt; 0&lt;/c0&gt;, a limit that is less than &lt;c1&gt;i&lt;/c1&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance &gt; 0&lt;/c0&gt;ならば、&lt;c1&gt;i&lt;/c1&gt;より少ない限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;end&lt;/c0&gt; is equal to &lt;c1&gt;start&lt;/c1&gt;, the result is zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;が&lt;c1&gt;start&lt;/c1&gt;に等しいならば、結果はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;false&lt;/c0&gt;, an empty subsequence is returned in the result for each consecutive pair of &lt;c1&gt;separator&lt;/c1&gt; elements in the collection and for each instance of &lt;c2&gt;separator&lt;/c2&gt; at the start or end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;false&lt;/c0&gt;ならば、このコレクション中の連続する&lt;c1&gt;separator&lt;/c1&gt;要素の対それぞれに、そしてコレクションの始めと終わりの&lt;c2&gt;separator&lt;/c2&gt;インスタンスそれぞれに、１つの空の下位シーケンスが結果において返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;false&lt;/c0&gt;, an empty subsequence is returned in the result for each consecutive pair of &lt;c1&gt;separator&lt;/c1&gt; elements in the sequence and for each instance of &lt;c2&gt;separator&lt;/c2&gt; at the start or end of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;false&lt;/c0&gt;ならば、このシーケンス中の連続する&lt;c1&gt;separator&lt;/c1&gt;要素の対それぞれに、そしてシーケンスの始めと終わりの&lt;c2&gt;separator&lt;/c2&gt;インスタンスそれぞれに、１つの空の下位シーケンスが結果において返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;false&lt;/c0&gt;, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the &lt;c1&gt;is&lt;w2&gt;Separator&lt;/w2&gt;&lt;/c1&gt; predicate and for each element at the start or end of the collection satisfying the &lt;c3&gt;is&lt;w4&gt;Separator&lt;/w4&gt;&lt;/c3&gt; predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;false&lt;/c0&gt;ならば、結果において&lt;c1&gt;is&lt;w2&gt;Separator&lt;/w2&gt;&lt;/c1&gt;述部を満たす隣接する要素のペアそれぞれに対しておよび&lt;c3&gt;is&lt;w4&gt;Separator&lt;/w4&gt;&lt;/c3&gt;述部を満たすコレクションの始まりまたは終わりでの要素それぞれに対して１つの空の下位シーケンスが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;false&lt;/c0&gt;, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the &lt;c1&gt;is&lt;w2&gt;Separator&lt;/w2&gt;&lt;/c1&gt; predicate and for each element at the start or end of the sequence satisfying the &lt;c3&gt;is&lt;w4&gt;Separator&lt;/w4&gt;&lt;/c3&gt; predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;false&lt;/c0&gt;ならば、結果において&lt;c1&gt;is&lt;w2&gt;Separator&lt;/w2&gt;&lt;/c1&gt;述部を満たす隣接する要素のペアそれぞれに対しておよび&lt;c3&gt;is&lt;w4&gt;Separator&lt;/w4&gt;&lt;/c3&gt;述部を満たすシーケンスの始まりまたは終わりでの要素それぞれに対して１つの空の下位シーケンスが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;from&lt;/c0&gt; is &lt;c1&gt;nil&lt;/c1&gt;, the result of this initializer is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;from&lt;/c0&gt;が&lt;c1&gt;nil&lt;/c1&gt;ならば、このイニシャライザの結果は、&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;i &gt; c&lt;w1&gt;.start&lt;w2&gt;Index &amp;&amp; i &lt;= c&lt;w3&gt;.end&lt;w4&gt;Index&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; &lt;c5&gt;c&lt;w6&gt;.index(after: c&lt;w7&gt;.index(before: i)) == i&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i &gt; c&lt;w1&gt;.start&lt;w2&gt;Index &amp;&amp; i &lt;= c&lt;w3&gt;.end&lt;w4&gt;Index&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;ならば&lt;c5&gt;c&lt;w6&gt;.index(after: c&lt;w7&gt;.index(before: i)) == i&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;i &gt;= c&lt;w1&gt;.start&lt;w2&gt;Index &amp;&amp; i &lt; c&lt;w3&gt;.end&lt;w4&gt;Index&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, &lt;c5&gt;c&lt;w6&gt;.index(before: c&lt;w7&gt;.index(after: i)) == i&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i &gt;= c&lt;w1&gt;.start&lt;w2&gt;Index &amp;&amp; i &lt; c&lt;w3&gt;.end&lt;w4&gt;Index&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;ならば、&lt;c5&gt;c&lt;w6&gt;.index(before: c&lt;w7&gt;.index(after: i)) == i&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt; subsequences are returned, the last one is a suffix of the original collection containing the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt;の下位シーケンスが返されるならば、最後のものは、残りの要素を含んでいる元コレクションの後ろ部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt; subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt;の下位シーケンスが返されるならば、最後のものは、残りの要素を含んでいる元シーケンスの後ろ部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;n &gt; 0&lt;/c0&gt;, a limit that is less than &lt;c1&gt;i&lt;/c1&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;n &gt; 0&lt;/c0&gt;ならば、&lt;c1&gt;i&lt;/c1&gt;より少ない限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;other&lt;/c0&gt; can’t be represented as an instance of &lt;c1&gt;Double&lt;/c1&gt; without rounding, the result of this initializer is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;が&lt;c1&gt;Double&lt;/c1&gt;のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;other&lt;/c0&gt; can’t be represented as an instance of &lt;c1&gt;Float16&lt;/c1&gt; without rounding, the result of this initializer is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;が&lt;c1&gt;Float16&lt;/c1&gt;のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;other&lt;/c0&gt; can’t be represented as an instance of &lt;c1&gt;Float80&lt;/c1&gt; without rounding, the result of this initializer is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;が&lt;c1&gt;Float80&lt;/c1&gt;のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;other&lt;/c0&gt; can’t be represented as an instance of &lt;c1&gt;Float&lt;/c1&gt; without rounding, the result of this initializer is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;が&lt;c1&gt;Float&lt;/c1&gt;のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;other&lt;/c0&gt; is &lt;c1&gt;nil&lt;/c1&gt;, the result is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;が&lt;c1&gt;nil&lt;/c1&gt;ならば、結果は、&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;predicate&lt;/c0&gt; matches every element in the sequence, the result is an empty sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;がシーケンスの中のすべての要素に合致するならば、結果は空のシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;predicate&lt;/c0&gt; matches every element in the sequence, the resulting sequence contains every element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;がシーケンスの中のすべての要素に合致するならば、結果のシーケンスはそのシーケンスのすべての要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;resume(throwing:)&lt;/c0&gt; is called on the continuation, this function throws that error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;resume(throwing:)&lt;/c0&gt;が継続上で呼び出されるならば、この関数はそのエラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;source&lt;/c0&gt; is outside the bounds of this type after rounding toward zero, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;がゼロへの丸め後にこの型の境界の外側ならば、実行時エラーが起こるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;text&lt;/c0&gt; is in an invalid format or contains characters that are out of bounds for the given &lt;c1&gt;radix&lt;/c1&gt;, or if the value it denotes in the given &lt;c2&gt;radix&lt;/c2&gt; is not representable, the result is &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;text&lt;/c0&gt; が無効な形式になっているか指定&lt;c1&gt;radix&lt;/c1&gt;の領域外の文字列を含むならば、または指定&lt;c2&gt;radix&lt;/c2&gt;においてそれが意味する値が表現可能でないならば、結果は&lt;c3&gt;nil&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;true&lt;/c0&gt;, newline characters and character combinations are stripped from the result; otherwise, newline characters or character combinations are preserved.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;ならば、改行文字および文字組み合わせは結果から剥ぎ取られます；そうでなければ、改行文字および文字組み合わせは保全されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;user&lt;w1&gt;Prefs[greeting&lt;w2&gt;Key]&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; has a value, that value is assigned to &lt;c3&gt;greeting&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;user&lt;w1&gt;Prefs[greeting&lt;w2&gt;Key]&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が値を持つならば、その値は&lt;c3&gt;greeting&lt;/c3&gt;に割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is +/-infinity or NaN, then &lt;c1&gt;x&lt;w2&gt;.exponent&lt;/w2&gt;&lt;/c1&gt; is &lt;c3&gt;Int&lt;w4&gt;.max&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が+/-infinityまたはNaNならば、そのとき&lt;c1&gt;x&lt;w2&gt;.exponent&lt;/w2&gt;&lt;/c1&gt;は&lt;c3&gt;Int&lt;w4&gt;.max&lt;/w4&gt;&lt;/c3&gt;です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is 10, &lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt; is &lt;c3&gt;1&lt;w4&gt;.01&lt;/w4&gt;&lt;/c3&gt; in binary, so &lt;c5&gt;x&lt;w6&gt;.significand&lt;w7&gt;Width&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; is 2.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が10ならば、&lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt;は２進数で&lt;c3&gt;1&lt;w4&gt;.01&lt;/w4&gt;&lt;/c3&gt;です、それで&lt;c5&gt;x&lt;w6&gt;.significand&lt;w7&gt;Width&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;は２です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;-greatest&lt;w2&gt;Finite&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;, then &lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Down&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is &lt;c7&gt;-infinity&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;-greatest&lt;w2&gt;Finite&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;ならば、そのとき&lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Down&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;は&lt;c7&gt;-infinity&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;-infinity&lt;/c1&gt;, then &lt;c2&gt;x&lt;w3&gt;.next&lt;w4&gt;Up&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; is &lt;c5&gt;-greatest&lt;w6&gt;Finite&lt;w7&gt;Magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;-infinity&lt;/c1&gt;ならば、そのとき&lt;c2&gt;x&lt;w3&gt;.next&lt;w4&gt;Up&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;は&lt;c5&gt;-greatest&lt;w6&gt;Finite&lt;w7&gt;Magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;-least&lt;w2&gt;Nonzero&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;, then &lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Up&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is &lt;c7&gt;-0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;-least&lt;w2&gt;Nonzero&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;ならば、そのとき&lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Up&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;は&lt;c7&gt;-0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;greatest&lt;w2&gt;Finite&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;, then &lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Up&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is &lt;c7&gt;infinity&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;greatest&lt;w2&gt;Finite&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;ならば、そのとき&lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Up&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;は&lt;c7&gt;infinity&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;infinity&lt;/c1&gt;, then &lt;c2&gt;x&lt;w3&gt;.next&lt;w4&gt;Down&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; is &lt;c5&gt;greatest&lt;w6&gt;Finite&lt;w7&gt;Magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;infinity&lt;/c1&gt;ならば、そのとき&lt;c2&gt;x&lt;w3&gt;.next&lt;w4&gt;Down&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;は&lt;c5&gt;greatest&lt;w6&gt;Finite&lt;w7&gt;Magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;least&lt;w2&gt;Nonzero&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;, then &lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Down&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is &lt;c7&gt;0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;least&lt;w2&gt;Nonzero&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;ならば、そのとき&lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Down&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;は&lt;c7&gt;0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is Float.pi, &lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt; is &lt;c3&gt;1&lt;w4&gt;.10010010000111111011011&lt;/w4&gt;&lt;/c3&gt; in binary, and &lt;c5&gt;x&lt;w6&gt;.significand&lt;w7&gt;Width&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; is 23.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がFloat.piならば、&lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt;は２進数で&lt;c3&gt;1&lt;w4&gt;.10010010000111111011011&lt;/w4&gt;&lt;/c3&gt;です、それで&lt;c5&gt;x&lt;w6&gt;.significand&lt;w7&gt;Width&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;は23です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is NaN, then &lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt; is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がNaNならば、そのとき&lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt;はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is infinite, then &lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt; is infinity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が無限ならば、そのとき&lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt;は無限大です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is not a finite number, then &lt;c1&gt;x&lt;w2&gt;.ulp&lt;/w2&gt;&lt;/c1&gt; is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が有限数でないならば、そのとき&lt;c1&gt;x&lt;w2&gt;.ulp&lt;/w2&gt;&lt;/c1&gt;はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is very small in magnitude, then &lt;c1&gt;x&lt;w2&gt;.ulp&lt;/w2&gt;&lt;/c1&gt; may be a subnormal number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が規模において非常に小さいならば、&lt;c1&gt;x&lt;w2&gt;.ulp&lt;/w2&gt;&lt;/c1&gt;はサブノーマル数かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is zero, then &lt;c1&gt;x&lt;w2&gt;.exponent&lt;/w2&gt;&lt;/c1&gt; is &lt;c3&gt;Int&lt;w4&gt;.min&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がゼロならば、そのとき&lt;c1&gt;x&lt;w2&gt;.exponent&lt;/w2&gt;&lt;/c1&gt;は&lt;c3&gt;Int&lt;w4&gt;.min&lt;/w4&gt;&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is zero, then &lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Down&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c4&gt;-least&lt;w5&gt;Nonzero&lt;w6&gt;Magnitude&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がゼロならば、そのとき&lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Down&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;は&lt;c4&gt;-least&lt;w5&gt;Nonzero&lt;w6&gt;Magnitude&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is zero, then &lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Up&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c4&gt;least&lt;w5&gt;Nonzero&lt;w6&gt;Magnitude&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がゼロならば、そのとき&lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Up&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;は&lt;c4&gt;least&lt;w5&gt;Nonzero&lt;w6&gt;Magnitude&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is zero, then &lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt; is 0.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がゼロならば、そのとき&lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt;は0.0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;a&lt;/c1&gt; and &lt;c2&gt;b&lt;/c2&gt; are incomparable, and &lt;c3&gt;b&lt;/c3&gt; and &lt;c4&gt;c&lt;/c4&gt; are incomparable, then &lt;c5&gt;a&lt;/c5&gt; and &lt;c6&gt;c&lt;/c6&gt; are also incomparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;a&lt;/c1&gt;と&lt;c2&gt;b&lt;/c2&gt;が比較できないならば、そして&lt;c3&gt;b&lt;/c3&gt;と&lt;c4&gt;c&lt;/c4&gt;が比較できないならば、そのとき&lt;c5&gt;a&lt;/c5&gt;と&lt;c6&gt;c&lt;/c6&gt;もまた比較できない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;body&lt;/c1&gt; has a return value, that value is also used as the return value for the &lt;c2&gt;with&lt;w3&gt;Extended&lt;w4&gt;Lifetime(_:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;body&lt;/c1&gt;が戻り値を持つならば、その値はまた&lt;c2&gt;with&lt;w3&gt;Extended&lt;w4&gt;Lifetime(_:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;body&lt;/c1&gt; has a return value, that value is also used as the return value for the &lt;c2&gt;without&lt;w3&gt;Actually&lt;w4&gt;Escaping(_:&lt;w5&gt;do:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;body&lt;/c1&gt;が戻り値を持つならば、その値はまた&lt;c2&gt;without&lt;w3&gt;Actually&lt;w4&gt;Escaping(_:&lt;w5&gt;do:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;element&lt;/c1&gt; is not found in the collection, returns &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;element&lt;/c1&gt;がコレクションの中に見つけられないならば、&lt;c2&gt;nil&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;element&lt;/c1&gt; is not found in the collection, this method returns &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;element&lt;/c1&gt;がコレクションの中に見つけられないならば、このメソッドは&lt;c2&gt;nil&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;key&lt;/c1&gt; already exists in the dictionary, &lt;c2&gt;value&lt;/c2&gt; replaces the existing associated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;key&lt;/c1&gt;が既に辞書の中に存在するならば、&lt;c2&gt;value&lt;/c2&gt;が既存の結び付けられる値に取って代わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;pointer&lt;/c1&gt; is &lt;c2&gt;nil&lt;/c2&gt;, the result is &lt;c3&gt;0&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;pointer&lt;/c1&gt;が&lt;c2&gt;nil&lt;/c2&gt;ならば、結果は&lt;c3&gt;0&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;rhs&lt;/c1&gt; is outside the range &lt;c2&gt;0..&lt;lhs&lt;w3&gt;.bit&lt;w4&gt;Width&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;, it is masked to produce a value within that range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;rhs&lt;/c1&gt;が範囲&lt;c2&gt;0..&lt;lhs&lt;w3&gt;.bit&lt;w4&gt;Width&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;の外側ならば、それはマスクされてその範囲内の値を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;text&lt;/c1&gt; has invalid characters or is in an invalid format, the result is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;text&lt;/c1&gt;が無効な文字を持つまたは無効な形式であるならば、結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;transform&lt;/c1&gt; throws an error, the sequence ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;transform&lt;/c1&gt;がエラーをスローするならば、そのシーケンスは終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; throws an error during the sort, the elements may be in a different order, but none will be lost.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;がエラーをソートの間にスローするならば、要素は異なる順番になるかもしれません、しかし何１つとしてなくさないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;distance&lt;/c2&gt; is positive, this is the same value as the result of &lt;c3&gt;distance&lt;/c3&gt; calls to &lt;c4&gt;index(after:)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;distance&lt;/c2&gt;が正ならば、これは&lt;c3&gt;distance&lt;/c3&gt;で&lt;c4&gt;index(after:)&lt;/c4&gt;を呼び出す結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;i == end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;, this method is equivalent to &lt;c4&gt;append(_:)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;i == end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;ならば、このメソッドは&lt;c4&gt;append(_:)&lt;/c4&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;n&lt;/c2&gt; is positive, this is the same value as the result of &lt;c3&gt;n&lt;/c3&gt; calls to &lt;c4&gt;index(after:)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;n&lt;/c2&gt;が正ならば、これは&lt;c3&gt;n&lt;/c3&gt;で&lt;c4&gt;index(after:)&lt;/c4&gt;を呼び出すの結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;path&lt;/c2&gt; can’t be appended, returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;path&lt;/c2&gt;が追加できないならば、&lt;c3&gt;nil&lt;/c3&gt;が返ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;rhs&lt;/c2&gt; is zero, the result of the division is infinity, with the sign of the result matching the sign of &lt;c3&gt;lhs&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;rhs&lt;/c2&gt;がゼロならば、除算の結果は無限大です、結果の符号は&lt;c3&gt;lhs&lt;/c3&gt;の符号と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;source&lt;/c2&gt; is less than the smallest representable value in this type, the result is the type’s &lt;c3&gt;min&lt;/c3&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;source&lt;/c2&gt;がこの型の最も小さい表現可能な値より小さいならば、結果はこの型のもつ&lt;c3&gt;min&lt;/c3&gt;値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;stop&lt;w3&gt;On&lt;w4&gt;Error&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; is &lt;c5&gt;false&lt;/c5&gt;, the entire iterator will be exhausted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;stop&lt;w3&gt;On&lt;w4&gt;Error&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;が&lt;c5&gt;false&lt;/c5&gt;ならば、イテレータ全体が使い尽くされることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;x&lt;/c2&gt; is equal to &lt;c3&gt;y&lt;/c3&gt;, returns &lt;c4&gt;x&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;x&lt;/c2&gt;が&lt;c3&gt;y&lt;/c3&gt;と等しいならば、&lt;c4&gt;x&lt;/c4&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;x&lt;/c2&gt; is equal to &lt;c3&gt;y&lt;/c3&gt;, returns &lt;c4&gt;y&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;x&lt;/c2&gt;が&lt;c3&gt;y&lt;/c3&gt;と等しいならば、&lt;c4&gt;y&lt;/c4&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c3&gt;body&lt;/c3&gt; has a return value, that value is also used as the return value for the &lt;c4&gt;with&lt;w5&gt;Unsafe&lt;w6&gt;Buffer&lt;w7&gt;Pointer(_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;body&lt;/c3&gt;が戻り値を持つならば、その値はまた&lt;c4&gt;with&lt;w5&gt;Unsafe&lt;w6&gt;Buffer&lt;w7&gt;Pointer(_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c3&gt;body&lt;/c3&gt; has a return value, that value is also used as the return value for the &lt;c4&gt;with&lt;w5&gt;Unsafe&lt;w6&gt;Current&lt;w7&gt;Task(body:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;body&lt;/c3&gt;が戻り値を持つならば、その値はまた&lt;c4&gt;with&lt;w5&gt;Unsafe&lt;w6&gt;Current&lt;w7&gt;Task(body:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c3&gt;key&lt;/c3&gt; isn’t already a key of the dictionary, the &lt;c4&gt;(key, value)&lt;/c4&gt; pair is added.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;key&lt;/c3&gt;がまだこの辞書のキーでないならば、&lt;c4&gt;(key, value)&lt;/c4&gt;ペアが加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c3&gt;object&lt;/c3&gt; is &lt;c4&gt;nil&lt;/c4&gt;, the return value is &lt;c5&gt;false&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;object&lt;/c3&gt;が&lt;c4&gt;nil&lt;/c4&gt;ならば、戻り値は&lt;c5&gt;false&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c3&gt;transform&lt;/c3&gt; throws an error, the sequence ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;transform&lt;/c3&gt;がエラーをスローするならば、そのシーケンスは終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c3&gt;true&lt;/c3&gt;, only nonempty subsequences are returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;true&lt;/c3&gt;ならば、空でない下位シーケンスだけが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c4&gt;body&lt;/c4&gt; has a return value, that value is also used as the return value for the &lt;c5&gt;with&lt;w6&gt;Unsafe&lt;w7&gt;Bytes(_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;body&lt;/c4&gt;が戻り値を持つならば、その値はまた&lt;c5&gt;with&lt;w6&gt;Unsafe&lt;w7&gt;Bytes(_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c4&gt;body&lt;/c4&gt; has a return value, that value is also used as the return value for the &lt;c5&gt;with&lt;w6&gt;Unsafe&lt;w7&gt;Mutable&lt;w8&gt;Buffer&lt;w9&gt;Pointer(_:)&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;body&lt;/c4&gt;が戻り値を持つならば、その値はまた&lt;c5&gt;with&lt;w6&gt;Unsafe&lt;w7&gt;Mutable&lt;w8&gt;Buffer&lt;w9&gt;Pointer(_:)&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c4&gt;body&lt;/c4&gt; has a return value, that value is also used as the return value for the &lt;c5&gt;with&lt;w6&gt;Va&lt;w7&gt;List(_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;body&lt;/c4&gt;が戻り値を持つならば、その値はまた&lt;c5&gt;with&lt;w6&gt;Va&lt;w7&gt;List(_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c4&gt;next&lt;/c4&gt; never returns &lt;c5&gt;nil&lt;/c5&gt;, the sequence is infinite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;next&lt;/c4&gt;が決して&lt;c5&gt;nil&lt;/c5&gt;を返さないならば、 このシーケンスは果てがありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c4&gt;possible&lt;w5&gt;Prefix&lt;/w5&gt;&lt;/c4&gt; has no elements, the return value is &lt;c6&gt;true&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;possible&lt;w5&gt;Prefix&lt;/w5&gt;&lt;/c4&gt;が１つも要素を持たないならば、戻り値は&lt;c6&gt;true&lt;/c6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c5&gt;body&lt;/c5&gt; has a return value, that value is also used as the return value for the &lt;c6&gt;with&lt;w7&gt;Unsafe&lt;w8&gt;Mutable&lt;w9&gt;Bytes(_:)&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;body&lt;/c5&gt;が戻り値を持つならば、その値はまた&lt;c6&gt;with&lt;w7&gt;Unsafe&lt;w8&gt;Mutable&lt;w9&gt;Bytes(_:)&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c5&gt;distance&lt;/c5&gt; is negative, this is the same value as the result of &lt;c6&gt;abs(distance)&lt;/c6&gt; calls to &lt;c7&gt;index(before:)&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;distance&lt;/c5&gt;が負ならば、これは&lt;c6&gt;abs(distance)&lt;/c6&gt;で&lt;c7&gt;index(before:)&lt;/c7&gt;を呼び出す結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c5&gt;n&lt;/c5&gt; is negative, this is the same value as the result of &lt;c6&gt;-n&lt;/c6&gt; calls to &lt;c7&gt;index(before:)&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;n&lt;/c5&gt;が負ならば、これは&lt;c6&gt;-n&lt;/c6&gt;が&lt;c7&gt;index(before:)&lt;/c7&gt;を呼び出すの結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c5&gt;true&lt;/c5&gt;, only nonempty subsequences are returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;true&lt;/c5&gt;ならば、空でない下位シーケンスだけが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c6&gt;i == end&lt;w7&gt;Index&lt;/w7&gt;&lt;/c6&gt;, this method is equivalent to &lt;c8&gt;append(contents&lt;w9&gt;Of:)&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;i == end&lt;w7&gt;Index&lt;/w7&gt;&lt;/c6&gt;ならば、このメソッドは&lt;c8&gt;append(contents&lt;w9&gt;Of:)&lt;/w9&gt;&lt;/c8&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c7&gt;transform&lt;/c7&gt; throws an error, the sequence terminates.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c7&gt;transform&lt;/c7&gt;がエラーをスローするならば、そのシーケンスは終端します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c8&gt;x / y&lt;/c8&gt; is exactly halfway between two integers, &lt;c9&gt;q&lt;/c9&gt; is chosen to be even.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c8&gt;x / y&lt;/c8&gt;が正確に２つの整数の間の中ほどならば、&lt;c9&gt;q&lt;/c9&gt;は偶数である方を選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c9&gt;copy(with:)&lt;/c9&gt; returns the same array, the instances of &lt;c10&gt;NSArray&lt;/c10&gt; and &lt;c11&gt;Array&lt;/c11&gt; share storage using the same copy-on-write optimization that is used when two instances of &lt;c12&gt;Array&lt;/c12&gt; share storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c9&gt;copy(with:)&lt;/c9&gt;が同じ配列を返すならば、&lt;c10&gt;NSArray&lt;/c10&gt;と&lt;c11&gt;Array&lt;/c11&gt;のインスタンスは同じコピーオンライト最適化を使ってストレージを共有します、それは&lt;c12&gt;Array&lt;/c12&gt;の２つのインスタンスがストレージを共有するとき使う最適化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If EOF has already been reached when &lt;c0&gt;read&lt;w1&gt;Line()&lt;/w1&gt;&lt;/c0&gt; is called, the result is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;read&lt;w1&gt;Line()&lt;/w1&gt;&lt;/c0&gt;が呼ばれるときEOFがすでに到達されているならば、結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If Objective-C code calls a Swift method that throws an error, the error is automatically propagated to the error pointer argument of the bridged Objective-C method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cコードがエラーをスローするスウィフトメソッドを呼ぶならば、そのエラーはブリッジされたObjective-Cメソッドのエラーポインタ引数に自動的に伝達されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a type does not support subnormals, &lt;c3&gt;x&lt;w4&gt;.ulp&lt;/w4&gt;&lt;/c3&gt; may be rounded to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型がサブノーマルをサポートしないならば、&lt;c3&gt;x&lt;w4&gt;.ulp&lt;/w4&gt;&lt;/c3&gt;はゼロに丸められるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a type’s radix is 2, then for finite nonzero numbers, the significand is in the range &lt;c0&gt;1&lt;w1&gt;.0 ..&lt; 2&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型のもつ基数が２であるならば、そのとき有限の非ゼロの数に対して、仮数は範囲&lt;c0&gt;1&lt;w1&gt;.0 ..&lt; 2&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;の中になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If all imported members have default values, Swift also provides a default initializer that takes no arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべてのインポートされたメンバが省略時の値を持つならば、スウィフトもまた引数を取らない省略時のイニシャライザをひとつ提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If an &lt;c0&gt;on&lt;w1&gt;Termination&lt;/w1&gt;&lt;/c0&gt; callback is set, when iteration of a AsyncStream is cancelled via task cancellation that callback is invoked.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;on&lt;w1&gt;Termination&lt;/w1&gt;&lt;/c0&gt;コールバックが設定されるならば、AsyncStreamの反復がタスク取り消し経由で取り消される場合、そのコールバックが発動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If an error producing Objective-C method returns a &lt;a0&gt;&lt;c1&gt;BOOL&lt;/c1&gt;&lt;/a0&gt; value to indicate the success or failure of a method call, Swift changes the return type of the function to &lt;c2&gt;Void&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラーを生成しているObjective-Cメソッドが&lt;a0&gt;&lt;c1&gt;BOOL&lt;/c1&gt;&lt;/a0&gt;値を返して、メソッド呼び出しの成功または失敗を指し示すならば、スウィフトは関数の戻り型を&lt;c2&gt;Void&lt;/c2&gt;に変えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If an object has a stronger notion of identity, it may be appropriate to provide a custom implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるオブジェクトがより強い同一性概念を持つならば、それはあつらえの実装を提供するのが適切であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If another method is declared with the resulting selector, the method name is not changed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として生じるセレクタで別のメソッドが宣言されるならば、メソッド名は変更されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If another part of the app changes &lt;c0&gt;my&lt;w1&gt;Nickname&lt;/w1&gt;&lt;/c0&gt; and submits a change request back to the server, the most recently rejected penpal recommendation won't be mistakenly picked up by the change.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリの別の部分が&lt;c0&gt;my&lt;w1&gt;Nickname&lt;/w1&gt;&lt;/c0&gt;を変更するそして変更要請をサーバに提出するとしても、最近拒否した文通友達推薦が、その変更によって間違って拾い上げられることはないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If both &lt;c14&gt;x&lt;/c14&gt; and &lt;c15&gt;y&lt;/c15&gt; are NaN, or either &lt;c16&gt;x&lt;/c16&gt; or &lt;c17&gt;y&lt;/c17&gt; is a signaling NaN, the result is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c14&gt;x&lt;/c14&gt;と&lt;c15&gt;y&lt;/c15&gt;の両方がNaN、または&lt;c16&gt;x&lt;/c16&gt;または&lt;c17&gt;y&lt;/c17&gt;のどちらかがシグナルNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If both &lt;c9&gt;x&lt;/c9&gt; and &lt;c10&gt;y&lt;/c10&gt; are NaN, or either &lt;c11&gt;x&lt;/c11&gt; or &lt;c12&gt;y&lt;/c12&gt; is a signaling NaN, the result is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c9&gt;x&lt;/c9&gt;と&lt;c10&gt;y&lt;/c10&gt;の両方がNaN、または&lt;c11&gt;x&lt;/c11&gt;または&lt;c12&gt;y&lt;/c12&gt;のどちらかがシグナルNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If both values are &lt;c3&gt;false&lt;/c3&gt;, the operator returns &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方の値が&lt;c3&gt;false&lt;/c3&gt;ならば、演算子は&lt;c4&gt;false&lt;/c4&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If calling the closure throws an error, the sequence ends and &lt;c4&gt;next()&lt;/c4&gt; rethrows the error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャを呼び出すことがエラーをスローするならば、シーケンスは終了します、そして&lt;c4&gt;next()&lt;/c4&gt;はそのエラーを再スローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If calling the closure throws an error, the sequence ends and &lt;c5&gt;next()&lt;/c5&gt; rethrows the error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャを呼び出すことがエラーをスローするならば、シーケンスは終了します、そして&lt;c5&gt;next()&lt;/c5&gt;はそのエラーを再スローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If calling the closure throws an error, the sequence ends and &lt;c7&gt;next()&lt;/c7&gt; rethrows the error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャを呼び出すことがエラーをスローするならば、シーケンスは終了します、そして&lt;c7&gt;next()&lt;/c7&gt;はそのエラーを再スローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If calling the closure throws an error, the sequence ends and &lt;c8&gt;next()&lt;/c8&gt; rethrows the error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャを呼び出すことがエラーをスローするならば、シーケンスは終了します、そして&lt;c8&gt;next()&lt;/c8&gt;はそのエラーを再スローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If calling the predicate closure throws an error, the sequence ends and &lt;c1&gt;next()&lt;/c1&gt; rethrows the error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部クロージャを呼び出すことがエラーをスローするならば、シーケンスは終了します、そして&lt;c1&gt;next()&lt;/c1&gt;はそのエラーを再スローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If either of the values is &lt;c3&gt;false&lt;/c3&gt;, the operator returns &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値のどちらかが&lt;c3&gt;false&lt;/c3&gt;ならば、演算子は&lt;c4&gt;false&lt;/c4&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If either this value or &lt;c3&gt;other&lt;/c3&gt; is NaN, the result of this method is &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値または&lt;c3&gt;other&lt;/c3&gt;のどちらかがNaNならば、このメソッドの結果は&lt;c4&gt;false&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If included, the exponent is separated by a single character, &lt;c0&gt;e&lt;/c0&gt; or &lt;c1&gt;E&lt;/c1&gt;, and consists of an optional plus or minus sign character and a sequence of decimal digits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もし含むならば、指数は１つの文字&lt;c0&gt;e&lt;/c0&gt;もしくは&lt;c1&gt;E&lt;/c1&gt;によって区切られます、そして随意のプラスまたはマイナス符号文字と一連の10進の桁から成り立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If included, the exponent is separated by a single character, &lt;c0&gt;p&lt;/c0&gt; or &lt;c1&gt;P&lt;/c1&gt;, and consists of an optional plus or minus sign character and a sequence of decimal digits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もし含むならば、指数は１つの文字&lt;c0&gt;p&lt;/c0&gt;もしくは&lt;c1&gt;P&lt;/c1&gt;によって区切られます、そして随意のプラスまたはマイナス符号文字と一連の10進の桁から成り立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If necessary, the byte order of this value is reversed from the typical byte order of this integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必要ならば、この値のバイト順はこの整数型の典型的なバイト順からひっくり返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no elements in the collection match &lt;c4&gt;belongs&lt;w5&gt;In&lt;w6&gt;Second&lt;w7&gt;Partition&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;, the returned index is equal to the collection’s &lt;c8&gt;end&lt;w9&gt;Index&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中の要素が１つも&lt;c4&gt;belongs&lt;w5&gt;In&lt;w6&gt;Second&lt;w7&gt;Partition&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;に一致しないならば、返されるインデックスはコレクションの&lt;c8&gt;end&lt;w9&gt;Index&lt;/w9&gt;&lt;/c8&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no elements in the collection satisfy the given predicate, returns &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素が与えられた述部を満たすことがないならば、&lt;c2&gt;nil&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no such storage exists, it is created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのようなストレージが存在しないならば、それは作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no such storage exists, it is first created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのようなストレージが存在しないならば、それが最初に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If not, any value in &lt;c4&gt;defaults[greeting&lt;w5&gt;Key]&lt;/w5&gt;&lt;/c4&gt; will succeed, and if not that, &lt;c6&gt;greeting&lt;/c6&gt; will be set to the non-optional default value, &lt;c7&gt;"Greetings!"&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでないならば、&lt;c4&gt;defaults[greeting&lt;w5&gt;Key]&lt;/w5&gt;&lt;/c4&gt;の中の何らかの値が後を継ぎます、そしてそれもないならば、&lt;c6&gt;greeting&lt;/c6&gt;は非オプショナルの省略時の値、&lt;c7&gt;"Greetings!"&lt;/c7&gt;に設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If stepping from &lt;c1&gt;start&lt;/c1&gt; by &lt;c2&gt;stride&lt;/c2&gt; does not produce &lt;c3&gt;end&lt;/c3&gt;, the last value in the sequence will be one step before going beyond &lt;c4&gt;end&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;start&lt;/c1&gt;から&lt;c2&gt;stride&lt;/c2&gt;だけまたいで越えるならば、&lt;c3&gt;end&lt;/c3&gt;を生成せず、シーケンスの最後の値は&lt;c4&gt;end&lt;/c4&gt;を越える前に一またぎあるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;description&lt;/c0&gt; value is any string other than &lt;c1&gt;"true"&lt;/c1&gt; or &lt;c2&gt;"false"&lt;/c2&gt;, the result is &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この&lt;c0&gt;description&lt;/c0&gt;値が&lt;c1&gt;"true"&lt;/c1&gt;または&lt;c2&gt;"false"&lt;/c2&gt;と違う何らかの文字列ならば、結果は&lt;c3&gt;nil&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;overflow&lt;/c0&gt; component is &lt;c1&gt;false&lt;/c1&gt;, the &lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; component contains the entire difference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;overflow&lt;/c0&gt;構成部分が&lt;c1&gt;false&lt;/c1&gt;ならば、&lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;構成部分は差そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;overflow&lt;/c0&gt; component is &lt;c1&gt;false&lt;/c1&gt;, the &lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; component contains the entire product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;overflow&lt;/c0&gt;構成部分が&lt;c1&gt;false&lt;/c1&gt;ならば、&lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;構成部分は積そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;overflow&lt;/c0&gt; component is &lt;c1&gt;false&lt;/c1&gt;, the &lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; component contains the entire quotient.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;overflow&lt;/c0&gt;構成部分が&lt;c1&gt;false&lt;/c1&gt;ならば、&lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;構成部分は全体の商を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;overflow&lt;/c0&gt; component is &lt;c1&gt;false&lt;/c1&gt;, the &lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; component contains the entire remainder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;overflow&lt;/c0&gt;構成部分が&lt;c1&gt;false&lt;/c1&gt;ならば、&lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;構成部分は余りそのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;overflow&lt;/c0&gt; component is &lt;c1&gt;false&lt;/c1&gt;, the &lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; component contains the entire sum.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;overflow&lt;/c0&gt;構成部分が&lt;c1&gt;false&lt;/c1&gt;ならば、&lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;構成部分は合計そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c4&gt;overflow&lt;/c4&gt; component is &lt;c5&gt;true&lt;/c5&gt;, an overflow occurred and the &lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt; component contains either the truncated quotient or, if the quotient is undefined, the dividend.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;overflow&lt;/c4&gt;構成部分が&lt;c5&gt;true&lt;/c5&gt;であるならば、オーバーフローが起こった、そして&lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;構成部分は切り詰められた商または、商が未定義ならば、被除数のどちらかを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c4&gt;overflow&lt;/c4&gt; component is &lt;c5&gt;true&lt;/c5&gt;, an overflow occurred and the &lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt; component contains the truncated product of this value and &lt;c8&gt;rhs&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;overflow&lt;/c4&gt;構成部分が&lt;c5&gt;true&lt;/c5&gt;であるならば、オーバーフローが起こると&lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;構成部分はこの値と&lt;c8&gt;rhs&lt;/c8&gt;の積の切り詰められたものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c4&gt;overflow&lt;/c4&gt; component is &lt;c5&gt;true&lt;/c5&gt;, an overflow occurred and the &lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt; component contains the truncated result of &lt;c8&gt;rhs&lt;/c8&gt; subtracted from this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;overflow&lt;/c4&gt;構成部分が&lt;c5&gt;true&lt;/c5&gt;であるならば、オーバーフローが起こると&lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;構成部分はこの値から&lt;c8&gt;rhs&lt;/c8&gt;を減算した結果の切り詰められたもの含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c4&gt;overflow&lt;/c4&gt; component is &lt;c5&gt;true&lt;/c5&gt;, an overflow occurred and the &lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt; component contains the truncated sum of this value and &lt;c8&gt;rhs&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;overflow&lt;/c4&gt;構成部分が&lt;c5&gt;true&lt;/c5&gt;であるならば、オーバーフローが起こると&lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;構成部分はこの値と&lt;c8&gt;rhs&lt;/c8&gt;の合計の切り詰められたものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c4&gt;overflow&lt;/c4&gt; component is &lt;c5&gt;true&lt;/c5&gt;, an overflow occurred during division and the &lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt; component contains either the entire remainder or, if the remainder is undefined, the dividend.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;overflow&lt;/c4&gt;構成部分が&lt;c5&gt;true&lt;/c5&gt;であるならば、除算の間にオーバーフローが起こった、そして&lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;構成部分は余りそのまままたは、余りが未定義ならば、被除数のどちらかを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the Objective-C generic parameterization specifies class or protocols qualifications, the imported Swift declaration has a constraint that requires that type to be a subclass of the specified class or to conform to the specified protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C総称体パラメータ化がクラスまたはプロトコル適格を指定するならば、インポートされたスウィフト宣言はある制約を持ちます、それがその型に要求するのは、指定されたクラスのサブクラスであることまたは指定されたプロトコルに準拠することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the Objective-C method’s error parameter is also its first parameter, Swift attempts to simplify the method name further, by removing the &lt;c1&gt;With&lt;w2&gt;Error&lt;/w2&gt;&lt;/c1&gt; or &lt;c3&gt;And&lt;w4&gt;Return&lt;w5&gt;Error&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; suffix, if present, from the first part of the selector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cメソッドのerrorパラメーターがまたそれの最初のパラメーターでもあるならば、スウィフトはメソッド名をいっそう単純化することを&lt;c1&gt;With&lt;w2&gt;Error&lt;/w2&gt;&lt;/c1&gt;または&lt;c3&gt;And&lt;w4&gt;Return&lt;w5&gt;Error&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;接尾辞を、もしあるならば、セレクタの最初の部分から取り除くことによって試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the array is empty, &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列が空ならば、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the array is empty, &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列が空ならば、&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the array is empty, &lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; is equal to &lt;c5&gt;end&lt;w6&gt;Index&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列が空ならば、&lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;は&lt;c5&gt;end&lt;w6&gt;Index&lt;/w6&gt;&lt;/c5&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the array is empty, &lt;c4&gt;start&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt; is equal to &lt;c6&gt;end&lt;w7&gt;Index&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列が空ならば、&lt;c4&gt;start&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;は&lt;c6&gt;end&lt;w7&gt;Index&lt;/w7&gt;&lt;/c6&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the array is empty, these properties are &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その配列が空であるならば、これらのプロパティは&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the array’s &lt;c6&gt;Element&lt;/c6&gt; type is a struct or enumeration, &lt;c7&gt;Array&lt;/c7&gt; and &lt;c8&gt;Contiguous&lt;w9&gt;Array&lt;/w9&gt;&lt;/c8&gt; should have similar efficiency.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の&lt;c6&gt;Element&lt;/c6&gt;型が構造体または列挙であるならば、&lt;c7&gt;Array&lt;/c7&gt;と&lt;c8&gt;Contiguous&lt;w9&gt;Array&lt;/w9&gt;&lt;/c8&gt;は同じような効率を持つはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the asynchronous sequence is empty, this method returns &lt;c0&gt;true&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスが空ならば、このメソッドは&lt;c0&gt;true&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the base iterator returns &lt;c1&gt;nil&lt;/c1&gt;, indicating the end of the sequence, this iterator returns &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基底イテレータが&lt;c1&gt;nil&lt;/c1&gt;を返して、シーケンスの終わりを指し示すならば、このイテレータは&lt;c2&gt;nil&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the bit width of the shifted integer type is a power of two, masking is performed using a bitmask; otherwise, masking is performed using a modulo operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトされる整数型のビット幅が２の冪ならば、マスクはビットマスクを使って実行されます；そうでなければ、マスクはモジュロ演算を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the call to this method simply appends the contents of &lt;c6&gt;new&lt;w7&gt;Elements&lt;/w7&gt;&lt;/c6&gt; to the array, this method is equivalent to &lt;c8&gt;append(contents&lt;w9&gt;Of:)&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドへの呼び出しが単に&lt;c6&gt;new&lt;w7&gt;Elements&lt;/w7&gt;&lt;/c6&gt;の内容を配列に追加するだけならば、このメソッドは&lt;c8&gt;append(contents&lt;w9&gt;Of:)&lt;/w9&gt;&lt;/c8&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the call to this method simply appends the contents of &lt;c6&gt;new&lt;w7&gt;Elements&lt;/w7&gt;&lt;/c6&gt; to the collection, the complexity is O(&lt;e8&gt;m&lt;/e8&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドへの呼び出しが単に&lt;c6&gt;new&lt;w7&gt;Elements&lt;/w7&gt;&lt;/c6&gt;の内容をコレクションに追加するだけならば、計算量はO(&lt;e8&gt;m&lt;/e8&gt;)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the character does not represent a hexadecimal digit, the value of this property is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字が16進法桁を表さないならば、このプロパティの値は&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the closure has a return value, that value is also used as the return value of the &lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Bytes(of:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャが戻り値を持つならば、その値はまた&lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Bytes(of:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the closure has a return value, that value is also used as the return value of the &lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Bytes(of:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャが戻り値を持つならば、その値はまた&lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Bytes(of:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the closure has a return value, that value is also used as the return value of the &lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer(to:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャが戻り値を持つならば、その値はまた&lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer(to:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the closure has a return value, that value is also used as the return value of the &lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Pointer(to:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャが戻り値を持つならば、その値はまた&lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Pointer(to:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the closure returns &lt;c5&gt;true&lt;/c5&gt;, &lt;c6&gt;next()&lt;/c6&gt; returns the received element; otherwise it awaits the next element from the base iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャが&lt;c5&gt;true&lt;/c5&gt;を返すならば、&lt;c6&gt;next()&lt;/c6&gt;は受け取った要素を返します；そうでなければそれは次の要素を基底イテレータから待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the closure you provide throws an error, the sequence produces no elements and throws the error instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが提供するクロージャがエラーをスローするならば、シーケンスは要素を全く生み出しません、そして代わりにエラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection does not support an internal representation in a form of contiguous storage, &lt;c2&gt;body&lt;/c2&gt; is not called and &lt;c3&gt;nil&lt;/c3&gt; is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションがある内部表現を隣接ストレージの形式でサポートしないならば、&lt;c2&gt;body&lt;/c2&gt;は呼び出されません、そして&lt;c3&gt;nil&lt;/c3&gt;が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection does not support an internal representation in a form of mutable contiguous storage, &lt;c2&gt;body&lt;/c2&gt; is not called and &lt;c3&gt;nil&lt;/c3&gt; is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションがある内部表現を可変の隣接ストレージの形式でサポートしないならば、&lt;c2&gt;body&lt;/c2&gt;は呼び出されません、そして&lt;c3&gt;nil&lt;/c3&gt;が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, the method returns &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、このメソッドは&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, the value of this property is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空であるならば、このプロパティは&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the consistency of an app's models is stored on a server, you can model records as structures with identifiers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるアプリの持つモデルの一貫性がサーバ上に格納されるならば、あなたはレコードを、識別子を使って構造体としてモデル化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the continuation has already been resumed through this object, then the attempt to resume the continuation will trap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続が既にこのオブジェクトを通して再開されてしまったならば、そのとき継続を再開する試みはトラップするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the count passed to &lt;c0&gt;prefix(_:)&lt;/c0&gt; exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;prefix(_:)&lt;/c0&gt;に渡されるcountが基底シーケンスの中の要素の数を越えるならば、結果はそのシーケンスの要素のすべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the dictionary doesn’t contain the key, the key and value are added as a new key-value pair.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書がそのキーを含まないならば、キーと値は新しいキー値ペアとして加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the dictionary uses &lt;c0&gt;String&lt;/c0&gt; or &lt;c1&gt;Int&lt;/c1&gt; keys, the contents are encoded in a keyed container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書が&lt;c0&gt;String&lt;/c0&gt;または&lt;c1&gt;Int&lt;/c1&gt;キーを使うならば、内容はキー付けされるコンテナの中にエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the dictionary wraps a bridged &lt;c1&gt;NSDictionary&lt;/c1&gt;, the performance is unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書が、ブリッジされた&lt;c1&gt;NSDictionary&lt;/c1&gt;をラップするならば、性能は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the dynamic type of &lt;c0&gt;obj&lt;/c0&gt; doesn’t implement a &lt;c1&gt;get&lt;w2&gt;Integer&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; method, the system returns a runtime error when you initialize &lt;c4&gt;certain&lt;w5&gt;Value&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;obj&lt;/c0&gt;の動的型が&lt;c1&gt;get&lt;w2&gt;Integer&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;メソッドを実装しないならば、システムは実行時エラーをあなたが&lt;c4&gt;certain&lt;w5&gt;Value&lt;/w5&gt;&lt;/c4&gt;を初期化する時に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列に属する要素らがクラスのインスタンスらであるならば、意味論は同じです、にもかかわらずそれらは最初は異なっているように思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the given floating-point value cannot be represented exactly, the result is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた浮動小数点値が正確に表現できないならば、結果は&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the given integer cannot be represented exactly, the result is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数が正確に表現できないならば、結果は&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the given key is found in the dictionary, this method returns an index into the dictionary that corresponds with the key-value pair.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーがこの辞書の中に見つかるならば、このメソッドは辞書の中へのあるインデックスを返し、それがそのキー値ペアに対応するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the given key is not present in the dictionary, this method adds the key-value pair and returns &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーがこの辞書の中に存在しないならば、このメソッドはそのキー値ペアを加えて&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the instance passed as &lt;c0&gt;object&lt;/c0&gt; is being accessed by multiple threads simultaneously, this function may still return &lt;c1&gt;true&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;object&lt;/c0&gt;として渡されるインスタンスが複数のスレッドによって同時にアクセスされる場合、この関数は依然として&lt;c1&gt;true&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the iterator needs to clean up on cancellation, it can do so after checking for cancellation as described above, or in &lt;c0&gt;deinit&lt;/c0&gt; if it’s a reference type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータが取り消しに関して片付けを必要とするならば、それはそうすることが可能です、上で記述されるように取り消しを確認した後に、またはそれが参照型であるならば&lt;c0&gt;deinit&lt;/c0&gt;において。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the key is found in the dictionary, this method returns the key’s associated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーが辞書の中に見つけられるならば、このメソッドはそのキーの結び付けられる値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the key isn’t found in the dictionary, &lt;c0&gt;remove&lt;w1&gt;Value(for&lt;w2&gt;Key:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーが辞書の中に見つけられないならば、&lt;c0&gt;remove&lt;w1&gt;Value(for&lt;w2&gt;Key:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c3&gt;nil&lt;/c3&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the last non-block parameter of an Objective-C method is of type &lt;c0&gt;NSError **&lt;/c0&gt;, Swift replaces it with the throws keyword, to indicate that the method can throw an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cメソッドの最後の非ブロックパラメーターが型&lt;c0&gt;NSError **&lt;/c0&gt;ならば、スウィフトはそれをthrowsキーワードで置き換えて、そのメソッドがエラーをスローできることを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大長がコレクションの要素の数を越えるならば、結果はコレクションの要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the maximum length exceeds the number of elements in the collection, the result contains the entire collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大長がコレクションの要素の数を越えるならば、結果はコレクション全体を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大長がシーケンスの要素の数を越えるならば、結果はシーケンスの要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the method calls its completion handler with a nullable parameter, the asynchronous version in Swift is marked with the &lt;c0&gt;@discardable&lt;w1&gt;Result&lt;/w1&gt;&lt;/c0&gt; attribute.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メソッドがそれの完了ハンドラをヌル可能パラメータで呼び出すならば、Swiftでの非同期版は、&lt;c0&gt;@discardable&lt;w1&gt;Result&lt;/w1&gt;&lt;/c0&gt;属性で印されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the method has more than one parameter, and the last parameter's selector piece is one of the following, Swift imports the method as an asynchronous method:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メソッドが１つ以上のパラメータを持つ、そして最後のパラメータの持つセレクタ部分が以下の１つであるならば、Swiftはそのメソッドをある非同期メソッドとしてインポートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the method has only one parameter and its selector ends with one of the following suffixes, Swift imports the method as an asynchronous method:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メソッドがただ１つのパラメータを持つ、そしてそれのセレクタが以下の接尾辞の１つで終わるならば、Swiftはそのメソッドをある非同期メソッドとしてインポートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the name begins with a number, the first digit is replaced with an underscore.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>名前が数字で始まるならば、最初の数字はアンダースコアで置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省かれることになる要素の数がコレクションの要素の数を越えるならば、結果は空の下位シーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取り除く要素の数がシーケンスの要素数を越えるならば、結果は空のシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the passed instance conforms to &lt;c5&gt;Custom&lt;w6&gt;String&lt;w7&gt;Convertible&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;, the &lt;c8&gt;String(describing:)&lt;/c8&gt; initializer and the &lt;c9&gt;print(_:)&lt;/c9&gt; function use the instance’s custom &lt;c10&gt;description&lt;/c10&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>渡されたインスタンスが&lt;c5&gt;Custom&lt;w6&gt;String&lt;w7&gt;Convertible&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;に準拠するならば、&lt;c8&gt;String(describing:)&lt;/c8&gt;イニシャライザと&lt;c9&gt;print(_:)&lt;/c9&gt;関数はそのインスタンスのあつらえの&lt;c10&gt;description&lt;/c10&gt;プロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the payload contains any other characters, it is ignored.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードが何か他の文字を含むならば、それは無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the predicate hasn’t failed yet, this method gets the next element from the base sequence and calls the predicate with it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部がまだ失敗しないならば、このメソッドは次の要素を基底シーケンスから取得します、そして述部をそれとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the predicate hasn’t yet failed, this method gets the next element from the base sequence and calls the predicate with it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部がまだ失敗しないならば、このメソッドは次の要素を基底シーケンスから取得します、そして述部をそれとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the predicate throws an error, the sequence contains only values produced prior to the error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部がエラーをスローするならば、シーケンスはエラーより前に生み出された値のみを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the quotient is too large to represent in the type, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>商がこの型において表すのに大きすぎるならば、実行時エラーが起こるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the quotient of dividing &lt;c0&gt;dividend&lt;/c0&gt; by this value is too large to represent in the type, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;dividend&lt;/c0&gt;をこの値で除算した商がこの型で表すのに大きすぎるならば、実行時エラーが起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the result of advancing by &lt;c10&gt;n&lt;/c10&gt; is not representable as a value of this type, then a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c10&gt;n&lt;/c10&gt;だけ前進する結果がこの型の値として表現可能でないならば、実行時エラーが起こるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the selector ends with &lt;c0&gt;Asynchronously&lt;/c0&gt;, that suffix is removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>セレクタが&lt;c0&gt;Asynchronously&lt;/c0&gt;で終わるならば、その接尾辞は取り除かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the selector starts with &lt;c0&gt;get&lt;/c0&gt;, that prefix is removed and leading initialisms are converted to lowercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>セレクタが&lt;c0&gt;get&lt;/c0&gt;で始まるならば、その接頭辞は取り除かれます、そして先導している頭文字それらは小文字に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence contains any values, the first one is &lt;c0&gt;start&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが何らかの値を含むならば、最初のものは&lt;c0&gt;start&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is never executed and &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; is the result of the call to &lt;c5&gt;reduce(_:&lt;w6&gt;_:)&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが１つも要素を持たないならば、&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は決して実行されません、そして&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;は&lt;c5&gt;reduce(_:&lt;w6&gt;_:)&lt;/w6&gt;&lt;/c5&gt;への呼び出しの結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, &lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is never executed and &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; is the result of the call to &lt;c5&gt;reduce(into:&lt;w6&gt;_:)&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが１つも要素を持たないならば、&lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は決して実行されません、そして&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;は&lt;c5&gt;reduce(into:&lt;w6&gt;_:)&lt;/w6&gt;&lt;/c5&gt;への呼び出しの結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, returns &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが要素を持たないならば、&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, returns &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが要素を持たないならば、&lt;c4&gt;nil&lt;/c4&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, the result is &lt;c0&gt;initial&lt;w1&gt;Result&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが１つも要素を持たないならば、結果は&lt;c0&gt;initial&lt;w1&gt;Result&lt;/w1&gt;&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence is empty, this method returns &lt;c0&gt;true&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが空ならば、このメソッドは&lt;c0&gt;true&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the string passed as &lt;c0&gt;string&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; does not correspond to any instance of this type, the result is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;string&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;として渡される値がこの型の何らかのインスタンスと一致しないならば、結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the task this iterator is running in is canceled while next is awaiting a value, this will terminate the AsyncStream and next may return nil immediately (or will return nil on subseuqent calls)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その中でこのイテレータが動作しているところのタスクが、nextが値を待っている間に取り消されるならば、これはAsyncStreamを終端するでしょう、そしてnextはnilを直ぐに返すかもしれません（または続いて起こる呼び出しそれらの上でnilを返すかもしれません）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the transform returns &lt;c6&gt;nil&lt;/c6&gt;, this method continues to wait for further elements until it gets one that transforms to a non-&lt;c7&gt;nil&lt;/c7&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換が&lt;c6&gt;nil&lt;/c6&gt;を返すならば、このメソッドはさらに先の要素を待ち続けます、それが非&lt;c7&gt;nil&lt;/c7&gt;値へと変換するものを取得するまで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the two ranges do not overlap, the result is a single-element range at the upper or lower bound of &lt;c0&gt;limits&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの範囲が重ならないならば、結果は&lt;c0&gt;limits&lt;/c0&gt;の上方または下方での単一要素範囲です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the two sequences passed to &lt;c0&gt;zip(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt; are different lengths, the resulting sequence is the same length as the shorter sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;zip(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt;に渡された２つのシーケンスが異なる長さであるならは、結果のシーケンスはより短いシーケンスと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the type of the value pointed to by a C pointer cannot be represented by Swift, as is the case with an incomplete struct type, the pointer is imported as an &lt;c0&gt;Opaque&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cポインタによって指し示される値の型がSwiftによって表現できないならば、不完全なstruct型を持つケース節であるなど、そのポインタは&lt;c0&gt;Opaque&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the type supports subnormal values, &lt;c0&gt;least&lt;w1&gt;Nonzero&lt;w2&gt;Magnitude&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is smaller than &lt;c3&gt;least&lt;w4&gt;Normal&lt;w5&gt;Magnitude&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;; otherwise they are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その型がサブノーマル値をサポートするならば、&lt;c0&gt;least&lt;w1&gt;Nonzero&lt;w2&gt;Magnitude&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c3&gt;least&lt;w4&gt;Normal&lt;w5&gt;Magnitude&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;より小さいです；そうでなければそれらは等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the underlying collection stored by &lt;c0&gt;other&lt;/c0&gt; does not satisfy &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;, the result is &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;によって格納される基礎をなすコレクションが&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;の条件を満たさないならば、結果は&lt;c3&gt;nil&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the underlying collection stored by &lt;c0&gt;other&lt;/c0&gt; does not satisfy &lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;, the result is &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;によって格納される基礎をなすコレクションが&lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の条件を満たさないならば、結果は&lt;c4&gt;nil&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value fails to encode anything, &lt;c0&gt;encoder&lt;/c0&gt; will encode an empty keyed container in its place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値が何かをエンコードに失敗するならば、&lt;c0&gt;encoder&lt;/c0&gt;は空のキー付きコンテナをその場でエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value is &lt;c1&gt;true&lt;/c1&gt;, the result of the operation is &lt;c2&gt;false&lt;/c2&gt;; if the value is &lt;c3&gt;false&lt;/c3&gt;, the result is &lt;c4&gt;true&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値が&lt;c1&gt;true&lt;/c1&gt;ならば、この演算の結果は&lt;c2&gt;false&lt;/c2&gt;です；値が&lt;c3&gt;false&lt;/c3&gt;ならば、結果は&lt;c4&gt;true&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value is zero, then &lt;c0&gt;leading&lt;w1&gt;Zero&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c4&gt;bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値がゼロならば、そのとき&lt;c0&gt;leading&lt;w1&gt;Zero&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c4&gt;bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/c4&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value is zero, then &lt;c0&gt;trailing&lt;w1&gt;Zero&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c4&gt;bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値がゼロならば、そのとき&lt;c0&gt;trailing&lt;w1&gt;Zero&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c4&gt;bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/c4&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value of an existing key is updated, &lt;c0&gt;update&lt;w1&gt;Value(_:&lt;w2&gt;for&lt;w3&gt;Key:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; returns the original value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>既存のキーの値が更新されるならば、&lt;c0&gt;update&lt;w1&gt;Value(_:&lt;w2&gt;for&lt;w3&gt;Key:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は元の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a &lt;c3&gt;Double&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;, the least significant bits are used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードの値が&lt;c3&gt;Double&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;のペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a &lt;c3&gt;Float16&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;, the least significant bits are used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードの値が&lt;c3&gt;Float16&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;のペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a &lt;c3&gt;Float80&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;, the least significant bits are used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードの値が&lt;c3&gt;Float80&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;のペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a &lt;c3&gt;Float&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;, the least significant bits are used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードの値が&lt;c3&gt;Float&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;のペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value passed as &lt;c0&gt;int&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; does not correspond to any instance of this type, the result is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;int&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;として渡される値がこの型の何らかのインスタンスと一致しないならば、結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value passed as &lt;c0&gt;source&lt;/c0&gt; is greater than the maximum representable value in this type, the result is the type’s &lt;c1&gt;max&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡された値がこの型において最大限の表現可能な値より大きいならば、結果はこの型のもつ&lt;c1&gt;max&lt;/c1&gt;値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value passed as &lt;c0&gt;source&lt;/c0&gt; is not representable exactly, the result is &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡された値が正確に表現可能でないならば、結果は&lt;c1&gt;nil&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value passed as &lt;c0&gt;source&lt;/c0&gt; is not representable in this type, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡された値がこの型で表現可能でないならば、実行時エラーが起こるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value you pass to &lt;c0&gt;significand&lt;/c0&gt; is NaN, the result is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;significand&lt;/c0&gt;に渡す値がNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value you pass to &lt;c0&gt;significand&lt;/c0&gt; is zero or infinite, the result is zero or infinite, regardless of the value of &lt;c1&gt;exponent&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;significand&lt;/c0&gt;に渡す値がゼロまたは無限大ならば、結果はゼロまたは無限大です、&lt;c1&gt;exponent&lt;/c1&gt;の値に関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there are additional details about the error that could be helpful for recovery, use associated values to include that information.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>復旧の助けになりうるそのエラーについての追加の詳細があるならば、関連値を使ってその情報を含めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there are multiple equal greatest arguments, the result is the last one.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>等しい最大の引数が複数あるならば、結果は最後のものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there are multiple equal least arguments, the result is the first one.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複数の最も少ない引数があるならば、結果は最初の１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there is no upper limit, then &lt;c3&gt;significand&lt;w4&gt;Bit&lt;w5&gt;Count&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; should be &lt;c6&gt;Int&lt;w7&gt;.max&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上限がないならば、そのとき&lt;c3&gt;significand&lt;w4&gt;Bit&lt;w5&gt;Count&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;は&lt;c6&gt;Int&lt;w7&gt;.max&lt;/w7&gt;&lt;/c6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there is no value of the type that corresponds with the specified raw value, this initializer returns &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された生の値に対応する型の値が１つもないならば、このイニシャライザは&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this call succeeds, this method passes along the element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この呼び出しが成功するならば、このメソッドは要素を先へ渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this character does not represent a whole number, or the value is too large to represent as an &lt;c0&gt;Int&lt;/c0&gt;, the value of this property is &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字が整数を表さない、またはその値が&lt;c0&gt;Int&lt;/c0&gt;として表すには大きすぎるならば、このプロパティの値は&lt;c1&gt;nil&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type has value semantics, the mirror should be unaffected by subsequent mutations of the instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型が値意味論を持つならば、ミラーはインスタンスのその後の変化によって影響を受けないべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type’s &lt;c0&gt;Stride&lt;/c0&gt; type conforms to &lt;c1&gt;Binary&lt;w2&gt;Integer&lt;/w2&gt;&lt;/c1&gt;, then for a value &lt;c3&gt;x&lt;/c3&gt;, a distance &lt;c4&gt;n&lt;/c4&gt;, and a value &lt;c5&gt;y = x&lt;w6&gt;.advanced(by: n)&lt;/w6&gt;&lt;/c5&gt;, &lt;c7&gt;x&lt;w8&gt;.distance(to: y) == n&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型のもつ&lt;c0&gt;Stride&lt;/c0&gt;型が&lt;c1&gt;Binary&lt;w2&gt;Integer&lt;/w2&gt;&lt;/c1&gt;に準拠するならば、そのとき値&lt;c3&gt;x&lt;/c3&gt;、隔たり&lt;c4&gt;n&lt;/c4&gt;、そして値&lt;c5&gt;y = x&lt;w6&gt;.advanced(by: n)&lt;/w6&gt;&lt;/c5&gt;に対して、&lt;c7&gt;x&lt;w8&gt;.distance(to: y) == n&lt;/w8&gt;&lt;/c7&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type’s &lt;c0&gt;Stride&lt;/c0&gt; type conforms to &lt;c1&gt;Binary&lt;w2&gt;Integer&lt;/w2&gt;&lt;/c1&gt;, then for two values &lt;c3&gt;x&lt;/c3&gt; and &lt;c4&gt;y&lt;/c4&gt;, and a distance &lt;c5&gt;n = x&lt;w6&gt;.distance(to: y)&lt;/w6&gt;&lt;/c5&gt;, &lt;c7&gt;x&lt;w8&gt;.advanced(by: n) == y&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型のもつ&lt;c0&gt;Stride&lt;/c0&gt;型が&lt;c1&gt;Binary&lt;w2&gt;Integer&lt;/w2&gt;&lt;/c1&gt;に準拠するならば、そのとき２つの値&lt;c3&gt;x&lt;/c3&gt;と&lt;c4&gt;y&lt;/c4&gt;、そして隔たり&lt;c5&gt;n = x&lt;w6&gt;.distance(to: y)&lt;/w6&gt;&lt;/c5&gt;に対して、&lt;c7&gt;x&lt;w8&gt;.advanced(by: n) == y&lt;/w8&gt;&lt;/c7&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this value and &lt;c0&gt;other&lt;/c0&gt; are both finite numbers, the truncating remainder has the same sign as this value and is strictly smaller in magnitude than &lt;c1&gt;other&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と&lt;c0&gt;other&lt;/c0&gt;が両方とも有限の数ならば、切り捨てられる余りはこの値と同じ符号を持ち、そして厳密に&lt;c1&gt;other&lt;/c1&gt;より小さい規模になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this value and &lt;c0&gt;other&lt;/c0&gt; are finite numbers, the remainder is in the closed range &lt;c1&gt;-abs(other / 2)...abs(other / 2)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と&lt;c0&gt;other&lt;/c0&gt;が有限数ならば、あまりは完結範囲&lt;c1&gt;-abs(other / 2)...abs(other / 2)&lt;/c1&gt;の中に入ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this value is a finite nonzero number, &lt;c0&gt;significand&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; is the number of fractional bits required to represent the value of &lt;c2&gt;significand&lt;/c2&gt;; otherwise, &lt;c3&gt;significand&lt;w4&gt;Width&lt;/w4&gt;&lt;/c3&gt; is -1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値が有限の非ゼロ数ならば、&lt;c0&gt;significand&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;significand&lt;/c2&gt;の値を表すのに必要とされる小数部ビットの数です；そうでなければ、&lt;c3&gt;significand&lt;w4&gt;Width&lt;/w4&gt;&lt;/c3&gt;は-1です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If those compatible types use different definitions for equality, values that were originally distinct might compare as equal when they are converted to &lt;c4&gt;Any&lt;w5&gt;Hashable&lt;/w5&gt;&lt;/c4&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらの互換型が同等性に対して異なる定義を使うならば、元来は異なるものであった値それらは、等しいとみなされるかもしれません、それらが&lt;c4&gt;Any&lt;w5&gt;Hashable&lt;/w5&gt;&lt;/c4&gt;に変換される場合は：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの表現可能な値が同等であるくらい近いならば、結果はその仮数ビットパターンにおいてより多く後ろに続くゼロを持つ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you accept, Xcode creates the bridging header file along with the file you were creating, and names it by using your product module name followed by &lt;c0&gt;"-Bridging-Header&lt;w1&gt;.h"&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが承諾するならば、Xcodeはブリッジヘッダファイルをあなたが作成していたファイルに加えて作成します、そしてあなたのプロダクトモジュール名に&lt;c0&gt;"-Bridging-Header&lt;w1&gt;.h"&lt;/w1&gt;&lt;/c0&gt;を続けることでそれに名前をつけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are adding a known number of elements to an array, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが数のわかった要素を配列に加えているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are adding a known number of key-value pairs to a dictionary, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが数のわかったキー値ペアを辞書に加えているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are sorting strings to present to the end user, use &lt;c0&gt;String&lt;/c0&gt; APIs that perform localized comparison instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが文字列をソートしてエンドユーザに提供するならば、代わりに&lt;c0&gt;String&lt;/c0&gt; APIを使うべきです、それはローカライズされた比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are sorting strings to present to the end user, use &lt;c0&gt;String&lt;/c0&gt; APIs that perform localized comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが文字列をソートしてエンドユーザに提供するならば、&lt;c0&gt;String&lt;/c0&gt; APIを使うべきです、それはローカライズされた比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you assign &lt;c0&gt;nil&lt;/c0&gt; as the value for the given key, the dictionary removes that key and its associated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが与えられたキーに値として&lt;c0&gt;nil&lt;/c0&gt;を割り当てるならば、辞書はそのキーとそれの結び付けられた値を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you assign &lt;c0&gt;nil&lt;/c0&gt; to an existing key, the key and its associated value are removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;nil&lt;/c0&gt;を既存のキーに割り当てるならば、そのキーとそれの関連値は削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you call &lt;c0&gt;async(priority:&lt;w1&gt;operation:)&lt;/w1&gt;&lt;/c0&gt; to create a new task in a canceled group, that task is immediately canceled after creation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;async(priority:&lt;w1&gt;operation:)&lt;/w1&gt;&lt;/c0&gt;を呼び出すことで新しいタスクをある取り消されたグループの中に作成するならば、そのタスクは作成の後に直ぐに取り消されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you call &lt;c0&gt;async(priority:&lt;w1&gt;operation:)&lt;/w1&gt;&lt;/c0&gt; to create a new task in a canceled group, that task is is immediately canceled after being created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;async(priority:&lt;w1&gt;operation:)&lt;/w1&gt;&lt;/c0&gt;を呼び出すことで新しいタスクをある取り消されたグループの中に作成するならば、そのタスクは作成される後に直ぐに取り消されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you call this function from the body of an asynchronous function, the unsafe task handle passed to the closure is always non-nil because an asynchronous function always runs in the context of a task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがこの関数を非同期関数の本体から呼び出すならば、クロージャに渡された非安全タスクハンドルは常に非nilです、なぜなら非同期関数は常にあるタスクの文脈において動作するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you change a reference to an object in one array, only that array has a reference to the new object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある配列におけるあるオブジェクトへの参照を変更するならば、単にその配列が新しいオブジェクトへの参照を持つだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you compare two instances of that type, whether or not the computed value has been cached shouldn't affect their equality, so the cached value should be excluded from comparison and hashing.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがその型の２つのインスタンスを比較するならば、計算値がキャッシュされるかどうかが、それらの同等性に影響すべきではありません、なのでキャッシュされた値は比較およびハッシュ化から排除されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the &lt;c0&gt;Collection&lt;/c0&gt; protocol in order to give a more useful and more efficient interface for sequence and collection operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがそれの要素に繰り返しアクセスを提供できるあつらえのシーケンスを作成しているならば、より実用的でより効率的なインターフェイスをシーケンスおよびコレクション演算に与えるために、それの型が&lt;c0&gt;Collection&lt;/c0&gt;プロトコルに準拠するのを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you don't need to know &lt;e0&gt;how&lt;/e0&gt; a property has changed, omit the &lt;c1&gt;options&lt;/c1&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;e0&gt;どのように&lt;/e0&gt;プロパティが変更されたか知る必要がないならば、&lt;c1&gt;options&lt;/c1&gt;パラメータを省略します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you don't need to respond to events, you don't need to create a delegate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがイベントに応答することを必要としないならば、あなたは委任先を作成する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you don’t want the default behavior or don’t want to construct a &lt;c11&gt;String&lt;/c11&gt;, use a custom type conforming to &lt;c12&gt;String&lt;w13&gt;Interpolation&lt;w14&gt;Protocol&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt; instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが初期状態の挙動を望まないまたは&lt;c11&gt;String&lt;/c11&gt;を組み立てることを望まないならば、代わりに&lt;c12&gt;String&lt;w13&gt;Interpolation&lt;w14&gt;Protocol&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt;に準拠するあるあつらえの型を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you have prior knowledge that an &lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt; instance has a particular type, you can use the unconditional downcast operator (&lt;c2&gt;as!&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt;インスタンスがある特定の型を持つという事前の知識を持つならば、無条件のダウンキャスト演算子（&lt;c2&gt;as!&lt;/c2&gt;）を使うことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you implement &lt;c6&gt;Custom&lt;w7&gt;Debug&lt;w8&gt;String&lt;w9&gt;Convertible&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; conformance for your custom type, you may want to consider providing a custom mirror by implementing &lt;c10&gt;Custom&lt;w11&gt;Reflectable&lt;/w11&gt;&lt;/c10&gt; conformance, as well.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c6&gt;Custom&lt;w7&gt;Debug&lt;w8&gt;String&lt;w9&gt;Convertible&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;準拠をあなたのあつらえの型に実装するならば、さらにまたあなたはあつらえのミラーを&lt;c10&gt;Custom&lt;w11&gt;Reflectable&lt;/w11&gt;&lt;/c10&gt;準拠によって提供することを考慮したいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you implement a custom data structure backed by an array that grows dynamically, naively calling the &lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt; method can lead to worse than expected performance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが動的に増大する配列によって裏打ちされる誂えのデータ構造を実装するならば、無邪気に&lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;メソッドを呼び出すと予想される性能よりずっと悪くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you know approximately how many elements you will need to store, use the &lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt; method before appending to the array to avoid intermediate reallocations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのくらい多くの要素をあなたが格納する必要があるかをあなたがおおよそ知っているならば、配列に追加する前に&lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使って中間的な再割り当てを回避するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションをそれのインデックス全体に反復している間に変化させるならば、ある強い参照はそのコレクションの予期されない複製の原因となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションをそれのインデックス全体に反復している間に変化させるならば、ある強い参照はそのコレクションの予期しない複製という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが同じ型での逆にされたコレクションを必要とするならば、あなたはコレクションのもつシーケンス基盤のまたはコレクション基盤のイニシャライザを使うことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need an array that is preinitialized with a fixed number of default values, use the &lt;c0&gt;Array(repeating:&lt;w1&gt;count:)&lt;/w1&gt;&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある固定された数の省略時の値であらかじめ初期化される配列を必要とするならば、&lt;c0&gt;Array(repeating:&lt;w1&gt;count:)&lt;/w1&gt;&lt;/c0&gt;イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need an ordered collection of key-value pairs and don’t need the fast key lookup that &lt;c0&gt;Dictionary&lt;/c0&gt; provides, see the &lt;c1&gt;Key&lt;w2&gt;Value&lt;w3&gt;Pairs&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; type for an alternative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが順番付けられたキー値ペアのコレクションを必要とするそして&lt;c0&gt;Dictionary&lt;/c0&gt;が提供する高速な検索を必要としないならば、代わりのものとして&lt;c1&gt;Key&lt;w2&gt;Value&lt;w3&gt;Pairs&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;型を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need more control or only a few results, you can use a pattern like the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが更なる制御または少しの結果を必要とするならば、あなたは以下のような手本を使用できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need more control over the capacity of your array, implement your own geometric growth strategy, passing the size you compute to &lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたの配列の容量に関してより制御を必要とするならば、あなた独自の幾何数級的戦略を実装して、あなたが算出する大きさを&lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;に渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need the reference semantics that come with the Foundation reference type, you can access it with its original &lt;c0&gt;NS&lt;/c0&gt; class name prefix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがFoundation参照型に付属する参照意味論を必要とするならば、あなたはそれに、それの元の&lt;c0&gt;NS&lt;/c0&gt;クラス名接頭辞でアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to customize this behavior, override the &lt;a3&gt;&lt;c4&gt;is&lt;w5&gt;Equal(_:)&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt; method and &lt;a6&gt;&lt;c7&gt;hash&lt;/c7&gt;&lt;/a6&gt; property instead of the &lt;c8&gt;==&lt;/c8&gt; operator method and &lt;c9&gt;hash&lt;w10&gt;Value&lt;/w10&gt;&lt;/c9&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがこの挙動をカスタマイズする必要があるならば、&lt;a3&gt;&lt;c4&gt;is&lt;w5&gt;Equal(_:)&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;メソッドと&lt;a6&gt;&lt;c7&gt;hash&lt;/c7&gt;&lt;/a6&gt;プロトコルをオーバーライドしてください、&lt;c8&gt;==&lt;/c8&gt;演算子メソッドと&lt;c9&gt;hash&lt;w10&gt;Value&lt;/w10&gt;&lt;/c9&gt;プロパティではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to infer moves, call the &lt;c0&gt;inferring&lt;w1&gt;Moves()&lt;/w1&gt;&lt;/c0&gt; method on the resulting difference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが移動の推論を必要とするならば、&lt;c0&gt;inferring&lt;w1&gt;Moves()&lt;/w1&gt;&lt;/c0&gt;メソッドを結果の差異の上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to iterate over consecutive floating-point values, see the &lt;c3&gt;stride(from:&lt;w4&gt;through:&lt;w5&gt;by:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが連続した不動小数点値にわたって反復適用していく必要があるならば、&lt;c3&gt;stride(from:&lt;w4&gt;through:&lt;w5&gt;by:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;関数を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to mutate the argument through the pointer, use &lt;c8&gt;with&lt;w9&gt;Unsafe&lt;w10&gt;Mutable&lt;w11&gt;Pointer(to:&lt;w12&gt;_:)&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがポインタを通して引数を変化させる必要があるならば、代わりに&lt;c8&gt;with&lt;w9&gt;Unsafe&lt;w10&gt;Mutable&lt;w11&gt;Pointer(to:&lt;w12&gt;_:)&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to pass an optional pointer as a &lt;c0&gt;CVar&lt;w1&gt;Arg&lt;/w1&gt;&lt;/c0&gt; argument, use the &lt;c2&gt;Int(bit&lt;w3&gt;Pattern:)&lt;/w3&gt;&lt;/c2&gt; initializer to interpret the optional pointer as an &lt;c4&gt;Int&lt;/c4&gt; value, which has the same C variadic calling conventions as a pointer on all supported platforms.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオプショナル値を&lt;c0&gt;CVar&lt;w1&gt;Arg&lt;/w1&gt;&lt;/c0&gt;引数として渡す必要があるならば、&lt;c2&gt;Int(bit&lt;w3&gt;Pattern:)&lt;/w3&gt;&lt;/c2&gt;イニシャライザを使って、オプショナルポインタを&lt;c4&gt;Int&lt;/c4&gt;値として解釈してください、それは全てのサポートされるプラットホーム上のポインタと同じC可変長引数呼出規約を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to pass those keys to a method that takes an array, however, use this initializer to convert that list from its type of &lt;c1&gt;Lazy&lt;w2&gt;Map&lt;w3&gt;Collection&lt;Dictionary&lt;String, Int&gt;, Int&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; to a simple &lt;c4&gt;[String]&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが配列を取るメソッドにそれらキーを渡す必要があるならば、このイニシャライザを使ってそのリストをそれの型の&lt;c1&gt;Lazy&lt;w2&gt;Map&lt;w3&gt;Collection&lt;Dictionary&lt;String, Int&gt;, Int&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;から単純な&lt;c4&gt;[String]&lt;/c4&gt;へ変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to perform additional setup beyond initialization, you can assign the result of the invocation of a closure to the global constant:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが追加的な準備を初期化が済んだら実行する必要があるならば、あなたはあるクロージャの発動の結果をグローバル定数に割り当てることができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you override one of these declarations, you must also override the other to maintain that guarantee.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがそれら宣言の一方をオーバーライドするならば、あなたはまた他方もオーバーライドしてその保証を維持してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass &lt;c0&gt;true&lt;/c0&gt;, the operation preserves the buffer capacity that the collection has, otherwise the underlying buffer is released.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;true&lt;/c0&gt;を渡すならば、演算はそのコレクションが持つバッファ容量を保全します、そうでなければ基礎をなすバッファは解放されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass a value as &lt;c0&gt;stride&lt;/c0&gt; that moves away from &lt;c1&gt;end&lt;/c1&gt;, the sequence contains no values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある値を&lt;c0&gt;stride&lt;/c0&gt;として渡してそれが&lt;c1&gt;end&lt;/c1&gt;から離れていくならば、シーケンスは全く値を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass a zero-length range as the &lt;c0&gt;subrange&lt;/c0&gt; parameter, this method inserts the elements of &lt;c1&gt;new&lt;w2&gt;Elements&lt;/w2&gt;&lt;/c1&gt; at &lt;c3&gt;subrange&lt;w4&gt;.start&lt;w5&gt;Index&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがゼロ長範囲を&lt;c0&gt;subrange&lt;/c0&gt;パラメータとして渡すならば、このメソッドは&lt;c1&gt;new&lt;w2&gt;Elements&lt;/w2&gt;&lt;/c1&gt;の要素を&lt;c3&gt;subrange&lt;w4&gt;.start&lt;w5&gt;Index&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass the array’s &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property as the &lt;c2&gt;index&lt;/c2&gt; parameter, the new element is appended to the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが配列の&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティを&lt;c2&gt;index&lt;/c2&gt;パラメータとして渡すならば、新しい要素が配列に追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass the collection’s &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property as the &lt;c2&gt;index&lt;/c2&gt; parameter, the new elements are appended to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションの&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティを&lt;c2&gt;index&lt;/c2&gt;パラメータとして渡すならば、いくらかの新しい要素がコレクションに追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you provide your own implementation, make sure to compute the value nondestructively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなた独自の実装を提供するならば、値を非破壊的に計算することを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you return Core Foundation objects from your own C functions and Objective-C methods, you can annotate them with either the &lt;c0&gt;CF&lt;w1&gt;_RETURNS&lt;w2&gt;_RETAINED&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; or &lt;c3&gt;CF&lt;w4&gt;_RETURNS&lt;w5&gt;_NOT&lt;w6&gt;_RETAINED&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; macro to automatically insert memory management calls.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがCore Foundationオブジェクトをあなた独自のC関数およびObjective-Cメソッドから返すならば、あなたはそれらに&lt;c0&gt;CF&lt;w1&gt;_RETURNS&lt;w2&gt;_RETAINED&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;または&lt;c3&gt;CF&lt;w4&gt;_RETURNS&lt;w5&gt;_NOT&lt;w6&gt;_RETAINED&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;マクロのどちらかで注釈をつけて、自動的にメモリ管理呼び出しを差し込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you return any other type, a structured description is generated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが何か他の型を返すならば、構造化された記述が生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use &lt;c0&gt;11&lt;/c0&gt; as &lt;c1&gt;rhs&lt;/c1&gt;, &lt;c2&gt;x&lt;/c2&gt; is overshifted such that all of its bits are set to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;11&lt;/c0&gt;を&lt;c1&gt;rhs&lt;/c1&gt;として使うならば、&lt;c2&gt;x&lt;/c2&gt;は、それのビットのすべてがゼロに設定されるような、オーバーシフトをされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use &lt;c2&gt;2&lt;/c2&gt; as the right-hand-side value in an operation on &lt;c3&gt;x&lt;/c3&gt;, the shift amount requires no masking.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c2&gt;2&lt;/c2&gt;を右手側の値として&lt;c3&gt;x&lt;/c3&gt;に関する演算において使うならば、シフト量はマスクを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use &lt;c2&gt;2&lt;/c2&gt; as the right-hand-side value in an operation on &lt;c3&gt;x&lt;/c3&gt;, the value is shifted left by two bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c2&gt;2&lt;/c2&gt;を&lt;c3&gt;x&lt;/c3&gt;上での演算の右手側の値として使うならば、値は2ビットだけ左にシフトされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use &lt;c2&gt;2&lt;/c2&gt; as the right-hand-side value in an operation on &lt;c3&gt;x&lt;/c3&gt;, the value is shifted right by two bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c2&gt;2&lt;/c2&gt;を&lt;c3&gt;x&lt;/c3&gt;上での演算の右手側の値として使うならば、値は2ビットだけ右にシフトされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use an Objective-C API that needs to process your data, or you need to fit your data model into an existing class hierarchy defined in an Objective-C framework, you might need to use classes and class inheritance to model your data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのデータを処理するのに必要であるObjective-C APIをあなたが使う、またはあなたのデータモデルをObjective-Cフレームワークにおいて定義される既存のクラス階層へと適合させる必要があるならば、あなたはクラスとクラス階層を使ってあなたのデータをモデル化する必要があるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want a conforming type to differentiate between literal and interpolated segments, restrict the types that can be interpolated, support different interpolators from the ones on &lt;c0&gt;String&lt;/c0&gt;, or avoid constructing a &lt;c1&gt;String&lt;/c1&gt; containing the data, the type must specify a custom &lt;c2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/c2&gt; associated type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある準拠している型にリテラルと補間分節の間の区別がついて欲しいならば、補間されることが可能な型を制約して、&lt;c0&gt;String&lt;/c0&gt;でのものと異なる補間をサポートしてください、またはデータを含んでいる&lt;c1&gt;String&lt;/c1&gt;を組み立てることを防止してください、その型はあるあつらえの&lt;c2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/c2&gt;関連型を指定しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to mutate a value by writing through a pointer, use &lt;c10&gt;with&lt;w11&gt;Unsafe&lt;w12&gt;Mutable&lt;w13&gt;Bytes(of:&lt;w14&gt;_:)&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt; instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある値をポインタを通して書き込むことで変化させたいならば、&lt;c10&gt;with&lt;w11&gt;Unsafe&lt;w12&gt;Mutable&lt;w13&gt;Bytes(of:&lt;w14&gt;_:)&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;を代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow addition operator (&lt;c0&gt;&amp;+&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーフロー検査を取りやめて、あらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー加算演算子（&lt;c0&gt;&amp;+&lt;/c0&gt;）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow multiplication operator (&lt;c0&gt;&amp;*&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーフロー検査を取りやめて、あらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー乗算演算子（&lt;c0&gt;&amp;*&lt;/c0&gt;）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow subtraction operator (&lt;c0&gt;&amp;-&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーフロー検査を取りやめてあらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー減算演算子（&lt;c0&gt;&amp;-&lt;/c0&gt;）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to provide a custom description of your type to be logged in place of the default description, conform to the &lt;c0&gt;Custom&lt;w1&gt;Playground&lt;w2&gt;Display&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のあつらえの記述を提供して省略時の記述の代わりに記録されるようにしたいならば、&lt;c0&gt;Custom&lt;w1&gt;Playground&lt;w2&gt;Display&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you're building an inheritance relationship from scratch, prefer protocol inheritance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが継承関係をゼロから構築するならば、プロトコル継承を選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you're completely certain about the type of the object, you can use the forced downcast operator (&lt;c0&gt;as!&lt;/c0&gt;) instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオブジェクトの型について完全に確信しているならば、あなたは強制ダウンキャスト演算子（&lt;c0&gt;as!&lt;/c0&gt;）を代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you're new to Swift, read &lt;a0&gt;The Swift Programming Language&lt;/a0&gt; for a quick tour, a comprehensive language guide, and a full reference manual.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがSwiftに慣れていないならば、&lt;a0&gt;Swiftプログラミング言語&lt;/a0&gt;を素早い見学、包括的な言語案内、そして完全な参照手引書として読んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you're new to programming, check out &lt;a1&gt;Swift Playgrounds&lt;/a1&gt; on iPad.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがプログラミング初心者ならば、&lt;a1&gt;Swift Playgrounds&lt;/a1&gt;をiPadでチェックしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your app target has an Objective-C bridging header, the generated header also includes interfaces marked with the &lt;c2&gt;internal&lt;/c2&gt; modifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのアプリターゲットがObjective-Cブリッジヘッダを含むならば、生成されたヘッダもまた&lt;c2&gt;internal&lt;/c2&gt;修飾子で印されたインターフェイスを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your array’s &lt;c0&gt;Element&lt;/c0&gt; type is a class or &lt;c1&gt;@objc&lt;/c1&gt; protocol and you do not need to bridge the array to &lt;c2&gt;NSArray&lt;/c2&gt; or pass the array to Objective-C APIs, using &lt;c3&gt;Contiguous&lt;w4&gt;Array&lt;/w4&gt;&lt;/c3&gt; may be more efficient and have more predictable performance than &lt;c5&gt;Array&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの配列の&lt;c0&gt;Element&lt;/c0&gt;型がクラスまたは&lt;c1&gt;@objc&lt;/c1&gt;プロトコルで、あなたがその配列を&lt;c2&gt;NSArray&lt;/c2&gt;にブリッジしたりその配列をObjective-C APIに渡したりする必要がないならば、&lt;c3&gt;Contiguous&lt;w4&gt;Array&lt;/w4&gt;&lt;/c3&gt;を使うことは&lt;c5&gt;Array&lt;/c5&gt;よりもより効率的でありそしてより予測どおりの性能を持つでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your implementation returns an instance of one of the types above, that type’s specialized description is used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの実装が上の型の１つのインスタンスを返すならば、その型のもつ特殊化された記述が使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your sequence might have duplicate keys, use the &lt;c0&gt;Dictionary(_:&lt;w1&gt;uniquing&lt;w2&gt;Keys&lt;w3&gt;With:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; initializer instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのシーケンスが重複するキーを持つかもしれないならば、&lt;c0&gt;Dictionary(_:&lt;w1&gt;uniquing&lt;w2&gt;Keys&lt;w3&gt;With:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;イニシャライザを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your type contains properties that don't affect whether two instances are considered equal, exclude those properties from comparison in the &lt;c0&gt;==&lt;/c0&gt; method and from hashing in &lt;c1&gt;hash(into:)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのインスタンスが等しいと考えられるかどうかに影響しないプロパティをあなたの型が含むならば、それらプロパティを&lt;c0&gt;==&lt;/c0&gt;メソッドでの比較から、そして&lt;c1&gt;hash(into:)&lt;/c1&gt;でのハッシュ化から除外してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your type has value semantics, the &lt;c0&gt;playground&lt;w1&gt;Description&lt;/w1&gt;&lt;/c0&gt; should be unaffected by subsequent mutations, if possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型が値意味論を持つならば、&lt;c0&gt;playground&lt;w1&gt;Description&lt;/w1&gt;&lt;/c0&gt;はその後の変化によって影響を受けないべきです、できれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your type’s &lt;c0&gt;playground&lt;w1&gt;Description&lt;/w1&gt;&lt;/c0&gt; returns an instance which itself conforms to &lt;c2&gt;Custom&lt;w3&gt;Playground&lt;w4&gt;Display&lt;w5&gt;Convertible&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;, then that type’s &lt;c6&gt;playground&lt;w7&gt;Description&lt;/w7&gt;&lt;/c6&gt; will be used, and so on.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のもつ&lt;c0&gt;playground&lt;w1&gt;Description&lt;/w1&gt;&lt;/c0&gt;がそれ自体が&lt;c2&gt;Custom&lt;w3&gt;Playground&lt;w4&gt;Display&lt;w5&gt;Convertible&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に準拠するインスタンスを返すならば、そのときその型のもつ&lt;c6&gt;playground&lt;w7&gt;Description&lt;/w7&gt;&lt;/c6&gt;が使われます、などなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same sequence of Boolean values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じブール値からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ要素からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same sequence of floating-point values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ浮動小数点値からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same sequence of integer values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ整数値からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じシャッフルされた順番という結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re sure of the dynamic type of &lt;c10&gt;obj&lt;/c10&gt;, you can call &lt;c11&gt;get&lt;w12&gt;Integer&lt;w13&gt;Value()&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt; directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c10&gt;obj&lt;/c10&gt;の動的型に確信を持つならば、あなたは&lt;c11&gt;get&lt;w12&gt;Integer&lt;w13&gt;Value()&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt;を直接に呼び出すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re working directly with numeric values, use the addition operator (&lt;c1&gt;+&lt;/c1&gt;) instead of this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが直接に数値を扱っているならば、加算演算子（&lt;c1&gt;+&lt;/c1&gt;）をこのメソッドの代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Imagine you have a set of temperature data for which you need to report some general statistics: the total number of observations, the number of valid observations, and the average temperature.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが幾つかの一般統計：観測総数、有効観測数、そして平均温度を報告しなければならない一揃いの温度データを持つと想像してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implement this method to conform to the &lt;c0&gt;Hashable&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを実装して、&lt;c0&gt;Hashable&lt;/c0&gt;プロトコルに準拠してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implementing &lt;c0&gt;next()&lt;/c0&gt; with a &lt;c1&gt;with&lt;w2&gt;Task&lt;w3&gt;Cancellation&lt;w4&gt;Handler(handler:&lt;w5&gt;operation:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; invocation to immediately react to cancellation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next()&lt;/c0&gt;をある&lt;c1&gt;with&lt;w2&gt;Task&lt;w3&gt;Cancellation&lt;w4&gt;Handler(handler:&lt;w5&gt;operation:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;発動をつかって実装して、直接に取り消しに反応を示す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import Code Within a Framework Target</seg>
      </tuv>
      <tuv lang="ja">
        <seg>フレームワークターゲット内部でコードをインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import Code Within an App Target</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリターゲット内部でコードをインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import Swift code into Objective-C within the same framework:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftコードをObjective-Cへと同じフレームワーク内部でインポートする：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import the Swift code from that framework target into any Objective-C &lt;c0&gt;.m&lt;/c0&gt; file within that target using this syntax and substituting the appropriate names:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのフレームワークターゲットからのSwiftコードを何らかのObjective-C &lt;c0&gt;.m&lt;/c0&gt;ファイルにそのターゲット内部で、この構文を使ってそして適切な名前で置き換えて、インポートしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Important</seg>
      </tuv>
      <tuv lang="ja">
        <seg>重要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Imported C and Objective-C APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたCおよびObjective-C API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Importing Objective-C into Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-CをSwiftにインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Importing Swift into Objective-C</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftをObjective-Cにインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In -O builds, has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>-Oビルドでは、影響はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In -O builds, no test is performed to ensure that &lt;c3&gt;x&lt;/c3&gt; actually has the dynamic type &lt;c4&gt;T&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>-Oビルドにおいて、全くテストは実行されず&lt;c3&gt;x&lt;/c3&gt;が実際に動的型&lt;c4&gt;T&lt;/c4&gt;を持つことを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In -Ounchecked builds, the optimizer may assume that this function is never called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>-Ouncheckedビルドでは、最適化はこの関数が決して呼ばれないと決めてかかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;c0&gt;-O&lt;/c0&gt; builds (the default for Xcode’s Release configuration), &lt;c1&gt;condition&lt;/c1&gt; is not evaluated, and there are no effects.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-O&lt;/c0&gt;ビルド（省略時のXcodeのRelease構成）では、&lt;c1&gt;condition&lt;/c1&gt;は評価されません、そして影響はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;c0&gt;-O&lt;/c0&gt; builds (the default for Xcode’s Release configuration), stops program execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-O&lt;/c0&gt;ビルド（XcodeのRelease構成の初期設定）では、プログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;c0&gt;-O&lt;/c0&gt; builds (the default for Xcode’s Release configuration): If &lt;c1&gt;condition&lt;/c1&gt; evaluates to &lt;c2&gt;false&lt;/c2&gt;, stop program execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-O&lt;/c0&gt;ビルド（省略時のXcodeのRelease構成）では：&lt;c1&gt;condition&lt;/c1&gt;が&lt;c2&gt;false&lt;/c2&gt;に評価されるならば、プログラム実行を止めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;c0&gt;-Ounchecked&lt;/c0&gt; builds, &lt;c1&gt;condition&lt;/c1&gt; is not evaluated, but the optimizer may assume that it &lt;e2&gt;always&lt;/e2&gt; evaluates to &lt;c3&gt;true&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-Ounchecked&lt;/c0&gt;ビルドにおいて、&lt;c1&gt;condition&lt;/c1&gt;は評価されません、しかし最適化は、それが&lt;c3&gt;true&lt;/c3&gt;に&lt;e2&gt;常に&lt;/e2&gt;に評価されると決めてかかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;c0&gt;-Ounchecked&lt;/c0&gt; builds, the optimizer may assume that this function is never called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-Ounchecked&lt;/c0&gt;ビルドでは、最適化はこの関数が決して呼ばれないと決めてかかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Build Settings, in Swift Compiler - General, make sure the Objective-C Bridging Header build setting has a path to the bridging header file.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Build Settingsでは、Swift Compiler - Generalにおいて、Objective-C Bridging Header ビルド設定がブリッジヘッダファイルに対するパスを持つことを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Cocoa, methods that perform asynchronous operations take a completion handler as their last parameter, and the method calls that block after the operation finishes to return a result or an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cocoaでは、非同期演算を実行するメソッドは、それの最後のパラメータとしてある完了ハンドラを、そして演算が終了する後では遮断するメソッド呼び出しいくつかをとって、結果またはエラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Cocoa, methods that produce errors take an &lt;a0&gt;&lt;c1&gt;NSError&lt;/c1&gt;&lt;/a0&gt; pointer parameter as their last parameter, which populates its argument with an &lt;s2&gt;&lt;c3&gt;NSError&lt;/c3&gt;&lt;/s2&gt; object if an error occurs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cocoaでは、エラーを生成するメソッドは&lt;a0&gt;&lt;c1&gt;NSError&lt;/c1&gt;&lt;/a0&gt;ポインタパラメータをそれらの最後のパラメータとして取ります、エラーが発生するならばその引数に&lt;s2&gt;&lt;c3&gt;NSError&lt;/c3&gt;&lt;/s2&gt;オブジェクトが入ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Objective-C, exceptions are distinct from errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cにおいて、例外はエラーとは別個のものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Objective-C, it's declared like this:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cでは、それはこのように宣言されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Objective-C, the &lt;c0&gt;id&lt;/c0&gt; type represents objects that are instances of any Objective-C class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cでは、&lt;c0&gt;id&lt;/c0&gt;型は、何らかのObjective-Cクラスのインスタンスであるオブジェクトを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift it‘s imported as two methods, an asychronous method that takes a closure and an asynchronous throwing method that returns a tuple:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftではそれは２つのメソッドとしてインポートされます、あるクロージャをとる非同期メソッドそしてあるタプルを返す非同期スローメソッド：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, calling a method that throws requires explicit error handling.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトでは、スローするメソッドを呼び出すことは明確にエラー処理することを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, it’s imported like this:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトでは、それはこのようにインポートされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you can call C variadic functions, such as &lt;c0&gt;vasprintf(_:&lt;w1&gt;_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, using the Swift &lt;a3&gt;&lt;c4&gt;get&lt;w5&gt;Va&lt;w6&gt;List(_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt; or &lt;a7&gt;&lt;c8&gt;with&lt;w9&gt;Va&lt;w10&gt;List(_:&lt;w11&gt;_:)&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;&lt;/a7&gt; functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、あなたはC可変長引数関数、例えば&lt;c0&gt;vasprintf(_:&lt;w1&gt;_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;などを呼び出すことが、Swiftの&lt;a3&gt;&lt;c4&gt;get&lt;w5&gt;Va&lt;w6&gt;List(_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;または&lt;a7&gt;&lt;c8&gt;with&lt;w9&gt;Va&lt;w10&gt;List(_:&lt;w11&gt;_:)&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;&lt;/a7&gt;関数を使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you can recover from errors passed using Cocoa’s error pattern, as described above in &lt;a0&gt;Catch Errors&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、あなたはCocoaのエラーパターンを使って渡されるエラーから復旧できます、上の&lt;a0&gt;エラーをキャッチする&lt;/a0&gt;で記述されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you can use each pair of toll-free bridged Foundation and Core Foundation types interchangeably.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトにおいて、あなたは、トールフリーブリッジ（無料の橋渡し）されたFoundationとCore Foundation型の各対を入れ替えて使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you can use functions and generics to achieve the same results without any compromises.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトでは、あなたはどんな妥協もなしで同じ結果を成し遂げるために、関数と総称体を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a &lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance, &lt;c3&gt;end&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; is always &lt;c5&gt;1&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスにおいて、&lt;c3&gt;end&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;は常に&lt;c5&gt;1&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a &lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance, &lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; is always &lt;c5&gt;0&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスにおいて、&lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;は常に&lt;c5&gt;0&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a case like this, where a generic parameter &lt;c1&gt;T&lt;/c1&gt; is bound to a protocol &lt;c2&gt;P&lt;/c2&gt;, the type parameter is not statically known to be a protocol type in the body of the generic function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このような場合において、総称体パラメータ&lt;c1&gt;T&lt;/c1&gt;がプロトコル&lt;c2&gt;P&lt;/c2&gt;に束縛されるところでは、その型パラメータは、プロトコル型であることを総称体関数の本文において静的に知られません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a collection, the subsequence should also conform to &lt;c1&gt;Collection&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションにおいて、下位シーケンスはまた&lt;c1&gt;Collection&lt;/c1&gt;に準拠すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a mutable &lt;c0&gt;Dictionary&lt;/c0&gt; instance, you can modify in place a value that you’ve accessed through a keyed subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変の&lt;c0&gt;Dictionary&lt;/c0&gt;インスタンスでは、あなたがキーによる添え字を通してアクセスしたある値をその場で修正できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to creating a character from a single-character string literal, you can also convert a unicode scalar value or single-character string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字を単一文字文字列リテラルから作成することに加えて、あなたはまた、あるユニコードスカラー値や単一文字文字列を変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to representing specific numbers, floating-point types also have special values for working with overflow and nonnumeric results of calculation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特定の数を表すことに加えて、浮動小数点型はまた、オーバーフローおよび非数の計算結果で使うための特別な値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to simplifying your code, this automatic conformance reduces errors, because any new properties you add to your custom types are automatically included when hashing and testing for equality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコードを単純にすることに加えて、この自動式の準拠はエラーを減らします、なぜならあなたのあつらえの型にあなたが加える何らかの新しいプロパティは、ハッシュ化および同等性テストをする場合に自動的に含まれるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to the operations that collections inherit from the &lt;c1&gt;Sequence&lt;/c1&gt; protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが&lt;c1&gt;Sequence&lt;/c1&gt;プロトコルから継承するメソッドに加えて、あなたは、コレクションの特定の位置で要素にアクセスすることを当てにするメソッドへの利用権を手に入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to using a dictionary literal, you can also create a dictionary using these initializers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書リテラルを使うことに加えて、あなたはまた辞書をこれらのイニシャライザを使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to using an array literal, you can also create an array using these initializers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルを使うことに加えて、あなたはまた配列をこれらのイニシャライザを使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, because &lt;c1&gt;abs(_:)&lt;/c1&gt; always returns a value of the same type, even in a generic context, using the function instead of the &lt;c2&gt;magnitude&lt;/c2&gt; property is encouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えて、&lt;c1&gt;abs(_:)&lt;/c1&gt;は常に同じ型の値を返すことから、総称体の文脈においてさえも、この関数を&lt;c2&gt;magnitude&lt;/c2&gt;プロパティの代わりに使うことは推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, because &lt;c3&gt;Integer&lt;w4&gt;Ref&lt;/w4&gt;&lt;/c3&gt; conforms to the &lt;c5&gt;Equatable&lt;/c5&gt; protocol, instances can also be compared using the equal-to operator (&lt;c6&gt;==&lt;/c6&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えて、&lt;c3&gt;Integer&lt;w4&gt;Ref&lt;/w4&gt;&lt;/c3&gt;は&lt;c5&gt;Equatable&lt;/c5&gt;プロトコルに準拠することから、インスタンスはまた同等性演算子（&lt;c6&gt;==&lt;/c6&gt;）を使って比較されることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, bidirectional collections have more efficient implementations of some sequence and collection methods, such as &lt;c4&gt;suffix(_:)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さらに加えて、二方向性のコレクションはいくらかのシーケンスおよびコレクションメソッドのもっと手際の良い実装を持ちます、例えば&lt;c4&gt;suffix(_:)&lt;/c4&gt;など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, the following conditions must hold:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えて、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, the unqualified &lt;c6&gt;list&lt;w7&gt;Of&lt;w8&gt;Objects&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; method uses the &lt;c9&gt;NSCopying&lt;/c9&gt; generic constraint inferred from the &lt;c10&gt;List&lt;/c10&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えて、不適格&lt;c6&gt;list&lt;w7&gt;Of&lt;w8&gt;Objects&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;メソッドは、&lt;c9&gt;NSCopying&lt;/c9&gt;総称体制約を&lt;c10&gt;List&lt;/c10&gt;型から推論されて使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, there are two other edge cases:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えて、２つの別の境界事例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an app that consults a remote database, for example, an instance's identity may be fully owned by an external entity and communicated by an identifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、リモートデータベースに助言を求めるアプリでは、あるインスタンスの持つ同一性は、外部存在によって完全に所有され、そしてある識別子によって伝えられるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty collection, &lt;c0&gt;start&lt;w1&gt;Index == end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のコレクションでは、&lt;c0&gt;start&lt;w1&gt;Index == end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In cases like this, the simplest fix is often to simply remove the call to &lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;, and let the &lt;c2&gt;append(_:)&lt;/c2&gt; method grow the array for you.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このような場合に、最も簡単な修正はしばしば単純に&lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;の呼出しを取り除いて、そして&lt;c2&gt;append(_:)&lt;/c2&gt;メソッドがあなたの代わりの配列を成長させるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In contrast, this example throws &lt;c0&gt;Some&lt;w1&gt;Error&lt;/w1&gt;&lt;/c0&gt; and cancels all of the tasks in the group:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>対照的に、この例は&lt;c0&gt;Some&lt;w1&gt;Error&lt;/w1&gt;&lt;/c0&gt;をスローします、そしてそのグループの中の全てのタスクを取り消します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In debug builds, an instance in the left-hand side of a &lt;c4&gt;&amp;&amp;&lt;/c4&gt; or &lt;c5&gt;||&lt;/c5&gt; expression may still be referenced when evaluating the right-hand side, inflating the instance’s reference count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デバッグビルドにおいて、&lt;c4&gt;&amp;&amp;&lt;/c4&gt;または&lt;c5&gt;||&lt;/c5&gt;式の左手側でのインスタンスは、右手側を評価している時に依然として参照されるかもしれません、インスタンスのもつ参照カウントを上昇させながら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, &lt;c0&gt;s&lt;w1&gt;.flat&lt;w2&gt;Map(transform)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is equivalent to &lt;c3&gt;Array(s&lt;w4&gt;.map(transform).joined())&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>実際のところ、&lt;c0&gt;s&lt;w1&gt;.flat&lt;w2&gt;Map(transform)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c3&gt;Array(s&lt;w4&gt;.map(transform).joined())&lt;/w4&gt;&lt;/c3&gt;に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In most cases, you should use the equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) to test whether two instances are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの場合、あなたは同等演算子（&lt;c0&gt;==&lt;/c0&gt;）を使って２つのインスタンスが等しいかどうかをテストするべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In most cases, you won't need to modify this setting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの場合では、あなたはこの設定を修正する必要はないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other languages, similar data types are known as hashes or associated arrays.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他の言語では、同じようなデータ型はハッシュまたは連想配列として知られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, for ordinary sequences &lt;c1&gt;s&lt;/c1&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>言い換えれば、よくあるシーケンス &lt;c1&gt;s&lt;/c1&gt;に対して：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, &lt;c4&gt;x&lt;w5&gt;.sign == .minus&lt;/w5&gt;&lt;/c4&gt; if &lt;c6&gt;x&lt;/c6&gt; is -0, and while &lt;c7&gt;x &lt; 0&lt;/c7&gt; is always &lt;c8&gt;false&lt;/c8&gt; if &lt;c9&gt;x&lt;/c9&gt; is NaN, &lt;c10&gt;x&lt;w11&gt;.sign&lt;/w11&gt;&lt;/c10&gt; could be either &lt;c12&gt;.plus&lt;/c12&gt; or &lt;c13&gt;.minus&lt;/c13&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、&lt;c6&gt;x&lt;/c6&gt;が-0ならば&lt;c4&gt;x&lt;w5&gt;.sign == .minus&lt;/w5&gt;&lt;/c4&gt;、一方で&lt;c9&gt;x&lt;/c9&gt;がNaNならば、&lt;c10&gt;x&lt;w11&gt;.sign&lt;/w11&gt;&lt;/c10&gt;が&lt;c12&gt;.plus&lt;/c12&gt;または&lt;c13&gt;.minus&lt;/c13&gt;のどちらでも、&lt;c7&gt;x &lt; 0&lt;/c7&gt;は常に&lt;c8&gt;false&lt;/c8&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, negating a signed, fixed-width integer type’s minimum results in a value that cannot be represented.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、符号付きの、固定長整数型のもつ最小値を負にすることは、表現できない値という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, note that &lt;c0&gt;j&lt;/c0&gt;, the index of the second day with absences, was found in a slice of the original array and then used to access a value in the original &lt;c1&gt;absences&lt;/c1&gt; array itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特に、欠席者のいる第２の日付のインデックス、&lt;c0&gt;j&lt;/c0&gt;が、オリジナル配列のひとつのスライス上で捜されて、それから値のアクセスのためにオリジナルの&lt;c1&gt;absences&lt;/c1&gt;配列自身において使われる点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, passing NaN as &lt;c3&gt;other&lt;/c3&gt; always results in &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、NaNを&lt;c3&gt;other&lt;/c3&gt;として渡すことは常に&lt;c4&gt;nil&lt;/c4&gt;の結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, that slice, unlike an array, may have a nonzero &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt; and an &lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt; that is not equal to &lt;c6&gt;count&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特に、そのスライスは、配列と違い、非ゼロの&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と&lt;c6&gt;count&lt;/c6&gt;に等しくない&lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;を持つかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, the absolute value of a signed, fixed-width integer type’s minimum cannot be represented.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、符号付きの、固定長整数型のもつ極小は、表現されることは可能ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, this discussion mentions &lt;a1&gt;extended grapheme clusters&lt;/a1&gt; and &lt;a2&gt;Unicode scalar values&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、この解説は&lt;a1&gt;拡張書記素クラスタ&lt;/a1&gt;と&lt;a2&gt;ユニコードスカラー値&lt;/a2&gt;について言及します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In playgrounds and -Onone builds (the default for Xcode’s Debug configuration), stop program execution in a debuggable state after printing &lt;c0&gt;message&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドおよび-Ononeビルド（省略時のXcodeのDebug構成）では、&lt;c0&gt;message&lt;/c0&gt;を出力した後にデバッグ可能状態でプログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In playgrounds and &lt;c0&gt;-Onone&lt;/c0&gt; builds (the default for Xcode’s Debug configuration), stops program execution in a debuggable state after printing &lt;c1&gt;message&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドおよび&lt;c0&gt;-Onone&lt;/c0&gt;ビルド（XcodeのDebug構成の初期設定）では、&lt;c1&gt;message&lt;/c1&gt;を出力した後デバッグ可能な状態でプログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In playgrounds and &lt;c0&gt;-Onone&lt;/c0&gt; builds (the default for Xcode’s Debug configuration): If &lt;c1&gt;condition&lt;/c1&gt; evaluates to &lt;c2&gt;false&lt;/c2&gt;, stop program execution in a debuggable state after printing &lt;c3&gt;message&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドおよび&lt;c0&gt;-Onone&lt;/c0&gt;ビルド（省略時のXcodeのDebug構成）において：&lt;c1&gt;condition&lt;/c1&gt;が&lt;c2&gt;false&lt;/c2&gt;に評価されるならば、&lt;c3&gt;message&lt;/c3&gt;を出力した後にデバッグ可能状態でプログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In short, the iterator is what produces the asynchronous sequence’s values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要約すれば、そのイテレータは、非同期シーケンスのもつ値それらを取り出すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In some uses, such as in a &lt;c4&gt;class&lt;/c4&gt; initializer, you may find that the language rules do not allow you to use &lt;c5&gt;with&lt;w6&gt;Va&lt;w7&gt;List(_:&lt;w8&gt;_:)&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; as intended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらの利用では、例えば&lt;c4&gt;class&lt;/c4&gt;でのように、あなたは言語規則があなたに&lt;c5&gt;with&lt;w6&gt;Va&lt;w7&gt;List(_:&lt;w8&gt;_:)&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;を意図したように利用させないのを発見するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In that case, the default value and key are not written back to the dictionary after an operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その場合には、省略時の値とキーは、演算の後に辞書へと書き戻されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In that case, the method returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その場合には、このメソッドは&lt;c3&gt;nil&lt;/c3&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the &lt;c0&gt;Zip2Sequence&lt;/c0&gt; instance returned by this function, the elements of the &lt;e1&gt;i&lt;/e1&gt;th pair are the &lt;e2&gt;i&lt;/e2&gt;th elements of each underlying sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数によって返される&lt;c0&gt;Zip2Sequence&lt;/c0&gt;インスタンスにおいて、&lt;e1&gt;i&lt;/e1&gt;番目の対の要素らは、基盤となる各シーケンスの&lt;e2&gt;i&lt;/e2&gt;番目の要素らです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the &lt;c3&gt;hash(into:)&lt;/c3&gt; method, call the &lt;c4&gt;combine(_:)&lt;/c4&gt; method on the provided hasher with each significant property:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;hash(into:)&lt;/c3&gt;メソッドにおいて、&lt;c4&gt;combine(_:)&lt;/c4&gt;メソッドをその提供されたhasher上で各重要プロパティとともに呼び出してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, &lt;c0&gt;more&lt;w1&gt;Numbers&lt;/w1&gt;&lt;/c0&gt; has the same type as &lt;c2&gt;numbers&lt;/c2&gt;, which is &lt;c3&gt;[Int]&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上の例において、&lt;c0&gt;more&lt;w1&gt;Numbers&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;numbers&lt;/c2&gt;と同じ型を持ちます、それは&lt;c3&gt;[Int]&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, &lt;c3&gt;first&lt;w4&gt;Space&lt;/w4&gt;&lt;/c3&gt; is used to extract the prefix that contains elements up to that index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上の例において、&lt;c3&gt;first&lt;w4&gt;Space&lt;/w4&gt;&lt;/c3&gt;は、そのインデックスまでの要素を含んでいる前の部分を抜き取るために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example below, &lt;c0&gt;json&lt;w1&gt;Response&lt;/w1&gt;&lt;/c0&gt; contains an encoded &lt;c2&gt;Pen&lt;w3&gt;Pal&lt;w4&gt;Record&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance from a server:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例において、&lt;c0&gt;json&lt;w1&gt;Response&lt;/w1&gt;&lt;/c0&gt;は、あるサーバからのエンコード済み&lt;c2&gt;Pen&lt;w3&gt;Pal&lt;w4&gt;Record&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example below, a &lt;c0&gt;numbers&lt;/c0&gt; array is created along with two copies that share the same storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例において、&lt;c0&gt;numbers&lt;/c0&gt;配列は２つのコピーと連れだって作成されます、それは同じストレージを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example below, changing the value of the &lt;c0&gt;is&lt;w1&gt;Alive&lt;/w1&gt;&lt;/c0&gt; computed property on an instance of the &lt;c2&gt;Schroedingers&lt;w3&gt;Cat&lt;/w3&gt;&lt;/c2&gt; structure also changes the value of the instance’s &lt;c4&gt;is&lt;w5&gt;Dead&lt;/w5&gt;&lt;/c4&gt; computed property:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例において、&lt;c0&gt;is&lt;w1&gt;Alive&lt;/w1&gt;&lt;/c0&gt;計算プロパティの値を&lt;c2&gt;Schroedingers&lt;w3&gt;Cat&lt;/w3&gt;&lt;/c2&gt;構造体のインスタンス上で変更することは、またそのインスタンスの&lt;c4&gt;is&lt;w5&gt;Dead&lt;/w5&gt;&lt;/c4&gt;計算プロパティの値も変更します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example below, the &lt;c0&gt;\.object&lt;w1&gt;To&lt;w2&gt;Observe&lt;w3&gt;.my&lt;w4&gt;Date&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; key path refers to the &lt;c5&gt;my&lt;w6&gt;Date&lt;/w6&gt;&lt;/c5&gt; property of &lt;c7&gt;My&lt;w8&gt;Object&lt;w9&gt;To&lt;w10&gt;Observe&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例において、&lt;c0&gt;\.object&lt;w1&gt;To&lt;w2&gt;Observe&lt;w3&gt;.my&lt;w4&gt;Date&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;キーパスは、&lt;c7&gt;My&lt;w8&gt;Object&lt;w9&gt;To&lt;w10&gt;Observe&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;の&lt;c5&gt;my&lt;w6&gt;Date&lt;/w6&gt;&lt;/c5&gt;プロパティを参照します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example, &lt;c0&gt;obj&lt;/c0&gt; has a static type of &lt;c1&gt;Any&lt;w2&gt;Object&lt;/w2&gt;&lt;/c1&gt; and a dynamic type of &lt;c3&gt;Integer&lt;w4&gt;Ref&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例において、&lt;c0&gt;obj&lt;/c0&gt;は&lt;c1&gt;Any&lt;w2&gt;Object&lt;/w2&gt;&lt;/c1&gt;の静的型と&lt;c3&gt;Integer&lt;w4&gt;Ref&lt;/w4&gt;&lt;/c3&gt;の動的型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following code, the &lt;c0&gt;count&lt;/c0&gt; variable has the same static and dynamic type: &lt;c1&gt;Int&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードにおいて、&lt;c0&gt;count&lt;/c0&gt;変数は同じ静的および動的型：&lt;c1&gt;Int&lt;/c1&gt;を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, &lt;c1&gt;key&lt;w2&gt;Path1&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;key&lt;w4&gt;Path2&lt;/w4&gt;&lt;/c3&gt; are equivalent:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c1&gt;key&lt;w2&gt;Path1&lt;/w2&gt;&lt;/c1&gt;と&lt;c3&gt;key&lt;w4&gt;Path2&lt;/w4&gt;&lt;/c3&gt;は同等です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, &lt;c4&gt;y&lt;/c4&gt; is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c4&gt;y&lt;/c4&gt;はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、数からなる配列は、30より大きな要素に合致するという述部によって仕切られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c15&gt;map(_:)&lt;/c15&gt; method transforms each &lt;c16&gt;Int&lt;/c16&gt; received from a &lt;c17&gt;Counter&lt;/c17&gt; sequence into a &lt;c18&gt;String&lt;/c18&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c15&gt;map(_:)&lt;/c15&gt;メソッドは&lt;c17&gt;Counter&lt;/c17&gt;シーケンスから受け取った各&lt;c16&gt;Int&lt;/c16&gt;を&lt;c18&gt;String&lt;/c18&gt;へと変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例では、そのクロージャは、あるHTTP応答を記述するあつらえ列挙の配列に対してある順序付けを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the constant &lt;c0&gt;y&lt;/c0&gt; is successfully created from &lt;c1&gt;x&lt;/c1&gt;, an &lt;c2&gt;Int&lt;/c2&gt; instance with a value of &lt;c3&gt;100&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、定数&lt;c0&gt;y&lt;/c0&gt;は、&lt;c1&gt;Int&lt;/c1&gt;インスタンスで&lt;c2&gt;100&lt;/c2&gt;の値を持つ&lt;c3&gt;x&lt;/c3&gt;からうまく作成されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the constant &lt;c2&gt;x&lt;/c2&gt; is successfully created from a value of &lt;c3&gt;100&lt;/c3&gt;, while the attempt to initialize the constant &lt;c4&gt;y&lt;/c4&gt; from &lt;c5&gt;1&lt;w6&gt;_000&lt;/w6&gt;&lt;/c5&gt; fails because the &lt;c7&gt;Int8&lt;/c7&gt; type can represent &lt;c8&gt;127&lt;/c8&gt; at maximum:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、定数&lt;c2&gt;x&lt;/c2&gt;は&lt;c3&gt;100&lt;/c3&gt;の値から首尾よく作り上げられます、一方で定数&lt;c4&gt;y&lt;/c4&gt;を&lt;c5&gt;1&lt;w6&gt;_000&lt;/w6&gt;&lt;/c5&gt;から初期化する試みは失敗します、なぜなら&lt;c7&gt;Int8&lt;/c7&gt;型は最大で&lt;c8&gt;127&lt;/c8&gt;を表現可能だからです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the constant &lt;c2&gt;x&lt;/c2&gt; is successfully created from a value of &lt;c3&gt;21&lt;w4&gt;.0&lt;/w4&gt;&lt;/c3&gt;, while the attempt to initialize the constant &lt;c5&gt;y&lt;/c5&gt; from &lt;c6&gt;21&lt;w7&gt;.5&lt;/w7&gt;&lt;/c6&gt; fails:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>続く例において、定数&lt;c2&gt;x&lt;/c2&gt;は&lt;c3&gt;21&lt;w4&gt;.0&lt;/w4&gt;&lt;/c3&gt;の値から首尾よく作成されます、一方で定数&lt;c5&gt;y&lt;/c5&gt;を&lt;c6&gt;21&lt;w7&gt;.5&lt;/w7&gt;&lt;/c6&gt;から初期化する試みは失敗します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the difference of &lt;c1&gt;10&lt;/c1&gt; and &lt;c2&gt;21&lt;/c2&gt; is less than zero, the minimum representable &lt;c3&gt;UInt&lt;/c3&gt; value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c1&gt;10&lt;/c1&gt;と&lt;c2&gt;21&lt;/c2&gt;の差はゼロ、最小限表現可能な&lt;c3&gt;UInt&lt;/c3&gt;値、よりも少ないです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the difference of &lt;c1&gt;10&lt;/c1&gt; and &lt;c2&gt;21&lt;/c2&gt; is less than zero, the minimum representable &lt;c3&gt;UInt&lt;/c3&gt; value, so the result is the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c1&gt;10&lt;/c1&gt;と&lt;c2&gt;21&lt;/c2&gt;の差はゼロ、最小限表現可能な&lt;c3&gt;UInt&lt;/c3&gt;値、よりも少ないです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the key-value pair for the key &lt;c0&gt;"Aquamarine"&lt;/c0&gt; is removed from the dictionary by assigning &lt;c1&gt;nil&lt;/c1&gt; to the key-based subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;"Aquamarine"&lt;/c0&gt;に対するキー値ペアは、&lt;c1&gt;nil&lt;/c1&gt;をキー基盤の添え字に割り当てることによって辞書から削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the predicate provides an ordering for an array of a custom &lt;c0&gt;HTTPResponse&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例では、その述部はあつらえの&lt;c0&gt;HTTPResponse&lt;/c0&gt;型の配列に対してある順序付けを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the product of &lt;c1&gt;10&lt;/c1&gt; and &lt;c2&gt;50&lt;/c2&gt; is greater than the maximum representable &lt;c3&gt;Int8&lt;/c3&gt; value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c1&gt;10&lt;/c1&gt;と&lt;c2&gt;50&lt;/c2&gt;の積は、最大限表現可能な&lt;c3&gt;Int8&lt;/c3&gt;値より大きいです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the result of &lt;c0&gt;21 * 21&lt;/c0&gt; is greater than the maximum representable &lt;c1&gt;Int8&lt;/c1&gt; value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;21 * 21&lt;/c0&gt;の結果は、最大限表現可能な&lt;c1&gt;Int8&lt;/c1&gt;値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the result of &lt;c0&gt;21 + 120&lt;/c0&gt; is greater than the maximum representable &lt;c1&gt;Int8&lt;/c1&gt; value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;21 + 120&lt;/c0&gt;の結果は、最大限表現可能な&lt;c1&gt;Int8&lt;/c1&gt;値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the result of &lt;c0&gt;21 - 50&lt;/c0&gt; is less than zero, the minimum representable &lt;c1&gt;UInt8&lt;/c1&gt; value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;21 - 50&lt;/c0&gt;の結果は、最大限表現可能な&lt;c1&gt;UInt8&lt;/c1&gt;値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the sum of &lt;c1&gt;100&lt;/c1&gt; and &lt;c2&gt;121&lt;/c2&gt; is greater than the maximum representable &lt;c3&gt;Int8&lt;/c3&gt; value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c1&gt;100&lt;/c1&gt;と&lt;c2&gt;121&lt;/c2&gt;の合計は、最大限表現可能な&lt;c3&gt;Int8&lt;/c3&gt;値より大きいです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the value &lt;c0&gt;127&lt;w1&gt;.75&lt;/w1&gt;&lt;/c0&gt; is rounded to &lt;c2&gt;127&lt;/c2&gt;, which is representable by the &lt;c3&gt;Int8&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>続く例において、値&lt;c0&gt;127&lt;w1&gt;.75&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;127&lt;/c2&gt;へ丸められます、それは&lt;c3&gt;Int8&lt;/c3&gt;型によって表現可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the implementations above, the &lt;c2&gt;Player&lt;/c2&gt; type uses &lt;c3&gt;name&lt;/c3&gt; and &lt;c4&gt;position&lt;/c4&gt; in both methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上の実装において、&lt;c2&gt;Player&lt;/c2&gt;型は&lt;c3&gt;name&lt;/c3&gt;と&lt;c4&gt;position&lt;/c4&gt;を両方のメソッドにおいて使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next example, &lt;c0&gt;y&lt;/c0&gt; has a value of &lt;c1&gt;21&lt;w2&gt;.5&lt;/w2&gt;&lt;/c1&gt;, which is encoded as &lt;c3&gt;1&lt;w4&gt;.34375 * 2 ** 4&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;y&lt;/c0&gt;は&lt;c1&gt;21&lt;w2&gt;.5&lt;/w2&gt;&lt;/c1&gt;の値を持ちます、それは&lt;c3&gt;1&lt;w4&gt;.34375 * 2 ** 4&lt;/w4&gt;&lt;/c3&gt;のようにエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the umbrella header, import every Objective-C header you want to expose to Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アンブレラヘッダにおいて、あなたが望むあらゆるObjective-CヘッダをインポートすることでSwiftに露出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, see the documentation of &lt;c1&gt;Collection&lt;w2&gt;.underestimated&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この場合には、&lt;c1&gt;Collection&lt;w2&gt;.underestimated&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の文書を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, the newly created set drops the duplicate value (“Dave”) and doesn’t maintain the order of the array literal’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この場合において、新たに作成された集合は、重複した値（「Dave」）を落とします、そして配列リテラルのもつ要素の順番を維持しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, the values stored in the array are references to objects that live outside the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この場合、配列に格納される値らは、その配列の外側で生活しているオブジェクトらへの参照です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;filter(_:)&lt;/c0&gt; is used to include only names shorter than five characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;filter(_:)&lt;/c0&gt;は５つの文字より短い名前のみ含めるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;good&lt;w1&gt;Number&lt;/w1&gt;&lt;/c0&gt; is assigned a value of &lt;c2&gt;100&lt;/c2&gt; because &lt;c3&gt;Int("100")&lt;/c3&gt; succeeded in returning a non-&lt;c4&gt;nil&lt;/c4&gt; result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;good&lt;w1&gt;Number&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;100&lt;/c2&gt;の値を割り当てられます、なぜなら&lt;c3&gt;Int("100")&lt;/c3&gt;が非&lt;c4&gt;nil&lt;/c4&gt;の結果を返すことに成功したからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;good&lt;w1&gt;Number&lt;/w1&gt;&lt;/c0&gt; is assigned a value of &lt;c2&gt;100&lt;/c2&gt; because &lt;c3&gt;Int("100")&lt;/c3&gt; succeeds in returning a non-&lt;c4&gt;nil&lt;/c4&gt; result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;good&lt;w1&gt;Number&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;100&lt;/c2&gt;の値を割り当てられます、なぜなら&lt;c3&gt;Int("100")&lt;/c3&gt;が非&lt;c4&gt;nil&lt;/c4&gt;の結果を返すことに成功するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;lhs&lt;/c0&gt; tests whether &lt;c1&gt;error&lt;/c1&gt; is an empty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;lhs&lt;/c0&gt;は&lt;c1&gt;error&lt;/c1&gt;が空の文字列かどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;lhs&lt;/c0&gt; tests whether &lt;c1&gt;measurements&lt;w2&gt;.count&lt;/w2&gt;&lt;/c1&gt; is greater than zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;lhs&lt;/c0&gt;は&lt;c1&gt;measurements&lt;w2&gt;.count&lt;/w2&gt;&lt;/c1&gt;がゼロより大きいかどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;map&lt;/c0&gt; is used first to convert the names in the array to lowercase strings and then to count their characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、&lt;c0&gt;map&lt;/c0&gt;は最初に配列中の名前を小文字文字列に変換するために、それからそれらの文字を数えるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;x&lt;/c0&gt; has a value of &lt;c1&gt;21&lt;w2&gt;.5&lt;/w2&gt;&lt;/c1&gt;, which is stored as &lt;c3&gt;1&lt;w4&gt;.34375 * 2**4&lt;/w4&gt;&lt;/c3&gt;, where &lt;c5&gt;**&lt;/c5&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;x&lt;/c0&gt;は&lt;c1&gt;21&lt;w2&gt;.5&lt;/w2&gt;&lt;/c1&gt;の値を持ちます、それは&lt;c3&gt;1&lt;w4&gt;.34375 * 2**4&lt;/w4&gt;&lt;/c3&gt;として格納されます、ここで&lt;c5&gt;**&lt;/c5&gt;は冪です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;x&lt;/c0&gt; is initialized as an &lt;c1&gt;Int8&lt;/c1&gt; instance by clamping &lt;c2&gt;500&lt;/c2&gt; to the range &lt;c3&gt;-128...127&lt;/c3&gt;, and &lt;c4&gt;y&lt;/c4&gt; is initialized as a &lt;c5&gt;UInt&lt;/c5&gt; instance by clamping &lt;c6&gt;-500&lt;/c6&gt; to the range &lt;c7&gt;0...UInt&lt;w8&gt;.max&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;x&lt;/c0&gt;は&lt;c1&gt;Int8&lt;/c1&gt;インスタンスとして、&lt;c2&gt;500&lt;/c2&gt;を範囲&lt;c3&gt;-128...127&lt;/c3&gt;に制限すること（クランピング）によって初期化されます、そして&lt;c4&gt;y&lt;/c4&gt;は&lt;c5&gt;UInt&lt;/c5&gt;インスタンスとして、&lt;c6&gt;-500&lt;/c6&gt;を範囲&lt;c7&gt;0...UInt&lt;w8&gt;.max&lt;/w8&gt;&lt;/c7&gt;に制限することによって初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, accessing the &lt;c0&gt;text&lt;/c0&gt; property of the &lt;c1&gt;smiley&lt;w2&gt;Type&lt;/w2&gt;&lt;/c1&gt; metatype retrieves the overridden value from the &lt;c3&gt;Emoji&lt;w4&gt;Smiley&lt;/w4&gt;&lt;/c3&gt; subclass, instead of the &lt;c5&gt;Smiley&lt;/c5&gt; class’s original definition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c1&gt;smiley&lt;w2&gt;Type&lt;/w2&gt;&lt;/c1&gt;メタタイプの&lt;c0&gt;text&lt;/c0&gt;プロパティにアクセスすることは、&lt;c3&gt;Emoji&lt;w4&gt;Smiley&lt;/w4&gt;&lt;/c3&gt;サブクラスからオーバーライドされた値を取って来ます、&lt;c5&gt;Smiley&lt;/c5&gt;クラスのもつ元の定義ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、３つの範囲からなる配列は平坦化されます、それで各範囲の要素は順に反復されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an asynchronous sequence called &lt;c0&gt;Counter&lt;/c0&gt; produces &lt;c1&gt;Int&lt;/c1&gt; values from &lt;c2&gt;1&lt;/c2&gt; to &lt;c3&gt;10&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;Counter&lt;/c0&gt;と呼ばれる非同期シーケンスは&lt;c1&gt;Int&lt;/c1&gt;値を&lt;c2&gt;1&lt;/c2&gt;から&lt;c3&gt;10&lt;/c3&gt;まで生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an asynchronous sequence called &lt;c0&gt;Counter&lt;/c0&gt; produces &lt;c1&gt;Int&lt;/c1&gt; values from &lt;c2&gt;1&lt;/c2&gt; to &lt;c3&gt;4&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;Counter&lt;/c0&gt;と呼ばれる非同期シーケンスは&lt;c1&gt;Int&lt;/c1&gt;値を&lt;c2&gt;1&lt;/c2&gt;から&lt;c3&gt;4&lt;/c3&gt;まで生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an asynchronous sequence called &lt;c0&gt;Counter&lt;/c0&gt; produces &lt;c1&gt;Int&lt;/c1&gt; values from &lt;c2&gt;1&lt;/c2&gt; to &lt;c3&gt;5&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;Counter&lt;/c0&gt;と呼ばれる非同期シーケンスは、&lt;c1&gt;Int&lt;/c1&gt;値を&lt;c2&gt;1&lt;/c2&gt;から&lt;c3&gt;5&lt;/c3&gt;まで生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, both assignments to the &lt;c0&gt;printed&lt;w1&gt;Message&lt;/w1&gt;&lt;/c0&gt; variable call this Boolean literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;printed&lt;w1&gt;Message&lt;/w1&gt;&lt;/c0&gt;変数への代入は両方ともこのブールリテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, note the difference in the result of using &lt;c0&gt;map&lt;/c0&gt; and &lt;c1&gt;compact&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt; with a transformation that returns an optional &lt;c3&gt;Int&lt;/c3&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;map&lt;/c0&gt;と&lt;c1&gt;compact&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt;を、オプショナル&lt;c3&gt;Int&lt;/c3&gt;値を返す変換とともに使う結果の違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, note the difference in the result of using &lt;c0&gt;map&lt;/c0&gt; and &lt;c1&gt;flat&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt; with a transformation that returns an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;map&lt;/c0&gt;と&lt;c1&gt;flat&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt;をある配列を返す変換とともに使うことの結果における違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, note the difference in the result of using &lt;c0&gt;map&lt;/c0&gt; and &lt;c1&gt;flat&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt; with a transformation that returns an optional &lt;c3&gt;Int&lt;/c3&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;map&lt;/c0&gt;と&lt;c1&gt;flat&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt;を、オプショナル&lt;c3&gt;Int&lt;/c3&gt;値を返す変換とともに使う結果の違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, note the difference in the result of using &lt;c0&gt;map&lt;w1&gt;Values&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;compact&lt;w3&gt;Map&lt;w4&gt;Values&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; with a transformation that returns an optional &lt;c5&gt;Int&lt;/c5&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;map&lt;w1&gt;Values&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;compact&lt;w3&gt;Map&lt;w4&gt;Values&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;を、オプショナル&lt;c5&gt;Int&lt;/c5&gt;値を返す変換とともに使う結果の違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the &lt;c0&gt;case 3&lt;/c0&gt; expression uses this pattern-matching operator to test whether &lt;c1&gt;weekday&lt;/c1&gt; is equal to the value &lt;c2&gt;3&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、&lt;c0&gt;case 3&lt;/c0&gt;式はこのパターンマッチング演算子を使って&lt;c1&gt;weekday&lt;/c1&gt;が値&lt;c2&gt;3&lt;/c2&gt;と等しいかどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the &lt;c4&gt;colors&lt;/c4&gt; array can be bridged to &lt;c5&gt;NSArray&lt;/c5&gt; because the &lt;c6&gt;colors&lt;/c6&gt; array’s &lt;c7&gt;String&lt;/c7&gt; elements bridge to &lt;c8&gt;NSString&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、&lt;c4&gt;colors&lt;/c4&gt;配列は&lt;c5&gt;NSArray&lt;/c5&gt;にブリッジできます、なぜならそれの&lt;c6&gt;colors&lt;/c6&gt;配列のもつ&lt;c7&gt;String&lt;/c7&gt;要素が&lt;c8&gt;NSString&lt;/c8&gt;にブリッジするからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the assignment to the &lt;c0&gt;twas&lt;w1&gt;Brillig&lt;/w1&gt;&lt;/c0&gt; constant calls this Boolean literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;twas&lt;w1&gt;Brillig&lt;/w1&gt;&lt;/c0&gt;定数への代入は、このブールリテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the assignment to the &lt;c0&gt;x&lt;/c0&gt; constant calls this floating-point literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;x&lt;/c0&gt;定数への代入は、この浮動小数点リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the assignment to the &lt;c0&gt;x&lt;/c0&gt; constant calls this integer literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;x&lt;/c0&gt;定数への代入は、この整数リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the compiler infers the full type of each array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、コンパイラは各配列の完全な型を推論します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the resulting array is the same length as &lt;c2&gt;words&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、結果の配列は&lt;c2&gt;words&lt;/c2&gt;と同じ長さです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, three elements in the middle of an array of integers are replaced by the five elements of a &lt;c0&gt;Repeated&lt;Int&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、整数からなる配列の真ん中の３つの要素が、&lt;c0&gt;Repeated&lt;Int&gt;&lt;/c0&gt;インスタンスの５つの要素によって置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In your &lt;c0&gt;hash(into:)&lt;/c0&gt; implementation, call &lt;c1&gt;combine(_:)&lt;/c1&gt; on the provided &lt;c2&gt;Hasher&lt;/c2&gt; instance with the essential components of your type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの&lt;c0&gt;hash(into:)&lt;/c0&gt;実装において、&lt;c1&gt;combine(_:)&lt;/c1&gt;をその提供された&lt;c2&gt;Hasher&lt;/c2&gt;インスタンス上で、あなたの型の本質的な構成要素とともに呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In your Objective-C bridging header, import every Objective-C header you want to expose to Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-Cブリッジヘッダにおいて、あなたが露出したいあらゆるObjective-CヘッダをSwiftにインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Include Swift Classes in Objective-C Headers Using Forward Declarations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftクラスをObjective-Cヘッダの中に前方宣言を使ってインクルードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Including More Data in Errors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さらなるデータをエラーに含める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indicates that a precondition was violated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは前提条件が破られたことを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indicates that an internal sanity check failed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはある内部的な正常性確認が失敗したことを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indication of the type of termination informed to &lt;c0&gt;on&lt;w1&gt;Termination&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;on&lt;w1&gt;Termination&lt;/w1&gt;&lt;/c0&gt;に告知した終了の型を指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indication that the continuation was yielded when the stream was already in a terminal state: either by cancel or by finishing.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストリームが既に終端状態であった時に継続が生み出されたというしるし；取り消しによってまたは終了によってのどちらか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indices and Iterators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスとイテレータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indices that are moved forward and backward in a bidirectional collection move by the same amount in each direction.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>二方向性のコレクションにおいて前方および後方に移動されるインデックス値は、各方向で同じ量だけ移動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inequality is the inverse of equality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不等性は、同等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Infinite values with the same sign are equal to each other.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じ符号を持つ無限大値は互いに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Infinity</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Infinity compares greater than all finite numbers and equal to other infinite values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限大は、すべての有限の数より大きい、そして他の無限大の値と等しいと比較されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Information about an error condition including a domain, a domain-specific error code, and application-specific information.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある領域、ある領域特有のエラーコード、そしてアプリケーション特有の情報を含んでいるエラー条件についての情報。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Infrequently Used Functionality</seg>
      </tuv>
      <tuv lang="ja">
        <seg>滅多に使われない機能性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Infrequently Used Intializers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>滅多に使われないイニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inherited By</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継承される先</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inherits From</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継承元</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initialization with Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リテラルを使った初期化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Input and Output</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入力と出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts a new element at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しい要素を指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts the elements of a sequence into the collection at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスに属する複数の要素をコレクションへ指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inside the closure, set the &lt;c0&gt;initialized&lt;w1&gt;Count&lt;/w1&gt;&lt;/c0&gt; parameter to the number of elements that are initialized by the closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャ内部で、&lt;c0&gt;initialized&lt;w1&gt;Count&lt;/w1&gt;&lt;/c0&gt;パラメータを、クロージャによって初期化される要素の数に設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inside unit test targets, you can access imported internal declarations as if they were public by prepending &lt;c8&gt;@testable&lt;/c8&gt; to the product module import statement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニットテスト内部で、あなたはインポートされたinternal宣言に、まるでそれらがパブリックだったかのようにアクセスすることが、製品モジュールインポート文に&lt;c8&gt;@testable&lt;/c8&gt;を前に付けることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a Boolean</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブールを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a Character</seg>
      </tuv>
      <tuv lang="ja">
        <seg>表意文字を調べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a Dictionary</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting an Array</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Casting</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスのキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Method</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Methods</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスメソッド </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>様々なインスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Property</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of calling this initializer, most code calls the &lt;c0&gt;with&lt;w1&gt;Checked&lt;w2&gt;Continuation(function:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; or &lt;c4&gt;with&lt;w5&gt;Checked&lt;w6&gt;Throwing&lt;w7&gt;Continuation(function:&lt;w8&gt;_:)&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; function instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを呼びださずに、ほとんどのコードは&lt;c0&gt;with&lt;w1&gt;Checked&lt;w2&gt;Continuation(function:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;または&lt;c4&gt;with&lt;w5&gt;Checked&lt;w6&gt;Throwing&lt;w7&gt;Continuation(function:&lt;w8&gt;_:)&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;関数を代わりに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of copying over the elements of a slice to new storage, an &lt;c2&gt;Array&lt;w3&gt;Slice&lt;/w3&gt;&lt;/c2&gt; instance presents a view onto the storage of a larger array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある断片部分（スライス）の要素をすっかり新しいストレージにコピーする代わりに、&lt;c2&gt;Array&lt;w3&gt;Slice&lt;/w3&gt;&lt;/c2&gt;インスタンスはある大きな配列に関するある見方（ビュー）を提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of having constant time when averaged over many calls, the function may decay to performance that is linear in &lt;c6&gt;values&lt;w7&gt;.count&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くの呼出しの全体を平均したとき定数時を持つのではなく、&lt;c6&gt;values&lt;w7&gt;.count&lt;/w7&gt;&lt;/c6&gt;において線形である性能を関数が衰えさせるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of returning an iterator with a type that encapsulates the implementation of the collection, the &lt;c4&gt;digits()&lt;/c4&gt; function first wraps the iterator in an &lt;c5&gt;Any&lt;w6&gt;Iterator&lt;/w6&gt;&lt;/c5&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの実装をカプセル化するある型をもつイテレータを返すのではなく、&lt;c4&gt;digits()&lt;/c4&gt;関数はイテレータを&lt;c5&gt;Any&lt;w6&gt;Iterator&lt;/w6&gt;&lt;/c5&gt;インスタンスの中にまずラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of trapping on out-of-range values, using the failable &lt;c1&gt;init?(exactly:)&lt;/c1&gt; initializer results in &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲外の値に関してトラップするのではなく、失敗できる&lt;c1&gt;init?(exactly:)&lt;/c1&gt;イニシャライザは&lt;c2&gt;nil&lt;/c2&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, convert an instance of any type to a string by using the &lt;c0&gt;String(describing:)&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、どんな型のインスタンスでも文字列へと、&lt;c0&gt;String(describing:)&lt;/c0&gt;イニシャライザを使って変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, convert an instance of any type to a string by using the &lt;c0&gt;String(reflecting:)&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、どんな型のインスタンスでも文字列へと、&lt;c0&gt;String(reflecting:)&lt;/c0&gt;イニシャライザを使って変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, create a new &lt;c0&gt;Bool&lt;/c0&gt; instance by using one of the Boolean literals &lt;c1&gt;true&lt;/c1&gt; or &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、新しい&lt;c0&gt;Bool&lt;/c0&gt;インスタンスをブールリテラルの&lt;c1&gt;true&lt;/c1&gt;または&lt;c2&gt;false&lt;/c2&gt;のうち１つを使って作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, create a new array by using an array literal as its value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、配列リテラルをその値として使うことで新しい配列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, each presents a view onto the storage of the &lt;c4&gt;absences&lt;/c4&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、&lt;c4&gt;absences&lt;/c4&gt;配列のストレージ上でのひとつのビューをそれぞれが提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, initialize a variable or constant using a floating-point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、浮動小数点リテラルを使って変数や定数を初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, initialize a variable or constant using an integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、整数リテラルを使って変数や定数を初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, initialize a variable or constant using one of the Boolean literals &lt;c0&gt;true&lt;/c0&gt; and &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、変数や定数をブールリテラル&lt;c0&gt;true&lt;/c0&gt;と&lt;c1&gt;false&lt;/c1&gt;のうちの１つを使って初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use only the &lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; argument to &lt;c5&gt;body&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その代わりに、&lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;引数だけを&lt;c5&gt;body&lt;/c5&gt;に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use only the &lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Raw&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; argument to &lt;c6&gt;body&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その代わりに、&lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Raw&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;引数だけを&lt;c6&gt;body&lt;/c6&gt;に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use string interpolation to create a new string by including values, literals, variables, or expressions enclosed in parentheses, prefixed by a backslash (&lt;c0&gt;\(&lt;/c0&gt;…&lt;c1&gt;)&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、文字列補間を使って、バックスラッシュ&lt;c0&gt;\(&lt;/c0&gt;…&lt;c1&gt;)&lt;/c1&gt;を前に置いた丸括弧に囲まれた値、リテラル、変数、または式を含めることで、新しい文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use the &lt;c4&gt;task&lt;/c4&gt; property of &lt;c5&gt;Unsafe&lt;w6&gt;Current&lt;w7&gt;Task&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; to access an instance of &lt;c8&gt;Task&lt;/c8&gt; that you can store long-term and interact with outside of the closure body.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、&lt;c5&gt;Unsafe&lt;w6&gt;Current&lt;w7&gt;Task&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;の&lt;c4&gt;task&lt;/c4&gt;プロパティを使うことで、あなたが長期間格納することそしてクロージャ本体の外側で相互作用することが可能な&lt;c8&gt;Task&lt;/c8&gt;のインスタンスにアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use the Boolean literal &lt;c0&gt;false&lt;/c0&gt; to create a new &lt;c1&gt;Bool&lt;/c1&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、ブールリテラル&lt;c0&gt;false&lt;/c0&gt;を使って新しい&lt;c1&gt;Bool&lt;/c1&gt;インスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use the value’s &lt;c1&gt;is&lt;w2&gt;Na&lt;w3&gt;N&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、その値の&lt;c1&gt;is&lt;w2&gt;Na&lt;w3&gt;N&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, when you need an operation to have a specific numeric result, filter out any NaN values using the &lt;c0&gt;is&lt;w1&gt;Na&lt;w2&gt;N&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうではなく、あなたがある特定の数値結果を持つ演算を必要とする場合、あらゆるNaN値を&lt;c0&gt;is&lt;w1&gt;Na&lt;w2&gt;N&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;特性を使って除去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, you use &lt;c5&gt;await&lt;/c5&gt; to receive values as they become available.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その代わりに、あなたは&lt;c5&gt;await&lt;/c5&gt;を使って値それらをそれらが利用可能になるにつれて回収します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Integer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Integer Operators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Interpolates the given value’s textual representation into the string literal being created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値のもつテキスト表現を、その作成されている文字列リテラルへと補間します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invalid bytes are replaced by Unicode &lt;a1&gt;replacement characters&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無効なバイトは、&lt;a1&gt;ユニコード代替文字&lt;/a1&gt;で置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt; argument derived from the given array of arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、その与えられた引数の配列から引き出されたC &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;引数で発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a buffer pointer covering the raw bytes of the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、与えられた引数の生のバイトを変換しているバッファポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a mutable buffer pointer covering the raw bytes of the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、与えられた引数の生のバイトを変換している可変バッファポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a pointer to the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、与えられた引数に対するポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It acts as an iterator by using a collection’s indices to step over each value in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、コレクションのインデックスを使ってコレクションの中の各値のすべてを渡っていくあるイテレータとしての役割を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It also means that when you share a class instance across your app, changes you make to that instance are visible to every part of your code that holds a reference to that instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それはまた、あなたがあるクラスインスタンスをあなたのアプリの至る所で共有する場合、あなたがそのインスタンスになす変更は、そのインスタンスに対する参照を保持するあなたのコードのあらゆる部分で見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is called by the compiler to handle dictionary literals.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、辞書リテラルを取り扱うためにコンパイラによって呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is not intended to be used from multiple concurrent contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは複数の並行性文脈から使われることを意図されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is thread safe to send and finish; all calls are to the continuation are serialized, however calling this from multiple concurrent contexts could result in out of order delivery.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、スレッド安全に送信および終了します；並行性への呼び出しそれら全てはシリアル化されます、しかしながらこれを複数の並行性文脈から呼び出すことは、順序違い配達という結果になりえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is thread safe to send and finish; all calls to the continuation are serialized, however calling this from multiple concurrent contexts could result in out of order delivery.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、スレッド安全に送信および終了します；並行性への呼び出しそれら全てはシリアル化されます、しかしながらこれを複数の並行性文脈から呼び出すことは、順序違い配達という結果になりえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is undefined behavior for the escapable closure to be stored, referenced, or executed after the function returns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数が返った後に格納、参照、または実行されることは、脱出可能クロージャにとって未定義挙動です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is undefined behavior to attempt to mutate through the pointer by conversion to &lt;c5&gt;Unsafe&lt;w6&gt;Mutable&lt;w7&gt;Raw&lt;w8&gt;Buffer&lt;w9&gt;Pointer&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; or any other mutable pointer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタを通して&lt;c5&gt;Unsafe&lt;w6&gt;Mutable&lt;w7&gt;Raw&lt;w8&gt;Buffer&lt;w9&gt;Pointer&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;または何か他の可変ポインタ型への変換によって変化させようと試みることは、未定義挙動です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is undefined behavior to try to mutate through the pointer argument by converting it to &lt;c5&gt;Unsafe&lt;w6&gt;Mutable&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; or any other mutable pointer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタ引数を通して変化させることを、それを&lt;c5&gt;Unsafe&lt;w6&gt;Mutable&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;または何か他の可変ポインタ型へ変換することによって、試みるのは未定義挙動です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is up to both the conformer and the receiver of the protocol to document the nature of the identity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その同一性の本質を文書化するのは、そのプロトコルの準拠側とレシーバの両方の責任です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when interpreting string interpolations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは文字列補間を解釈する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when you create a string using string interpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それはあなたが文字列補間を使って文字列を作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when you use a Boolean literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたがブールリテラルを使う時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when you use a string literal to initialize a &lt;c0&gt;Character&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが文字列リテラルを使って&lt;c0&gt;Character&lt;/c0&gt;インスタンスを初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when you use an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが配列リテラルを使う時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It's a good idea for all your custom model types to conform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえのモデル型すべてにとって準拠することは良い考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It's appropriate to use a class in this case, but be sure to limit which parts of your app get access to the shared database object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この場合にはクラスを使うのが適切です、しかしあなたのアプリのどの部分が共有データベースオブジェクトに対するアクセスを手に入れるかに限界を設けることを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It's useful for communicating changes between logically separated parts of your app—such as between models and views.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたのアプリの論理的に分離された部分の間で変更を伝えるために役立ちます — 例えばモデルとビューの間など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating Over a Collection's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素すべてに反復していく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating Over a Range's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲の持つ要素すべてに反復していく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating Over an Array's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の要素すべてに反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating Over the Contents of a Dictionary</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の内容すべてにわたって反復していく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating over Keys and Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーと値のすべてに反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating over a dictionary yields the key-value pairs as two-element tuples.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書すべてを対象として反復することは、キー値ペアを２要素タプルとして生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションの要素すべてにそれの位置によって反復していくことは、そのコレクションすべてにそれのイテレータを使って反復していくのと同じ要素を同じ順序で生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It’s used by the compiler when you create a string using string interpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが文字列を文字列補完を使って作成する時に、コンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Key Paths</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Key-Path Expressions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Key-value observing is a Cocoa programming pattern you use to notify objects about changes to properties of other objects.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値監視は、他のオブジェクトのプロパティに対する変更を通知するためにあなたが使うCocoaプログラミングパターンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Language Interoperability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>言語互換性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftを学ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how Cocoa error parameters are converted to Swift throwing methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CocoaエラーパラメータがSwiftスローメソッドに変換される方法を学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how Swift represents imported C structures and unions, including types with bitfields and unnamed fields.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftがインポートされたC構造体と共用体を表す方法を、ビットフィールドおよび無名フィールドを持つ型を含めて、学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how functions and methods that take a completion handler are converted to Swift asynchronous functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完了ハンドラをとる関数およびメソッドがどのようにSwift非同期関数へと変換されるかを学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how imported Objective-C protocol-qualified classes and metaclasses are represented.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたObjective-Cプロトコル適応のクラスおよびメタクラスが表される方法を学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how to call imported functions that are declared in a C header.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cヘッダにおいて宣言されるインポートされた関数を呼び出す方法を学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn the recommended steps to migrate your code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコードを移行するための推奨される段階を学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Like the standard &lt;c10&gt;Iterator&lt;w11&gt;Protocol&lt;/w11&gt;&lt;/c10&gt;, the &lt;c12&gt;Async&lt;w13&gt;Iterator&lt;w14&gt;Protocol&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt; defines a single &lt;c15&gt;next()&lt;/c15&gt; method to produce elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準的な&lt;c10&gt;Iterator&lt;w11&gt;Protocol&lt;/w11&gt;&lt;/c10&gt;のように、&lt;c12&gt;Async&lt;w13&gt;Iterator&lt;w14&gt;Protocol&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt;はただ１つの&lt;c15&gt;next()&lt;/c15&gt;メソッドだけを定義して要素それらを生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if &lt;c2&gt;distance &lt; 0&lt;/c2&gt;, a limit that is greater than &lt;c3&gt;i&lt;/c3&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、&lt;c2&gt;distance &lt; 0&lt;/c2&gt;ならば、&lt;c3&gt;i&lt;/c3&gt;より大きい限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if &lt;c2&gt;n &lt; 0&lt;/c2&gt;, a limit that is greater than &lt;c3&gt;i&lt;/c3&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、&lt;c2&gt;n &lt; 0&lt;/c2&gt;ならば、&lt;c3&gt;i&lt;/c3&gt;より大きい限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if &lt;c3&gt;distance &lt; 0&lt;/c3&gt;, &lt;c4&gt;limit&lt;/c4&gt; has no effect if it is greater than &lt;c5&gt;i&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、&lt;c3&gt;distance &lt; 0&lt;/c3&gt;ならば、&lt;c4&gt;limit&lt;/c4&gt;はそれが&lt;c5&gt;i&lt;/c5&gt;より大きいならば効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if &lt;c3&gt;distance &lt; 0&lt;/c3&gt;, &lt;c4&gt;limit&lt;/c4&gt; should be less than &lt;c5&gt;i&lt;/c5&gt; to have any effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、&lt;c3&gt;distance &lt; 0&lt;/c3&gt;ならば、&lt;c4&gt;limit&lt;/c4&gt;が何らかの効果を持つには&lt;c5&gt;i&lt;/c5&gt;より少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if you pass a zero-length collection as the &lt;c0&gt;new&lt;w1&gt;Elements&lt;/w1&gt;&lt;/c0&gt; parameter, this method removes the elements in the given subrange without replacement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、あなたがゼロ長コレクションを&lt;c0&gt;new&lt;w1&gt;Elements&lt;/w1&gt;&lt;/c0&gt;パラメータとして渡すならば、このメソッドは与えられた下位範囲の中の要素を置き換えることなく削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Local changes to model types like &lt;c0&gt;Pen&lt;w1&gt;Pal&lt;w2&gt;Record&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; are useful.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Pen&lt;w1&gt;Pal&lt;w2&gt;Record&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;のようなモデル型に対するローカルな変更は、役に立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Long-term storage of &lt;c0&gt;Array&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt; instances is discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Array&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt;インスタンスの長期ストレージは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Long-term storage of a slice may therefore prolong the lifetime of elements that are no longer otherwise accessible, which can appear to be memory and object leakage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライスの長期ストレージは、もはやそれ以外ではアクセス可能ではない要素の寿命を延長し、それはメモリとオブジェクトの漏洩であるように見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lowercase characters change when converted to uppercase, but not when converted to lowercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ローワーケース文字は、アッパーケースへ変換される時は変化します、しかしローワーケースに変換される時はそうではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>MLShaped&lt;w0&gt;Array&lt;w1&gt;Protocol Implementations &lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>MLShaped&lt;w0&gt;Array&lt;w1&gt;プロトコル実装&lt;/w1&gt;&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Macros are imported when they use literals for string, floating-point, or integer values, or use operators like &lt;c1&gt;+&lt;/c1&gt;, &lt;c2&gt;-&lt;/c2&gt;, &lt;c3&gt;&gt;&lt;/c3&gt;, and &lt;c4&gt;==&lt;/c4&gt; between literals or previously defined macros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マクロは、それらがリテラルを文字列に対して使う、または&lt;c1&gt;+&lt;/c1&gt;、&lt;c2&gt;-&lt;/c2&gt;、&lt;c3&gt;&gt;&lt;/c3&gt;、そして&lt;c4&gt;==&lt;/c4&gt;のような演算子をリテラルや以前に定義されたマクロの間で使う場合にインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maintaining State in Your Apps</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのアプリの状態を保守する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Make your custom types easier to use by ensuring that they conform to Swift protocols.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのカスタム型を、それらがSwiftプロトコルに準拠するのを確実にすることで、より簡単に使えるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Make your data types encodable and decodable for compatibility with external representations such as JSON.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのデータ型のエンコーディングとデコーディングを外部表現、例えばJSONなどとの互換性のために行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Managed Buffers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファ管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Managing a Shared Resource Using a Singleton</seg>
      </tuv>
      <tuv lang="ja">
        <seg>共有されるリソースをシングルトンを使って管理する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manipulating Indices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスを操る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manual Memory Management</seg>
      </tuv>
      <tuv lang="ja">
        <seg>手動メモリ管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many individual characters, such as “é”, “김”, and “🇮🇳”, can be made up of multiple Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くの単一の文字、例えば「é」、「김」、そして「🇮🇳」などが、複数のユニコードスカラー値から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many other types are renamed or nested to clarify relationships.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くの他の型は、改名または入れ子にされて、関係がはっきりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many standard library types are both equatable and hashable, including strings, integers, floating-point values, Boolean values, and collections of equatable and hashable types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くの標準ライブラリ型は、文字列、整数、浮動点小数値、ブール値、そしてequatableとhashable型のコレクション型を含めて、equatableとhashableの両方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many types in the standard library already conform to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの多くの型はすでに&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many types in the standard library conform to &lt;c1&gt;Hashable&lt;/c1&gt;: Strings, integers, floating-point and Boolean values, and even sets are hashable by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの中の多くの型は&lt;c1&gt;Hashable&lt;/c1&gt;に準拠します：様々な文字列、整数、浮動小数点およびブール値、そして様々な集合さえも、初期状態でハッシュ可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many value types in Swift bridge to Objective-C counterparts, like &lt;c2&gt;String&lt;/c2&gt; and &lt;c3&gt;Int&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでの多くの値型は、Objective-Cの相当物へとブリッジします、&lt;c2&gt;String&lt;/c2&gt;や&lt;c3&gt;Int&lt;/c3&gt;のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Mark properties that you want to observe through key-value observing with both the &lt;c0&gt;@objc&lt;/c0&gt; attribute and the &lt;c1&gt;dynamic&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがキー値監視を通して監視したいプロパティを&lt;c0&gt;@objc&lt;/c0&gt;属性と&lt;c1&gt;dynamic&lt;/c1&gt;修飾子の両方で印してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Masked Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>隠された算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory Access</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Merges the given dictionary into this dictionary, using a combining closure to determine the value for any duplicate keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた辞書をこの辞書へと結合します、結合用のクロージャを使って何らかの重複キーに対して値を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Merges the key-value pairs in the given sequence into the dictionary, using a combining closure to determine the value for any duplicate keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの中のキー値ペアをこの辞書へと結合します、結合用のクロージャを使って何らかの重複キーに対して値を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Methods and properties that are marked with the &lt;c2&gt;internal&lt;/c2&gt; modifier and declared within a class that inherits from an Objective-C class are accessible to the Objective-C runtime.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;internal&lt;/c2&gt;修飾子で印されたそしてObjective-Cクラスから継承するクラス内部で宣言されたメソッドとプロパティは、Objective-Cランタイムからアクセス可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Methods that return another &lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt; return a type specific to the method’s semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう１つの&lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;を返すメソッドそれらは、メソッドのもつ意味論に特有のひとつの型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Methods whose completion handlers populate a &lt;a0&gt;&lt;c1&gt;NSError&lt;/c1&gt;&lt;/a0&gt; pointer parameter also become throwing methods in Swift, as described in &lt;a2&gt;About Imported Cocoa Error Parameters&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの持つ完了ハンドラに&lt;a0&gt;&lt;c1&gt;NSError&lt;/c1&gt;&lt;/a0&gt;ポインタパラメータが入っているメソッドはまた、Swiftではスローするメソッドになります、&lt;a2&gt;インポートされるCocoaエラーパラメータについて&lt;/a2&gt;で記述されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Methods whose completion handlers take multiple arguments become methods that return a tuple.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの完了ハンドラが複数の引数をとるメソッドは、あるタプルを返すメソッドになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Migrating Your Objective-C Code to Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-Cコードのスウィフトへの移行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Modifying Copies of Arrays</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列のコピーを修正する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, Swift structures can adopt protocols to gain behavior through default implementations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その上さらに、Swift構造体はプロトコルを採用することで、省略時の実装を通して挙動を獲得できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, a collection’s indices form a finite range of the positions of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その上、コレクションのインデックスは、コレクションの要素の位置からなる有限の範囲を形成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, inequality is the inverse of equality, so any custom implementation of the &lt;c0&gt;!=&lt;/c0&gt; operator must guarantee that &lt;c1&gt;a != b&lt;/c1&gt; implies &lt;c2&gt;!(a == b)&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その上に、不等性は同等性の逆です、それで&lt;c0&gt;!=&lt;/c0&gt;演算子のあらゆるあつらえの実装は、&lt;c1&gt;a != b&lt;/c1&gt;が&lt;c2&gt;!(a == b)&lt;/c2&gt;を意味することを保証しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most &lt;c0&gt;String&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt; types will store information about the literals and interpolations appended to them in one or more properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの&lt;c0&gt;String&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt;型は、それらに加えられたリテラルと補間についての情報を１つ以上のプロパティにおいて格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most basic types in the Swift standard library conform to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリの基本的な型のほとんどは&lt;c3&gt;Equatable&lt;/c3&gt;に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most collections in the standard library use &lt;c2&gt;Indexing&lt;w3&gt;Iterator&lt;/w3&gt;&lt;/c2&gt; as their iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの中のほとんどのコレクションは、&lt;c2&gt;Indexing&lt;w3&gt;Iterator&lt;/w3&gt;&lt;/c2&gt;をそれらのイテレータとして使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most operations with a NaN operand produce a NaN result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaN演算数を使うほとんどの演算は、結果NaNを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiple copies of an array share the same storage until you modify one of the copies.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある配列の複数のコピーは、あなたがコピーの１つを修正するまでは、同じストレージを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and produces their product, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算してそれらの積を生成します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and produces their product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算してそれらの積を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算して、結果を左手側の変数に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算して結果を左手側の変数に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算して、結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Must never be called, since this collection is always empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>決して呼ばないでください、このコレクションは常に空であるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NaN (“not a number”)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaN（「非数」）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NaN is not equal to any value, including itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは、それ自身を含めてあらゆる値と等しくありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NaN propagates through many arithmetic operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは、いくつもの算術演算をずっと伝播していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NaN values compare not equal to every value, including themselves.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは、それら自身を含めてあらゆる値に対して等しくないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Negation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Negative values are returned in two’s complement representation, regardless of the type’s underlying implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の値が、２の補数表現において返されます、その型のもつ基礎となる実装に関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Neither the &lt;c0&gt;first&lt;w1&gt;Half&lt;/w1&gt;&lt;/c0&gt; nor &lt;c2&gt;second&lt;w3&gt;Half&lt;/w3&gt;&lt;/c2&gt; slices allocate any new storage of their own.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;first&lt;w1&gt;Half&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;second&lt;w3&gt;Half&lt;/w3&gt;&lt;/c2&gt;スライスのどちらも、なんらそれら独自の新規ストレージを割り当てません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Never call &lt;c0&gt;finalize()&lt;/c0&gt; on &lt;c1&gt;hasher&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;finalize()&lt;/c0&gt;を&lt;c1&gt;hasher&lt;/c1&gt;上で決して呼び出さないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Never resuming leaves the task in a suspended state indefinitely, and leaks any associated resources.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>再開することは、そのタスクを決して曖昧に中断状態のままにしておきません、そしていかなる関連したリソースも漏洩しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, implement the &lt;c0&gt;==&lt;/c0&gt; operator function, the requirement inherited from the &lt;c1&gt;Equatable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に、&lt;c0&gt;==&lt;/c0&gt;演算子関数、&lt;c1&gt;Equatable&lt;/c1&gt;プロトコルから継承される要件を実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, the observations in Celsius are converted to Fahrenheit:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に、摂氏での観測は華氏に変換されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>No further bridging is required when accessing elements of the &lt;c5&gt;Array&lt;/c5&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さらなるブリッジは&lt;c5&gt;Array&lt;/c5&gt;インスタンスの要素にアクセスするとき全く必要とされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>None</seg>
      </tuv>
      <tuv lang="ja">
        <seg>なし</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Normally, you don’t need to be aware of the difference between concrete and existential metatypes, but calling &lt;c0&gt;type(of:)&lt;/c0&gt; can yield unexpected results in a generic context with a type parameter bound to a protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>通常、あなたは具象と存在のメタタイプの間の違いを意識する必要はありません、しかし&lt;c0&gt;type(of:)&lt;/c0&gt;を呼び出すことは、あるプロトコルに束縛された型パラメータを伴うある総称体の文脈において予期しない結果を生み出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note Renamed Reference Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>改名される参照型に注意してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;c0&gt;Any&lt;w1&gt;Hashable&lt;/w1&gt;&lt;/c0&gt; does not guarantee that it preserves the hash encoding of wrapped values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注意してください、&lt;c0&gt;Any&lt;w1&gt;Hashable&lt;/w1&gt;&lt;/c0&gt;は、それがそのラップされた値のハッシュ符号化を保全することを保証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;c0&gt;Float80&lt;w1&gt;.significand&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is 63, even though 64 bits are used to store the significand in the memory representation of a &lt;c4&gt;Float80&lt;/c4&gt; (unlike other floating-point types, &lt;c5&gt;Float80&lt;/c5&gt; explicitly stores the leading integral significand bit, but the &lt;c6&gt;Binary&lt;w7&gt;Floating&lt;w8&gt;Point&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; APIs provide an abstraction so that users don’t need to be aware of this detail).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float80&lt;w1&gt;.significand&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は63であることに注意してください、64ビットが使用されて仮数を&lt;c4&gt;Float80&lt;/c4&gt;メモリ表現に格納するとしてもです（他の浮動小数点型と違い、&lt;c5&gt;Float80&lt;/c5&gt;は明示的に先頭整数仮数ビットを格納します、しかし&lt;c6&gt;Binary&lt;w7&gt;Floating&lt;w8&gt;Point&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;APIはある抽象化を提供します、それでユーザはこの詳細に通じている必要はありません）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;c10&gt;q&lt;/c10&gt; is &lt;e11&gt;not&lt;/e11&gt; &lt;c12&gt;x / y&lt;/c12&gt; computed in floating-point arithmetic, and that &lt;c13&gt;q&lt;/c13&gt; may not be representable in any available integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c10&gt;q&lt;/c10&gt;が浮動小数点算術で計算される&lt;c12&gt;x / y&lt;/c12&gt;では&lt;e11&gt;ない&lt;/e11&gt;こと、そして&lt;c13&gt;q&lt;/c13&gt;は何らかの利用可能な整数型において表現可能でないかもしれないことに注意してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that in this example, &lt;c0&gt;image&lt;w1&gt;Paths&lt;/w1&gt;&lt;/c0&gt; is subscripted using a dictionary index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;image&lt;w1&gt;Paths&lt;/w1&gt;&lt;/c0&gt;が辞書インデックスを使って添え字をすることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that some elements in the &lt;c0&gt;temperature&lt;w1&gt;Data &lt;/w1&gt;&lt;/c0&gt; array are not valid numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;temperature&lt;w1&gt;Data &lt;/w1&gt;&lt;/c0&gt;配列の幾つかの要素は有効な数字ではないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the &lt;c0&gt;&gt;&lt;/c0&gt; operator provided by the standard library is used in this example, not the &lt;c1&gt;&lt;&lt;/c1&gt; operator implemented above.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリによって提供される&lt;c0&gt;&gt;&lt;/c0&gt;演算子がこの例で使われることに注意してください、上で実装される&lt;c1&gt;&lt;&lt;/c1&gt;演算子ではなしに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the &lt;c0&gt;inout&lt;/c0&gt; exclusivity rules mean that, like any other &lt;c1&gt;inout&lt;/c1&gt; argument, &lt;c2&gt;value&lt;/c2&gt; cannot be directly accessed by other code for the duration of &lt;c3&gt;body&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;inout&lt;/c0&gt;排他規則が意味することに注意してください、何か他の&lt;c1&gt;inout&lt;/c1&gt;と同様に、&lt;c2&gt;value&lt;/c2&gt;は&lt;c3&gt;body&lt;/c3&gt;の継続期間には他のコードによって直接にアクセス可能ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the value may not be preserved, particularly when converting between signed to unsigned integer types or when the destination type has a smaller bit width than the source type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注意すべきはその値が保たれないかもしれないことです、とりわけ符号付きから符号なし整数型への間の変換の場合、または行先の型が元の型より小さなビット幅を持つ場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note: transacting upon the remaining count is only valid when then calls to yield are mutually exclusive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注意：残りの総数に関して取引（トランザクト）をすることは、生み出すためのその後の呼び出しそれらが互いに排他的である場合に有効であるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the &lt;s0&gt;&lt;c1&gt;remove&lt;w2&gt;Item(at:)&lt;/w2&gt;&lt;/c1&gt;&lt;/s0&gt; method is imported by Swift with a &lt;c3&gt;Void&lt;/c3&gt; return type, no error parameter, and a &lt;c4&gt;throws&lt;/c4&gt; declaration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;s0&gt;&lt;c1&gt;remove&lt;w2&gt;Item(at:)&lt;/w2&gt;&lt;/c1&gt;&lt;/s0&gt;メソッドが、スウィフトによって&lt;c3&gt;Void&lt;/c3&gt;の戻り型で、errorパラメーターなしで、そして&lt;c4&gt;throws&lt;/c4&gt;宣言でインポートされることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notify objects about changes to the properties of other objects.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他のオブジェクトのプロパティに対する変更についてオブジェクトに通知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now suppose you have an array of addresses that you need to check for a particular address.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>今あなたがいくらかの住所からなる配列、あなたがある特定の住所を確認する必要があるものを持つと仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now that &lt;c0&gt;Date&lt;/c0&gt; conforms to &lt;c1&gt;Comparable&lt;/c1&gt;, you can compare instances of the type with any of the relational operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>今や&lt;c0&gt;Date&lt;/c0&gt;は&lt;c1&gt;Comparable&lt;/c1&gt;に準拠します、あなたはこの型のインスタンスを関係演算子のどれででも比較できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now that &lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; conforms to the &lt;c2&gt;Hashable&lt;/c2&gt; protocol, you can create a set of previously tapped grid points.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Hashable&lt;/c2&gt;プロトコルに準拠する今、あなたは以前にタップされた格子点の集合を作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now that the &lt;c0&gt;shorter&lt;w1&gt;Indices&lt;/w1&gt;&lt;/c0&gt; array holds the indices of the shorter names in the &lt;c2&gt;names&lt;/c2&gt; set, you can use those indices to access elements in the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在、&lt;c0&gt;shorter&lt;w1&gt;Indices&lt;/w1&gt;&lt;/c0&gt;配列は&lt;c2&gt;names&lt;/c2&gt;集合の中のより短い名前のインデックスを保持します、あなたはそれらのインデックスを使ってこの集合の要素にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numbers and Basic Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数と基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numbers, Data, and Basic Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数、データ、そして基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numeric Protocols</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数に関するプロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numeric Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C and C Code Customization</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-CとCコードのカスタム化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C classes qualified by one or more protocols, like the one in the example below, are imported by Swift as protocol composition types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例でのもののような、１つ以上のプロトコルによる基準を満たすObjective-Cクラスは、スウィフトによってプロトコル合成型としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C exception handling uses the &lt;c0&gt;@try&lt;/c0&gt;, &lt;c1&gt;@catch&lt;/c1&gt;, and &lt;c2&gt;@throw&lt;/c2&gt; syntax to indicate unrecoverable programmer errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C例外処理は、&lt;c0&gt;@try&lt;/c0&gt;、&lt;c1&gt;@catch&lt;/c1&gt;、そして&lt;c2&gt;@throw&lt;/c2&gt;構文を使って回復不可能なプログラマエラーを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C reference type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C参照型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C type declarations that use lightweight generic parameterization are imported by Swift with information about the type of their contents preserved.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>軽量総称体パラメーター化を使うObjective-C宣言は、それらの保管される内容についての情報を使ってスウィフトによってインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objects that are set up to use key-value observing—such as &lt;c0&gt;observed&lt;/c0&gt; above—notify their observers about property changes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値監視を使うように設定されるそれらオブジェクト — 例えば上の&lt;c0&gt;observed&lt;/c0&gt; — は、それらのオブザーバにプロパティの変化について通知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objects with a concrete type of &lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt; maintain a specific dynamic type and can be cast to that type using one of the type-cast operators (&lt;c2&gt;as&lt;/c2&gt;, &lt;c3&gt;as?&lt;/c3&gt;, or &lt;c4&gt;as!&lt;/c4&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>具象型として&lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt;を持つオブジェクトは、特定の動的型を保守して、その型へと型キャスト演算子（&lt;c2&gt;as&lt;/c2&gt;、&lt;c3&gt;as?&lt;/c3&gt;。または&lt;c4&gt;as!&lt;/c4&gt;）の１つを使ってキャストされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Offsets the given index by the specified distance, or so that it equals the given limiting index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスをこの指定された隔たりで補います、またはそれでそれは与えられた限界インデックスと等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Offsets the given index by the specified distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスを指定された間隔で補います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often, the optimizer can eliminate bounds checks within an array algorithm, but when that fails, invoking the same algorithm on the buffer pointer passed into your closure lets you trade safety for speed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しばしば、最適化機能は配列アルゴリズム内部で境界検査を省くことができます、しかしそれが失敗する時、同じアルゴリズムをあなたのクロージャへ渡されるバッファポインタ上で発動することは、あなたに安全をスピードと交換させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often, the optimizer can eliminate bounds- and uniqueness-checks within an algorithm, but when that fails, invoking the same algorithm on &lt;c0&gt;body&lt;/c0&gt;\ ’s argument lets you trade safety for speed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しばしば、最適化機能はアルゴリズム内部で境界および固有さ検査を省くことができます、しかしそれが失敗する時、同じアルゴリズムを&lt;c0&gt;body&lt;/c0&gt;の引数上で発動することは、あなたに安全をスピードと交換させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素を基底非同期シーケンスから除きます、それから全ての残りの要素をずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Omits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素を基底非同期シーケンスから、ある与えられたクロージャがfalseを返すまで省きます、それの後それは全ての残りの要素をずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素を基底シーケンスから、ある与えられたエラースロークロージャがfalseを返すまで省きます、それの後それは全ての残りの要素をずっと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Omitting the &lt;c2&gt;options&lt;/c2&gt; parameter forgoes storing the new and old property values, which causes the &lt;c3&gt;old&lt;w4&gt;Value&lt;/w4&gt;&lt;/c3&gt; and &lt;c5&gt;new&lt;w6&gt;Value&lt;/w6&gt;&lt;/c5&gt; properties to be &lt;c7&gt;nil&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;options&lt;/c2&gt;パラメータを省略することは、新しいそして古いプロパティ値を格納することをやめます、それは&lt;c3&gt;old&lt;w4&gt;Value&lt;/w4&gt;&lt;/c3&gt;と&lt;c5&gt;new&lt;w6&gt;Value&lt;/w6&gt;&lt;/c5&gt;プロパティが&lt;c7&gt;nil&lt;/c7&gt;になる原因となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On 32-bit platforms, &lt;c0&gt;Int&lt;/c0&gt; is the same size as &lt;c1&gt;Int32&lt;/c1&gt;, and on 64-bit platforms, &lt;c2&gt;Int&lt;/c2&gt; is the same size as &lt;c3&gt;Int64&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビットプラットホーム上では、&lt;c0&gt;Int&lt;/c0&gt;は&lt;c1&gt;Int32&lt;/c1&gt;と同じ大きさです、そして64ビットプラットホーム上では、&lt;c2&gt;Int&lt;/c2&gt;は&lt;c3&gt;Int64&lt;/c3&gt;と同じ大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On This Page</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この項には</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On a big-endian platform, for any integer &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x == x&lt;w2&gt;.big&lt;w3&gt;Endian&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビッグエンディアンプラットホーム上で、何らかの整数&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x == x&lt;w2&gt;.big&lt;w3&gt;Endian&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On a little-endian platform, for any integer &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x == x&lt;w2&gt;.little&lt;w3&gt;Endian&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リトルエンディアンプラットホーム上で、何らかの整数&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x == x&lt;w2&gt;.little&lt;w3&gt;Endian&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On i386 and x86_64, &lt;c0&gt;Float80&lt;/c0&gt; has a number of non-canonical encodings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>i386およびx86_64では、&lt;c0&gt;Float80&lt;/c0&gt;は非正準エンコーディングのある数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On platforms that flush subnormal numbers to zero (such as armv7 with the default floating-point environment), Swift interprets subnormal &lt;c0&gt;Float&lt;/c0&gt; and &lt;c1&gt;Double&lt;/c1&gt; values as non-canonical zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非正規化数をゼロへとフラッシュするプラットホーム（たとえば省略時の浮動小数点環境でのarmv7）上では、Swiftは非正規化数&lt;c0&gt;Float&lt;/c0&gt;および&lt;c1&gt;Double&lt;/c1&gt;値を非正準のゼロとして解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On platforms that fully support IEEE 754, every &lt;c2&gt;Float&lt;/c2&gt; or &lt;c3&gt;Double&lt;/c3&gt; value is canonical, but non-canonical values can exist on other platforms or for other types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完全にIEEE 754をサポートするプラットホーム上では、あらゆる&lt;c2&gt;Float&lt;/c2&gt;または&lt;c3&gt;Double&lt;/c3&gt;値は正準です、しかし非正準値は他のプラットホーム上でまたは他の型に対して存在できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On removal, this method invalidates all indices with respect to the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除去において、このメソッドはこの辞書に関するすべてのインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once &lt;c0&gt;nil&lt;/c0&gt; has been returned, all subsequent calls return &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一旦&lt;c0&gt;nil&lt;/c0&gt;が返されるならば、すべての続いて起こる呼び出しは&lt;c1&gt;nil&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once again, use pattern matching to conditionally catch errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>再び、パターンマッチを条件付きでエラーを捕まえるのに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once the predicate returns &lt;c2&gt;false&lt;/c2&gt; it will not be called again.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いったん述部が&lt;c2&gt;false&lt;/c2&gt;を返すならそれは再び呼び出されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One of the values to multiply before adding to this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値に加えられる前に掛け合わされる値のうちの１つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only the &lt;c1&gt;Optional&lt;/c1&gt; type conforms to &lt;c2&gt;Expressible&lt;w3&gt;By&lt;w4&gt;Nil&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Optional&lt;/c1&gt;型だけが&lt;c2&gt;Expressible&lt;w3&gt;By&lt;w4&gt;Nil&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operations on types conforming to the &lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; protocol should support this behavior, but they might also support other options.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する型での演算はこの挙動をサポートします、しかしそれらはまた他の選択肢もサポートするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operations with infinite values follow real arithmetic as much as possible: Adding or subtracting a finite value, or multiplying or dividing infinity by a nonzero finite value, results in infinity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限大値を伴う演算は、実数算術にできうる限り従います：ある無限大値を加算や減算すること、または非ゼロの有限値によって無限に乗算や除算することは、無限大の結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operator</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operator Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Optimizations are sometimes applied that can reduce the amount of copying.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最適化は時折適用されて、コピー回数を減らすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Order Dependent Operations on Dictionary</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書での順序依存演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other than these signaling operations, a signaling NaN behaves in the same manner as a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのシグナル演算の他は、シグナルNaNはクワイエットNaNと同じ流儀で振舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, &lt;c3&gt;next()&lt;/c3&gt; evaluates the result with the &lt;c4&gt;predicate&lt;/c4&gt; closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、&lt;c3&gt;next()&lt;/c3&gt;は結果を&lt;c4&gt;predicate&lt;/c4&gt;クロージャで評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, &lt;c3&gt;next()&lt;/c3&gt; returns the result of calling the transforming closure on the received element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、&lt;c3&gt;next()&lt;/c3&gt;は変換クロージャをその受け取った要素上で呼び出す結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, &lt;c4&gt;next()&lt;/c4&gt; calls the transforming closure on the received element, returning it if the transform returns a non-&lt;c5&gt;nil&lt;/c5&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、&lt;c4&gt;next()&lt;/c4&gt;は変換クロージャをその受け取った要素上で呼び出して、その変換が非&lt;c5&gt;nil&lt;/c5&gt;値を返すならばそれを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, &lt;c4&gt;next()&lt;/c4&gt; calls the transforming closure on the received element, takes the resulting asynchronous sequence, and creates an asynchronous iterator from it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、&lt;c4&gt;next()&lt;/c4&gt;は変換クロージャをその受け取った要素上で呼び出して、結果の非同期シーケンスをとり、そして非同期イテレータをそれから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, &lt;c4&gt;next()&lt;/c4&gt; returns the result of calling the transforming closure on the received element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、&lt;c4&gt;next()&lt;/c4&gt;は変換クロージャをその受け取った要素上で呼び出す結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, a Unicode replacement character (&lt;c2&gt;"\u{FFFD}"&lt;/c2&gt;) is inserted for each detected error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、ユニコード代用文字（&lt;c2&gt;"\u{FFFD}"&lt;/c2&gt;）が各検出エラーに対して挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, if no convention can be inferred, the method is left intact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ以外では、推論されることができる慣行がないならば、メソッドは元のままにしておかれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, it returns &lt;c0&gt;nil&lt;/c0&gt;, ending the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、それは&lt;c0&gt;nil&lt;/c0&gt;を返します、そしてシーケンスを終わらせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, iteration will stop if an encoding error is detected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、反復はエンコーディングエラーが検出されるならば停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, the contents are encoded as alternating key-value pairs in an unkeyed container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、内容は交互キー値ペアとしてキー付けされないコンテナの中にエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Overflow checking is not performed in &lt;c0&gt;-Ounchecked&lt;/c0&gt; builds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー検査は、&lt;c0&gt;-Ounchecked&lt;/c0&gt;ビルドでは実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Overview</seg>
      </tuv>
      <tuv lang="ja">
        <seg>概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parameters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パラメータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parsing of the string is case insensitive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列の構文解析は、大文字小文字に影響されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c0&gt;true&lt;/c0&gt; to create a signaling NaN or &lt;c1&gt;false&lt;/c1&gt; to create a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaNを作成するために&lt;c0&gt;true&lt;/c0&gt;を、またはクワイエットNaNを作成するために&lt;c1&gt;false&lt;/c1&gt;を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c0&gt;true&lt;/c0&gt; to keep the existing capacity of the array after removing its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を渡すと、この配列の既存の容量をそれの要素の削除後に保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c0&gt;true&lt;/c0&gt; to stop translation when an encoding error is detected in &lt;c1&gt;input&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を渡すと、翻訳はエンコーディングエラーが&lt;c1&gt;input&lt;/c1&gt;において検出されるときに停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass a closure as &lt;c1&gt;combine&lt;/c1&gt; that returns the value to use in the resulting dictionary: The closure can choose between the two values, combine them to produce a new value, or even throw an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャを&lt;c1&gt;combine&lt;/c1&gt;として渡してください、それは結果の辞書において使う値を返します：そのクロージャは２つの値のどちらかを選ぶこと、それらを結合して新しい値を生成すること、またはエラーをスローすることさえ出来ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass a negative value as &lt;c3&gt;stride&lt;/c3&gt; to create a sequence from a higher start to a lower end:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の値を&lt;c3&gt;stride&lt;/c3&gt;として渡して、上方から開始して下方に終わるシーケンスを作成してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass the greater-than operator (&lt;c1&gt;&gt;&lt;/c1&gt;) operator as the predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より大きい（&lt;c1&gt;&gt;&lt;/c1&gt;）演算子を述部として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing a NaN to an operation generally results in NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNをある演算に渡すことは、一般的にNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing a sequence with duplicate keys to this initializer results in a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>重複するキーを持つシーケンスをこのイニシャライザに渡すことは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing a sequence with no elements or an empty collection as &lt;c0&gt;possible&lt;w1&gt;Prefix&lt;/w1&gt;&lt;/c0&gt; always results in &lt;c2&gt;true&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの要素もないシーケンスまたは空のコレクションを&lt;c0&gt;possible&lt;w1&gt;Prefix&lt;/w1&gt;&lt;/c0&gt;として渡すことは、常に&lt;c2&gt;true&lt;/c2&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing a value that can’t be represented in this type results in a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型において表せない値を渡すことは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing any other format or any additional characters as &lt;c0&gt;text&lt;/c0&gt; results in &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何か他の形式または追加文字を&lt;c0&gt;text&lt;/c0&gt;として渡すことは、&lt;c1&gt;nil&lt;/c1&gt;の結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing pointers to mutable arrays of ObjC class pointers is not directly supported.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ObjCクラスポインタの可変配列へポインタを渡すことは、直接にサポートされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing the collection’s &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; as the &lt;c2&gt;start&lt;/c2&gt; parameter results in an empty subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;を&lt;c2&gt;start&lt;/c2&gt;パラメータとして渡すことは、空のシーケンスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing the collection’s starting index as the &lt;c0&gt;end&lt;/c0&gt; parameter results in an empty subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの開始インデックスを&lt;c0&gt;end&lt;/c0&gt;パラメータとして渡すことは、空のシーケンスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing the same index as both &lt;c2&gt;i&lt;/c2&gt; and &lt;c3&gt;j&lt;/c3&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;i&lt;/c2&gt;と&lt;c3&gt;j&lt;/c3&gt;の両方と同じアンデックスを渡すことは、効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pattern Matching</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パターンマッチング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Perform arithmetic and bitwise operations or compare values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>算術およびビット単位の演算を実行します、または値を比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Perform order-dependent operations common to all collections, as implemented for &lt;c0&gt;Dictionary&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべてのコレクションに共通の順序依存演算を、&lt;c0&gt;Dictionary&lt;/c0&gt;に対して実装されたように実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing Calculations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing Calculations with Overflow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフローを伴う計算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing Collection Operations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクション演算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing Double-Width Calculations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２倍幅計算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing a bitwise NOT operation on 0 returns a value with every bit set to &lt;c0&gt;1&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位のNOT演算を0に関して実行することは、すべてのビットが&lt;c0&gt;1&lt;/c0&gt;に設定された値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing an invalid cast triggers a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不正なキャストを行うことは実行時エラーの引き金になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing truncating division with floating-point values results in a truncated integer quotient and a remainder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不動小数点値で切り捨て除算を実行することは、切り捨てられる整数指数と余りという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a logical AND operation on two Boolean values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理AND（積）演算を２つのブール値で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a logical NOT operation on a Boolean value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理否定演算をあるブール値上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a logical OR operation on two Boolean values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理OR（和）演算を２つのブール値で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a nil-coalescing operation, returning the wrapped value of an &lt;c0&gt;Optional&lt;/c0&gt; instance or a default &lt;c1&gt;Optional&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil合体演算を実行します、ラップされた値の&lt;c0&gt;Optional&lt;/c0&gt;インスタンスまたは省略時の&lt;c1&gt;Optional&lt;/c1&gt;値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a nil-coalescing operation, returning the wrapped value of an &lt;c0&gt;Optional&lt;/c0&gt; instance or a default value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil合体演算を実行します、ラップされた値の&lt;c0&gt;Optional&lt;/c0&gt;インスタンスまたは省略時の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a traditional C-style assert with an optional message.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>随意のメッセージを持つ伝統的なC形式アサートを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Persistently unique per environment (e.g. database record keys).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>環境ごとに永続的に特有である（たとえば、データベースレコードキー）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Platform-specific classes, like &lt;c0&gt;NSBackground&lt;w1&gt;Activity&lt;/w1&gt;&lt;/c0&gt;, &lt;c2&gt;NSUser&lt;w3&gt;Notification&lt;/w3&gt;&lt;/c2&gt;, and &lt;c4&gt;NSXPCConnection&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プラットホーム特有のクラス、&lt;c0&gt;NSBackground&lt;w1&gt;Activity&lt;/w1&gt;&lt;/c0&gt;、&lt;c2&gt;NSUser&lt;w3&gt;Notification&lt;/w3&gt;&lt;/c2&gt;、そして&lt;c4&gt;NSXPCConnection&lt;/c4&gt;のような</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Playground logging can generate, at a minimum, a structured description of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドログは、最低でも、あらゆる型の構造化された記述を生成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Playground logging generates a richer, more specialized description of core types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドログは、中心的な型のより豊かな、さらに特殊化された記述を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Playground logging may also be able to support specialized descriptions of other types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドログはまた、他の型の特殊化された記述のサポートが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Positive infinity compares greater than every finite value and negative infinity, while negative infinity compares less than every finite value and positive infinity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の無限大はすべての有限値と負の無限大より大きいと比較されます、一方負の無限大はすべての有限値と正の無限大より小さいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Positive infinity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の無限大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;maximum&lt;/c0&gt; must compare equal to itself (i.e. cannot be NaN).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;maximum&lt;/c0&gt;はそれ自身と等しいと比較されなければなりません（すなわちNaNであることはできません）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;minimum&lt;/c0&gt; must compare equal to itself (i.e. cannot be NaN).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;minimum&lt;/c0&gt;はそれ自身と等しいと比較されなければなりません（すなわちNaNであることはできません）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;next()&lt;/c0&gt; has not been applied to a copy of &lt;c1&gt;self&lt;/c1&gt; since the copy was made.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;next()&lt;/c0&gt;が&lt;c1&gt;self&lt;/c1&gt;のコピーに、そのコピーが作成されて以来まったく適用されていないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;position&lt;/c0&gt; indicates a valid position in &lt;c1&gt;self&lt;/c1&gt; and &lt;c2&gt;position != end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;position&lt;/c0&gt;が&lt;c1&gt;self&lt;/c1&gt;の中の有効な位置を指し示して&lt;c2&gt;position != end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;position&lt;/c0&gt; is a valid position in &lt;c1&gt;self&lt;/c1&gt; and &lt;c2&gt;position != end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;position&lt;/c0&gt;が&lt;c1&gt;self&lt;/c1&gt;の中の有効な位置であり&lt;c2&gt;position != end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;self != nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;self != nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: The sequence must not have duplicate keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：シーケンスは重複するキーを持ってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: the pointee has been initialized with an instance of type &lt;c0&gt;Pointee&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：pointeeが型&lt;c0&gt;Pointee&lt;/c0&gt;のインスタンスを使って初期化されていること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prefer Swift Value Types to Bridged Objective-C Reference Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift値型はブリッジされたObjective-C参照型より好ましい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prefer this method over &lt;c0&gt;reduce(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt; for efficiency when the result is a copy-on-write type, for example an &lt;c2&gt;Array&lt;/c2&gt; or &lt;c3&gt;Dictionary&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを、効率のために&lt;c0&gt;reduce(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt;より優先してください、その結果がコピーオンライト型である場合、例えば&lt;c2&gt;Array&lt;/c2&gt;または&lt;c3&gt;Dictionary&lt;/c3&gt;に対しては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Preserving an Array’s Geometric Growth Strategy</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の幾何数級的増大戦略を守る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Preventing Timing Problems When Using Closures</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャを使う場合のタイミング問題を防ぐ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Print the result using the index found in step 2 on the original &lt;c0&gt;absences&lt;/c0&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>手順２で見つけたインデックスをオリジナル&lt;c0&gt;absences&lt;/c0&gt;配列上で使って結果を出力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Print the results using the indices found in steps 1 and 3 on the original &lt;c0&gt;absences&lt;/c0&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>手順１と手順３で見つけたインデックスをオリジナル&lt;c0&gt;absences&lt;/c0&gt;配列上で使って結果を出力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Printing and Dumping</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プリントとダンプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces the next element in the compact map sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパクトマップシーケンスの中の次の要素を生じさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces the next element in the drop-first sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drop-firstシーケンスの中の次の要素を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces the next element in the drop-while sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drop-whileシーケンスの中の次の要素を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces the next element in the filter sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>フィルタシーケンスの中の次の要素を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces the next element in the flat map sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>フラットマップシーケンスの中の次の要素を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces the next element in the map sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マップシーケンスの中の次の要素を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces the next element in the prefix sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefixシーケンスの中の次の要素を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces the next element in the prefix-while sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefix-whileシーケンスの中の次の要素を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Producing Iterator Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータ値を生み出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Proper alignment ensures that the result of &lt;c1&gt;distance(to:)&lt;/c1&gt; accurately measures the distance between the two pointers, counted in strides of &lt;c2&gt;Pointee&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>適切なアライメントは、&lt;c1&gt;distance(to:)&lt;/c1&gt;の結果が正確に２つのポインタの間の隔たりを、&lt;c2&gt;Pointee&lt;/c2&gt;のストライドで数えて、測ることを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Protocols permit classes, structures, and enumerations to participate in inheritance, while class inheritance is only compatible with other classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロトコルは、クラス、構造体、そして列挙に対して継承に参加することを許可します、一方でクラス継承は他のクラスと互換性があるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Provide access to a shared resource using a single, shared class instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>共有リソースへのアクセスを単一の、共有クラスインスタンスを使って提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Providing a Hash Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ値の提供</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying Runtime Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>実行時値の問い合わせ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying a Double</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Doubleに問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying a Double's State</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Doubleの状態を問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying a Float</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Floatに問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying a Float's State</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Floatの状態を問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Range Expressions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Range-Checked Conversion</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲確認変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ranges</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw Representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生の表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reference Counting</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照カウント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reference Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Related Array Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連した配列型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Relationships</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関係</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all elements from the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列からすべての要素を取り除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all key-value pairs from the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべてのキー値ペアを辞書から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all the elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす要素すべてを除去します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the element at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置での要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the first element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最初の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the first key-value pair of the dictionary if the dictionary isn’t empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その辞書が空でないならば、辞書の中の最初のキー値ペアを削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the key-value pair at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値ペアを指定されたインデックスで削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the last element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最後の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the elements in the specified subrange from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された下位範囲の中の要素をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the given key and its associated value from the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたキーと関連値を辞書から取り除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the given number of elements from the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数の要素をコレクションの終わりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the specified number of elements from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素をコレクションの始まりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the specified number of elements from the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素をコレクションの終わりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removing Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removing Keys and Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーと値の削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reordering Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素を再配列する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reordering an Array's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の要素を再配列します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素を再配列します、例えば、与えられた述部にマッチする要素すべてが、合致しない要素すべての後になるなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Repeatedly calling this method returns all the elements of the underlying sequence in order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返しこのメソッドを呼び出すことは、基礎をなすシーケンスのすべての要素を順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Repeatedly calling this method returns, in order, all the elements of the underlying sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返しこのメソッドを呼び出すことは、基礎をなすシーケンスのすべての要素を、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces a range of elements with the elements in the specified collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲の要素を指定されたコレクションの要素で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the given index with its predecessor.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスをそれの前のものと取り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the given index with its successor.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスをそれの後に続くものと取り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the specified subrange of elements with the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの要素からなる指定された下位範囲を与えられたコレクションで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this value with its additive inverse.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をそれの加法の逆元で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this value with its square root, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をそれの平方根で置き換えます、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this value with the remainder of itself divided by the given value using truncating division.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>切り捨て除算を使ってそれ自身を与えられた値で除算した余りでこの値を置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this value with the remainder of itself divided by the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身を与えられた値で除算した余りでこの値を置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Represents a string literal with interpolations while it is being built up.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルでいくらかの補間をもつものを、それが作り上げられている間に表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Represents the contents of a string literal with interpolations while it’s being built up.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの補間をもつある文字列リテラルの内容それらを、それが作り上げられている間に表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Required.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必須。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reserves enough space to store the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素を格納するのに十分な空間を確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reserves enough space to store the specified number of key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数のキー値ペアを格納するのに十分な空間を確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resources</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リソース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Respond to a Property Change</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロパティの変更に応答する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Respond to events on behalf of a delegator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>委任元に代わってイベントに応答します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the continuation by having it either return normally or throw an error based on the state of the given &lt;c0&gt;Result&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続を待っているタスクを、それにそれの中断地点からこの与えられた&lt;c0&gt;Result&lt;/c0&gt;値の状態に基づいて通常に復帰させるかエラーをスローさせるかどちらかによって再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the continuation by having it return normally from its suspension point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続を待っているタスクを、それにそれの中断地点から通常に復帰させることによって再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the continuation by having it throw an error from its suspension point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続を待っているタスクを、それにそれの中断地点からエラーをスローさせることによって再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the next iteration point by having it return nil or throw which signifies the end of the iteration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の反復地点を待っているタスクを、それに反復の終わりを意味するnilを返させるまたはスローさせることによって再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the next iteration point by having it return nil which signifies the end of the iteration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の反復地点を待っているタスクを、それに反復の終わりを意味するnilを返させることによって再開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the next iteration point by having it return nomally from its suspension point or buffer the value if no awaiting next iteration is active.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の反復地点を待っているタスクを、それに通常に復帰させることによってそれの中断地点から再開します。または待っている次の反復が活動中でないならば値をバッファに移します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the next iteration point by having it return normally from its suspension point or buffer the value if no awaiting next iteration is active where the &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;Void&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の反復地点を待っているタスクを、それに通常に復帰させることによってそれの中断地点から再開します。または待っている次の反復が活動中でないならば値をバッファに移します、そこで&lt;c0&gt;Element&lt;/c0&gt;は&lt;c1&gt;Void&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resume the task awaiting the next iteration point by having it return normally from its suspension point or buffer the value if no awaiting next iteration is active.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の反復地点を待っているタスクを、それに通常に復帰させることによってそれの中断地点から再開します。または待っている次の反復が活動中でないならば値をバッファに移します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resuming from a continuation more than once is undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある継続から一回以上再開することは、未定義挙動です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Retrieve or set the &lt;c0&gt;Pointee&lt;/c0&gt; instance referenced by &lt;c1&gt;self&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;によって参照される&lt;c1&gt;Pointee&lt;/c1&gt;インスタンスを回収または設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Retrieve the executor for this actor as an optimized, unowned reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エグゼキュータ（遂行者）をこのアクターのためにある最適化された、非所有参照として取って来ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Retrieve the localized description for this error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このエラーの現地語化された説明を取ってきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Return Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns &lt;c0&gt;-1&lt;/c0&gt; if this value is negative and &lt;c1&gt;1&lt;/c1&gt; if it’s positive; otherwise, &lt;c2&gt;0&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値が負ならば&lt;c0&gt;-1&lt;/c0&gt;そしてそれが正ならば&lt;c1&gt;1&lt;/c1&gt;；それ以外では&lt;c2&gt;0&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns &lt;c0&gt;nil&lt;/c0&gt;, indicating that there are no more elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう要素は無いことを指し示す、&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if the task is cancelled, and should stop executing.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を返します、もしタスクが取り消される、そして遂行を停止すべきならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this value is a multiple of the given value, and &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;をもしこの値がその与えられた値の倍数ならば、そして&lt;c1&gt;false&lt;/c1&gt;をそうでないならば返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a &lt;c0&gt;CVa&lt;w1&gt;List&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; that is backed by autoreleased storage, built from the given array of arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オートリリースされるストレージによって裏付けられる&lt;c0&gt;CVa&lt;w1&gt;List&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を返します、いくらかの引数からなる与えられた配列から組み立てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether a value is included in a range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値が範囲に含まれるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether any corresponding components of the two tuples are not equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのタプルの対応する構成要素いずれかが等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスのすべての要素がある与えられた述部を満たすかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the corresponding components of two tuples are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのタプルの対応する構成要素らが等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the first argument represents a position before the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数が２番目の引数の前の位置を表すかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered after or the same as the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>語彙筆記的順序において最初のタプルが２番目の後ろまたはそれと同じ順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered after the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>語彙筆記的順序において最初のタプルが２番目の後ろの順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered before or the same as the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>語彙筆記的順序において最初のタプルが２番目の前またはそれと同じ順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered before the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>語彙筆記的順序において最初のタプルが２番目の前の順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the given element is contained within the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素がこの範囲内に含まれるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the given keys are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーが等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the given object is known to have a single strong reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値を返して、与えられたオブジェクトが１つだけ強い参照を持つことを知られるかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最初の要素らが別のシーケンスの中の要素らと同等かどうかを、与えられた述部を同等性テストとして使って指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最初の要素らが別のシーケンスの中の要素らと同じかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された述部を満足させるある要素をシーケンスが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence contains the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された要素をシーケンスが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが別のシーケンスの前に来るかどうかをある語彙筆記的順序（字典）順序において、与えられた述部を使って要素を比較して、指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (&lt;c0&gt;&lt;&lt;/c0&gt;) to compare elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのシーケンスが別のシーケンスの前に来るかどうかを、ある語彙筆記的順序（字典）順序において、より小さい演算子（&lt;c0&gt;&lt;&lt;/c0&gt;）を使って要素を比較して、指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the two arguments are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the two arguments are not equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the two given values are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the two given values are not equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより大きいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより大きいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより少ないまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより少ないかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this instance is equal to the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが与えられた値と等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this instance is less than or equal to the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが与えられた値より小さいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this instance is less than the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが与えられた値より小さいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがある昇順ソートにおいて、与えられた値より前にくるまたは同じ位置かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this range and the given range contain an element in common.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲と与えられた範囲がある要素を共通に含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスともう一方のシーケンスが同等の要素を同じ順序で含むかどうかを、与えられた述部を同等テストとして使って、指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスともう一方のシーケンスが同じ要素を同じ順序で含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two arguments match by value equality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値を返します、２つの引数が値等式によって一致するかどうかを指し示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two arrays contain the same elements in the same order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの配列が同じ要素を同じ順序で含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two indices wrap equal underlying indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのインデックスが等しい基礎をなすインデックスをラップするかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two ranges are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの範囲が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two references point to different object instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの参照が異なるオブジェクトインスタンスを指しているかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two references point to the same object instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの参照が同じオブジェクトインスタンスを指しているかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two type-erased hashable instances wrap the same value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの型消去ハッシュ可能インスタンスが同じ値をラップするかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two types are identical.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの型が同一かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two types are not identical.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの型が同一でないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two values are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two values are not equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値を返します、それは非同期シーケンスによって生み出される全ての要素がこの与えられた述部を満足させるかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値を返します、それは非同期シーケンスがこの与えられた述部を満足させる要素を含むかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the asynchronous sequence contains the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値を返します、それは非同期シーケンスがこの与えられた要素を含むかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a closed range that contains both of its bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの境界の両方を含む完結範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a copy of this range clamped to the given limiting range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた限界範囲に締め金具で留められる（制限を課される）、この範囲のコピーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a half-open range that contains its lower bound but not its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの下側の境界は含むがそれの上側の境界はそうしない半開範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a lowercased version of this character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字のローワーケース版を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new &lt;c0&gt;.data&lt;w1&gt;Corrupted&lt;/w1&gt;&lt;/c0&gt; error using a constructed coding path and the given debug description.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい&lt;c0&gt;.data&lt;w1&gt;Corrupted&lt;/w1&gt;&lt;/c0&gt;エラーを返します、組み立てられたコーディングパスと与えられたデバッグ説明を使っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new collection difference with associations between individual elements that have been removed and inserted only once.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ただ一度だけ除去および挿入された個々の要素の間の関連性それらをもつある新しいコレクション差異を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new dictionary containing only the key-value pairs that have non-&lt;c0&gt;nil&lt;/c0&gt; values as the result of transformation by the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャによる変換の結果として非&lt;c0&gt;nil&lt;/c0&gt;を持つキー値ペアだけを含んでいる新しい辞書を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new dictionary containing the key-value pairs of the dictionary that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この辞書のキー値ペアで与えられた述部を満たすものを含んでいる新しい辞書を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new dictionary containing the keys of this dictionary with the values transformed by the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャによって変形された値とともに、この辞書のキーを含んでいる新しい辞書を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new key path created by appending the given key path to this one.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーパスをこのものに加えることによって作成された新しいキーパスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各要素の間に与えられた分離子を加えて、シーケンスの要素を連結することによる新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a partial range extending upward from a lower bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下側の境界から上方に拡張している部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a partial range up to, and including, its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの上側の境界までの、そしてそれを含む部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a partial range up to, but not including, its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの上側の境界までの、しかしそれを含んでいない、部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a pointer offset from this pointer by the specified number of instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから指定された数のインスタンスだけオフセットしたポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a pointer to the next consecutive instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の隣接インスタンスへのポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a pointer to the previous consecutive instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前の隣接インスタンスへのポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random Boolean value, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為なブール値を返します、与えられた生成子を無作為さの出典として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random Boolean value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為なブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random element of the collection, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのある無作為な要素を返します、与えられた生成子を無作為さの出典として使って使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのある無作為の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random value within the specified range, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された範囲内のある無作為な値を返します、与えられた生成子を無作為さの出典として使って使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random value within the specified range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された範囲内のある無作為の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす、冒頭の、隣接する要素を飛ばすことによるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence containing all but the given number of final elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数の末尾要素以外すべてを含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence containing all but the given number of initial elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の冒頭要素以外すべてを含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence containing the initial, consecutive elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす、冒頭の、隣接する要素を含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence formed from &lt;c0&gt;first&lt;/c0&gt; and repeated lazy applications of &lt;c1&gt;next&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;first&lt;/c0&gt;からそして繰り返し&lt;c1&gt;next&lt;/c1&gt;を遅延適用して形成されたシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence formed from repeated lazy applications of &lt;c0&gt;next&lt;/c0&gt; to a mutable &lt;c1&gt;state&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返し&lt;c0&gt;next&lt;/c0&gt;を可変の&lt;c1&gt;state&lt;/c1&gt;に遅延適用することから形成されたシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence from a starting value to, but not including, an end value, stepping by the specified amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定の量だけ歩を進めて、始まりの値から終わりの値まで、しかしそれは含めないシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence from a starting value toward, and possibly including, an end value, stepping by the specified amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定の量だけ歩を進めて、始まりの値から終わりの値の方へ、そしてもしかするとそれを含めるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence of pairs (&lt;e0&gt;n&lt;/e0&gt;, &lt;e1&gt;x&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; represents a consecutive integer starting at zero and &lt;e3&gt;x&lt;/e3&gt; represents an element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペア (&lt;e0&gt;n&lt;/e0&gt;, &lt;e1&gt;x&lt;/e1&gt;) のシーケンスを返します、そこで&lt;e2&gt;n&lt;/e2&gt;はゼロで開始する連続した数を表して、&lt;e3&gt;x&lt;/e3&gt;はシーケンスの要素を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence, up to the specified maximum length, containing the initial elements of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された最大長まで、そのシーケンスの冒頭の要素を含んでいる、あるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a string read from standard input through the end of the current line or until EOF is reached.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準入力から現在の行の終わりまでまたはEOFが到達されるまで読み込んだ文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence by skipping elements while &lt;c0&gt;predicate&lt;/c0&gt; returns &lt;c1&gt;true&lt;/c1&gt; and returning the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;が&lt;c1&gt;true&lt;/c1&gt;を返す間は要素を飛ばして残りの要素を返すことによって、ある下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence containing all but the given number of initial elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の冒頭要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence containing all but the specified number of final elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の末尾要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence containing the initial elements until &lt;c0&gt;predicate&lt;/c0&gt; returns &lt;c1&gt;false&lt;/c1&gt; and skipping the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;が&lt;c1&gt;false&lt;/c1&gt;を返すまで冒頭の要素を含んでいて残りの要素を飛ばしている、ある下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence from the specified position to the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置からコレクションの終わりまでの下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence from the start of the collection through the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの始まりから指定された位置までも含む下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence from the start of the collection up to, but not including, the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの始まりから指定された位置まで、しかしそれは含めない下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence, up to the given maximum length, containing the final elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位シーケンスを、指定された最大長まで、コレクションの末尾の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence, up to the given maximum length, containing the final elements of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位シーケンスを、指定された最大長まで、シーケンスの末尾の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位シーケンスを、指定された最大長まで、コレクションの冒頭の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a tuple containing the high and low parts of the result of multiplying this value by the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を指定の値で掛ける結果の高および低部分を含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a tuple containing the quotient and remainder obtained by dividing the given value by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をこの値で割ることで入手される商と余りを含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a tuple containing the quotient and remainder of dividing the given value by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をこの値で除算した商と余りを含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a value that is offset the specified distance from this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定の隔たりをこの値からオフセットされたある値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a view presenting the elements of the collection in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素を逆順に表しているある見方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された変換をこのシーケンスの各要素で呼び出す結果を連結したものを含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the elements of this sequence in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素を逆順に含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the non-&lt;c0&gt;nil&lt;/c0&gt; results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された変換をこのシーケンスの各要素で呼び出す結果で非-&lt;c0&gt;nil&lt;/c0&gt;のものを含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the results of mapping the given closure over the sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャをシーケンスのもつ要素全体にわたってマップする結果を含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された述部を満足させるものであるシーケンスの要素を、順序通りに、含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを返します、基底シーケンスの冒頭の、連続する要素いくつかを含んでいます、それらは与えられたエラースロー述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある非同期シーケンスを返します、基底シーケンスの冒頭の、連続する要素いくつかを含んでいます、それらは与えられた述部を満たすものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された最大長まで、その基底非同期シーケンスの冒頭の要素を含んでいる、ある非同期シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an empty iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an encoding container appropriate for holding a single primitive value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一プリミティブ値を保持するのに適切なエンコーディングコンテナを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an encoding container appropriate for holding multiple unkeyed values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複数のキー付けされない値を保持するのに適切なエンコーディングコンテナを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an encoding container appropriate for holding multiple values keyed by the given key type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキー型によってキー付けされる複数の値を保持するのに適切なエンコーディングコンテナを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスから指定された隔たりのインデックスを返します、その隔たりが与えられた限界インデックスを越えない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an index that is the specified distance from the given index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスから指定された隔たりのインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the dictionary’s key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書のキー値ペアすべてを対象とするイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the elements of this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the elements of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素すべてを対象としたあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an uppercased version of this character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字のアッパーケース版を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns nil if &lt;c0&gt;from&lt;/c0&gt; is nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;from&lt;/c0&gt;がnilならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the absolute value of the given number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数の絶対値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the additive inverse of the specified value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値の加法の逆元を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the bits of the given instance, interpreted as having the specified type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインスタンスのビットを返します、指定された型を持つと解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各要素の間に与えられた分離子を挿入して、このシーケンスに属する複数のシーケンスの要素を鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the data stored in this decoder as represented in a container appropriate for holding a single primitive value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このデコーダの中に格納されるデータを、単一プリミティブ値を保持するのに適したコンテナの中に表現される通りに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the data stored in this decoder as represented in a container appropriate for holding values with no keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このデコーダの中に格納されるデータを、キーなしで値を保持するのに適したコンテナの中に表現される通りに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the data stored in this decoder as represented in a container keyed by the given key type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このデコーダの中に格納されるデータを、与えられたキー型によってキー付けされるコンテナの中に表現された通りに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつ順番付けられた要素をこの与えられたコレクションから生成するのに必要とされる差異を返します、与えられた述部を同等性テストとして使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference needed to produce this collection’s ordered elements from the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつ順番付けられた要素をこの与えられたコレクションから生成するのに必要とされる差異を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をこの値から減じることで入手される差、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の差を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the distance between two indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのインデックス間の隔たりを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the distance from this pointer to the given pointer, counted as instances of the pointer’s &lt;c0&gt;Pointee&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから与えられたポインタまでの隔たりを返します、ポインタのもつ&lt;c0&gt;Pointee&lt;/c0&gt;型のインスタンスとして数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the distance from this value to the given value, expressed as a stride.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値から特定の値までの隔たりを返します、ストライドとして表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the dynamic type of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の動的型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, shuffled using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの要素を返します、与えられた生成子を無作為さの出典として使って混ぜ合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, shuffled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入れ替えた、シーケンスの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を要素間の比較として使ってソートされた、シーケンスの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, sorted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスに属する要素を、ソートして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of this sequence of sequences, concatenated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスに属する複数のシーケンスの要素を、鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the first element of the sequence that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たすこのシーケンスの最初の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the first index in which an element of the collection satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のインデックスで、それにおけるコレクションの要素が与えられた述部を満足させるものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the first index where the specified value appears in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値がコレクションにおいて現れるところの最初のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the given instance cast unconditionally to the specified type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインスタンスを無条件に特定の型にキャストして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the given integer as the equivalent value in a different integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数を同等値としてある異なる整数型において返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the given number unchanged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数を変更せずに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the greater of the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の大きい方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the greater of two comparable values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの比較可能な値のうちより大きいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the greatest argument passed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>渡された引数の最も大きいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the index for the given key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーに対するインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the index of the last element in the collection that matches the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部に合致する、コレクションの中の最後の要素のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the inverse of the bits set in the argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数におけるビットの逆順を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the last element of the sequence that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす、シーケンスの最後の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the last index where the specified value appears in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値がコレクションにおいて現れるところの最後のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the least argument passed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>渡された引数の最も少ないものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the lesser of the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値のより小さい方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the lesser of two comparable values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの比較可能な値のうちより小さいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素と等しい要素を避けるようにして、このコレクションの最も長くなりうる下位シーケンスを、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす要素を含んでいない、このコレクションの最も長くなりうる下位シーケンスそれらを順序どおりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素と等しい要素を避けるようにして、このシーケンスの最も長くなりうる下位シーケンスを、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす要素を含んでいない、このシーケンスの最も長くなりうる下位シーケンスそれらを順序どおりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the maximum element in an asynchronous sequence of comparable elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較可能要素それらからなるある非同期シーケンスの中の最大の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスの中の最大の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the maximum element in the sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最大の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the maximum element in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最大の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the minimum element in an asynchronous sequence of comparable elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較可能要素それらからなるある非同期シーケンスの中の最小の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスの中の最小の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the minimum element in the sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最小の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the minimum element in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最小の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position immediately after the given index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスの直後の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position immediately before the given index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスの直前の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the product of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の積を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と与えられた値の積、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient and remainder of this value divided by the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値で除算されたこの値の商と余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を指定の値で割ることで入手される商、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient of dividing the first value by the second, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算した商を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient of dividing the first value by the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算した商を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the range of indices described by this range expression within the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたコレクション内の、この範囲式によって記述されるインデックスの範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を指定の値によって除算する後の余り、それに加えてオーバーフローが除算の間に起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the remainder of dividing the first value by the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算した余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the remainder of this value divided by the given value using truncating division.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>切り捨て除算を使って与えられた値で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the remainder of this value divided by the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の積をこの値に加える結果を返します、中間の丸めなしで計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスの要素をこの与えられたクロージャを使って結合する結果を返します、ある可変の初期値を与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of combining the elements of the asynchronous sequence using the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期シーケンスの要素をこの与えられたクロージャを使って結合する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of combining the elements of the sequence using the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを使って、このシーケンスの要素それらを結合する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of performing a bitwise AND operation on the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位AND演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of performing a bitwise OR operation on the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位OR演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of performing a bitwise XOR operation on the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位XOR演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します、シフト量をその型のもつビット幅にマスクしています、そして結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します、シフト量をマスクしてその型のもつビット幅にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を返します、シフト量をその型のもつビット幅にマスクしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the square root of the value, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の平方根を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the sum of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の合計を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と与えられた値の合計、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the value with greater magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より大きい規模を持つ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the value with lesser magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より小さい規模を持つ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns this value rounded to an integral value using the specified rounding rule.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された丸め規則を使って整数値に丸められたこの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns this value rounded to an integral value using “schoolbook rounding.”</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「教科書丸め」を使って整数値に丸めたこの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reverses the elements of the collection in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素をその場で逆順にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Right shift operations on negative values “fill in” the high bits with ones instead of zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負値上での右シフト演算は、高ビットを１で「満たします」、ゼロではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value that is greater than or equal to the source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ソースより大きいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value that is less than or equal to the source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ソースより小さいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value whose magnitude is greater than or equal to that of the source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの規模がソースのそれより大きいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value whose magnitude is less than or equal to that of the source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの規模がソースのそれより小さいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value; if two values are equally close, the even one is chosen.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も近い許される値に丸めます；２つの値が同じくらい近いならば、偶数のものが選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value; if two values are equally close, the one with greater magnitude is chosen.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も近い許される値に丸めます；２つの値が同じくらい近いならば、より大きい規模を持つものが選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rounding Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を丸める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rounds the value to an integral value using the specified rounding rule.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された丸め規則を使ってこの値を整数値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rounds this value to an integral value using “schoolbook rounding.”</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「教科書丸め」を使ってこの値を整数値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMD Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMD実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMD Vector Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMDベクター型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMD-Supporting Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMD支援型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Saved indices may become invalid as a result of mutating operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>保存されたインデックスは変更を行う演算の結果として無効となるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;Toll-Free Bridging&lt;/a0&gt; for more information.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さらなる情報のために&lt;a0&gt;Toll-Free Bridging&lt;/a0&gt;を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;c0&gt;String&lt;w1&gt;Interpolation&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; for details on &lt;c3&gt;append&lt;w4&gt;Interpolation&lt;/w4&gt;&lt;/c3&gt; methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;w1&gt;Interpolation&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を&lt;c3&gt;append&lt;w4&gt;Interpolation&lt;/w4&gt;&lt;/c3&gt;メソッドに関する詳細として見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See Also</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See String.UTF16View for more information</seg>
      </tuv>
      <tuv lang="ja">
        <seg>String.UTF16Viewをさらなる情報のために見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See String.UTF8View for more information</seg>
      </tuv>
      <tuv lang="ja">
        <seg>String.UTF8Viewをさらなる情報のために見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See also the &lt;c0&gt;ulp&lt;/c0&gt; member property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>また&lt;c0&gt;ulp&lt;/c0&gt;メンバープロパティも見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See also the &lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; static property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>また&lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;静的プロパティを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Selecting Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Selecting and Excluding Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の選択と除外</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sequence and Collection Protocols</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスおよびコレクションプロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set&lt;w0&gt;Algebra Implementations &lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合&lt;w0&gt;代数実装&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sets and Dictionaries</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合と辞書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Setting the pointee autoreleases the new value before trivially storing it in the referenced memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>pointeeを設定することは、新しい値をオートリリースします、それをその参照されたメモリの中に自明に格納する前に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sharing class instances pervasively throughout an app makes logic errors more likely.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリの隅々まで行き渡る共有クラスインスタンスは、論理エラーをより招きやすくします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sharing indices between collections and their subsequences is an important part of the design of Swift’s collection algorithms.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションとそれらの下位シーケンスとの間のインデックスの共有は、Swiftのコレクションアルゴリズム設計の重要な部分のひとつです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Shuffles the collection in place, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場で混ぜ合わせます、与えられた生成子を無作為さの出典として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Shuffles the collection in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場で混ぜ合わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Signaling NaNs typically raise the Invalid flag when used in general computing operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaNは、一般的な計算操作に使われる時に通常は無効フラグをあげます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Signed Integers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Signed&lt;w0&gt;Integer Implementations &lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き&lt;w0&gt;整数実装&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, if an error producing Objective-C method returns a &lt;c3&gt;nil&lt;/c3&gt; value to indicate the failure of a method call, Swift changes the return type of the function to a nonoptional type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、エラーを生成しているObjective-Cメソッドが&lt;c3&gt;nil&lt;/c3&gt;値を返してメソッド呼び出しの失敗を指し示すならば、スウィフトは関数の戻り型を非オプショナル型に変えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Simply surround a comma-separated list of values, instances, or literals with square brackets to create an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単にコンマ区切りの値、インスタンス、またはリテラルを角括弧で囲むことで、配列リテラルを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since equality between instances of &lt;c0&gt;Equatable&lt;/c0&gt; types is an equivalence relation, any of your custom types that conform to &lt;c1&gt;Equatable&lt;/c1&gt; must satisfy three conditions, for any values &lt;c2&gt;a&lt;/c2&gt;, &lt;c3&gt;b&lt;/c3&gt;, and &lt;c4&gt;c&lt;/c4&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Equatable&lt;/c0&gt;型のインスタンス間の同等性は等値関係であることから、&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するあなたのあつらえの型は何であれ、任意の値&lt;c2&gt;a&lt;/c2&gt;、&lt;c3&gt;b&lt;/c3&gt;、そして&lt;c4&gt;c&lt;/c4&gt;に対して、３つの条件を満たす必要があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since there is no key for &lt;c11&gt;4&lt;/c11&gt;, the closure returns &lt;c12&gt;nil&lt;/c12&gt; in this case, which &lt;c13&gt;compact&lt;w14&gt;Map(_:)&lt;/w14&gt;&lt;/c13&gt; omits from the transformed asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c11&gt;4&lt;/c11&gt;に対するキーがないことから、クロージャは&lt;c12&gt;nil&lt;/c12&gt;をその場合には返します、それは&lt;c13&gt;compact&lt;w14&gt;Map(_:)&lt;/w14&gt;&lt;/c13&gt;がこの変換されたシーケンスから省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Single-value methods eliminate the need for a &lt;c0&gt;for await&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop, and instead let you make a single &lt;c2&gt;await&lt;/c2&gt; call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一値のメソッドそれらは、&lt;c0&gt;for await&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループの必要性を排除します、そして代わりにあなたにある単一の&lt;c2&gt;await&lt;/c2&gt;呼び出しをさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices Are Views onto Arrays</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスは配列に関する見方です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices Inherit Collection Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスはコレクションの意味論を継承します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices Maintain Indices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスはインデックスを維持します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices Share Indices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスはインデックスを共有します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices maintain the same indices of the larger array for the same elements, so the starting index of a slice depends on how it was created, letting you perform index-based operations on either a full array or a slice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスはより大きな配列と同じインデックスを同じ要素に対して維持します、そのためスライスの開始インデックスはそれがどう作成されたかによって決まり、あなたにインデックスに基づく演算を完全な配列またはスライスのどちらでも実行させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Solve complex problems and write high-performance, readable code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複雑な問題を解決します、そして高性能の、読みやすいコードを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some examples:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some other types, such as optionals, arrays and ranges automatically become hashable when their type arguments implement the same.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの他の型、オプショナル、配列および範囲は、自動的にハッシュ可能になります、それらの型引数が同じものを実装する場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some sequence and collection operations can be used more simply when the elements conform to &lt;c0&gt;Equatable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかのシーケンスとコレクションの演算子は、要素が&lt;c0&gt;Equatable&lt;/c0&gt;に準拠する時はより簡単に使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some special cases apply:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの特別な場合が適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes you may want different error states to include the same common data, such as the position in a file or some of your application’s state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>時にはあなたは、いくらかの異なるエラー状態をこの同じ通常のデータに含めたいかもしれません、例えばあるファイル中の位置やあなたのアプリケーションの何らかの状態など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sorts the collection in place, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場でソートします、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sorts the collection in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場でソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Special-Use Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特殊用途のコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Special-Use Numeric Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特殊用途の数値型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically, you use the &lt;c0&gt;Array&lt;/c0&gt; type to hold elements of a single type, the array’s &lt;c1&gt;Element&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、あなたは&lt;c0&gt;Array&lt;/c0&gt;型をある単一の型、その配列のもつ&lt;c1&gt;Element&lt;/c1&gt;型、の複数の要素を保持するために使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifying the Associated Type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連型を指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifying the Identified Item</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一視される項目を指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Splitting and Joining Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の分割と連結</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Standard Library</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Standard input is interpreted as &lt;c0&gt;UTF-8&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準入力は、&lt;c0&gt;UTF-8&lt;/c0&gt;として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starting with &lt;c1&gt;start&lt;/c1&gt;, each successive value of the sequence adds &lt;c2&gt;stride&lt;/c2&gt; until the next value would be beyond &lt;c3&gt;end&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;start&lt;/c1&gt;で開始して、シーケンスのそれぞれ次の値は&lt;c2&gt;stride&lt;/c2&gt;を、次の値が&lt;c3&gt;end&lt;/c3&gt;を越えることになるまで加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starting with &lt;c1&gt;start&lt;/c1&gt;, each successive value of the sequence adds &lt;c2&gt;stride&lt;/c2&gt; until the next value would be equal to or beyond &lt;c3&gt;end&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;start&lt;/c1&gt;で開始して、シーケンスのそれぞれ次の値は&lt;c2&gt;stride&lt;/c2&gt;を、次の値が&lt;c3&gt;end&lt;/c3&gt;に等しいか越えるまで加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts a new scope in which a dynamic number of throwing tasks can be created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいタスクグループを開始します、それにおいて動的な数のスローするタスクが作成されることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts a new task group which provides a scope in which a dynamic number of tasks may be created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいタスクグループを開始します、それはあるスコープを提供しそれにおいて動的な数のタスクが作成されるかもしれないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 16 floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 16 integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 32 floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 32 integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 64 floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 64 integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of eight floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>８浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of eight integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>８整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of four floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>４浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of four integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>4整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of two floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of two integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of performing a bitwise AND operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位AND演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of performing a bitwise OR operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位OR演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of performing a bitwise XOR operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位XOR演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of shifting a value’s binary representation the specified number of digits to the left in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of shifting a value’s binary representation the specified number of digits to the right in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storing an unsafe task handle doesn’t have an impact on the task’s actual life cycle, and the behavior of accessing an unsafe task handle outside of the &lt;c0&gt;with&lt;w1&gt;Unsafe&lt;w2&gt;Current&lt;w3&gt;Task(body:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method’s closure isn’t defined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非安全タスクハンドルを格納することは、タスクのもつ実際のライフサイクルに影響を与えません、そして非安全タスクハンドルに&lt;c0&gt;with&lt;w1&gt;Unsafe&lt;w2&gt;Current&lt;w3&gt;Task(body:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドのもつクロージャの外側でアクセスすることの挙動は未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strideable Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Strideable実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strides</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストライド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String Representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String&lt;w0&gt;Protocol Implementations &lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>String&lt;w0&gt;プロトコル実装&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings and Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列と文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings and Text</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列とテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings are collections of &lt;c2&gt;Character&lt;/c2&gt; instances, so the number of visible characters is generally the most natural way to count the length of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列は、&lt;c2&gt;Character&lt;/c2&gt;インスタンスのコレクションです、なので見ることのできる文字の数はたいてい文字列の長さを数える最も自然な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings in Swift conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol, so the names are sorted in ascending order according to the less-than operator (&lt;c1&gt;&lt;&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列はSwift では&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠します、それでこれらの名前はより小さい演算子（&lt;c1&gt;&lt;&lt;/c1&gt;）によって昇順にソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures and classes are good choices for storing data and modeling behavior in your apps, but their similarities can make it difficult to choose one over the other.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体とクラスは、あなたのアプリにおけるデータ格納と挙動モデル化のための良い選択です、しかしそれらの類似点は他方より一方を選ぶのを難しくするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures and classes both support a form of inheritance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体とクラスは両方とも継承の形式をサポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures and protocols can only adopt protocols; they can't inherit from classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体とプロトコルは、プロトコルの採用だけが可能です；それらはクラスから継承できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures in Swift include many features that are limited to classes in other languages: They can include stored properties, computed properties, and methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでのさまざまな構造体は、他の言語ではクラスに限られる多くの機能を含みます：それらは格納プロパティ、計算プロパティ、そしてメソッドを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures with Default Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値を持つ構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subnormal numbers are often called &lt;e0&gt;denormal&lt;/e0&gt; or &lt;e1&gt;denormalized&lt;/e1&gt;—these are different names for the same concept.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>サブノーマル数は、しばしば&lt;e0&gt;デノーマル&lt;/e0&gt;または&lt;e1&gt;デノーマライズされた&lt;/e1&gt;と呼ばれます—それらは同じ概念に対する異なる名前です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subnormal values don’t use the full precision available to values of a type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>サブノーマル値は、ある型の値に利用可能な完全な精度を使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subscripting a dictionary with a key returns an optional value, because a dictionary might not hold a value for the key that you use in the subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるキーで辞書に添え字を使うことは、オプショナル値を返します、なぜなら辞書はあなたが添え字に使ったキーに対して値を保持しないかもしれないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subscripting with a key takes the following form:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーによる添え字は以下の形式をとります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subscripting with a key, yielding an optional value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーによる添え字、オプショナル値を生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subscripting with an index, yielding a key-value pair:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスによる添え字、キー値ペアを生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subscripts</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts one value from another and produces their difference, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値をもう一方から減じて、それらの差を返します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts one value from another and produces their difference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値をもう一方から減じて、それらの差を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の値を最初のものから減じて、その差を左手側の変数の中に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の値を最初のものから減じてその差を左手側の変数の中に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の値を最初のものから減じて、その差を左手側の変数の中に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Such types are called global actor types, and can be applied to any declaration to specify that such types are isolated to that global actor type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのような型はグローバルアクター型と呼ばれます、そしてあらゆる宣言に適用されることでそのような型それらがそのグローバルアクター型と分離されることを指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supporting Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補助関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supporting Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>支援を行う型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose you are tasked with finding the first two days with absences in the session.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがこの学期において欠席者のある最初の２つの日付を見つける任務を負うと考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose you need to store a list of the names of students that are signed up for a class you’re teaching.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが生徒の名前のリストをしまっておく必要があると仮定してみましょう、それはあなたが教えているクラスに受講届けを出されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task, then calls the given closure with a checked continuation for the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを中断します、それからこの与えられたクロージャを、現在のタスクに対する検査済み継続で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task, then calls the given closure with a checked throwing continuation for the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを中断します、それからこの与えられたクロージャを、現在のタスクに対する検査済みスロー継続で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task, then calls the given closure with an unsafe continuation for the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを中断します、それからこの与えられたクロージャを、現在のタスクに対する安全でない継続で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suspends the current task, then calls the given closure with an unsafe throwing continuation for the current task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のタスクを中断します、それからこの与えられたクロージャを、現在のタスクに対する安全でないスロー継続で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift 5.5 and later automatically translates Objective-C methods that take completion handlers into asynchronous methods using Swift's native concurrency support, in addition to importing the callback-based version of the method into Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift 5.5以降は、完了ハンドラをとるObjective-Cメソッドを非同期メソッドへとSwiftの生得の並行性サポートを使って自動的に翻訳します、そのメソッドのコールバック基盤バージョンをSwiftへとインポートするのに加えて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift Standard Library</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift Standard Library Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリ関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift Syntax</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフト構文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift and Objective-C in the Same Project</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じプロジェクトの中のSwiftとObjective-C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift automatically imports simple, constant-like macros, declared with the &lt;c0&gt;#define&lt;/c0&gt; directive, as global constants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは自動的に簡単に、&lt;c0&gt;#define&lt;/c0&gt;で宣言される、定数のようなマクロをグローバル定数としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift automatically translates Objective-C methods that produce errors into methods that throw an error according to Swift’s native error handling functionality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトは、自動的にエラーを生成するObjective-Cメソッドを、スウィフト固有のエラー処理機能に従ってエラーをスローするメソッドに翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift deliberately avoids using the term “epsilon” because:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、故意に用語 “イプシロン” を使うのを避けます、なぜなら：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift ensures your code is fast and efficient, while its memory safety and native error handling make the language safe by design.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、あなたのコードが高速で効率的であるのを受け合う一方で、それのメモリ安全と生得のエラー処理は言語を計画的に安全にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift examines Objective-C method declarations and translates them into Swift throwing methods, with shorter names when possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、Objective-Cメソッド宣言を調べて、それらをSwiftスローメソッドへと、可能な場合はより短い名前で翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports C unions as Swift structures.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトは、C共用体をスウィフト構造体としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports Cocoa methods with error parameters as throwing methods, as described in &lt;a3&gt;About Imported Cocoa Error Parameters&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、エラーパラメータを持つCocoaメソッドをスローメソッドとしてインポートします、&lt;a3&gt;インポートされるCocoaエラーパラメータについて&lt;/a3&gt;で記述されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports Objective-C methods that take a completion handler as two related Swift methods: a method that takes a closure, and an asynchronous method that doesn’t take a closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、完了ハンドラをとるObjective-Cメソッドを２つの同族のSwiftメソッド：あるクロージャをとるメソッド、そしてクロージャをとらない非同期メソッドとしてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports any C structure declared in a C header as a Swift structure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトは、Cヘッダにおいて宣言されるどんなC構造体もスウィフト構造体としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports any function declared in a C header as a Swift global function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトは、Cヘッダにおいて宣言されるどんな関数もスウィフトのグローバルな関数としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports bit fields that are declared in structures, like those found in Foundation’s &lt;c0&gt;NSDecimal&lt;/c0&gt; type, as computed properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、構造体において宣言されるビットフィールド、Foundationの&lt;c0&gt;NSDecimal&lt;/c0&gt;型において見つけられるそれらに似たもの、を計算プロパティとしてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift includes modern features like type inference, optionals, and closures, which make the syntax concise yet expressive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、型推論、オプショナル、そしてクロージャのような、モダンな機能を含みます、それは構文を簡潔にその上さらに表現豊かにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift is developed in the open.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、オープンに開発されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift makes it easy to create arrays in your code using an array literal: simply surround a comma-separated list of values with square brackets.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftはあなたのコードにおいて配列の作成を配列リテラルを使って簡単にします：単純にコンマ区切りの値のリストを角括弧で囲んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift numeric types (&lt;c0&gt;Int&lt;/c0&gt;, &lt;c1&gt;Float&lt;/c1&gt;, and so on)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift数値型（&lt;c0&gt;Int&lt;/c0&gt;、&lt;c1&gt;Float&lt;/c1&gt;、など）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift only imports C variadic functions that use a &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt; for their arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、C可変長引数関数で、&lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;をそれの引数として使うものをインポートするだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift provides a default debugging textual representation for any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、省略時のデバッグ用テキスト表現をあらゆる型に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift sees every header you expose publicly in your umbrella header.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、あなたがパブリックにあなたのアンブレラヘッダにおいて露出するすべてのヘッダを見ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift uses only simple Boolean values in conditional contexts to help avoid accidental programming errors and to help maintain the clarity of each control statement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、単純なブール値だけを条件文脈において使用することによって、思いがけないプログラミングエラーを防ぐのを助けます、そして各制御文の明瞭性を保つのを助けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift value type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift値型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift will automatically use &lt;c10&gt;Default&lt;w11&gt;String&lt;w12&gt;Interpolation&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt; as the interpolation type and provide an implementation for &lt;c13&gt;init(string&lt;w14&gt;Interpolation:)&lt;/w14&gt;&lt;/c13&gt; that passes the interpolated literal’s contents to &lt;c15&gt;init(string&lt;w16&gt;Literal:)&lt;/w16&gt;&lt;/c15&gt;, so you don’t need to implement anything specific to this protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、自動的に&lt;c10&gt;Default&lt;w11&gt;String&lt;w12&gt;Interpolation&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;を補間型として使います、そして&lt;c13&gt;init(string&lt;w14&gt;Interpolation:)&lt;/w14&gt;&lt;/c13&gt;に対する実装を提供し、それは補間されたリテラルの内容を&lt;c15&gt;init(string&lt;w16&gt;Literal:)&lt;/w16&gt;&lt;/c15&gt;に渡します、それであなたはこのプロトコルに特有な何かを実装する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift wraps these returned Core Foundation objects in an &lt;a0&gt;&lt;c1&gt;Unmanaged&lt;/c1&gt;&lt;/a0&gt;&lt;c2&gt;&lt;Instance&gt;&lt;/c2&gt; structure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、これらの返されたCore Foundationオブジェクトを &lt;a0&gt;&lt;c1&gt;Unmanaged&lt;/c1&gt;&lt;/a0&gt;&lt;c2&gt;&lt;Instance&gt;&lt;/c2&gt;構造体でラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift’s enumerations are well suited to represent simple errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftの列挙は、単純なエラーを表すのによく適します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task Group Cancellation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクグループ取り消し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Testing</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That continuation is Sendable, in that it is intended to be used from concurrent contexts external to the iteration of the AsyncStream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その継続は、それがAsyncStreamの反復に関係ない並行性文脈から使われるよう意図されるという点でSendableです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That default representation is used by the &lt;c0&gt;String(reflecting:)&lt;/c0&gt; initializer and the &lt;c1&gt;debug&lt;w2&gt;Print(_:)&lt;/w2&gt;&lt;/c1&gt; function for types that don’t provide their own.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の表現は、&lt;c0&gt;String(reflecting:)&lt;/c0&gt;イニシャライザおよび&lt;c1&gt;debug&lt;w2&gt;Print(_:)&lt;/w2&gt;&lt;/c1&gt;関数によって、それらが自前で提供しない型に対して使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, &lt;c3&gt;bit&lt;w4&gt;Pattern % Memory&lt;w5&gt;Layout&lt;Pointee&gt;.alignment&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; must be &lt;c6&gt;0&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、&lt;c3&gt;bit&lt;w4&gt;Pattern % Memory&lt;w5&gt;Layout&lt;Pointee&gt;.alignment&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;は、&lt;c6&gt;0&lt;/c6&gt;でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, for any elements &lt;c1&gt;a&lt;/c1&gt;, &lt;c2&gt;b&lt;/c2&gt;, and &lt;c3&gt;c&lt;/c3&gt;, the following conditions must hold:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、何らかの要素&lt;c1&gt;a&lt;/c1&gt;、&lt;c2&gt;b&lt;/c2&gt;、そして&lt;c3&gt;c&lt;/c3&gt;に対して、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, for any elements &lt;c5&gt;a&lt;/c5&gt;, &lt;c6&gt;b&lt;/c6&gt;, and &lt;c7&gt;c&lt;/c7&gt;, the following conditions must hold:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、何らかの要素&lt;c5&gt;a&lt;/c5&gt;、&lt;c6&gt;b&lt;/c6&gt;、そして&lt;c7&gt;c&lt;/c7&gt;に対して、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, for any index &lt;c0&gt;i&lt;/c0&gt; into a bidirectional collection &lt;c1&gt;c&lt;/c1&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、二方向性のコレクション&lt;c1&gt;c&lt;/c1&gt;に対する何らかのインデックス&lt;c0&gt;i&lt;/c0&gt;は：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, if &lt;c1&gt;x&lt;/c1&gt; is an instance of &lt;c2&gt;Double&lt;/c2&gt;, then &lt;c3&gt;Double(x&lt;w4&gt;.description) == x&lt;/w4&gt;&lt;/c3&gt; is always true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、&lt;c1&gt;x&lt;/c1&gt;が&lt;c2&gt;Double&lt;/c2&gt;のインスタンスならば、そのとき&lt;c3&gt;Double(x&lt;w4&gt;.description) == x&lt;/w4&gt;&lt;/c3&gt;は常に真です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, if &lt;c1&gt;x&lt;/c1&gt; is an instance of &lt;c2&gt;Float16&lt;/c2&gt;, then &lt;c3&gt;Float16(x&lt;w4&gt;.description) == x&lt;/w4&gt;&lt;/c3&gt; is always true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、&lt;c1&gt;x&lt;/c1&gt;が&lt;c2&gt;Float16&lt;/c2&gt;のインスタンスならば、そのとき&lt;c3&gt;Float16(x&lt;w4&gt;.description) == x&lt;/w4&gt;&lt;/c3&gt;は常に真です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, if &lt;c1&gt;x&lt;/c1&gt; is an instance of &lt;c2&gt;Float80&lt;/c2&gt;, then &lt;c3&gt;Float80(x&lt;w4&gt;.description) == x&lt;/w4&gt;&lt;/c3&gt; is always true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、&lt;c1&gt;x&lt;/c1&gt;が&lt;c2&gt;Float80&lt;/c2&gt;のインスタンスならば、そのとき&lt;c3&gt;Float80(x&lt;w4&gt;.description) == x&lt;/w4&gt;&lt;/c3&gt;は常に真です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, if &lt;c1&gt;x&lt;/c1&gt; is an instance of &lt;c2&gt;Float&lt;/c2&gt;, then &lt;c3&gt;Float(x&lt;w4&gt;.description) == x&lt;/w4&gt;&lt;/c3&gt; is always true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、&lt;c1&gt;x&lt;/c1&gt;が&lt;c2&gt;Float&lt;/c2&gt;のインスタンスならば、そのとき&lt;c3&gt;Float(x&lt;w4&gt;.description) == x&lt;/w4&gt;&lt;/c3&gt;は常に真です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, if &lt;c2&gt;source&lt;/c2&gt; is negative, the result is padded with ones; otherwise, the result is padded with zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、&lt;c2&gt;source&lt;/c2&gt;が負ならば、結果は１で詰め物をされます；そうでなければ、結果はゼロで詰め物をされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、値意味論を持つ可変コレクション、例えば配列などのスライスを扱う場合、元のコレクションを変化させることはそのコレクションのコピーを引き起こし、スライスの内容に作用しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That method call automatically triggers the observer's change handler:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのメソッド呼び出しは、自動的にオブザーバの持つ変更ハンドラを誘発します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That same value is too large to represent as an &lt;c3&gt;Int8&lt;/c3&gt; instance, so the second conversion fails, triggering a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その同じ値は、&lt;c3&gt;Int8&lt;/c3&gt;インスタンスとして表すには大きすぎます、それで２番目の変換は、実行時エラーを引き起こして失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That way, Swift can handle memory management for you.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのように、スウィフトはあなたの代わりにメモリ管理をうまく取り扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That will ensure that &lt;c2&gt;is&lt;w3&gt;Known&lt;w4&gt;Uniquely&lt;w5&gt;Referenced(_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; only returns &lt;c6&gt;true&lt;/c6&gt; when there is really one accessor, or when there is a race condition, which is already undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは&lt;c2&gt;is&lt;w3&gt;Known&lt;w4&gt;Uniquely&lt;w5&gt;Referenced(_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;が本当に１つのアクセッサしかない時に、またはすでに未定義挙動であるところの競合状態の時に&lt;c6&gt;true&lt;/c6&gt;を返すだけであるのを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;a0&gt;IEEE 754 specification&lt;/a0&gt; defines a &lt;e1&gt;canonical&lt;/e1&gt;, or preferred, encoding of a floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;a0&gt;IEEE 754仕様&lt;/a0&gt;は、ある&lt;e1&gt;正準の&lt;/e1&gt;、または推奨の、浮動小数点値のエンコーディングを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;&amp;&lt;&lt;=&lt;/c0&gt; operator performs a &lt;e1&gt;masking shift&lt;/e1&gt;, where the value used as &lt;c2&gt;rhs&lt;/c2&gt; is masked to produce a value in the range &lt;c3&gt;0..&lt;lhs&lt;w4&gt;.bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&amp;&lt;&lt;=&lt;/c0&gt;演算子は、&lt;e1&gt;マスクするシフト&lt;/e1&gt;を実行します、そこにおいて&lt;c2&gt;rhs&lt;/c2&gt;として使われる値はマスクされることで範囲&lt;c3&gt;0..&lt;lhs&lt;w4&gt;.bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;の中の値を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;&amp;&gt;&gt;=&lt;/c0&gt; operator performs a &lt;e1&gt;masking shift&lt;/e1&gt;, where the value passed as &lt;c2&gt;rhs&lt;/c2&gt; is masked to produce a value in the range &lt;c3&gt;0..&lt;lhs&lt;w4&gt;.bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&amp;&gt;&gt;=&lt;/c0&gt;演算子は、&lt;e1&gt;マスクするシフト&lt;/e1&gt;を実行します、そこにおいて&lt;c2&gt;rhs&lt;/c2&gt;として渡される値はマスクされることで範囲&lt;c3&gt;0..&lt;lhs&lt;w4&gt;.bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;の中の値を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;*&lt;/c0&gt; operator implements the multiplication operation defined by the &lt;a1&gt;IEEE 754 specification&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;*&lt;/c0&gt;演算子は、&lt;a1&gt;IEEE 754 仕様&lt;/a1&gt;によって定義される乗算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;+&lt;/c0&gt; operator implements the addition operation defined by the &lt;a1&gt;IEEE 754 specification&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;+&lt;/c0&gt;演算子は、&lt;a1&gt;IEEE 754 仕様&lt;/a1&gt;によって定義される加算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;-&lt;/c0&gt; operator implements the subtraction operation defined by the &lt;a1&gt;IEEE 754 specification&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-&lt;/c0&gt;演算子は、&lt;a1&gt;IEEE 754 仕様&lt;/a1&gt;によって定義される減算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;/&lt;/c0&gt; operator implements the division operation defined by the &lt;a1&gt;IEEE 754 specification&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;/&lt;/c0&gt;演算子は、&lt;a1&gt;IEEE 754 仕様&lt;/a1&gt;によって定義される除算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;&lt;&lt;&lt;/c0&gt; operator performs a &lt;e1&gt;smart shift&lt;/e1&gt;, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;&lt;&lt;/c0&gt;演算子は、ある&lt;e1&gt;賢いシフト&lt;/e1&gt;を実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;==&lt;/c0&gt; comparison and the &lt;c1&gt;contains(_:)&lt;/c1&gt; method call in the following example depend on strings and integers being equatable:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;==&lt;/c0&gt;比較と&lt;c1&gt;contains(_:)&lt;/c1&gt;メソッド呼び出しは以下の例において、文字列と整数がequatableであることに依存します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;&gt;&gt;&lt;/c0&gt; operator performs a &lt;e1&gt;smart shift&lt;/e1&gt;, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&gt;&gt;&lt;/c0&gt;演算子は、ある&lt;e1&gt;賢いシフト&lt;/e1&gt;を実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;&gt;&gt;=&lt;/c0&gt; operator performs a &lt;e1&gt;smart shift&lt;/e1&gt;, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&gt;&gt;=&lt;/c0&gt;演算子は、ある&lt;e1&gt;賢いシフト&lt;/e1&gt;を実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Actor&lt;/c0&gt; protocol generalizes over all actor types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Actor&lt;/c0&gt;プロトコルは、アクター型を端から端まで一般化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Additive&lt;w1&gt;Arithmetic&lt;/w1&gt;&lt;/c0&gt; protocol provides a suitable basis for additive arithmetic on scalar values, such as integers and floating-point numbers, or vectors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Additive&lt;w1&gt;Arithmetic&lt;/w1&gt;&lt;/c0&gt;プロトコルは、例えば整数および浮動小数点数、またはベクターなど、スカラー値に関する加算算術にふさわしい基礎を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Any&lt;w1&gt;Hashable&lt;/w1&gt;&lt;/c0&gt; type forwards equality comparisons and hashing operations to an underlying hashable value, hiding the type of the wrapped value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Hashable&lt;/w1&gt;&lt;/c0&gt;型は、さまざまな同等性比較およびハッシュ演算をある基盤をなすハッシュ可能値に転送して、ラップされた値の型を隠しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Array&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt; type makes it fast and efficient for you to perform operations on sections of a larger array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Array&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt;型は、ある大きな配列の各部分上で演算を実行することをあなたの代わりにより速くより効率的にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Async&lt;w1&gt;Iterator&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; defines the type returned by the &lt;c3&gt;make&lt;w4&gt;Async&lt;w5&gt;Iterator()&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; method of the &lt;c6&gt;Async&lt;w7&gt;Sequence&lt;/w7&gt;&lt;/c6&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Async&lt;w1&gt;Iterator&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、&lt;c6&gt;Async&lt;w7&gt;Sequence&lt;/w7&gt;&lt;/c6&gt;プロトコルの&lt;c3&gt;make&lt;w4&gt;Async&lt;w5&gt;Iterator()&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;メソッドによって返される型を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Binary&lt;w1&gt;Floating&lt;w2&gt;Point&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol extends the &lt;c3&gt;Floating&lt;w4&gt;Point&lt;/w4&gt;&lt;/c3&gt; protocol with operations specific to floating-point binary types, as defined by the &lt;a5&gt;IEEE 754 specification&lt;/a5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Binary&lt;w1&gt;Floating&lt;w2&gt;Point&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルは、&lt;c3&gt;Floating&lt;w4&gt;Point&lt;/w4&gt;&lt;/c3&gt;プロトコルを、&lt;a5&gt;IEEE 754仕様&lt;/a5&gt;で定義されるとおりに、浮動小数点バイナリ型に特有の演算で拡張します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; protocol is the basis for all the integer types provided by the standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;プロトコルは、標準ライブラリによって提供される全ての整数型の土台です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Character&lt;/c0&gt; type represents a character made up of one or more Unicode scalar values, grouped by a Unicode boundary algorithm.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Character&lt;/c0&gt;型は、あるユニコード境界アルゴリズムによって一群にされる、ひとつ以上のユニコードスカラー値から成り立っている１つの文字を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Collection&lt;/c0&gt; protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Collection&lt;/c0&gt;プロトコルは、多くの演算に対して省略時の実装を宣言および提供していて、それは要素がそれらの添え字によってアクセス可能になっているのを当てにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;Two&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; structure is a fixed-size collection that always holds two elements of a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この&lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;Two&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;構造体は固定サイズのコレクションです、それは常にある決まった型の２つの要素を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Comparable&lt;/c0&gt; protocol is used for types that have an inherent order, such as numbers and strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルは、本来備わっている順番を持つ型、例えば数や文字列などで使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Contiguous&lt;w1&gt;Array&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;Array&lt;w3&gt;Slice&lt;/w3&gt;&lt;/c2&gt; types are not bridged; instances of those types always have a contiguous block of memory as their storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Contiguous&lt;w1&gt;Array&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;Array&lt;w3&gt;Slice&lt;/w3&gt;&lt;/c2&gt;型はブリッジされません；それらの型のインスタンスは常に隣接するメモリブロックをそれらのストレージとして持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Contiguous&lt;w1&gt;Array&lt;/w1&gt;&lt;/c0&gt; type is a specialized array that always stores its elements in a contiguous region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Contiguous&lt;w1&gt;Array&lt;/w1&gt;&lt;/c0&gt;は、それの要素がメモリの隣接領域に常に格納される特殊化された配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol adds binary bitwise operations, bit shifts, and overflow handling to the operations supported by the &lt;c3&gt;Binary&lt;w4&gt;Integer&lt;/w4&gt;&lt;/c3&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルは、バイナリビット単位演算子、ビットシフト、そしてオーバーフロー処理を、&lt;c3&gt;Binary&lt;w4&gt;Integer&lt;/w4&gt;&lt;/c3&gt;プロトコルによってサポートされる演算に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; protocol declares common arithmetic operations, so you can write functions and algorithms that work on any floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;プロトコルは通常の算術演算子を宣言します、それであなたは何らかの浮動小数点型上で働く関数およびアルゴリズムを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Indexing&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt; type is the default iterator for any collection that doesn’t declare its own.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Indexing&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt;型は、それ独自のものを宣言しないあらゆるコレクションに対する省略時のイテレータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;NO&lt;/c0&gt; macro from Objective-C is bridged to Swift as an &lt;a1&gt;&lt;c2&gt;Obj&lt;w3&gt;CBool&lt;/w3&gt;&lt;/c2&gt;&lt;/a1&gt; value of &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cからの&lt;c0&gt;NO&lt;/c0&gt;マクロは、&lt;c4&gt;false&lt;/c4&gt;の&lt;a1&gt;&lt;c2&gt;Obj&lt;w3&gt;CBool&lt;/w3&gt;&lt;/c2&gt;&lt;/a1&gt;値としてSwiftにブリッジされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Player&lt;/c0&gt; type is a class, so it doesn't qualify for automatic synthesis of the &lt;c1&gt;Equatable&lt;/c1&gt; or &lt;c2&gt;Hashable&lt;/c2&gt; requirements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Player&lt;/c0&gt;型はクラスです、なのでそれは&lt;c1&gt;Equatable&lt;/c1&gt;または&lt;c2&gt;Hashable&lt;/c2&gt;要件の自動的な合成の基準を満たしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Set&lt;/c0&gt; and &lt;c1&gt;Array&lt;/c1&gt; types each handle array literals in their own way to create new instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Set&lt;/c0&gt;と&lt;c1&gt;Array&lt;/c1&gt;型は、それぞれ配列リテラルをそれら独自の方法で取り扱って、新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Street&lt;w1&gt;Address&lt;/w1&gt;&lt;/c0&gt; type now conforms to &lt;c2&gt;Equatable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Street&lt;w1&gt;Address&lt;/w1&gt;&lt;/c0&gt;型は、今や&lt;c2&gt;Equatable&lt;/c2&gt;に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;String&lt;/c0&gt; and &lt;c1&gt;Static&lt;w2&gt;String&lt;/w2&gt;&lt;/c1&gt; types conform to the &lt;c3&gt;Expressible&lt;w4&gt;By&lt;w5&gt;String&lt;w6&gt;Literal&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;/c0&gt;と&lt;c1&gt;Static&lt;w2&gt;String&lt;/w2&gt;&lt;/c1&gt;型は、&lt;c3&gt;Expressible&lt;w4&gt;By&lt;w5&gt;String&lt;w6&gt;Literal&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;String&lt;/c0&gt;, &lt;c1&gt;Static&lt;w2&gt;String&lt;/w2&gt;&lt;/c1&gt;, &lt;c3&gt;Character&lt;/c3&gt;, and &lt;c4&gt;Unicode&lt;w5&gt;.Scalar&lt;/w5&gt;&lt;/c4&gt; types all conform to the &lt;c6&gt;Expressible&lt;w7&gt;By&lt;w8&gt;Unicode&lt;w9&gt;Scalar&lt;w10&gt;Literal&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;/c0&gt;、&lt;c1&gt;Static&lt;w2&gt;String&lt;/w2&gt;&lt;/c1&gt;、&lt;c3&gt;Character&lt;/c3&gt;、そして&lt;c4&gt;Unicode&lt;w5&gt;.Scalar&lt;/w5&gt;&lt;/c4&gt;型は、すべて&lt;c6&gt;Expressible&lt;w7&gt;By&lt;w8&gt;Unicode&lt;w9&gt;Scalar&lt;w10&gt;Literal&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;String&lt;/c0&gt;, &lt;c1&gt;Static&lt;w2&gt;String&lt;/w2&gt;&lt;/c1&gt;, and &lt;c3&gt;Character&lt;/c3&gt; types conform to the &lt;c4&gt;Expressible&lt;w5&gt;By&lt;w6&gt;Extended&lt;w7&gt;Grapheme&lt;w8&gt;Cluster&lt;w9&gt;Literal&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;/c0&gt;、&lt;c1&gt;Static&lt;w2&gt;String&lt;/w2&gt;&lt;/c1&gt;、そして&lt;c3&gt;Character&lt;/c3&gt;型は、&lt;c4&gt;Expressible&lt;w5&gt;By&lt;w6&gt;Extended&lt;w7&gt;Grapheme&lt;w8&gt;Cluster&lt;w9&gt;Literal&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;String&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; of an interpolation type must match the &lt;c3&gt;String&lt;w4&gt;Literal&lt;w5&gt;Type&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補間型の&lt;c0&gt;String&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、準拠している型の&lt;c3&gt;String&lt;w4&gt;Literal&lt;w5&gt;Type&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;と合致しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Unmanaged&lt;Instance&gt;&lt;/c0&gt; structure provides two methods to convert an unmanaged object to a memory-managed object—&lt;c1&gt;take&lt;w2&gt;Unretained&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and &lt;c4&gt;take&lt;w5&gt;Retained&lt;w6&gt;Value()&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unmanaged&lt;Instance&gt;&lt;/c0&gt;構造体は、２つのメソッドを、管理されないオブジェクトをメモリ管理されたオブジェクトに変換するために提供します ― &lt;c1&gt;take&lt;w2&gt;Unretained&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;と&lt;c4&gt;take&lt;w5&gt;Retained&lt;w6&gt;Value()&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Words&lt;/c0&gt; type must conform to the &lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; protocol with an &lt;c4&gt;Element&lt;/c4&gt; type of &lt;c5&gt;UInt&lt;/c5&gt; and &lt;c6&gt;Index&lt;/c6&gt; type of &lt;c7&gt;Int&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Words&lt;/c0&gt;型は、&lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロトコルに、&lt;c5&gt;UInt&lt;/c5&gt;の&lt;c4&gt;Element&lt;/c4&gt;型そして&lt;c7&gt;Int&lt;/c7&gt;の&lt;c6&gt;Index&lt;/c6&gt;型を使って準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;base&lt;/c0&gt; property can be cast back to its original type using one of the type casting operators (&lt;c1&gt;as?&lt;/c1&gt;, &lt;c2&gt;as!&lt;/c2&gt;, or &lt;c3&gt;as&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;base&lt;/c0&gt;プロパティは、それの元の型へキャストされて戻されることが型キャスト演算子（&lt;c1&gt;as?&lt;/c1&gt;、&lt;c2&gt;as!&lt;/c2&gt;、または&lt;c3&gt;as&lt;/c3&gt;）を使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;binary&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt; implementation uses the static &lt;c2&gt;bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/c2&gt; property and the right shift operator (&lt;c4&gt;&gt;&gt;&lt;/c4&gt;), both of which are available to any type that conforms to the &lt;c5&gt;Fixed&lt;w6&gt;Width&lt;w7&gt;Integer&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;binary&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt;実装は、静的&lt;c2&gt;bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/c2&gt;プロパティと右シフト演算子（&lt;c4&gt;&gt;&gt;&lt;/c4&gt;）を使います、それらの両方とも&lt;c5&gt;Fixed&lt;w6&gt;Width&lt;w7&gt;Integer&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;プロトコルに準拠するあらゆる型で使用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;exponent&lt;/c0&gt; property has the following edge cases:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;exponent&lt;/c0&gt;プロパティは、次の境界事例を持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;first&lt;w1&gt;Space&lt;/w1&gt;&lt;/c0&gt; constant is an index into the &lt;c2&gt;text&lt;/c2&gt; string—the position of the first space in the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;first&lt;w1&gt;Space&lt;/w1&gt;&lt;/c0&gt;定数は、&lt;c2&gt;text&lt;/c2&gt;文字列へのあるインデックス — その文字列の中の最初の空白の位置、です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;get&lt;w1&gt;Default&lt;w2&gt;Value(_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function uses optional chaining to safely call the implicitly unwrapped class method on &lt;c3&gt;c&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;get&lt;w1&gt;Default&lt;w2&gt;Value(_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数は、オプショナル連鎖を使って、暗黙的にアンラップされるクラスメソッドを&lt;c3&gt;c&lt;/c3&gt;上で安全に呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;hash(into:)&lt;/c0&gt; method in this example feeds the grid point’s &lt;c1&gt;x&lt;/c1&gt; and &lt;c2&gt;y&lt;/c2&gt; properties into the provided hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;hash(into:)&lt;/c0&gt;メソッドはこの例において、格子点のもつ&lt;c1&gt;x&lt;/c1&gt;と&lt;c2&gt;y&lt;/c2&gt;プロパティをその提供されたhasherへと与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;high&lt;/c0&gt; component of the value carries the sign, if the type is signed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の&lt;c0&gt;high&lt;/c0&gt;構成部分は符号を運びます、その型が符号付きならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;index(after:)&lt;/c0&gt; method for advancing an index into your collection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるインデックスをあなたのコレクションにおいて前に進めるための&lt;c0&gt;index(after:)&lt;/c0&gt;メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;invalid&lt;w1&gt;Input&lt;/w1&gt;&lt;/c0&gt; case includes the invalid character as an associated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;invalid&lt;w1&gt;Input&lt;/w1&gt;&lt;/c0&gt;ケース節は、無効な文字を関連値として含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Equal(to:)&lt;/w1&gt;&lt;/c0&gt; method implements the equality predicate defined by the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Equal(to:)&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;によって定義される同等性述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Known&lt;w2&gt;Uniquely&lt;w3&gt;Referenced(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function is useful for implementing the copy-on-write optimization for the deep storage of value types:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Known&lt;w2&gt;Uniquely&lt;w3&gt;Referenced(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数は、値型の深い貯蔵に対してコピーオンライト最適化を実装するのに便利です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Less(than:)&lt;/w1&gt;&lt;/c0&gt; method implements the less-than predicate defined by the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Less(than:)&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;によって定義される「より少ない」述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Less&lt;w2&gt;Than&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To(_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method implements the less-than-or-equal predicate defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Less&lt;w2&gt;Than&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To(_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;によって定義される「より少ないか等しい」述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Totally&lt;w2&gt;Ordered(below&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method implements the total order relation as defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Totally&lt;w2&gt;Ordered(below&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドは、全順序関係を&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;によって定義されるとおりに実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Zero&lt;/w1&gt;&lt;/c0&gt; property of a value &lt;c2&gt;x&lt;/c2&gt; is &lt;c3&gt;true&lt;/c3&gt; when &lt;c4&gt;x&lt;/c4&gt; represents either &lt;c5&gt;-0&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt; or &lt;c7&gt;+0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値&lt;c2&gt;x&lt;/c2&gt;の&lt;c0&gt;is&lt;w1&gt;Zero&lt;/w1&gt;&lt;/c0&gt;プロパティが&lt;c3&gt;true&lt;/c3&gt;であるのは、&lt;c4&gt;x&lt;/c4&gt;が&lt;c5&gt;-0&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt;または&lt;c7&gt;+0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;のどちらかを表す場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;joined&lt;/c0&gt; method is always lazy, but does not implicitly confer laziness on algorithms applied to its result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;joined&lt;/c0&gt;メソッドは常に遅延です、しかしそれの結果に適用されるアルゴリズム上に、遅延性を暗黙的に授けられません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;maximum&lt;/c0&gt; method implements the &lt;c1&gt;max&lt;w2&gt;Num&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a3&gt;IEEE 754 specification&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;maximum&lt;/c0&gt;メソッドは、&lt;a3&gt;IEEE 754仕様&lt;/a3&gt;によって定義される&lt;c1&gt;max&lt;w2&gt;Num&lt;/w2&gt;&lt;/c1&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;maximum&lt;w1&gt;Magnitude&lt;/w1&gt;&lt;/c0&gt; method implements the &lt;c2&gt;max&lt;w3&gt;Num&lt;w4&gt;Mag&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; operation defined by the &lt;a5&gt;IEEE 754 specification&lt;/a5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;maximum&lt;w1&gt;Magnitude&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;a5&gt;IEEE 754仕様&lt;/a5&gt;によって定義される&lt;c2&gt;max&lt;w3&gt;Num&lt;w4&gt;Mag&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;minimum&lt;/c0&gt; method implements the &lt;c1&gt;min&lt;w2&gt;Num&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a3&gt;IEEE 754 specification&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;minimum&lt;/c0&gt;メソッドは&lt;c1&gt;min&lt;w2&gt;Num&lt;/w2&gt;&lt;/c1&gt;演算を実装します、それは&lt;a3&gt;IEEE 754仕様&lt;/a3&gt;によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;minimum&lt;w1&gt;Magnitude&lt;/w1&gt;&lt;/c0&gt; method implements the &lt;c2&gt;min&lt;w3&gt;Num&lt;w4&gt;Mag&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; operation defined by the &lt;a5&gt;IEEE 754 specification&lt;/a5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;minimum&lt;w1&gt;Magnitude&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;a5&gt;IEEE 754仕様&lt;/a5&gt;によって定義される&lt;c2&gt;min&lt;w3&gt;Num&lt;w4&gt;Mag&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure executes sequentially with an accumulating value initialized to &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャは、&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;へと初期化された蓄積値とそのシーケンスの各要素を使って連続して遂行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure is called sequentially with an accumulating value initialized to &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャは、&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;へと初期化された蓄積値とシーケンスの各要素とともに連続して呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure is called with &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;—&lt;c5&gt;0&lt;/c5&gt; in this case—and the first element of &lt;c6&gt;numbers&lt;/c6&gt;, returning the sum: &lt;c7&gt;1&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャが、&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;—この場合では&lt;c5&gt;0&lt;/c5&gt;—そして&lt;c6&gt;numbers&lt;/c6&gt;の最初の要素とともに呼び出されて、その合計：&lt;c7&gt;1&lt;/c7&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure receives &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; the first time the closure executes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャは、&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;を、そのクロージャが遂行される最初の時に受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure receives &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; the first time the closure runs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;を、クロージャが動作する最初の時に受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;numbers&lt;/c0&gt; array is now arranged in two partitions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;numbers&lt;/c0&gt;配列は今や２つの区分に整頓されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;offset&lt;/c0&gt; value is the offset of the element to be removed in the original state of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;offset&lt;/c0&gt;値は、コレクションの元の状態での取り除かれることになる要素のオフセットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;offset&lt;/c0&gt; value is the offset of the inserted element in the final state of the collection after the difference is fully applied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;offset&lt;/c0&gt;値は、差異が完全に適用される後のコレクションの最終的状態でのその挿入された要素のオフセットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;perform(_:&lt;w1&gt;simultaneously&lt;w2&gt;With:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function ends with a call to the &lt;c3&gt;sync(flags:&lt;w4&gt;execute:)&lt;/w4&gt;&lt;/c3&gt; method using the &lt;c5&gt;.barrier&lt;/c5&gt; flag, which forces the function to wait until both closures have completed running before returning.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;perform(_:&lt;w1&gt;simultaneously&lt;w2&gt;With:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数は、&lt;c3&gt;sync(flags:&lt;w4&gt;execute:)&lt;/w4&gt;&lt;/c3&gt;メソッドへの &lt;c5&gt;.barrier&lt;/c5&gt;フラグを使った呼び出しで終わります、それはその関数に返る前に両方のクロージャが実行を完了し終わるまで待つことを強要します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;r1&lt;/c0&gt; range is bounded on the lower end by &lt;c1&gt;0&lt;/c1&gt; because that is the starting index of the &lt;c2&gt;numbers&lt;/c2&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;r1&lt;/c0&gt;範囲は、&lt;c1&gt;0&lt;/c1&gt;によって下端に境界をつけられます、なぜならそれが&lt;c2&gt;numbers&lt;/c2&gt;配列の開始インデックスだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;random()&lt;/c0&gt; static method chooses a random value from a continuous uniform distribution in &lt;c1&gt;range&lt;/c1&gt;, and then converts that value to the nearest representable value in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;random()&lt;/c0&gt;静的メソッドは無作為の値を&lt;c1&gt;range&lt;/c1&gt;の中の連続一様分布から選びます、それからその値をその型で表現可能な最も近い値に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;random(in:&lt;w1&gt;using:)&lt;/w1&gt;&lt;/c0&gt; static method chooses a random value from a continuous uniform distribution in &lt;c2&gt;range&lt;/c2&gt;, and then converts that value to the nearest representable value in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;random(in:&lt;w1&gt;using:)&lt;/w1&gt;&lt;/c0&gt;静的メソッドは無作為の値を&lt;c2&gt;range&lt;/c2&gt;の中の連続一様分布から選びます、それからその値をその型で表現可能な最も近い値に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;response&lt;w1&gt;Messages&lt;/w1&gt;&lt;/c0&gt; variable is inferred to have type &lt;c2&gt;[Int: String]&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;response&lt;w1&gt;Messages&lt;/w1&gt;&lt;/c0&gt;変数は、型&lt;c2&gt;[Int: String]&lt;/c2&gt;を持つと推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;round()&lt;/c0&gt; method uses the &lt;c1&gt;.to&lt;w2&gt;Nearest&lt;w3&gt;Or&lt;w4&gt;Away&lt;w5&gt;From&lt;w6&gt;Zero&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; rounding rule, where a value halfway between two integral values is rounded to the one with greater magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;round()&lt;/c0&gt;メソッドは&lt;c1&gt;.to&lt;w2&gt;Nearest&lt;w3&gt;Or&lt;w4&gt;Away&lt;w5&gt;From&lt;w6&gt;Zero&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;丸め規則を使います、そこでは２つの整数値の間の中ほどの値はより大きい規模を持つものへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;rounded()&lt;/c0&gt; method uses the &lt;c1&gt;.to&lt;w2&gt;Nearest&lt;w3&gt;Or&lt;w4&gt;Away&lt;w5&gt;From&lt;w6&gt;Zero&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; rounding rule, where a value halfway between two integral values is rounded to the one with greater magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rounded()&lt;/c0&gt;メソッドは&lt;c1&gt;.to&lt;w2&gt;Nearest&lt;w3&gt;Or&lt;w4&gt;Away&lt;w5&gt;From&lt;w6&gt;Zero&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;丸め規則を使います、そこでは２つの整数値の間の中ほどの値はより大きい規模を持つものへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;sign&lt;/c0&gt; property is &lt;c1&gt;.minus&lt;/c1&gt; if the value’s signbit is set, and &lt;c2&gt;.plus&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;sign&lt;/c0&gt;プロパティは、値のsignbitがセットされるならば&lt;c1&gt;.minus&lt;/c1&gt;です、そしてそうでないなら&lt;c2&gt;.plus&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;significand&lt;w1&gt;Bit&lt;w2&gt;Pattern&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; property does not include the leading integral bit of the significand, even for types like &lt;c3&gt;Float80&lt;/c3&gt; that store it explicitly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;significand&lt;w1&gt;Bit&lt;w2&gt;Pattern&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロパティは、仮数の先頭整数ビットを含みません、それを明示的に格納する&lt;c3&gt;Float80&lt;/c3&gt;のような型に対してさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;sink&lt;/c0&gt; closure is called with each resulting UTF-32 code unit as the function iterates over its input.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;sink&lt;/c0&gt;クロージャは、結果UTF-32コードユニットそれぞれで、それのinputに反復していく関数として呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt; properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;プロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;sum()&lt;/c0&gt; method is now available on any sequence with values that conform to &lt;c1&gt;Additive&lt;w2&gt;Arithmetic&lt;/w2&gt;&lt;/c1&gt;, whether it is an array of &lt;c3&gt;Double&lt;/c3&gt; or a range of &lt;c4&gt;Int&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;sum()&lt;/c0&gt;メソッドは、今では&lt;c1&gt;Additive&lt;w2&gt;Arithmetic&lt;/w2&gt;&lt;/c1&gt;に準拠する値をもつあらゆるシーケンス上で利用可能です、それが&lt;c3&gt;Double&lt;/c3&gt;からなる配列であろうと &lt;c4&gt;Int&lt;/c4&gt;からなるある範囲であろうと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; constant corresponds to the C macros &lt;c3&gt;FLT&lt;w4&gt;_EPSILON&lt;/w4&gt;&lt;/c3&gt;, &lt;c5&gt;DBL&lt;w6&gt;_EPSILON&lt;/w6&gt;&lt;/c5&gt;, and others with a similar purpose.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;定数は、Cマクロ&lt;c3&gt;FLT&lt;w4&gt;_EPSILON&lt;/w4&gt;&lt;/c3&gt;、&lt;c5&gt;DBL&lt;w6&gt;_EPSILON&lt;/w6&gt;&lt;/c5&gt;、そして類似した目的を持つ他のものに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure is called sequentially with a mutable accumulating value initialized to &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャは、&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;へと初期化された可変の蓄積値とシーケンスの各要素とともに連続して呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure is called with the initial accumulating value—&lt;c3&gt;[:]&lt;/c3&gt; in this case—and the first character of &lt;c4&gt;letters&lt;/c4&gt;, modifying the accumulating value by setting &lt;c5&gt;1&lt;/c5&gt; for the key &lt;c6&gt;"a"&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャが、初期蓄積値—この場合では&lt;c3&gt;[:]&lt;/c3&gt;—そして&lt;c4&gt;letters&lt;/c4&gt;の最初の文字とともに呼び出されて、&lt;c5&gt;1&lt;/c5&gt;をキー&lt;c6&gt;"a"&lt;/c6&gt;に対して設定することで蓄積値を修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;with&lt;w1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer(to:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function is useful for calling Objective-C APIs that take in/out parameters (and default-constructible out parameters) by pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;with&lt;w1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer(to:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数は、ポインタによって「in/out」パラメータ（そして何もしなくとも構築可能な「out」パラメーター）を取るObjective-C APIを呼ぶのに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;with&lt;w1&gt;Unsafe&lt;w2&gt;Pointer(to:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function is useful for calling Objective-C APIs that take in parameters by const pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;with&lt;w1&gt;Unsafe&lt;w2&gt;Pointer(to:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数は、constポインタによってパラメータを取り入れるObjective-C APIを呼び出すのに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c11&gt;flat&lt;w12&gt;Map(_:)&lt;/w12&gt;&lt;/c11&gt; method “flattens” the resulting sequence-of-sequences into a single &lt;c13&gt;Async&lt;w14&gt;Sequence&lt;/w14&gt;&lt;/c13&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c11&gt;flat&lt;w12&gt;Map(_:)&lt;/w12&gt;&lt;/c11&gt;メソッドは、結果のシーケンスのシーケンスを単一の&lt;c13&gt;Async&lt;w14&gt;Sequence&lt;/w14&gt;&lt;/c13&gt;へと “平坦にします”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c12&gt;with&lt;w13&gt;Va&lt;w14&gt;List(_:&lt;w15&gt;_:)&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt; function takes an array of &lt;a16&gt;&lt;c17&gt;CVar&lt;w18&gt;Arg&lt;/w18&gt;&lt;/c17&gt;&lt;/a16&gt; values and provides a &lt;a19&gt;&lt;c20&gt;CVa&lt;w21&gt;List&lt;w22&gt;Pointer&lt;/w22&gt;&lt;/w21&gt;&lt;/c20&gt;&lt;/a19&gt; value within the body of a closure parameter, whereas the &lt;c23&gt;get&lt;w24&gt;Va&lt;w25&gt;List(_:)&lt;/w25&gt;&lt;/w24&gt;&lt;/c23&gt; function returns this value directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c12&gt;with&lt;w13&gt;Va&lt;w14&gt;List(_:&lt;w15&gt;_:)&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt;関数は、&lt;a16&gt;&lt;c17&gt;CVar&lt;w18&gt;Arg&lt;/w18&gt;&lt;/c17&gt;&lt;/a16&gt;値からなるひとつの配列をとって、&lt;a19&gt;&lt;c20&gt;CVa&lt;w21&gt;List&lt;w22&gt;Pointer&lt;/w22&gt;&lt;/w21&gt;&lt;/c20&gt;&lt;/a19&gt;値をクロージャパラメータの本体内で提供します、一方で&lt;c23&gt;get&lt;w24&gt;Va&lt;w25&gt;List(_:)&lt;/w25&gt;&lt;/w24&gt;&lt;/c23&gt;関数はこの値を直接に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;CFType&lt;w2&gt;Ref&lt;/w2&gt;&lt;/c1&gt; type completely remaps to the &lt;c3&gt;Any&lt;w4&gt;Object&lt;/w4&gt;&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;CFType&lt;w2&gt;Ref&lt;/w2&gt;&lt;/c1&gt;型は、&lt;c3&gt;Any&lt;w4&gt;Object&lt;/w4&gt;&lt;/c3&gt;型に完全にリマップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;Hashable&lt;/c1&gt; protocol inherits from the &lt;c2&gt;Equatable&lt;/c2&gt; protocol, so you must also satisfy that protocol’s requirements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Hashable&lt;/c1&gt;プロトコルは、&lt;c2&gt;Equatable&lt;/c2&gt;プロトコルから継承します、それであなたは同様にそのプロトコルのもつ要件も満たさなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;binade&lt;/c1&gt; property is a member of the same binade as this value, but with a unit significand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;binade&lt;/c1&gt;プロパティは、この値と同じbinadeに属するあるメンバです、しかしある単位仮数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;id&lt;/c1&gt; type is instead imported by Swift as the &lt;c2&gt;Any&lt;/c2&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;id&lt;/c1&gt;型は、代わりにSwiftによって&lt;c2&gt;Any&lt;/c2&gt;型としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;Array&lt;/c2&gt; type’s &lt;c3&gt;append(_:)&lt;/c3&gt; and &lt;c4&gt;append(contents&lt;w5&gt;Of:)&lt;/w5&gt;&lt;/c4&gt; methods take care of this detail for you, but &lt;c6&gt;reserve&lt;w7&gt;Capacity(_:)&lt;/w7&gt;&lt;/c6&gt; allocates only as much space as you tell it to (padded to a round value), and no more.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Array&lt;/c2&gt;型のもつ&lt;c3&gt;append(_:)&lt;/c3&gt;と&lt;c4&gt;append(contents&lt;w5&gt;Of:)&lt;/w5&gt;&lt;/c4&gt;メソッドは、この詳細をあなたの代わりに面倒を見ます、しかし&lt;c6&gt;reserve&lt;w7&gt;Capacity(_:)&lt;/w7&gt;&lt;/c6&gt;はあなたがそれに伝える（ある丸め値に詰め込まれた）のと同じ程度の空間だけをアロケートして、それ以上は何もしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;Binary&lt;w3&gt;Integer&lt;/w3&gt;&lt;/c2&gt; protocol provides initializers for four different kinds of conversion.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Binary&lt;w3&gt;Integer&lt;/w3&gt;&lt;/c2&gt;プロトコルは、イニシャライザを４つの異なる種類の変換に対して提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;Compass&lt;w3&gt;Direction&lt;/w3&gt;&lt;/c2&gt; example above demonstrates this automatic implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上の&lt;c2&gt;Compass&lt;w3&gt;Direction&lt;/w3&gt;&lt;/c2&gt;例は、この自動実装を実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;form&lt;w3&gt;Remainder(dividing&lt;w4&gt;By:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; method is always exact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;form&lt;w3&gt;Remainder(dividing&lt;w4&gt;By:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;form&lt;w3&gt;Truncating&lt;w4&gt;Remainder(dividing&lt;w5&gt;By:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; method is always exact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;form&lt;w3&gt;Truncating&lt;w4&gt;Remainder(dividing&lt;w5&gt;By:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;remainder(dividing&lt;w3&gt;By:)&lt;/w3&gt;&lt;/c2&gt; method is always exact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;remainder(dividing&lt;w3&gt;By:)&lt;/w3&gt;&lt;/c2&gt;メソッドは常に厳密に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;remove&lt;w3&gt;Last()&lt;/w3&gt;&lt;/c2&gt; method must be used only on a nonempty collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;remove&lt;w3&gt;Last()&lt;/w3&gt;&lt;/c2&gt;メソッドは、空でないコレクションでのみ使われるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;truncating&lt;w3&gt;Remainder(dividing&lt;w4&gt;By:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; method is always exact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;truncating&lt;w3&gt;Remainder(dividing&lt;w4&gt;By:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c3&gt;..&lt;&lt;/c3&gt; operator creates a range that doesn’t include the upper bound, so it’s always safe to use with &lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;..&lt;&lt;/c3&gt;演算子は上方の境界を含まないある範囲を作成します、それでそれは常に&lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;と使うのに安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c3&gt;==&lt;/c3&gt; operator is a requirement of the &lt;c4&gt;Equatable&lt;/c4&gt; protocol, which &lt;c5&gt;Comparable&lt;/c5&gt; extends—see that protocol’s documentation for more information about equality in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;==&lt;/c3&gt;演算子は、&lt;c5&gt;Comparable&lt;/c5&gt;が拡張する&lt;c4&gt;Equatable&lt;/c4&gt;プロトコルの要件です — そのプロトコルの文書をSwiftにおける同等性についてのさらなる情報のために見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c3&gt;Key&lt;/c3&gt; type of the dictionary is &lt;c4&gt;Int&lt;/c4&gt;, and the &lt;c5&gt;Value&lt;/c5&gt; type of the dictionary is &lt;c6&gt;String&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の&lt;c3&gt;Key&lt;/c3&gt;型は&lt;c4&gt;Int&lt;/c4&gt;です、そして辞書の&lt;c5&gt;Value&lt;/c5&gt;型は&lt;c6&gt;String&lt;/c6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c3&gt;NSError&lt;/c3&gt; parameter on an asynchronous throwing method must also be nullable, which indicates that the parameter is used only to communicate an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期スローメソッド上の&lt;c3&gt;NSError&lt;/c3&gt;パラメータは、同様にnull可能でなければなりません、それはそのパラメータがエラーとの通信にのみ使われることを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c3&gt;String(describing:)&lt;/c3&gt; initializer is the preferred way to convert an instance of &lt;e4&gt;any&lt;/e4&gt; type to a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;String(describing:)&lt;/c3&gt;イニシャライザは、&lt;e4&gt;あらゆる&lt;/e4&gt;型のインスタンスをある文字列へ変換する好ましい方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c3&gt;high&lt;/c3&gt; and &lt;c4&gt;low&lt;/c4&gt; properties of the &lt;c5&gt;result&lt;/c5&gt; value represent 2000 when concatenated to form a double-width integer; that is, using &lt;c6&gt;result&lt;w7&gt;.high&lt;/w7&gt;&lt;/c6&gt; as the high byte and &lt;c8&gt;result&lt;w9&gt;.low&lt;/w9&gt;&lt;/c8&gt; as the low byte of a &lt;c10&gt;UInt16&lt;/c10&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;result&lt;/c5&gt;値の&lt;c3&gt;high&lt;/c3&gt;および&lt;c4&gt;low&lt;/c4&gt;プロパティは、二倍幅整数に成形するために連結される時2000を表します；すなわち、&lt;c10&gt;UInt16&lt;/c10&gt;インスタンスの高バイトとして&lt;c6&gt;result&lt;w7&gt;.high&lt;/w7&gt;&lt;/c6&gt;をそして低バイトとして&lt;c8&gt;result&lt;w9&gt;.low&lt;/w9&gt;&lt;/c8&gt;を使って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;all&lt;w5&gt;Satisfy(_:)&lt;/w5&gt;&lt;/c4&gt; method checks to see whether all elements produced by the sequence are less than &lt;c6&gt;10&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;all&lt;w5&gt;Satisfy(_:)&lt;/w5&gt;&lt;/c4&gt;メソッドは、シーケンスによって生み出されたすべての要素が&lt;c6&gt;10&lt;/c6&gt;より小さいかどうか見るために調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;contains(_:)&lt;/c4&gt; method checks to see whether the sequence produces the value &lt;c5&gt;5&lt;/c5&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;contains(_:)&lt;/c4&gt;メソッドは、シーケンスが値&lt;c5&gt;5&lt;/c5&gt;を生み出すかどうか見るために調べます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;contains(where:)&lt;/c4&gt; method checks to see whether the sequence produces a value divisible by &lt;c5&gt;3&lt;/c5&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;contains(where:)&lt;/c4&gt;メソッドは、シーケンスが&lt;c5&gt;3&lt;/c5&gt;で割り切れる値を生み出すかどうか見るために調べます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;drop(while:)&lt;/c4&gt; method causes the modified sequence to ignore received values until it encounters one that is divisible by &lt;c5&gt;3&lt;/c5&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;drop(while:)&lt;/c4&gt;メソッドは、修正されたシーケンスが、それが&lt;c5&gt;3&lt;/c5&gt;によって割り切れるものに出くわすまで受け取った値を無視することを引き起こします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;drop&lt;w5&gt;First(_:)&lt;/w5&gt;&lt;/c4&gt; method causes the modified sequence to ignore the values &lt;c6&gt;0&lt;/c6&gt; through &lt;c7&gt;4&lt;/c7&gt;, and instead emit &lt;c8&gt;5&lt;/c8&gt; through &lt;c9&gt;10&lt;/c9&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;drop&lt;w5&gt;First(_:)&lt;/w5&gt;&lt;/c4&gt;メソッドは、その修正されたシーケンスに値&lt;c6&gt;0&lt;/c6&gt;から&lt;c7&gt;4&lt;/c7&gt;を無視させます、そして代わりに&lt;c8&gt;5&lt;/c8&gt;から&lt;c9&gt;10&lt;/c9&gt;を放出させます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;filter(_:)&lt;/c4&gt; method returns &lt;c5&gt;true&lt;/c5&gt; for even values and &lt;c6&gt;false&lt;/c6&gt; for odd values, thereby filtering out the odd values, but also throws an error for values divisible by 5:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;filter(_:)&lt;/c4&gt;メソッドは、&lt;c5&gt;true&lt;/c5&gt;を偶数値に対してそして&lt;c6&gt;false&lt;/c6&gt;を奇数値に対して返します、それによって奇数値を取り除いています、しかしまた５で割り切れる値に対してエラーをスローします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;filter(_:)&lt;/c4&gt; method returns &lt;c5&gt;true&lt;/c5&gt; for even values and &lt;c6&gt;false&lt;/c6&gt; for odd values, thereby filtering out the odd values:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;filter(_:)&lt;/c4&gt;メソッドは、&lt;c5&gt;true&lt;/c5&gt;を偶数値に対してそして&lt;c6&gt;false&lt;/c6&gt;を奇数値に対して返します、それによって奇数値を取り除いています：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;first(where:)&lt;/c4&gt; method returns the first member of the sequence that’s evenly divisible by both &lt;c5&gt;2&lt;/c5&gt; and &lt;c6&gt;3&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;first(where:)&lt;/c4&gt;メソッドは、&lt;c5&gt;2&lt;/c5&gt;と&lt;c6&gt;3&lt;/c6&gt;の両方で整然と割り切れるこのシーケンスの最初のメンバーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;high&lt;/c4&gt; and &lt;c5&gt;low&lt;/c5&gt; compnents of the &lt;c6&gt;result&lt;/c6&gt; value represent &lt;c7&gt;-1920&lt;/c7&gt; when concatenated to form a double-width integer; that is, using &lt;c8&gt;result&lt;w9&gt;.high&lt;/w9&gt;&lt;/c8&gt; as the high byte and &lt;c10&gt;result&lt;w11&gt;.low&lt;/w11&gt;&lt;/c10&gt; as the low byte of an &lt;c12&gt;Int16&lt;/c12&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;result&lt;/c4&gt;値の&lt;c5&gt;high&lt;/c5&gt;と&lt;c6&gt;low&lt;/c6&gt;構成要素は、２倍幅整数に成形するために連結される場合&lt;c7&gt;-1920&lt;/c7&gt;を表します；すなわち、&lt;c8&gt;result&lt;w9&gt;.high&lt;/w9&gt;&lt;/c8&gt;を高バイトとして&lt;c10&gt;result&lt;w11&gt;.low&lt;/w11&gt;&lt;/c10&gt;を低バイトとして&lt;c12&gt;Int16&lt;/c12&gt;インスタンスに使って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;max()&lt;/c4&gt; method returns the max value of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;max()&lt;/c4&gt;メソッドは、シーケンスの最大値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;min()&lt;/c4&gt; method returns the minimum value of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;min()&lt;/c4&gt;メソッドは、シーケンスの最小値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;prefix(_:)&lt;/c4&gt; method causes the modified sequence to pass through the first six values, then end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;prefix(_:)&lt;/c4&gt;メソッドは、その修正されたシーケンスに最初の６つの値をずっと渡させて、それから終わらせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;prefix(_:)&lt;/c4&gt; method causes the modified sequence to pass through values less than &lt;c5&gt;8&lt;/c5&gt;, but throws an error when it receives a value that’s divisible by &lt;c6&gt;5&lt;/c6&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;prefix(_:)&lt;/c4&gt;メソッドは、修正されたシーケンスが&lt;c5&gt;8&lt;/c5&gt;より少ない値それらを通過させる、しかしそれが&lt;c6&gt;5&lt;/c6&gt;で割り切れる値を受け取る時はエラーをスローするようにします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;prefix(while:)&lt;/c4&gt; method causes the modified sequence to pass along values so long as they aren’t divisible by &lt;c5&gt;2&lt;/c5&gt; and &lt;c6&gt;3&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;prefix(while:)&lt;/c4&gt;メソッドは、修正されたシーケンスが値それらを、それらが&lt;c5&gt;2&lt;/c5&gt;と&lt;c6&gt;3&lt;/c6&gt;によって割り切れない限り通過させるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;reduce(_:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/c4&gt; method sums the values received from the asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;reduce(_:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/c4&gt;メソッドは、非同期シーケンスから受け取った値それらを合計します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;e0&gt;exponent&lt;/e0&gt; of a floating-point value is the integer part of the logarithm of the value’s magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値の&lt;e0&gt;指数&lt;/e0&gt;は、値の規模の対数の整数部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;e1&gt;static type&lt;/e1&gt; of a value is the known, compile-time type of the value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の&lt;e1&gt;静的型&lt;/e1&gt;は、既知の、コンパイル時のその値の型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;e2&gt;dynamic type&lt;/e2&gt; of a value is the value’s actual type at run-time, which can be a subtype of its concrete type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の&lt;e2&gt;動的型&lt;/e2&gt;は、その値の実行時での実際の型です、それはそれの具象型の下位型であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;e3&gt;exponent bias&lt;/e3&gt; of a type &lt;c4&gt;F&lt;/c4&gt; can be calculated as the following, where &lt;c5&gt;**&lt;/c5&gt; is exponentiation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型&lt;c4&gt;F&lt;/c4&gt;の&lt;e3&gt;指数バイアス&lt;/e3&gt;は、以下のように計算されます、ここで&lt;c5&gt;**&lt;/c5&gt;は冪です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ASCII encoding value of this character, if it is an ASCII character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字のASCIIエンコーディング値、もしそれがASCIIならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ASCII representation of a number in the radix passed as &lt;c0&gt;radix&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;radix&lt;/c0&gt;として渡される基数におけるある数のASCII表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ASCII representation of a number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある数のASCII表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Boolean value to copy.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コピーされるブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Boolean value to negate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>否定するブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Boolean wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるデータ値の中のラップされるブール。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C &lt;c0&gt;bool&lt;/c0&gt; and &lt;c1&gt;Boolean&lt;/c1&gt; types and the Objective-C &lt;c2&gt;BOOL&lt;/c2&gt; type are all bridged into Swift as &lt;c3&gt;Bool&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cの&lt;c0&gt;bool&lt;/c0&gt;および&lt;c1&gt;Boolean&lt;/c1&gt;型とObjective-Cの&lt;c2&gt;BOOL&lt;/c2&gt;型は、すべてSwiftに&lt;c3&gt;Bool&lt;/c3&gt;としてブリッジされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘_Bool’ and C++ ‘bool’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cの「_Bool」およびC++の「bool」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘_Float16’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「_Float16」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘char’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cの「char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘double’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「double」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘float’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「float」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘int’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「int」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘long long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「long long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘short’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「short」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘signed char’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「signed char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned char’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned int’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned int」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned long long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned long long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned short’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned short」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C++ ‘wchar_t’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C++「wchar_t」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C++11 ‘char16_t’ type, which has UTF-16 encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C++11「char16_t」型、それはUTF-16エンコーディングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C++11 ‘char32_t’ type, which has UTF-32 encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C++11「char32_t」型、それはUTF-32エンコーディングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Cocoa delegation pattern doesn't require that delegates are instantiated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cocoa委任パターンは、委任先がインスタンス化されることを要求しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The IEEE 754 floating-point classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>IEEE 754浮動小数点の様々な部類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The NaN values in the &lt;c0&gt;temps&lt;w1&gt;Celsius&lt;/w1&gt;&lt;/c0&gt; array are propagated through the conversion and remain NaN in &lt;c2&gt;temps&lt;w3&gt;Fahrenheit&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;temps&lt;w1&gt;Celsius&lt;/w1&gt;&lt;/c0&gt;配列の中のNaN値は、変換を通して伝播されていき、&lt;c2&gt;temps&lt;w3&gt;Fahrenheit&lt;/w3&gt;&lt;/c2&gt;においてNaNのままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Objective-C declarations are automatically available from any Swift file within that target, with no import statements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C宣言は、自動的にあらゆるSwiftファイルからそのターゲット内部で、インポート文なしで利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sendable protocol indicates that value of the given type can be safely used in concurrent code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Sendableプロトコルは、与えられた型の値が並行性コードにおいて安全に使用できることを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Swift interfaces in the generated header include references to all of the Objective-C types used in them, so make sure to import the Objective-C headers for those types first.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生成されたヘッダの中のSwiftインタフェースそれらは、それらの中で使われるObjective-C型への全ての参照を含みます、それで最初にそれらの型に対するObjective-Cヘッダをインポートすることを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Swift standard library and Foundation use structures for types you use frequently, such as numbers, strings, arrays, and dictionaries.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリとFoundationは、あなたが頻繁に使う型、例えば数、文字列、配列、そして辞書などに対して構造体を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode encoding of &lt;c0&gt;input&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;input&lt;/c0&gt;のユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode scalar value to convert into a character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの文字へ変換するユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UnsafeSendable protocol indicates that value of the given type can be safely used in concurrent code, but disables some safety checking at the conformance site.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeSendableプロトコルは、与えられた型の値が並行性コードにおいて安全に使用できる、しかしいくつかの安全検査を適応場所で作動しなくすることを指し示します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The absolute value of &lt;c0&gt;x&lt;/c0&gt; must be representable in the same type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;の絶対値は、同じ型において表現可能である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The absolute value of &lt;c0&gt;x&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;の絶対値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The accessed slice uses the same indices for the same elements as the original collection uses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスされるスライス（切り取り）は、同じ要素に対して元のコレクションが使うのと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The accessed slice uses the same indices for the same elements as the original collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスされるスライス（切り取り）は、同じ要素に対して元のコレクションと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The addition operator (&lt;c0&gt;+&lt;/c0&gt;) calculates the sum of its two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算演算子（&lt;c0&gt;+&lt;/c0&gt;）は、それの２つの引数の合計を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The additive inverse of the argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この引数の加法の逆元。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The address passed as &lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt; must have the correct alignment for the pointer’s &lt;c2&gt;Pointee&lt;/c2&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt;として渡されるアドレスは、ポインタの持つ&lt;c2&gt;Pointee&lt;/c2&gt;型に対して整合状態でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to create random values may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為値を作成するために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to select a random element may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある無作為な要素を選択するために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to shuffle a collection may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションをシャッフルするために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to shuffle a sequence may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスをシャッフルするために使われるアルゴリズムは、将来のSwiftバージョンで変更するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The allowed formats for each of these representations is then as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの表現のそれぞれに対する許される形式はそれで以下になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The alpha-2 code for The United States is “US”, so its flag character is made up of the Unicode scalar values &lt;c0&gt;"\u{1F1FA}"&lt;/c0&gt; (REGIONAL INDICATOR SYMBOL LETTER U) and &lt;c1&gt;"\u{1F1F8}"&lt;/c1&gt; (REGIONAL INDICATOR SYMBOL LETTER S).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アメリカ合衆国に対するalpha-2コードは、「US」です、それでそれの国旗文字はユニコードスカラー値&lt;c0&gt;"\u{1F1FA}"&lt;/c0&gt;（REGIONAL INDICATOR SYMBOL LETTER U）と&lt;c1&gt;"\u{1F1F8}"&lt;/c1&gt;（REGIONAL INDICATOR SYMBOL LETTER S）から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The amount to step by with each iteration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各反復でそれだけ間隔をとることになる量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数は、ただクロージャの実行の間に対してのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The array to append to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加先の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The array wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データ値の中にラップされる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The arrays in the “values” position of the new dictionary each contain at least one element, with the elements in the same order as the source sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい辞書の「values」位置での配列は、それぞれ少なくとも１つの要素を含み、元となるシーケンスと同じ順序で要素を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The array’s &lt;c0&gt;Element&lt;/c0&gt; type must be a &lt;e1&gt;trivial type&lt;/e1&gt;, which can be copied with just a bit-for-bit copy without any indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この配列の持つ&lt;c0&gt;Element&lt;/c0&gt;型は&lt;e1&gt;自明型&lt;/e1&gt;でなければなりません、それは単にビット対ビットコピーでコピーされることが、何らかの間接参照または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The array’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The assignment to the &lt;c0&gt;o&lt;w1&gt;Breve&lt;/w1&gt;&lt;/c0&gt; constant calls this initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;o&lt;w1&gt;Breve&lt;/w1&gt;&lt;/c0&gt;定数への代入は、このイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The asynchronous iterator for iterating a AsyncStream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AsyncStreamを反復するための非同期イテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The asynchronous iterator for iterating a AsyncThrowingStream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AsyncThrowingStreamを反復するための非同期イテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The attribute container with the keys and values to populate this dictionary with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この辞書にそれらを入れることになるキーと値それらを備えた属性コンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The attribute scope of the keys in &lt;c0&gt;container&lt;/c0&gt; that a key path identifies.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるキーパスが識別する&lt;c0&gt;container&lt;/c0&gt;の中のキーそれらの属性スコープ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The attribute scope of the keys in &lt;c0&gt;container&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;container&lt;/c0&gt;の中のキーそれらの属性スコープ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The available number of fractional significand bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>利用可能な小数の仮数ビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The base state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基底状態。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The base, precision, and exponent range are not fixed in any way by this protocol, but it enforces the basic requirements of any IEEE 754 floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基数、精度、そして指数範囲は、このプロトコルによって何らかの方法で固定されません、しかしそれはIEEE 754浮動小数点型どれかの基本要件を強要します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The big-endian representation of this integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のビッグエンディアン表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit pattern matches the binary interchange format defined by the &lt;a0&gt;IEEE 754 specification&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビットパターンは&lt;a0&gt;IEEE 754仕様&lt;/a0&gt;で定義されるバイナリ交換形式に一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit pattern of the value’s encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の持つエンコーディングのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit pattern to use for the exponent field of the new value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値の指数フィールドに使うためのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit pattern to use for the significand field of the new value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値の仮数フィールドに使うためのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;Int16&lt;/c0&gt; instance is 16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int16&lt;/c0&gt;インスタンスのビット幅は16です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;Int32&lt;/c0&gt; instance is 32.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int32&lt;/c0&gt;インスタンスのビット幅は32です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;Int&lt;/c0&gt; instance is 32 on 32-bit platforms and 64 on 64-bit platforms.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int&lt;/c0&gt;インスタンスのビット幅は、32ビットプラットホーム上では32そして64ビットプラットホーム上では64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bitwise NOT operator (&lt;c0&gt;~&lt;/c0&gt;) is a prefix operator that returns a value in which all the bits of its argument are flipped: Bits that are &lt;c1&gt;1&lt;/c1&gt; in the argument are &lt;c2&gt;0&lt;/c2&gt; in the result, and bits that are &lt;c3&gt;0&lt;/c3&gt; in the argument are &lt;c4&gt;1&lt;/c4&gt; in the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位のNOT演算子（&lt;c0&gt;~&lt;/c0&gt;）は前置演算子で、それの引数のビットすべてがひっくり返されるある値を返します：引数において&lt;c1&gt;1&lt;/c1&gt;であるビットは結果において&lt;c2&gt;0&lt;/c2&gt;になります、そして引数において&lt;c3&gt;0&lt;/c3&gt;であるビットは結果において&lt;c4&gt;1&lt;/c4&gt;になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The block has a &lt;c0&gt;void&lt;/c0&gt; return type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのブロックは&lt;c0&gt;void&lt;/c0&gt;戻り型を持つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The block is called exactly once, on all possible paths of control flow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのブロックは、制御の流れの全ての可能な経路上で、厳密に一回だけ呼び出される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the range must be valid indices of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の境界は、配列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the range must be valid indices of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の境界は、コレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the result are always limited to the bounds of &lt;c0&gt;limits&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の領域は、常に&lt;c0&gt;limits&lt;/c0&gt;の領域に制限されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer is the size of the instance passed as &lt;c2&gt;value&lt;/c2&gt; and does not include any remote storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファは、&lt;c2&gt;value&lt;/c2&gt;として渡されるインスタンスの大きさで、あらゆるリモートストレージを含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer pointer argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファポインタは、ただクロージャの実行の間に対してのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer pointer argument to the &lt;c0&gt;body&lt;/c0&gt; closure provides a collection interface to the raw bytes of &lt;c1&gt;value&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;クロージャへのバッファポインタ引数は、&lt;c1&gt;value&lt;/c1&gt;の生のバイトへのコレクションインターフェイスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffering is only for values that have yet to be consumed by iteration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファするのは、まだ反復によって消費されない値に対してだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build closure passes in a Continuation which can be used in concurrent contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>buildクロージャは、あるContinuationに渡されます、それは並行性文脈において使われることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The call to &lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt; increases the &lt;c2&gt;values&lt;/c2&gt; array’s capacity by exactly 10 elements on each pass through &lt;c3&gt;add&lt;w4&gt;Ten&lt;w5&gt;Quadratic()&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;, which is linear growth.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;を呼び出すことは、&lt;c2&gt;values&lt;/c2&gt;配列の容量を正確に10要素ずつ&lt;c3&gt;add&lt;w4&gt;Ten&lt;w5&gt;Quadratic()&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;が行われる各々で漸増します、それは線形成長です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The callback is disposed of after any terminal state is reached.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コールバックは、何であれ終端状態が到達される後に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The classification of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の分類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure is called again repeatedly with the previous call’s return value and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャは、前の呼び出しの戻り値とシーケンスの各要素とともに繰り返して再び呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure is called again repeatedly with the updated accumulating value and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャは、更新された蓄積値とシーケンスの各要素とともに繰り返して再び呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure provided to the &lt;c4&gt;compact&lt;w5&gt;Map(_:)&lt;/w5&gt;&lt;/c4&gt; method takes each &lt;c6&gt;Int&lt;/c6&gt; and looks up a corresponding &lt;c7&gt;String&lt;/c7&gt; from a &lt;c8&gt;roman&lt;w9&gt;Numeral&lt;w10&gt;Dict&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;compact&lt;w5&gt;Map(_:)&lt;/w5&gt;&lt;/c4&gt;メソッドに提供されたクロージャは、各&lt;c6&gt;Int&lt;/c6&gt;をとり、そして対応している&lt;c7&gt;String&lt;/c7&gt;を&lt;c8&gt;roman&lt;w9&gt;Numeral&lt;w10&gt;Dict&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;辞書から捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure provided to the &lt;c4&gt;map(_:)&lt;/c4&gt; method takes each &lt;c5&gt;Int&lt;/c5&gt; and looks up a corresponding &lt;c6&gt;String&lt;/c6&gt; from a &lt;c7&gt;roman&lt;w8&gt;Numeral&lt;w9&gt;Dict&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;map(_:)&lt;/c4&gt;メソッドに提供されたクロージャは、各&lt;c5&gt;Int&lt;/c5&gt;をとり、そして対応している&lt;c6&gt;String&lt;/c6&gt;を&lt;c7&gt;roman&lt;w8&gt;Numeral&lt;w9&gt;Dict&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;辞書から捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure returns the desired value for the final dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このクロージャは、最終的な辞書に対して望む値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The code sample below declares a dictionary called &lt;c1&gt;interesting&lt;w2&gt;Numbers&lt;/w2&gt;&lt;/c1&gt; with string keys and values that are integer arrays, then sorts each array in-place in descending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下のコード見本は、&lt;c1&gt;interesting&lt;w2&gt;Numbers&lt;/w2&gt;&lt;/c1&gt;と呼ばれる辞書を文字列キーと整数配列である値で宣言します、それから各配列をその場で降順にソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The coding path for the returned error is constructed by appending the given container’s current index to its coding path.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるエラーのためのコーディングパスは、与えられたコンテナの持つ現在のインデックスをそれのコーディングパスに加えることで組み立てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The coding path for the returned error is constructed by appending the given key to the given container’s coding path.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるエラーのためのコーディングパスは、与えられたキーをその与えられたコンテナの持つコーディングパスに加えることで組み立てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The coding path for the returned error is the given container’s coding path.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるエラーのためのコーディングパスは、与えられたコンテナの持つコーディングパスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection being appended to allocates any additional necessary storage to hold the new elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションは追加されることによって、新しい要素を保有するために何らかの追加的に必要なストレージを割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection must not be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションは空であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection of changes passed as &lt;c0&gt;changes&lt;/c0&gt; must meet these requirements:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;changes&lt;/c0&gt;として渡される変更いくつかからなるこのコレクションは、３つの要件に合わなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection to evaluate this range expression in relation to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションに関して、この範囲式を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection to wrap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ラップされるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection’s “past the end” position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの「終わりを過ぎた」位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The compact map sequence produces whatever type of element its transforming closure produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパクトマップシーケンスは、それの変換クロージャが生み出す要素の型が何であろうとも生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The compiler automatically synthesizes your custom type’s &lt;c0&gt;Hashable&lt;/c0&gt; and requirements when you declare &lt;c1&gt;Hashable&lt;/c1&gt; conformance in the type’s original declaration and your type meets these criteria:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパイラは、自動的にあなたのあつらえの型のもつ&lt;c0&gt;Hashable&lt;/c0&gt;と要件を、あなたが&lt;c1&gt;Hashable&lt;/c1&gt;準拠をその型の持つ元の宣言において宣言して、あなたの型がそれら基準に合う場合に合成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The compiler can automatically provide an implementation of the &lt;c0&gt;Case&lt;w1&gt;Iterable&lt;/w1&gt;&lt;/c0&gt; requirements for any enumeration without associated values or &lt;c2&gt;@available&lt;/c2&gt; attributes on its cases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパイラは、自動的に&lt;c0&gt;Case&lt;w1&gt;Iterable&lt;/w1&gt;&lt;/c0&gt;要件の実装を提供することが、関連値または&lt;c2&gt;@available&lt;/c2&gt;属性をそれのケース節上で持たないあらゆる列挙に対して可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The compiler prevents bridging the &lt;c9&gt;more&lt;w10&gt;Colors&lt;/w10&gt;&lt;/c9&gt; array, on the other hand, because its &lt;c11&gt;Element&lt;/c11&gt; type is &lt;c12&gt;Optional&lt;String&gt;&lt;/c12&gt;, which does &lt;e13&gt;not&lt;/e13&gt; bridge to a Foundation type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパイラは、&lt;c9&gt;more&lt;w10&gt;Colors&lt;/w10&gt;&lt;/c9&gt;配列をブリッジすることを妨げます、言い換えれば、それの&lt;c11&gt;Element&lt;/c11&gt;型が&lt;c12&gt;Optional&lt;String&gt;&lt;/c12&gt;であるので、それはFoundation型にブリッジ&lt;e13&gt;しません&lt;/e13&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The compiler removes &lt;c0&gt;Ref&lt;/c0&gt; from the end of each type name because all Swift classes are reference types; therefore, the suffix is redundant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパイラは各型名の終わりから&lt;c0&gt;Ref&lt;/c0&gt;を削除します、なぜなら全てのスウィフトクラスが参照型であるからです；したがって、この接尾辞は冗長です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The components used for hashing must be the same as the components compared in your type’s &lt;c1&gt;==&lt;/c1&gt; operator implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ化に使用される構成要素は、あなたの型のもつ&lt;c1&gt;==&lt;/c1&gt;演算子実装において比較される構成要素と同じでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The condition to test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テストする条件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The contents of the Objective-C files in that framework are automatically available from any Swift file within that framework target, with no import statements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのフレームワークの中のObjective-Cファイルの内容は、自動的にそのフレームワークターゲット内のあらゆるSwiftファイルから、インポート文なしで利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The contents of this sequence, as an asychronous sequence of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの内容、ユニコードスカラー値それらからなる非同期シーケンスとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The contents of this sequence, as an asychronous sequence of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの内容、文字それらからなる非同期シーケンスとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The contents of this sequence, as an asychronous sequence of lines of text.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの内容、テキスト行それらからなるある非同期シーケンスとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The context in which the error occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこにおいてエラーが起こった前後関係。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The conversion of &lt;c0&gt;p&lt;/c0&gt; to a string in the assignment to &lt;c1&gt;s&lt;/c1&gt; uses the &lt;c2&gt;Point&lt;/c2&gt; type’s &lt;c3&gt;debug&lt;w4&gt;Description&lt;/w4&gt;&lt;/c3&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;p&lt;/c0&gt;の文字列への変換は&lt;c1&gt;s&lt;/c1&gt;への代入において、&lt;c2&gt;Point&lt;/c2&gt;型のもつ&lt;c3&gt;debug&lt;w4&gt;Description&lt;/w4&gt;&lt;/c3&gt;プロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The conversion of &lt;c0&gt;p&lt;/c0&gt; to a string in the assignment to &lt;c1&gt;s&lt;/c1&gt; uses the &lt;c2&gt;Point&lt;/c2&gt; type’s &lt;c3&gt;description&lt;/c3&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;s&lt;/c1&gt;への代入における&lt;c0&gt;p&lt;/c0&gt;の文字列への変換は、&lt;c2&gt;Point&lt;/c2&gt;型のもつ&lt;c3&gt;description&lt;/c3&gt;プロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The correct approach in Swift is to compare the &lt;c0&gt;i&lt;/c0&gt; value with zero in the &lt;c1&gt;while&lt;/c1&gt; statement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftにおける正しい取り組みは、&lt;c1&gt;while&lt;/c1&gt;文において&lt;c0&gt;i&lt;/c0&gt;値を0と比較することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The corresponding value of the raw type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この生の型の対応している値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The current playground logging implementation logs specialized descriptions of at least the following types:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のプレイグラウンドログ実装は、少なくとも以下の型の特殊化された記述を記録します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The custom mirror for this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのためのあつらえのミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The decoder to read data from.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それからデータを読み出すデコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default IEEE 754 behavior of operations involving a signaling NaN is to raise the Invalid flag in the floating-point environment and return a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaNを伴う演算の初期状態のIEEE 754挙動は、無効なフラグを浮動小数点環境において上げて、クワイエットNaNを返すことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default cancellation thrown when a task is cancelled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるタスクが取り消される時にスローされる省略時の取り消し。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default implementation of the &lt;c3&gt;!=&lt;/c3&gt; operator function satisfies this requirement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;!=&lt;/c3&gt;演算子関数の省略時の実装は、この要件を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default implementation returns 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の実装は、０を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is 10.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時は10。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is &lt;c0&gt;0&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時には&lt;c0&gt;0&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is &lt;c0&gt;Int&lt;w1&gt;.max&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時には&lt;c0&gt;Int&lt;w1&gt;.max&lt;/w1&gt;&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態は&lt;c1&gt;false&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is &lt;c1&gt;true&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時では&lt;c1&gt;true&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時には&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is a newline (&lt;c0&gt;"\n"&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では改行（&lt;c0&gt;"\n"&lt;/c0&gt;）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is a single space (&lt;c0&gt;" "&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、単一の空白（&lt;c0&gt;" "&lt;/c0&gt;）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is an empty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では空の文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is the file where &lt;c1&gt;assert(_:&lt;w2&gt;_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、&lt;c1&gt;assert(_:&lt;w2&gt;_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が呼び出されるところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is the file where &lt;c1&gt;assertion&lt;w2&gt;Failure(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、&lt;c1&gt;assertion&lt;w2&gt;Failure(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is the file where &lt;c1&gt;fatal&lt;w2&gt;Error(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、&lt;c1&gt;fatal&lt;w2&gt;Error(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is the file where &lt;c1&gt;precondition(_:&lt;w2&gt;_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、&lt;c1&gt;precondition(_:&lt;w2&gt;_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が呼び出されるところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is the file where &lt;c1&gt;precondition&lt;w2&gt;Failure(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、&lt;c1&gt;precondition&lt;w2&gt;Failure(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is the line number where &lt;c1&gt;assert(_:&lt;w2&gt;_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、&lt;c1&gt;assert(_:&lt;w2&gt;_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が呼び出されるところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is the line number where &lt;c1&gt;assertion&lt;w2&gt;Failure(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、&lt;c1&gt;assertion&lt;w2&gt;Failure(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is the line number where &lt;c1&gt;fatal&lt;w2&gt;Error(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、&lt;c1&gt;fatal&lt;w2&gt;Error(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is the line number where &lt;c1&gt;precondition(_:&lt;w2&gt;_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、&lt;c1&gt;precondition(_:&lt;w2&gt;_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が呼び出されるところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is the line number where &lt;c1&gt;precondition&lt;w2&gt;Failure(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、&lt;c1&gt;precondition&lt;w2&gt;Failure(_:&lt;w3&gt;file:&lt;w4&gt;line:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default separator is an empty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の分離子は空の文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained Boolean literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブールリテラルである他は別途制約されない省略時用の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained Unicode extended grapheme cluster literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されないユニコード拡張書記素クラスタリテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained floating-point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されない浮動小数点リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されない整数リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されない文字列リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained unicode scalar literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されないユニコードスカラーリテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value for this limit is Int.max.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この限界に対する省略時の値は、Int.maxです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は&lt;c1&gt;false&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is &lt;c4&gt;Int&lt;w5&gt;.max&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は&lt;c4&gt;Int&lt;w5&gt;.max&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is &lt;c4&gt;true&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は、&lt;c4&gt;true&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is &lt;c5&gt;true&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は、&lt;c5&gt;true&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is &lt;c6&gt;true&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は、&lt;c6&gt;true&lt;/c6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value to use if &lt;c0&gt;key&lt;/c0&gt; doesn’t exist in the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;key&lt;/c0&gt;が辞書の中に存在しないならば使うことになる省略時の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The destination Unicode encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行き先ユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dictionary literal is made up of one or more key-value pairs, separated by commas and surrounded with square brackets.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書リテラルは、コンマで区切られて角括弧で囲まれた１つ以上のキー値ペアで構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dictionary wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データ値の中にラップされる辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dictionary’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference is that the &lt;c16&gt;Async&lt;w17&gt;Iterator&lt;/w17&gt;&lt;/c16&gt; defines its &lt;c18&gt;next()&lt;/c18&gt; method as &lt;c19&gt;async&lt;/c19&gt;, which requires a caller to wait for the next value with the &lt;c20&gt;await&lt;/c20&gt; keyword.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その違いは、&lt;c16&gt;Async&lt;w17&gt;Iterator&lt;/w17&gt;&lt;/c16&gt;はそれの&lt;c18&gt;next()&lt;/c18&gt;メソッドを&lt;c19&gt;async&lt;/c19&gt;として定義することです、それは呼び出し側に次の値を待つように&lt;c20&gt;await&lt;/c20&gt;キーワードで要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference needed to produce the receiver’s state from the parameter’s state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>レシーバのもつ状態をパラメータのもつ状態から生成するのに必要とされる差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference needed to produce this collection’s ordered elements from the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつ順番付けられた要素をこの与えられたコレクションから生成するのに必要とされる差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の差は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference to be applied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>適用されることになる差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance between &lt;c0&gt;start&lt;/c0&gt; and &lt;c1&gt;end&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;/c0&gt;と&lt;c1&gt;end&lt;/c1&gt;の隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance between two indexes (always zero).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのインデックスの間の隔たり（常にゼロ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance from this pointer to &lt;c0&gt;end&lt;/c0&gt;, in strides of the pointer’s &lt;c1&gt;Pointee&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから&lt;c0&gt;end&lt;/c0&gt;までの隔たり、ポインタのもつ&lt;c1&gt;Pointee&lt;/c1&gt;型のストライドで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance from this value to &lt;c0&gt;other&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値から&lt;c0&gt;other&lt;/c0&gt;までの隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance to advance this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を前進させる距離。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance to offset &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;を補う間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The division operator (&lt;c0&gt;/&lt;/c0&gt;) calculates the quotient of the division if &lt;c1&gt;rhs&lt;/c1&gt; is nonzero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算演算子（&lt;c0&gt;/&lt;/c0&gt;）は、&lt;c1&gt;rhs&lt;/c1&gt;が非ゼロならばその除算の商を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The double wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データ値の中にラップされるdouble。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The drop-first sequence produces whatever type of element its base iterator produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drop-firstシーケンスは、それの基底イテレータが生み出す要素の型が何であろうとも生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The drop-while sequence produces whatever type of element its base sequence produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drop-whileシーケンスは、それの基底シーケンスが生み出す要素の型が何であろうとも生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dynamic type returned from &lt;c0&gt;type(of:)&lt;/c0&gt; is a &lt;e1&gt;concrete metatype&lt;/e1&gt; (&lt;c2&gt;T&lt;w3&gt;.Type&lt;/w3&gt;&lt;/c2&gt;) for a class, structure, enumeration, or other nonprotocol type &lt;c4&gt;T&lt;/c4&gt;, or an &lt;e5&gt;existential metatype&lt;/e5&gt; (&lt;c6&gt;P&lt;w7&gt;.Type&lt;/w7&gt;&lt;/c6&gt;) for a protocol or protocol composition &lt;c8&gt;P&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;type(of:)&lt;/c0&gt;から返される動的型は、クラス、構造体、列挙、または他の非プロトコル型&lt;c4&gt;T&lt;/c4&gt;に対して&lt;e1&gt;具象メタタイプ&lt;/e1&gt;（&lt;c2&gt;T&lt;w3&gt;.Type&lt;/w3&gt;&lt;/c2&gt;）、またはプロトコルやプロトコル合成&lt;c8&gt;P&lt;/c8&gt;に対して&lt;e5&gt;存在メタタイプ&lt;/e5&gt;（&lt;c6&gt;P&lt;w7&gt;.Type&lt;/w7&gt;&lt;/c6&gt;）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dynamic type, which is a metatype instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>動的型、それはメタタイプインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたインデックスでの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element is the dropped value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この要素は、除外された値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element that should be split upon.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それで分離されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to append to the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列に追加されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to check for containment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この要素が含まれるかを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to find in the asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この要素を非同期シーケンスの中で見つけ出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to find in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスにおいて見つける要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to repeat.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to store in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中に格納することになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element type of a dictionary: a tuple containing an individual key-value pair.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の要素型：個々のキー値ペアを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements at that index and later indices are shifted back to make room.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのインデックスおよび後のインデックスでの要素は、後ろに移って場所をあけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the range are the consecutive values from its lower bound up to, and including, its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲に属する要素は、それの下側の境界の値から上側の境界まで、そしてそれを含めての連続した値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the resulting array are ordered according to the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の配列の要素は、与えられた述部にしたがって並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the sequence are obtained by invoking &lt;c0&gt;next&lt;/c0&gt; with a mutable state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの要素は、 &lt;c0&gt;next&lt;/c0&gt;をある可変の状態とともに発動することによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of this view are a concatenation of the elements of each sequence in the base.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この見方での要素たちは、その基盤の中の各シーケンスのもつ要素の連結です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements to append to the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列に追加する要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements to append to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの要素をコレクションへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The encoder to write data to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データを書き込むエンコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>末尾インデックスは、あるコレクションの最後の要素を１つ過ぎた位置を参照します、それでそれはある要素に対応しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The error to throw from the continuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その継続からスローされたエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The error to throw or nil to signify termination.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スローするエラーまたは終端を意味するnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The escapable copy of &lt;c0&gt;closure&lt;/c0&gt; passed to &lt;c1&gt;body&lt;/c1&gt; is only valid during the call to &lt;c2&gt;without&lt;w3&gt;Actually&lt;w4&gt;Escaping(_:&lt;w5&gt;do:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;closure&lt;/c0&gt;の脱出可能コピーで&lt;c1&gt;body&lt;/c1&gt;に渡されるものは、&lt;c2&gt;without&lt;w3&gt;Actually&lt;w4&gt;Escaping(_:&lt;w5&gt;do:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;への呼び出しの間に有効なだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example above responds to the property change by printing both the new and old values of the date.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上の例は、プロパティの変化に、日付の新旧の値の両方をプリントすることによって応答します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below adopts the &lt;a0&gt;&lt;c1&gt;NSWindow&lt;w2&gt;Delegate&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; protocol and implements its &lt;a3&gt;&lt;c4&gt;window(_:&lt;w5&gt;will&lt;w6&gt;Use&lt;w7&gt;Full&lt;w8&gt;Screen&lt;w9&gt;Content&lt;w10&gt;Size:)&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt; method:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;a0&gt;&lt;c1&gt;NSWindow&lt;w2&gt;Delegate&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;プロトコルを採用します、そしてそれの&lt;a3&gt;&lt;c4&gt;window(_:&lt;w5&gt;will&lt;w6&gt;Use&lt;w7&gt;Full&lt;w8&gt;Screen&lt;w9&gt;Content&lt;w10&gt;Size:)&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;メソッドを実装します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below changes the &lt;c1&gt;my&lt;w2&gt;Date&lt;/w2&gt;&lt;/c1&gt; property by calling the &lt;c3&gt;update&lt;w4&gt;Date&lt;/w4&gt;&lt;/c3&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;c1&gt;my&lt;w2&gt;Date&lt;/w2&gt;&lt;/c1&gt;プロパティを、&lt;c3&gt;update&lt;w4&gt;Date&lt;/w4&gt;&lt;/c3&gt;メソッドを呼び出すことによって変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below creates an &lt;a0&gt;&lt;c1&gt;NSWindow&lt;/c1&gt;&lt;/a0&gt; and uses optional chaining to check that the window's delegate exists before sending a message to the delegate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;a0&gt;&lt;c1&gt;NSWindow&lt;/c1&gt;&lt;/a0&gt;を作成して、オプショナル連鎖を使うことで、ウインドウの持つ委任先が存在することを、メッセージをその委任先に送る前に確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below defines the &lt;c2&gt;My&lt;w3&gt;Object&lt;w4&gt;To&lt;w5&gt;Observe&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; class with a property—&lt;c6&gt;my&lt;w7&gt;Date&lt;/w7&gt;&lt;/c6&gt;—that can be observed:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;c2&gt;My&lt;w3&gt;Object&lt;w4&gt;To&lt;w5&gt;Observe&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;クラスを、監視されることが可能なプロパティ — &lt;c6&gt;my&lt;w7&gt;Date&lt;/w7&gt;&lt;/c6&gt; — で定義します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below uses the &lt;c0&gt;NS&lt;w1&gt;_ERROR&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro to group error constants:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;c0&gt;NS&lt;w1&gt;_ERROR&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを使ってエラー定数をグループにまとめます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The examples below demonstrate how to use &lt;c0&gt;without&lt;w1&gt;Actually&lt;w2&gt;Escaping(_:&lt;w3&gt;do:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; in conjunction with two common APIs that use escaping closures: lazy collection views and asynchronous operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、脱出クロージャ：遅延コレクションビューと非同期演算を使う２つのよくあるAPIと連係して、&lt;c0&gt;without&lt;w1&gt;Actually&lt;w2&gt;Escaping(_:&lt;w3&gt;do:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使う方法を実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The exponent of the floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値の指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The fact that all collections are finite guarantees the safety of many sequence operations, such as using the &lt;c1&gt;contains(_:)&lt;/c1&gt; method to test whether a collection includes an element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべてのコレクションが有限であるという事実は、多くのシーケンス演算、例えば&lt;c1&gt;contains(_:)&lt;/c1&gt;メソッドを使ってコレクションがある要素を含むかどうかテストすることなどの安全を保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The file name to print with &lt;c0&gt;message&lt;/c0&gt; if the assertion fails.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>表明（アサーション）がうまくいかないならば&lt;c0&gt;message&lt;/c0&gt;とともに出力するファイル名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The file name to print with &lt;c0&gt;message&lt;/c0&gt; if the precondition fails.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件がうまくいかないならば&lt;c0&gt;message&lt;/c0&gt;とともに出力するファイル名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The file name to print with &lt;c0&gt;message&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;message&lt;/c0&gt;とともに出力するファイル名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The filter sequence produces whatever type of element its base sequence produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>フィルタシーケンスは、それの基底シーケンスが生み出す要素の型が何であろうとも生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final accumulated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最終的に蓄積された値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final example passes &lt;c0&gt;false&lt;/c0&gt; for the &lt;c1&gt;omitting&lt;w2&gt;Empty&lt;w3&gt;Subsequences&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; parameter, so the returned array contains empty strings where spaces were repeated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後の例は&lt;c0&gt;falseを&lt;/c0&gt;&lt;c1&gt;omitting&lt;w2&gt;Empty&lt;w3&gt;Subsequences&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;パラメータに渡します、なので返される配列は空白が繰り返されたところで空の文字列を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final example passes &lt;c0&gt;true&lt;/c0&gt; for the &lt;c1&gt;allow&lt;w2&gt;Empty&lt;w3&gt;Slices&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; parameter, so the returned array contains empty strings where spaces were repeated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後の例は&lt;c0&gt;true&lt;/c0&gt;を&lt;c1&gt;allow&lt;w2&gt;Empty&lt;w3&gt;Slices&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;パラメータに渡します、なので返される配列は空白が繰り返されたところで空の文字列を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element in the sequence is always &lt;c0&gt;first&lt;/c0&gt;, and each successive element is the result of invoking &lt;c1&gt;next&lt;/c1&gt; with the previous element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスでの最初の要素は常に&lt;c0&gt;first&lt;/c0&gt;です、そして続く要素それぞれは&lt;c1&gt;next&lt;/c1&gt;を前の要素とともに発動することの結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of a nonempty array is always at index zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でない配列の最初の要素は、常にインデックス０です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the collection if the collection is not empty; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空でないならばコレクションの最初の要素；そうでなければ&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最初の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the dictionary is not necessarily the first element added.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の最初の要素は、必ずしも追加された最初の要素ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the sequence that satisfies &lt;c0&gt;predicate&lt;/c0&gt;, or &lt;c1&gt;nil&lt;/c1&gt; if there is no element that satisfies &lt;c2&gt;predicate&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;満たすシーケンスの最初の要素、または&lt;c1&gt;predicate&lt;/c1&gt;を満たす要素が無いならば&lt;c2&gt;nil&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element to be returned from the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスから返されることになる最初の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first index where &lt;c0&gt;element&lt;/c0&gt; is found.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;element&lt;/c0&gt;が見つけられたところの最初のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first key-value pair of the dictionary if the dictionary is not empty; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書が空でないならばこの辞書の最初のキー値ペア；そうでなければ、&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first optional value that isn’t &lt;c1&gt;nil&lt;/c1&gt; stops the chain and becomes the result of the whole expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;nil&lt;/c1&gt;でない最初のオプショナル値は、連鎖を停止して、式全体の結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first partition, &lt;c1&gt;numbers[..&lt;p]&lt;/c1&gt;, is made up of the elements that are not greater than 30.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の区画、&lt;c1&gt;numbers[..&lt;p]&lt;/c1&gt;は、30より大きくない要素から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first sequence or collection to zip.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>組み合わされる第１のシーケンスまたはコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first use of &lt;c5&gt;split&lt;/c5&gt; returns each word that was originally separated by one or more spaces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;split&lt;/c5&gt;の最初の利用は、各単語を返します、それはもともと１つ以上の空白で隔てられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first value to add.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算する第１の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first value to multiply.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>掛け合わされる第１の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first value to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する１つ目の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first version, &lt;c0&gt;present(completion:)&lt;/c0&gt;, has a return type of &lt;c1&gt;Void&lt;/c1&gt; and takes a completion handler.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のバージョン、&lt;c0&gt;present(completion:)&lt;/c0&gt;は、&lt;c1&gt;Void&lt;/c1&gt;の戻り型を持ち、そしてある完了ハンドラをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The flat map sequence produces the type of element in the asynchronous sequence produced by the &lt;c0&gt;transform&lt;/c0&gt; closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このフラットマップシーケンスは、&lt;c0&gt;transform&lt;/c0&gt;クロージャによって生み出される非同期シーケンスの中の要素の型を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The flexible behavior of the &lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt; protocol is similar to Objective-C’s &lt;c2&gt;id&lt;/c2&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt;プロトコルの柔軟な挙動は、Objective-Cのもつ&lt;c2&gt;id&lt;/c2&gt;型に似ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The floating-point types in the standard library are &lt;c0&gt;Float&lt;/c0&gt;, &lt;c1&gt;Double&lt;/c1&gt;, and &lt;c2&gt;Float80&lt;/c2&gt; where available.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリにおける浮動小数点型は、&lt;c0&gt;Float&lt;/c0&gt;、&lt;c1&gt;Double&lt;/c1&gt;、そして利用可能なところでは&lt;c2&gt;Float80&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The floating-point value with the same sign and exponent as this value, but with a significand of 1.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と同じ符号と指数を持つ浮動小数点値、しかし1.0の仮数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following Objective-C property refers to a view controller that also acts a data source and delegate:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のObjective-Cプロパティは、あるビューコントローラを参照します、それはまたデータソースと委任先の役割を果たします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following characters are all lowercase:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の文字は全てローワーケースです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following characters are all uppercase:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の文字は全てアッパーケースです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code declares &lt;c0&gt;values&lt;/c0&gt;, an array of integers, and the &lt;c1&gt;add&lt;w2&gt;Ten&lt;w3&gt;Quadratic()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; function, which adds ten more values to the &lt;c4&gt;values&lt;/c4&gt; array on each call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、整数の配列&lt;c0&gt;values&lt;/c0&gt;、そして呼び出し毎に10個さらに値を&lt;c4&gt;values&lt;/c4&gt;配列に加える&lt;c1&gt;add&lt;w2&gt;Ten&lt;w3&gt;Quadratic()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;関数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code declares a &lt;c0&gt;perform(_:&lt;w1&gt;simultaneously&lt;w2&gt;With:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function that uses a dispatch queue to execute two closures concurrently.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは&lt;c0&gt;perform(_:&lt;w1&gt;simultaneously&lt;w2&gt;With:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数を宣言します、それはあるディスパッチキューを使って２つのクロージャを同時に実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code declares a method that calculates the total of any sequence with &lt;c0&gt;Additive&lt;w1&gt;Arithmetic&lt;/w1&gt;&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、&lt;c0&gt;Additive&lt;w1&gt;Arithmetic&lt;/w1&gt;&lt;/c0&gt;要素をもつ何らかのシーケンスの合計を計算するメソッドを宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code declares an &lt;c0&gt;all&lt;w1&gt;Values(in:&lt;w2&gt;match:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function that checks whether all the elements in an array match a predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、配列のすべての要素がある述部に合致するかどうかを調べる&lt;c0&gt;all&lt;w1&gt;Values(in:&lt;w2&gt;match:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code uses this method to test whether all the names in an array have at least five characters:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、このメソッドを使って、配列の中の全ての名前が少なくとも５つの文字を含むかどうかを試験します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example accesses an element of an array through its subscript to print its value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、配列のある要素にそれの添え字によってアクセスしてそれの値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example appends the elements of a &lt;c0&gt;Range&lt;Int&gt;&lt;/c0&gt; instance to an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、&lt;c0&gt;Range&lt;Int&gt;&lt;/c0&gt;インスタンスからなるいくらかの要素を整数からなる配列に追加します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example calculates the remainder of dividing 8.625 by 0.75:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、8.625を0.75で割ることの余りを計算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example calculates the truncating remainder of dividing 8.625 by 0.75:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、8.625を0.75で除算することの切り捨てられる余りを計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example checks to see if &lt;c3&gt;image&lt;w4&gt;Paths&lt;/w4&gt;&lt;/c3&gt; contains any paths in the &lt;c5&gt;"/glyphs"&lt;/c5&gt; directory:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c3&gt;image&lt;w4&gt;Paths&lt;/w4&gt;&lt;/c3&gt;が何らかのパスを&lt;c5&gt;"/glyphs"&lt;/c5&gt;ディレクトリの中に含むかどうかを調べるために検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example compares instances of the &lt;c2&gt;Int&lt;/c2&gt;, &lt;c3&gt;UInt&lt;/c3&gt;, and &lt;c4&gt;UInt8&lt;/c4&gt; types:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c2&gt;Int&lt;/c2&gt;、&lt;c3&gt;UInt&lt;/c3&gt;、そして&lt;c4&gt;UInt8&lt;/c4&gt;型のインスタンスを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example compares the date of the first moon landing with the release of David Bowie’s song “Space Oddity”:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、最初の月面着陸の日付をデビッド・ボウイの歌「Space Oddity」のリリース日と比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example compares tuples made up of 2 components:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は２つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example compares tuples made up of 3 components:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、３つの構成要素で構成されるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example compares tuples made up of 4 components:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は４つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example compares tuples made up of 5 components:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は５つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example compares tuples made up of 6 components:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は６つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example copies bytes from the &lt;c0&gt;byte&lt;w1&gt;Values&lt;/w1&gt;&lt;/c0&gt; array into &lt;c2&gt;numbers&lt;/c2&gt;, an array of &lt;c3&gt;Int32&lt;/c3&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、バイトを&lt;c0&gt;byte&lt;w1&gt;Values&lt;/w1&gt;&lt;/c0&gt;配列から、&lt;c2&gt;numbers&lt;/c2&gt;の配列&lt;c3&gt;Int32&lt;/c3&gt;へとコピーします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example copies the bytes of the &lt;c0&gt;numbers&lt;/c0&gt; array into a buffer of &lt;c1&gt;UInt8&lt;/c1&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;numbers&lt;/c0&gt;配列のバイトを&lt;c1&gt;UInt8&lt;/c1&gt;のバッファへとコピーします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates a &lt;c0&gt;Repeated&lt;Int&gt;&lt;/c0&gt; collection containing five zeroes:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、５つのゼロを含んでいるある&lt;c0&gt;Repeated&lt;Int&gt;&lt;/c0&gt;コレクションを作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates a &lt;c0&gt;first&lt;w1&gt;Word&lt;/w1&gt;&lt;/c0&gt; constant by using the &lt;c2&gt;prefix(while:)&lt;/c2&gt; method to get a slice of the &lt;c3&gt;text&lt;/c3&gt; string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;first&lt;w1&gt;Word&lt;/w1&gt;&lt;/c0&gt;定数を&lt;c2&gt;prefix(while:)&lt;/c2&gt;メソッドを使って&lt;c3&gt;text&lt;/c3&gt;文字列のスライスを得ることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates a new character from the uppercase version of a string that only holds one character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、１つの文字を保持するだけのある文字列の大文字バージョンから、新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates a new dictionary and prints the value of a key found in the dictionary (&lt;c0&gt;"Coral"&lt;/c0&gt;) and a key not found in the dictionary (&lt;c1&gt;"Cerise"&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は新しい辞書を作成して、辞書に見つかるキー（&lt;c0&gt;"Coral"&lt;/c0&gt;）と辞書に見つからないキー（&lt;c1&gt;"Cerise"&lt;/c1&gt;）の値を出力します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates a new dictionary using an array of strings as the keys and the integers in a countable range as the values:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、文字列からなる配列をキーとしてそして可付番範囲の中の整数を値として、新しい辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates an array of integers from an array literal, then appends the elements of another collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、整数からなるある配列を配列リテラルから作成します、それから別のコレクションの要素を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates an iterator that counts up from the initial value of an integer &lt;c0&gt;x&lt;/c0&gt; to 15:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はあるイテレータを作成します、それは初期値の整数&lt;c0&gt;x&lt;/c0&gt;から15まで数え上げます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example declares a function that calculates the length of the hypotenuse of a right triangle given its two perpendicular sides.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はある関数を宣言します、それは、それの２つの直角側を与えられる直角三角形の斜辺の長さを計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example declares an array of names, and then creates a dictionary from that array by grouping the names by first letter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、いくらかの名前からなる配列を宣言します、それから名前を最初の文字でグループ分けすることによって、その配列から辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example defines &lt;c0&gt;x&lt;/c0&gt; as an instance of &lt;c1&gt;UInt8&lt;/c1&gt;, an 8-bit, unsigned integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;x&lt;/c0&gt;を&lt;c1&gt;UInt8&lt;/c1&gt;のインスタンス、ある８ビットの、符号なし整数型として定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example defines a &lt;c0&gt;print&lt;w1&gt;Generic&lt;w2&gt;Info(_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function that takes a generic parameter and declares the &lt;c3&gt;String&lt;/c3&gt; type’s conformance to a new protocol &lt;c4&gt;P&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;print&lt;w1&gt;Generic&lt;w2&gt;Info(_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数を定義します、それは総称体パラメータを取り、&lt;c3&gt;String&lt;/c3&gt;型のもつ準拠を新しいプロトコル&lt;c4&gt;P&lt;/c4&gt;に宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example defines an &lt;c0&gt;Integer&lt;w1&gt;Ref&lt;/w1&gt;&lt;/c0&gt; type, an integer type with reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある&lt;c0&gt;Integer&lt;w1&gt;Ref&lt;/w1&gt;&lt;/c0&gt;型、参照意味論を持つ整数型を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example divides a value that is too large to be represented using a single &lt;c0&gt;Int&lt;/c0&gt; instance by another &lt;c1&gt;Int&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、単一の&lt;c0&gt;Int&lt;/c0&gt;インスタンスを使って表されるには大きすぎる値を、別の&lt;c1&gt;Int&lt;/c1&gt;値によって割ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example enumerates the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある配列の要素を列挙します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example enumerates the elements of an array:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある配列の要素を列挙します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、文字列の開始インデックスから４位置進んだインデックスを取得して、それからその位置の文字を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、配列の始まりから４位置進んだインデックスを入手して、それからその位置での要素を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example prints a closed range of integers to a string:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>続く例は、整数の完結範囲をある文字列へ出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example prints a string, a closed range of integers, and a group of floating-point values to standard output:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列、整数の完結範囲、グループの浮動小数点値を標準出力に出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example prints the debugging representation of a string, a closed range of integers, and a group of floating-point values to standard output:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列、整数の完結範囲、グループの浮動小数点値のデバッグ表現を標準出力に出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example reverses the elements of an array of characters:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、文字列からなる配列の要素を逆順にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example rounds a value using four different rounding rules:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はある値を４つの丸め規則を使って丸めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example rounds several values using this default rule:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はいくつかの値をこの初期設定での規則を使って丸めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches for the index of the number &lt;c0&gt;40&lt;/c0&gt; in an array of integers, and then prints the suffix of the array starting at that index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、整数からなる配列において数&lt;c0&gt;40&lt;/c0&gt;のインデックスを捜して、それからそのインデックスで始まる配列の末尾を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches for the index of the number &lt;c2&gt;40&lt;/c2&gt; in an array of integers, and then prints the prefix of the array up to, and including, that index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、整数からなる配列において数&lt;c2&gt;40&lt;/c2&gt;のインデックスを捜して、それからそのインデックスに至るまでの、そしてそれを含めて、配列の冒頭を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches for the index of the number &lt;c2&gt;40&lt;/c2&gt; in an array of integers, and then prints the prefix of the array up to, but not including, that index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、整数からなる配列において数&lt;c2&gt;40&lt;/c2&gt;のインデックスを捜して、それからそのインデックスに至るまでの、しかしそれを含めずに、配列の冒頭を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows a &lt;c5&gt;Counter&lt;/c5&gt; type that uses an inner iterator to monotonically generate &lt;c6&gt;Int&lt;/c6&gt; values until reaching a &lt;c7&gt;how&lt;w8&gt;High&lt;/w8&gt;&lt;/c7&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある&lt;c5&gt;Counter&lt;/c5&gt;型を示します、それはある内部イテレータを使って&lt;c6&gt;Int&lt;/c6&gt;値を、&lt;c7&gt;how&lt;w8&gt;High&lt;/w8&gt;&lt;/c7&gt;値に到達するまで単調に生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows an &lt;c0&gt;Int&lt;w1&gt;Parsing&lt;w2&gt;Error&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; enumeration that captures two different kinds of errors that can occur when parsing an integer from a string: overflow, where the value represented by the string is too large for the integer data type, and invalid input, where nonnumeric characters are found within the input.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;Int&lt;w1&gt;Parsing&lt;w2&gt;Error&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;列挙を示します、それが捕える（キャプチャ）のは、文字列から整数を構文解析（パース）する時に起こる可能性のある２つの異なる種類のエラー：文字列によって表される値が整数データ型に対して大きすぎるところのオーバーフロー、そして非数の文字が入力内に見つけられるところの無効な入力です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how NaN values operate in different contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、どのようにNaN値が異なる前後関係において作動するかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how an array of strings can be joined to a single, comma-separated string:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、どのように文字列からなる配列が単一の、コンマ区切りの文字列へと連結できるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how an iterator can be used explicitly to emulate a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、イテレータが明示的に使われて&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループの機能を真似る方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how extending and truncating work for nonnegative integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>後に続く例は、非負数整数に対する拡張および切り詰め作業の方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how modifying the contents of the &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; argument to &lt;c4&gt;body&lt;/c4&gt; alters the contents of the array:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c4&gt;body&lt;/c4&gt;への&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;引数の内容の修正が、配列の内容を改めることを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how the &lt;c3&gt;contains(_:)&lt;/c3&gt; method can be used with an array of strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c3&gt;contains(_:)&lt;/c3&gt;メソッドが文字列からなる配列で使われるのを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how to choose the first and last values for any duplicate keys:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、あらゆる重複キーに対して最初と最後の値を選択する方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how to iterate over &lt;c6&gt;Counter&lt;/c6&gt;, a custom &lt;c7&gt;Async&lt;w8&gt;Sequence&lt;/w8&gt;&lt;/c7&gt; that produces &lt;c9&gt;Int&lt;/c9&gt; values from &lt;c10&gt;1&lt;/c10&gt; up to a &lt;c11&gt;how&lt;w12&gt;High&lt;/w12&gt;&lt;/c11&gt; value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、どのように&lt;c6&gt;Counter&lt;/c6&gt;、あるあつらえの&lt;c7&gt;Async&lt;w8&gt;Sequence&lt;/w8&gt;&lt;/c7&gt;で&lt;c9&gt;Int&lt;/c9&gt;値を&lt;c10&gt;1&lt;/c10&gt;から&lt;c11&gt;how&lt;w12&gt;High&lt;/w12&gt;&lt;/c11&gt;値に至るまで生み出すもの、のすべてにわたって反復するかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how you can bridge an &lt;c0&gt;Array&lt;/c0&gt; instance to &lt;c1&gt;NSArray&lt;/c1&gt; to use the &lt;c2&gt;write(to:&lt;w3&gt;atomically:)&lt;/w3&gt;&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、どのようにあなたが&lt;c0&gt;Array&lt;/c0&gt;インスタンスを&lt;c1&gt;NSArray&lt;/c1&gt;へとブリッジして、&lt;c2&gt;write(to:&lt;w3&gt;atomically:)&lt;/w3&gt;&lt;/c2&gt;メソッドを使うかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how you can iterate over the contents of the buffer pointer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、どのようにあなたがバッファポインタの内容にわたって反復できるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows the array literal initializer for a hypothetical &lt;c2&gt;Ordered&lt;w3&gt;Set&lt;/w3&gt;&lt;/c2&gt; type, which has setlike semantics but maintains the order of its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、仮設的な&lt;c2&gt;Ordered&lt;w3&gt;Set&lt;/w3&gt;&lt;/c2&gt;型のための配列リテラルイニシャライザを示します、それは集合的な意味論を持つけれどもそれの要素の順番を維持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows the dictionary literal initializer for a hypothetical &lt;c2&gt;Counted&lt;w3&gt;Set&lt;/w3&gt;&lt;/c2&gt; type, which uses setlike semantics while keeping track of the count for duplicate elements:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、仮設的な&lt;c2&gt;Counted&lt;w3&gt;Set&lt;/w3&gt;&lt;/c2&gt;型のための辞書リテラルイニシャライザを示します、それは集合的な意味論を使う一方で重複する要素に対する総数を追跡し続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows the results of rounding numbers using this rule:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、この規則を使っての数の丸めの結果を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example transcodes the UTF-8 representation of the string &lt;c0&gt;"Fermata 𝄐"&lt;/c0&gt; into UTF-32.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、文字列&lt;c0&gt;"Fermata 𝄐"&lt;/c0&gt;のUTF-8表現をUTF-32にコード変換（トランスコード）します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example updates the value for the &lt;c1&gt;404&lt;/c1&gt; code to be simply “Not found” and removes the key-value pair for the &lt;c2&gt;500&lt;/c2&gt; code entirely.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c1&gt;404&lt;/c1&gt;コードの値を単純に「Not found」に更新して、&lt;c2&gt;500&lt;/c2&gt;コードに対するキー値ペアをすっかり削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses &lt;c0&gt;is&lt;w1&gt;Totally&lt;w2&gt;Ordered(below&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; to sort an array of floating-point values, including some that are NaN:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;is&lt;w1&gt;Totally&lt;w2&gt;Ordered(below&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使って、NaNである何かを含んでいる、浮動小数点値の配列をソートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses a structure to represent an error when parsing an XML document, including the line and column numbers where the error occurred:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、構造体を使ってXML書類をパースする時にエラーを表して、行およびコラム番号をエラーが生じたときに含めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses an enumeration of playing cards ranks, &lt;c0&gt;Rank&lt;/c0&gt;, which ranges from &lt;c1&gt;ace&lt;/c1&gt; (low) to &lt;c2&gt;king&lt;/c2&gt; (high).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、トランプのランクそれらからなるある列挙、&lt;c0&gt;Rank&lt;/c0&gt;を使います、それは&lt;c1&gt;ace&lt;/c1&gt;（低）から&lt;c2&gt;king&lt;/c2&gt;（高）までに及びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses indexed subscripting to update an array’s second element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、インデックスでの添え字を使って、配列の２番目の要素を更新します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c0&gt;drop(while:)&lt;/c0&gt; method to skip over the positive numbers at the beginning of the &lt;c1&gt;numbers&lt;/c1&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;drop(while:)&lt;/c0&gt;メソッドを使って、正の数を&lt;c1&gt;numbers&lt;/c1&gt;配列の始まりで省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c0&gt;first(where:)&lt;/c0&gt; method to find the first negative number in an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;first(where:)&lt;/c0&gt;メソッドを使って、整数の配列において最初の負数を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c0&gt;negate()&lt;/c0&gt; method to negate the value of an integer &lt;c1&gt;x&lt;/c1&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は&lt;c0&gt;negate()&lt;/c0&gt;メソッドを使って、整数&lt;c1&gt;x&lt;/c1&gt;の値を負にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c0&gt;prefix(while:)&lt;/c0&gt; method to find the positive numbers at the beginning of the &lt;c1&gt;numbers&lt;/c1&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;prefix(while:)&lt;/c0&gt;メソッドを使って、正の数を&lt;c1&gt;numbers&lt;/c1&gt;配列の始まりで見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c2&gt;~=&lt;/c2&gt; operator to test whether an integer is included in a range of single-digit numbers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c2&gt;~=&lt;/c2&gt;演算子を使って、ある整数が一桁の数いくつかからなるある範囲に含まれるかどうか調べます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c3&gt;zip(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/c3&gt; function to iterate over an array of strings and a countable range at the same time:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は&lt;c3&gt;zip(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/c3&gt;関数を使って、同時に文字列からなる配列とある可付番範囲の全体にわたって反復します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this initializer to create a new &lt;c0&gt;Double&lt;/c0&gt; instance with the sign of &lt;c1&gt;a&lt;/c1&gt; and the magnitude of &lt;c2&gt;b&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このイニシャライザを使って新しい&lt;c0&gt;Double&lt;/c0&gt;インスタンスを&lt;c1&gt;a&lt;/c1&gt;の符号と&lt;c2&gt;b&lt;/c2&gt;の規模で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this initializer to create a new &lt;c0&gt;Double&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このイニシャライザを使って新しい&lt;c0&gt;Double&lt;/c0&gt;インスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this method to convert a partial range up to &lt;c1&gt;4&lt;/c1&gt; into a half-open range, using an array instance to add the range’s lower bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このメソッドを使って、&lt;c1&gt;4&lt;/c1&gt;までの不完全な範囲を半開範囲へと変換します、配列インスタンスを使って範囲の下側の境界を追加しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this method to multiply two &lt;c6&gt;Int8&lt;/c6&gt; values that normally overflow when multiplied:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このメソッドを使って、通常は乗算した時オーバーフローする２つの&lt;c6&gt;Int8&lt;/c6&gt;値を乗算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this method to multiply two &lt;c6&gt;UInt8&lt;/c6&gt; values that normally overflow when multiplied:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このメソッドを使って、通常は乗算した時オーバーフローする２つの&lt;c6&gt;UInt8&lt;/c6&gt;値を乗算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this subscript while counting the occurrences of each letter in a string:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、この添え字を、ある文字列の中の各印字の出現を数える間に使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples show the effects of the &lt;c0&gt;max&lt;w1&gt;Splits&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;omitting&lt;w3&gt;Empty&lt;w4&gt;Subsequences&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; parameters when splitting a string at each space character (” “).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;max&lt;w1&gt;Splits&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;omitting&lt;w3&gt;Empty&lt;w4&gt;Subsequences&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;パラメータの効果を、各空白文字（” “）で文字列を分割する場合で示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples show the effects of the &lt;c0&gt;max&lt;w1&gt;Splits&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;omitting&lt;w3&gt;Empty&lt;w4&gt;Subsequences&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; parameters when splitting a string using a closure that matches spaces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;max&lt;w1&gt;Splits&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;omitting&lt;w3&gt;Empty&lt;w4&gt;Subsequences&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;パラメータの効果を、空白にマッチするクロージャを使って文字列を分割する場合で示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following special cases also apply:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の特別な場合もまた適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following tables use &lt;c0&gt;Type&lt;/c0&gt; as a placeholder type name to indicate syntax for the mappings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の表は、&lt;c0&gt;Type&lt;/c0&gt;をプレースホルダー型名として使ってマップのための構文を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The function uses &lt;c5&gt;type(of:)&lt;/c5&gt; to find the dynamic type of &lt;c6&gt;value&lt;/c6&gt;, which itself is an instance of the &lt;c7&gt;Smiley&lt;w8&gt;.Type&lt;/w8&gt;&lt;/c7&gt; metatype.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、&lt;c5&gt;type(of:)&lt;/c5&gt;を使って&lt;c6&gt;value&lt;/c6&gt;の動的型を見つけます、それはそれ自身が&lt;c7&gt;Smiley&lt;w8&gt;.Type&lt;/w8&gt;&lt;/c7&gt;メタタイプのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The function uses the &lt;c2&gt;multiplied&lt;w3&gt;Reporting&lt;w4&gt;Overflow(by:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; method to multiply &lt;c5&gt;x&lt;/c5&gt; by itself and check whether the result is too large to represent in the same type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、&lt;c2&gt;multiplied&lt;w3&gt;Reporting&lt;w4&gt;Overflow(by:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;メソッドを使って、&lt;c5&gt;x&lt;/c5&gt;をそれ自身で乗算して、結果が同じ型で表現するのに大きすぎないかどうか検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The function won’t compile as written, because a lazy collection’s &lt;c3&gt;filter(_:)&lt;/c3&gt; method requires an escaping closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は書いた通りにコンパイルしないでしょう、なぜなら遅延コレクションのもつ&lt;c3&gt;filter(_:)&lt;/c3&gt;メソッドが脱出クロージャを要求するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The given argument without any changes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何ら変更のない、与えられた引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The given string may begin with a plus or minus sign character (&lt;c0&gt;+&lt;/c0&gt; or &lt;c1&gt;-&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列は、プラスまたはマイナス符号文字（&lt;c0&gt;+&lt;/c0&gt;または&lt;c1&gt;-&lt;/c1&gt;）で始まっても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The global &lt;c0&gt;abs(_:)&lt;/c0&gt; function provides more familiar syntax when you need to find an absolute value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グローバル&lt;c0&gt;abs(_:)&lt;/c0&gt;関数は、あなたが絶対値を見つける必要がある時により親しみやすい構文を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The greater of &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;のより大きい方、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The greater of &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;のうちより大きいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The greatest finite number representable by this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型によって表現可能な最も大きな有限数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The greatest of all the arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべての引数のうち最も大きいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The greatest representable value that compares less than this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>表現可能な最も大きい値で、この値と比較してより小さいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hash algorithm implemented by &lt;c1&gt;Hasher&lt;/c1&gt; may itself change between any two versions of the standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Hasher&lt;/c1&gt;によって実装されるハッシュアルゴリズムは、標準ライブラリの任意の２つのバージョン間でそれ自体が変化するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hash value calculated by the hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャーによって計算されるハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hasher to use when combining the components of this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスの構成要素を結合する場合に使うハーシャー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hasher uses a per-execution seed value that is set during process startup, usually from a high-quality random source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャーは実行毎シード値を使います、それはプロセスの立ち上げの間に設定されます、ふつうは高品質の無作為出典から。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The header's name is generated from your product module name, followed by &lt;c0&gt;"-Swift&lt;w1&gt;.h"&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ヘッダの名前は、あなたの製品モジュール名から、それに&lt;c0&gt;"-Swift&lt;w1&gt;.h"&lt;/w1&gt;&lt;/c0&gt;を続けることで生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The identical-to operator (&lt;c0&gt;===&lt;/c0&gt;) returns &lt;c1&gt;false&lt;/c1&gt; when comparing two references to different object instances, even if the two instances have the same value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一性演算子（&lt;c0&gt;===&lt;/c0&gt;）は、２つのインスタンスを比較して異なるオブジェクトインスタンスであるとき&lt;c1&gt;false&lt;/c1&gt;を返します、２つのインスタンスが同じ値を持つとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The identity of a class instance is not part of an instance’s value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラスインスタンスの同一性は、インスタンスの持つ値の部分のことではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The implementation of the &lt;c0&gt;==&lt;/c0&gt; function returns the same value whether its two arguments are the same instance or are two different instances with the same integer stored in their &lt;c1&gt;value&lt;/c1&gt; properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;==&lt;/c0&gt;関数の実装は、それの２つの引数が同じインスタンスであろうと、それらの&lt;c1&gt;value&lt;/c1&gt;プロハティの中に格納される同じ整数を持つ２つの異なるインスタンスであろうと、同じ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The imported &lt;c0&gt;Cake&lt;/c0&gt; structure and its nested types are imported with a memberwise initializer that you can use to initialize the structure with custom values for its fields:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされた&lt;c0&gt;Cake&lt;/c0&gt;構造体とそれの入れ子にされる型は、あるメンバー関連イニシャライザを使ってインポートされます、それをあなたは使うことで構造体をそれのフィールドにカスタム値を使って初期化できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The imported Swift structure contains a stored property for each C structure field and an initializer whose parameters correspond to the stored properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたSwift構造体は、各C構造体フィールドに対してひとつの格納プロパティを、そしてそれのパラメータが格納プロパティと対応するひとつのイニシャライザを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index at which to start the resulting subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それで結果の下位シーケンスが始まるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index for &lt;c0&gt;key&lt;/c0&gt; and its associated value if &lt;c1&gt;key&lt;/c1&gt; is in the dictionary; otherwise, &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;key&lt;/c0&gt;とそれの結び付けられた値のインデックス、&lt;c1&gt;key&lt;/c1&gt;が辞書の中にあるならば；そうでなければ、&lt;c2&gt;nil&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index immediately after &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;の直後のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index immediately before &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;の直前のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the element to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスする要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first element for which &lt;c0&gt;predicate&lt;/c0&gt; returns &lt;c1&gt;true&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対して&lt;c0&gt;predicate&lt;/c0&gt;が&lt;c1&gt;true&lt;/c1&gt;を返す最初の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first element in the reordered collection that matches &lt;c0&gt;belongs&lt;w1&gt;In&lt;w2&gt;Second&lt;w3&gt;Partition&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>並べ直されたコレクションの中の最初の要素のインデックス、それは&lt;c0&gt;belongs&lt;w1&gt;In&lt;w2&gt;Second&lt;w3&gt;Partition&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に合致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first value to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する１つ目の値のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the last element in the collection that matches &lt;c0&gt;predicate&lt;/c0&gt;, or &lt;c1&gt;nil&lt;/c1&gt; if no elements match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;に合致する、コレクションの中の最後の要素のインデックス、または合致する要素がないならば&lt;c1&gt;nil&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the last element to include in the resulting subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の下位シーケンスの中に含まれることになる最後の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the second value to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する２つ目の値のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index type for arrays, &lt;c0&gt;Int&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列のためのインデックス型、&lt;c0&gt;Int&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index value immediately after &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;の直後のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index value immediately before &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;の直前のインデックス値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The indices that are valid for subscripting the collection, in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの添え字に使うのに有効である、昇順でのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The initial state that will be passed to the closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態、それはクロージャに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The input string to convert to a &lt;c0&gt;Double&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Double&lt;/c0&gt;インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The input string to convert to a &lt;c0&gt;Float16&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float16&lt;/c0&gt;インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The input string to convert to a &lt;c0&gt;Float80&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float80&lt;/c0&gt;インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The input string to convert to a &lt;c0&gt;Float&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float&lt;/c0&gt;インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The insertions contained by this difference, from lowest offset to highest.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この差異によって含まれる挿入、最も低いオフセットから最も高い方へと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance &lt;c0&gt;x&lt;/c0&gt;, cast to type &lt;c1&gt;T&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス&lt;c0&gt;x&lt;/c0&gt;、型&lt;c1&gt;T&lt;/c1&gt;にキャスト済み。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance passed as &lt;c0&gt;value&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;として渡されるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance passed as &lt;c0&gt;x&lt;/c0&gt; must be an instance of type &lt;c1&gt;T&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;として渡されるインスタンスは、型&lt;c1&gt;T&lt;/c1&gt;のインスタンスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to cast to &lt;c0&gt;type&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;type&lt;/c0&gt;にキャストすることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instances of &lt;c8&gt;NSDictionary&lt;/c8&gt; and &lt;c9&gt;Dictionary&lt;/c9&gt; share buffer using the same copy-on-write optimization that is used when two instances of &lt;c10&gt;Dictionary&lt;/c10&gt; share buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c8&gt;NSDictionary&lt;/c8&gt;と&lt;c9&gt;Dictionary&lt;/c9&gt;インスタンスは、&lt;c10&gt;Dictionary&lt;/c10&gt;の２つのインスタンスがバッファを共有するとき使われるのと、同じコピーオンライト最適化を使ってバッファを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer encoding of a &lt;c0&gt;Double&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Double&lt;/c0&gt;インスタンスの整数符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer encoding of a &lt;c0&gt;Float16&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Float16&lt;/c0&gt;インスタンスの整数符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer encoding of a &lt;c0&gt;Float&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Float&lt;/c0&gt;インスタンスの整数符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer to convert to a floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値へ変換されることになる整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer to convert, an instance of type &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換する整数、型&lt;c0&gt;T&lt;/c0&gt;のあるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer value of the desired key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>望むキーの整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer value of the unique identifier wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データ値の中にラップされる特有識別子の整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるデータ値の中にラップされる整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integral value found by rounding using &lt;c0&gt;rule&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rule&lt;/c0&gt;を使って丸められることによって見出される整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator can choose how to handle and respond to cancellation, including:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータは、どのように取り消しを処理してそして応答するかを選択できます、それは次を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator for &lt;c0&gt;Enumerated&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Enumerated&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator returns &lt;c0&gt;nil&lt;/c0&gt; to indicate the end of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータ（反復子）は、&lt;c0&gt;nil&lt;/c0&gt;を返すことでシーケンスの終わりを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator that produces elements of the compact map sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパクトマップシーケンスの要素それらを生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator that produces elements of the drop-first sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drop-firstシーケンスの要素それらを生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator that produces elements of the drop-while sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>drop-whileシーケンスの要素それらを生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator that produces elements of the filter sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>フィルタシーケンスの要素それらを生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator that produces elements of the flat map sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>フラットマップシーケンスの要素それらを生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator that produces elements of the map sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マップシーケンスの要素それらを生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator that produces elements of the prefix sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefixシーケンスの要素それらを生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator that produces elements of the prefix-while sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefix-whileシーケンスの要素それらを生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The joined sequence of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>つなぎ合わされたシーケンス要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key path to append.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加することになるキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key the look up in the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の中を検索するキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to associate with &lt;c0&gt;value&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;と結び付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to compare against.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーに対して比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to compare with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーと比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to find in the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーが辞書において捜されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to remove along with its associated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの関連する値とともに削除されるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key type of a dictionary literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書リテラルのキー型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key type to use for the container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンテナに対して使うためのキー型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key-value pair that correspond to &lt;c0&gt;index&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;に対応するキー値ペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key-value pairs that will make up the new dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい辞書を作り上げるキー値ペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key’s hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのキーのもつハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key’s string value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーのもつ文字列値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lanewise maximum of two vectors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのベクターのレーン単位の最大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lanewise minimum of two vectors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのベクターのレーン単位最小。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the collection if the collection has one or more elements; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが１つ以上の要素を持つならばコレクションの最後の要素；そうでなければ&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the collection if the collection is not empty; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空でないならばコレクションの最後の要素；そうでなければ&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最後の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the sequence that satisfies &lt;c0&gt;predicate&lt;/c0&gt;, or &lt;c1&gt;nil&lt;/c1&gt; if there is no element that satisfies &lt;c2&gt;predicate&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;満たすシーケンスの最後の要素、または&lt;c1&gt;predicate&lt;/c1&gt;を満たす要素が無いならば&lt;c2&gt;nil&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last index where &lt;c0&gt;element&lt;/c0&gt; is found.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこで&lt;c0&gt;element&lt;/c0&gt;が見つけられた最後のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lazy collection isn’t persisted, so the &lt;c4&gt;predicate&lt;/c4&gt; closure won’t actually escape the body of the function; nevertheless, it can’t be used in this way.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延コレクションは持続させられません、それで&lt;c4&gt;predicate&lt;/c4&gt;クロージャは実際には関数の本文を脱出することはありません；それはこの方法では使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The least normal exponent for values of the type &lt;c0&gt;F&lt;/c0&gt; is &lt;c1&gt;1 - bias&lt;/c1&gt;, and the largest finite exponent is &lt;c2&gt;bias&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;F&lt;/c0&gt;の最小正規化指数は、&lt;c1&gt;1 - bias&lt;/c1&gt;です、最大有限指数は&lt;c2&gt;bias&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The least of all the arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべての引数のうち最も少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The least positive normal number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も小さい正のノーマル数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The least positive number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も小さい正の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The least representable value that compares greater than this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>表現可能な最も小さい値で、この値と比較してより大きいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The left-hand side of the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子の左手側。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lesser of &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;のうちより小さいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The line number to print along with &lt;c0&gt;message&lt;/c0&gt; if the assertion fails.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>表明（アサーション）がうまくいかないならば、&lt;c0&gt;message&lt;/c0&gt;とともに出力する行番号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The line number to print along with &lt;c0&gt;message&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;message&lt;/c0&gt;に加えて出力される行番号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The little-endian representation of this integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のリトルエンディアン表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The logical AND operator (&lt;c0&gt;&amp;&amp;&lt;/c0&gt;) combines two Boolean values and returns &lt;c1&gt;true&lt;/c1&gt; if both of the values are &lt;c2&gt;true&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理AND演算子（&lt;c0&gt;&amp;&amp;&lt;/c0&gt;）は２つのブール値を組み合わせて、&lt;c1&gt;true&lt;/c1&gt;を両方の値が&lt;c2&gt;true&lt;/c2&gt;ならば返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The logical NOT operator (&lt;c0&gt;!&lt;/c0&gt;) inverts a Boolean value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理NOT演算子（&lt;c0&gt;!&lt;/c0&gt;）は、ブール値を逆にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The logical OR operator (&lt;c0&gt;||&lt;/c0&gt;) combines two Boolean values and returns &lt;c1&gt;true&lt;/c1&gt; if at least one of the values is &lt;c2&gt;true&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理OR演算子（&lt;c0&gt;||&lt;/c0&gt;）は、２つのブール値を組み合わせて、&lt;c1&gt;true&lt;/c1&gt;を値の少なくとも１つが&lt;c2&gt;true&lt;/c2&gt;ならば返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lower bound for the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の下側の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The magnitude of a floating-point value &lt;c0&gt;x&lt;/c0&gt; of type &lt;c1&gt;F&lt;/c1&gt; can be calculated by using the following formula, where &lt;c2&gt;**&lt;/c2&gt; is exponentiation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c1&gt;F&lt;/c1&gt;の浮動小数点値&lt;c0&gt;x&lt;/c0&gt;の規模は、以下の公式を使って計算されることができます、そこで&lt;c2&gt;**&lt;/c2&gt;は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The magnitude of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の規模。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The map sequence produces whatever type of element its the transforming closure produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マップシーケンスは、それの変換クロージャが生み出す要素の型が何であろうとも生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The map sequence produces whatever type of element its transforming closure produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マップシーケンスは、それの変換クロージャが生み出す要素の型が何であろうとも生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The masking addition assignment operator (&lt;c0&gt;&amp;+=&lt;/c0&gt;) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク加算代入演算子（&lt;c0&gt;&amp;+=&lt;/c0&gt;）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The masking multiplication assignment operator (&lt;c0&gt;&amp;*=&lt;/c0&gt;) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク乗算代入演算子（&lt;c0&gt;&amp;*=&lt;/c0&gt;）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The masking subtraction assignment operator (&lt;c0&gt;&amp;-=&lt;/c0&gt;) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク減算代入演算子（&lt;c0&gt;&amp;-=&lt;/c0&gt;）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The mathematical constant pi.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数学の定数pi。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum depth to descend when writing the contents of a value that has nested components.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入れ子になった構成要素を持つ値の内容を書き出す時に下る最大の深さ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of elements for which to write the full contents.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完全な内容を書き出すための最大要素数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of elements to hold in the buffer past any checks for continuations being resumed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続が再開されるためのあらゆる検査を通過した後にバッファの中に保持する要素の最大数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of elements to return.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返される要素の最大限の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of pending elements limited by dropping the oldest value when a new value comes in if the buffer would excede the limit placed upon it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値がやって来る時にもしバッファがそれの上に置かれる制限を越えるならば最古の値を除くことによって限界を設けられる未解決要素の最大数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of times to split the collection, or one less than the number of subsequences to return.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションを分割する回数の最大限度、または返される下位シーケンスの数より１つ少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of times to split the sequence, or one less than the number of subsequences to return.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスを分割する回数の最大限度、または返される下位シーケンスの数より１つ少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum representable integer in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型における最大の表現可能な整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the range &lt;c2&gt;buffer[0..&lt;initialized&lt;w3&gt;Count]&lt;/w3&gt;&lt;/c2&gt; must be initialized at the end of the closure’s execution, and the memory in the range &lt;c4&gt;buffer[initialized&lt;w5&gt;Count...]&lt;/w5&gt;&lt;/c4&gt; must be uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲&lt;c2&gt;buffer[0..&lt;initialized&lt;w3&gt;Count]&lt;/w3&gt;&lt;/c2&gt;の中のメモリは、クロージャの遂行の終わりで初期化されなければなりません、そして範囲&lt;c4&gt;buffer[initialized&lt;w5&gt;Count...]&lt;/w5&gt;&lt;/c4&gt;の中のメモリは、未初期化でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The method has a &lt;c0&gt;void&lt;/c0&gt; return type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのメソッドは&lt;c0&gt;void&lt;/c0&gt;戻り型を持つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The method that takes a completion handler must meet the following requirements:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完了ハンドラをとるメソッドは、以下の要件を満たさなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The minimum number of key-value pairs that the newly created dictionary should be able to store without reallocating its storage buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しく作成された辞書がそれのストレージバッファをアロケートし直すことなしに格納できるであろうキー値ペアの最小の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The minimum of &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;の最小、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The minimum representable integer in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型における最小の表現可能な整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The modified sequence ends when the predicate closure returns &lt;c1&gt;false&lt;/c1&gt; or throws an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>修正されたシーケンスは、述部クロージャが&lt;c1&gt;false&lt;/c1&gt;を返すかエラーをスローする時に終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The modified sequence ends when the predicate closure returns &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>修正されたシーケンスは、条件クロージャが&lt;c1&gt;false&lt;/c1&gt;を返す時に終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The most common way to access values in a dictionary is to use a key as a subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の中の値にアクセスする最も普通の方法は、キーを添え字として使うことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The most familiar use of relational operators is to compare numbers, as in the following example:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最もよく知られている関係演算子の使用は、数の比較に対してです、以下の例でのように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The multiplication operator (&lt;c0&gt;*&lt;/c0&gt;) calculates the product of its two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算演算子（&lt;c0&gt;*&lt;/c0&gt;）は、それの２つの引数の積を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the Swift method is modified from the Objective-C method as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftメソッドの名前は、Objective-Cメソッドから以下のように修正されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name “epsilon” suggests that this quantity is a good tolerance to choose for approximate comparisons, but it is almost always unsuitable for that purpose.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>名前 “イプシロン” は、この量がおおよその比較のために選ぶのに良い許容誤差であることを暗示します、しかしそれはほとんど常にその目的のために適しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The naming of those macros is slightly misleading, because &lt;c4&gt;infinity&lt;/c4&gt; is greater than this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのマクロの命名の仕方は少しばかり誤解させます、なぜなら&lt;c4&gt;infinity&lt;/c4&gt;はこの値より大きいからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The naming of those macros is slightly misleading, because subnormals, zeros, and negative numbers are smaller than this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのマクロの命名の仕方は少しばかり誤解させます、なぜならサブノーマル、ゼロ、そして負の数はこの値より小さいからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The nearest integral value, or, if two integral values are equally close, the integral value with greater magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も近い整数値、または、２つの整数値が同じくらい近いならば、より大きい規模を持つ整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The negation operator (prefix &lt;c0&gt;-&lt;/c0&gt;) returns the additive inverse of its argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負にする演算子（前置&lt;c0&gt;-&lt;/c0&gt;）は、この引数の加法の逆元を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new &lt;c0&gt;students&lt;w1&gt;By&lt;w2&gt;Letter&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; dictionary has three entries, with students’ names grouped by the keys &lt;c3&gt;"E"&lt;/c3&gt;, &lt;c4&gt;"K"&lt;/c4&gt;, and &lt;c5&gt;"A"&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい&lt;c0&gt;students&lt;w1&gt;By&lt;w2&gt;Letter&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;辞書は、生徒の名前をキー&lt;c3&gt;"E"&lt;/c3&gt;、&lt;c4&gt;"K"&lt;/c4&gt;、そして&lt;c5&gt;"A"&lt;/c5&gt;でグループ分けして、３つの登録項目を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new array, on the other hand, matches the order and number of elements provided.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一方、新しい配列は、提供された要素の順番と数に合致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new element is inserted before the element currently at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい要素は、指定されたインデックスでの現在の要素の前に挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new element to insert into the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列に挿入されることになる新しい要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new elements are inserted before the element currently at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいいくらかの要素が、指定されたインデックスでの現在の要素の前に挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new elements to add to the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列に加えられることになる新しい要素ら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new elements to add to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションに加える新しいいくらかの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new elements to insert into the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションへ挿入される新しいいくらかの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new storage is a multiple of the old storage’s size.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいストレージは古いストレージの大きさの倍数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new value represents the address of the pointer passed as &lt;c0&gt;pointer&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値は、&lt;c0&gt;pointer&lt;/c0&gt;として渡されるポインタのアドレスを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new value to add to the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この辞書に加える新しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new value’s exponent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値の持つ指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new value’s significand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値の持つ仮数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next code sample shows a possible extension to the &lt;c0&gt;Int&lt;/c0&gt; type that parses the integer value of a &lt;c1&gt;String&lt;/c1&gt; instance, throwing an error when there is a problem during parsing.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次のコード例が示すのは、&lt;c0&gt;Int&lt;/c0&gt;型に対する１つの可能な拡張で、それは&lt;c1&gt;String&lt;/c1&gt;インスタンスの整数値をパースして、パースの間に問題がある時はエラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next element in the underlying sequence if a next element exists; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の要素が存在するならば基礎をなすシーケンス中の次の要素；そうでなければ、&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next element in the underlying sequence, if a next element exists; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の要素が存在するならば、基礎をなすシーケンス中の次の要素；そうでなければ、&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next element, if it exists, or &lt;c0&gt;nil&lt;/c0&gt; to signal the end of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の要素、もしそれが存在するならば、またはシーケンスの終わりを合図する&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example attempts to retrieve an index six positions from &lt;c0&gt;s&lt;w1&gt;.start&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; but fails, because that distance is beyond the index passed as &lt;c3&gt;limit&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は&lt;c0&gt;s&lt;w1&gt;.start&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から６位置のインデックスをとりだすことを試みます、しかし失敗します、なぜならその間隔は&lt;c3&gt;limit&lt;/c3&gt;として渡されるインデックスを越えるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example attempts to retrieve an index ten positions from &lt;c0&gt;numbers&lt;w1&gt;.start&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, but fails, because that distance is beyond the index passed as &lt;c3&gt;limit&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は&lt;c0&gt;numbers&lt;w1&gt;.start&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から10位置のインデックスをとりだすことを試みます、しかし失敗します、なぜならその間隔は&lt;c3&gt;limit&lt;/c3&gt;として渡されるインデックスを越えるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example creates a slice of &lt;c4&gt;numbers&lt;/c4&gt; starting at index &lt;c5&gt;2&lt;/c5&gt;, and then uses the slice with &lt;c6&gt;relative(to:)&lt;/c6&gt; to convert &lt;c7&gt;up&lt;w8&gt;To&lt;w9&gt;Four&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; to a concrete range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、&lt;c4&gt;numbers&lt;/c4&gt;のスライスをインデックス&lt;c5&gt;2&lt;/c5&gt;で開始して作成して、それからそのスライスを&lt;c6&gt;relative(to:)&lt;/c6&gt;と使うことで&lt;c7&gt;up&lt;w8&gt;To&lt;w9&gt;Four&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;を具体的な範囲へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example declares a generic &lt;c0&gt;squared&lt;/c0&gt; function, which accepts an instance &lt;c1&gt;x&lt;/c1&gt; of any fixed-width integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、総称体&lt;c0&gt;squared&lt;/c0&gt;関数を宣言します、それはどんな固定長整数型の&lt;c1&gt;x&lt;/c1&gt;インスタンスでも受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example tries to find the correct text for a greeting in two separate dictionaries before falling back to a static default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、挨拶として正しいテキストを２つの独立した辞書から見つけることをある静的な省略時のものに落ち着く前に試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example uses key-based subscripting of the &lt;c0&gt;response&lt;w1&gt;Messages&lt;/w1&gt;&lt;/c0&gt; dictionary with two keys that exist in the dictionary and one that does not.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、キーに基づく添え字を&lt;c0&gt;response&lt;w1&gt;Messages&lt;/w1&gt;&lt;/c0&gt;辞書に使います、ですが２つのキーは辞書に存在し１つはそうでありません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next value from the AsyncStream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AsyncStreamからの次の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits equal to 1 in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現の中の１に等しいビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits in the binary representation of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現でのビット数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits in the current binary representation of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の現在のバイナリ表現でのビット数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits required to represent the value’s significand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の仮数を表すのに必要とされるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits to shift &lt;c0&gt;lhs&lt;/c0&gt; to the left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このビット数を&lt;c0&gt;lhs&lt;/c0&gt;から左へとシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits to shift &lt;c0&gt;lhs&lt;/c0&gt; to the right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このビット数を&lt;c0&gt;lhs&lt;/c0&gt;から右へとシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits used for the underlying binary representation of values of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の値の基礎をなすバイナリ表現に対して使われるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits used to represent the type’s exponent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型のもつ指数を表すのに使われるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements (always zero).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の数を返します（常にゼロ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements in the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その配列中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements in the collection, which is always one.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中の要素数、それは常に１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to allocate space for in the new array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい配列において空間を割り当てる要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの始まりから省く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの初めの部分から落とす要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop off the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの終わりで省く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop off the end of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの末尾から取り除く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to remove from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションから削除される要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除する要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of key-value pairs in the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の中のキー値ペアの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of keys in the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の中のキーの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of leading zeros in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現における先頭のゼロの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of new elements need not match the number of elements being removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい要素の数は、削除される要素の数と一致する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of scalars, or elements, in a vector of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型のあるベクターの中のスカラーそれら、または要素それらの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of scalars, or elements, in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの中のスカラー、または要素、の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of spaces to use as an indent for each line of the output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>出力の各行のひとつの字下げとして使われる空白の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of strides of the pointer’s &lt;c0&gt;Pointee&lt;/c0&gt; type to offset this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタの&lt;c0&gt;Pointee&lt;/c0&gt;型のストライドの数、このポインタに補われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of times to repeat &lt;c0&gt;element&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;element&lt;/c0&gt;を繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of times to repeat the value passed in the &lt;c0&gt;repeating&lt;/c0&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;repeating&lt;/c0&gt;パラメータで渡された値を繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of trailing zeros in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現において後に続くゼロの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of values in the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の中の値の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The numeric value this character represents, if it is a hexadecimal digit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字が表す数値、もしそれが16進法桁を表すならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The numeric value this character represents, if it represents a whole number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字が表す数値、もしそれが整数を表すならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The only valid position in a &lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance is &lt;c3&gt;0&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスの中の唯一の有効な位置は、&lt;c3&gt;0&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The opaque pointer to convert to a typed pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタに変換されることになる不透明ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The operation doesn’t require going beyond the limiting &lt;c0&gt;numbers&lt;w1&gt;.end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; value, so it succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この操作は、限度である&lt;c0&gt;numbers&lt;w1&gt;.end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;値を越えることを要求しません、それでそれは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The operation doesn’t require going beyond the limiting &lt;c0&gt;s&lt;w1&gt;.end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; value, so it succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算は、限界である&lt;c0&gt;s&lt;w1&gt;.end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;値を越えていく必要はありません、それでそれは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The order of key-value pairs in a dictionary is stable between mutations but is otherwise unpredictable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書中のキー値ペアの順番は各変化間は安定しています、しかしそれ以外では予測できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The order of the remaining elements is preserved.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>残っている要素の順番は保全されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The other value to multiply.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>掛け合わされることになるもう一方の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output from each call to &lt;c0&gt;debug&lt;w1&gt;Print(_:&lt;w2&gt;separator:&lt;w3&gt;terminator:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; includes a newline by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;debug&lt;w1&gt;Print(_:&lt;w2&gt;separator:&lt;w3&gt;terminator:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output from each call to &lt;c0&gt;debug&lt;w1&gt;Print(_:&lt;w2&gt;separator:&lt;w3&gt;terminator:&lt;w4&gt;to:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; includes a newline by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;debug&lt;w1&gt;Print(_:&lt;w2&gt;separator:&lt;w3&gt;terminator:&lt;w4&gt;to:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output from each call to &lt;c0&gt;print(_:&lt;w1&gt;separator:&lt;w2&gt;terminator:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; includes a newline by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;print(_:&lt;w1&gt;separator:&lt;w2&gt;terminator:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output from each call to &lt;c0&gt;print(_:&lt;w1&gt;separator:&lt;w2&gt;terminator:&lt;w3&gt;to:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; includes a newline by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;print(_:&lt;w1&gt;separator:&lt;w2&gt;terminator:&lt;w3&gt;to:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The overflow addition operator (&lt;c0&gt;&amp;+&lt;/c0&gt;) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー加算演算子（&lt;c0&gt;&amp;+&lt;/c0&gt;）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The overflow multiplication operator (&lt;c0&gt;&amp;*&lt;/c0&gt;) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー乗算演算子（&lt;c0&gt;&amp;*&lt;/c0&gt;）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The overflow subtraction operator (&lt;c0&gt;&amp;-&lt;/c0&gt;) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー減算演算子（&lt;c0&gt;&amp;-&lt;/c0&gt;）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path of coding keys taken to get to the point of the failing decode call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>失敗しているデコード呼び出しの地点に行くために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path of coding keys taken to get to the point of the failing encode call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>失敗しているエンコード呼び出しの地点に行くために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path of coding keys taken to get to this point in decoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコーディングのこの時点を得るために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path of coding keys taken to get to this point in encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングのこの時点を得るために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path should be relative to your project, similar to the way your &lt;c0&gt;Info&lt;w1&gt;.plist&lt;/w1&gt;&lt;/c0&gt; path is specified in Build Settings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パスは、あなたの&lt;c0&gt;Info&lt;w1&gt;.plist&lt;/w1&gt;&lt;/c0&gt;パスがBuild Settingsにおいて指定される方法と同様に、あなたのプロジェクトに対して相対的であるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pattern-matching operator (&lt;c0&gt;~=&lt;/c0&gt;) is used internally in &lt;c1&gt;case&lt;/c1&gt; statements for pattern matching.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パターンマッチング演算子（&lt;c0&gt;~=&lt;/c0&gt;）は、内部的に&lt;c1&gt;case&lt;/c1&gt;文の中でパターンマッチングのために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pattern-matching operator is primarily intended to enable &lt;c1&gt;case&lt;/c1&gt; statement pattern matching.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パターンマッチング演算子は、元来&lt;c1&gt;case&lt;/c1&gt;文パターンマッチングをできるようにすることを意図されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pattern-matching operator is used internally in &lt;c1&gt;case&lt;/c1&gt; statements for pattern matching.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パターンマッチング演算子は、内部的に&lt;c1&gt;case&lt;/c1&gt;文の中でパターンマッチングのために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The payload consists of a sequence of decimal digits, or the characters &lt;c1&gt;0X&lt;/c1&gt; or &lt;c2&gt;0x&lt;/c2&gt; followed by a sequence of hexadecimal digits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードは、一連の10進の桁、または文字&lt;c1&gt;0X&lt;/c1&gt;か&lt;c2&gt;0x&lt;/c2&gt;に続く一連の16進の桁から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The payload to use for the new NaN value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいNaN値のために使うためのペイロード。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The performance of some collection operations depends on the type of index that the collection provides.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかのコレクション演算の性能は、コレクションの提供するインデックスの型に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer argument is valid only for the duration of the function’s execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタ引数は、関数の実行の継続期間に対してだけ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer argument is valid only for the duration of the method’s execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタ引数は、ただメソッドの実行の間に対してのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer argument to &lt;c0&gt;body&lt;/c0&gt; is valid only during the execution of &lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer(to:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;へのポインタ引数は、&lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer(to:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer argument to &lt;c0&gt;body&lt;/c0&gt; is valid only during the execution of &lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Pointer(to:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;へのポインタ引数は、&lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Pointer(to:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer passed as an argument to &lt;c0&gt;body&lt;/c0&gt; is valid only during the execution of &lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Buffer&lt;w4&gt;Pointer(_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数として&lt;c0&gt;body&lt;/c0&gt;に渡されるポインタは、&lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Buffer&lt;w4&gt;Pointer(_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer passed as an argument to &lt;c0&gt;body&lt;/c0&gt; is valid only during the execution of &lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Buffer&lt;w5&gt;Pointer(_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数として&lt;c0&gt;body&lt;/c0&gt;に渡されるポインタは、&lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Buffer&lt;w5&gt;Pointer(_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer passed as an argument to &lt;c0&gt;body&lt;/c0&gt; is valid only during the execution of &lt;c1&gt;with&lt;w2&gt;Va&lt;w3&gt;List(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数として&lt;c0&gt;body&lt;/c0&gt;に渡されるポインタは、&lt;c1&gt;with&lt;w2&gt;Va&lt;w3&gt;List(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer passed as an argument to &lt;c0&gt;body&lt;/c0&gt; is valid only for the lifetime of the closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数として&lt;c0&gt;body&lt;/c0&gt;に渡されるポインタは、このクロージャの生涯に対してのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer to calculate the distance to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それへの隔たりを計算されるポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer to use as the source for the new integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい整数のためのソースとして使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position at which to insert the new element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこで新しい要素が挿入されることになる位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position at which to insert the new elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこで新しいいくらかの要素が挿入されるところの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of a collection difference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション差異の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of a key-value pair in a dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の中でのあるキー値ペアの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the element to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスする要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the element to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除する要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first element in a non-empty collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でないコレクションにおける最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first element in a nonempty array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でない集合の中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first element in a nonempty collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でないコレクションの中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first element in a nonempty dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でない辞書の中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first element in the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the key-value pair to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この位置のキー値ペアにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the key-value pair to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除されるキー値ペアの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The positive difference between 1.0 and the next greater representable number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>1.0と次により大きい表現可能な数との間の正の差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部は、非同期シーケンスがある要素を生み出すたびごとに遂行されます、述部がある合致を見つけるかシーケンスが終わるかどちらかまで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate executes each time the asynchronous sequence produces an element, until either the predicate returns &lt;c0&gt;false&lt;/c0&gt; or the sequence ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部は、非同期シーケンスがある要素を生み出すたびごとに遂行されます、述部が&lt;c0&gt;false&lt;/c0&gt;を返すかシーケンスが終わるかどちらかまで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate must be a &lt;e0&gt;equivalence relation&lt;/e0&gt; over the elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部は要素に対して&lt;e0&gt;同値関係&lt;/e0&gt;でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate must be a &lt;e0&gt;strict weak ordering&lt;/e0&gt; over the elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部は、それら要素に対して&lt;e0&gt;厳密弱順序&lt;/e0&gt;でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate orders errors before successes and sorts the error responses by their error code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この述部はエラーを成功の前に並べて、そしてそれらエラー応答をそのエラーコードによってソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate passed to the &lt;c4&gt;drop(while:)&lt;/c4&gt; method throws an error if it encounters an even number, and otherwise returns &lt;c5&gt;true&lt;/c5&gt; while it receives elements less than &lt;c6&gt;5&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;drop(while:)&lt;/c4&gt;メソッドに渡される述部は、それが偶数に出会うならばエラーをスローします、そしてそうでなければ&lt;c5&gt;true&lt;/c5&gt;を、それが&lt;c6&gt;5&lt;/c6&gt;より少ない要素を受けとる間ずっと返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate provided to the &lt;c5&gt;max(by:)&lt;/c5&gt; method sorts ranks based on their &lt;c6&gt;raw&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;max(by:)&lt;/c5&gt;メソッドに提供された述部は、ランクそれらをそれらの&lt;c6&gt;raw&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;に基づいて並べ換えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate provided to the &lt;c5&gt;min(by:)&lt;/c5&gt; method sorts ranks based on their &lt;c6&gt;raw&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;min(by:)&lt;/c5&gt;メソッドに提供された述部は、ランクそれらをそれらの&lt;c6&gt;raw&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;に基づいて並べ換えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The prefix sequence produces whatever type of element its base iterator produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefixシーケンスは、それの基底イテレータが生み出す要素の型が何であろうとも生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The prefix-while sequence produces whatever type of element its base iterator produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>prefix-whileシーケンスは、それの基底イテレータが生み出す要素の型が何であろうとも生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The process for importing Swift declarations into Objective-C code differs slightly depending on whether you’re writing an app or a framework.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift宣言をObjective-Cコードにインポートする行程は、あなたがアプリを書いているかフレームワークを書いているかに従い、わずかに異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The process for using your Objective-C declarations from your Swift code within mixed-language targets differs slightly depending on whether you’re writing an app or a framework.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-C宣言をあなたのSwiftコードから混合言語ターゲット内部において使うことに対する行程は、あなたがアプリをまたはフレームワークを書くかによって少しばかり異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of &lt;c0&gt;lhs&lt;/c0&gt; and &lt;c1&gt;rhs&lt;/c1&gt;, added to this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値に加えられることになる、&lt;c0&gt;lhs&lt;/c0&gt;と&lt;c1&gt;rhs&lt;/c1&gt;の積。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt; is 2000, which is too large to represent in a &lt;c2&gt;UInt8&lt;/c2&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;の積は2000です、それは&lt;c2&gt;UInt8&lt;/c2&gt;インスタンスにおいて表すには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt; is &lt;c2&gt;-1920&lt;/c2&gt;, which is too large to represent in an &lt;c3&gt;Int8&lt;/c3&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;の積は&lt;c2&gt;-1920&lt;/c2&gt;です、それは&lt;c3&gt;Int8&lt;/c3&gt;インスタンスにおいて表すには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の積は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The protocol defines a single asynchronous method, &lt;c8&gt;next()&lt;/c8&gt;, which either produces the next element of the sequence, or returns &lt;c9&gt;nil&lt;/c9&gt; to signal the end of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロトコルは、ただ１つの非同期メソッド&lt;c8&gt;next()&lt;/c8&gt;を定義します、それはシーケンスの次の要素を取り出すか、または&lt;c9&gt;nil&lt;/c9&gt;を返してシーケンスの終わりを合図するかのどちらかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The protocol to which all class types implicitly conform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロトコルに対して、全てのクラス型は暗黙的に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The protocol to which all classes implicitly conform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロトコルに対して、全てのクラスは暗黙的に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The radix, or base of exponentiation, for a floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある浮動小数点型の基数、または冪演算の底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The radix, or base, to use for converting &lt;c0&gt;text&lt;/c0&gt; to an integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;text&lt;/c0&gt;を整数値に変換するのに使うための基数、または底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when choosing a random element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある無作為な要素を選ぶときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when creating the new random value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい無作為値を作成するときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when shuffling the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをシャッフルするときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when shuffling the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスをシャッフルするときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range expression is converted to a concrete subrange relative to this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式は、このコレクションに関連するある具体的な下位範囲へ変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range in which to create a random value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その中においてある無作為な値が作成される範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of the collection to be removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除されることになるコレクションの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range to clamp the bounds of this range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲に制限を課すための範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range’s lower bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その範囲の下方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range’s upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その範囲の上方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw encoding of the value’s exponent field.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値のもつ指数部の生のエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw encoding of the value’s significand field.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の仮数フィールドの生のエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw type that can be used to represent all values of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠している型のすべての値を表すために使われる生の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw value to use for the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのために使う生の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The reference writeable key path to append.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書き込み可能なキーパスの参照、これに対して追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The remainder has the same sign as &lt;c1&gt;lhs&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>余りは、&lt;c1&gt;lhs&lt;/c1&gt;と同じ符号を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The remainder of the relational operator functions are implemented by the standard library for any type that conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>残りの関係演算子関数は、&lt;c1&gt;Comparable&lt;/c1&gt;に準拠するあらゆる型に対して標準ライブラリによって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The remainder of this value divided by &lt;c0&gt;other&lt;/c0&gt; using truncating division.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>切り捨て除算を使って&lt;c0&gt;other&lt;/c0&gt;で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The remainder of this value divided by &lt;c0&gt;other&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The removals contained by this difference, from lowest offset to highest.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この差異によって含まれる除去、最も低いオフセットから最も高い方へと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The removed element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除された要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The requested number of elements to store.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>依頼された格納される要素数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The requested number of key-value pairs to store.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要請された数のキー値ペアを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The required methods that are suffixed with &lt;c3&gt;Reporting&lt;w4&gt;Overflow&lt;/w4&gt;&lt;/c3&gt; serve as the customization points for arithmetic operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必須メソッドで&lt;c3&gt;Reporting&lt;w4&gt;Overflow&lt;/w4&gt;&lt;/c3&gt;を末尾に付けられるものは、算術演算に対するカスタマイズポイントとして供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result begins with the first element of &lt;c2&gt;numbers&lt;/c2&gt; that does not satisfy &lt;c3&gt;predicate&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、&lt;c2&gt;predicate&lt;/c2&gt;を満たさない、&lt;c3&gt;numbers&lt;/c3&gt;の最初の要素で始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result can be negative only if the collection conforms to the &lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、そのコレクションが&lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt;プロトコルに準拠する場合に限り、負であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result has the same sign as &lt;c0&gt;lhs&lt;/c0&gt; and has a magnitude less than &lt;c1&gt;rhs&lt;w2&gt;.magnitude&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、&lt;c0&gt;lhs&lt;/c0&gt;と同じ符号を持ち、&lt;c1&gt;rhs&lt;w2&gt;.magnitude&lt;/w2&gt;&lt;/c1&gt;より小さい規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result is always exact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は常に厳密に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of evaluating &lt;c4&gt;rhs&lt;/c4&gt; is the result of the &lt;c5&gt;||&lt;/c5&gt; operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;rhs&lt;/c4&gt;を評価することの結果は、&lt;c5&gt;||&lt;/c5&gt;演算の結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of evaluating &lt;c5&gt;rhs&lt;/c5&gt; is the result of the &lt;c6&gt;&amp;&amp;&lt;/c6&gt; operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;rhs&lt;/c5&gt;を評価することの結果は、&lt;c6&gt;&amp;&amp;&lt;/c6&gt;演算の結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of the initializer has the same magnitude as &lt;c0&gt;magnitude&lt;w1&gt;Of&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザの結果は、&lt;c0&gt;magnitude&lt;w1&gt;Of&lt;/w1&gt;&lt;/c0&gt;と同じ規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of the initializer has the same sign as &lt;c0&gt;sign&lt;w1&gt;Of&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザの結果は、&lt;c0&gt;sign&lt;w1&gt;Of&lt;/w1&gt;&lt;/c0&gt;と同じ符号を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of the operation is &lt;c7&gt;false&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算の結果は、&lt;c7&gt;false&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of the operation is &lt;c7&gt;true&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算の結果は、&lt;c7&gt;true&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of the remainder operator (&lt;c0&gt;%&lt;/c0&gt;) has the same sign as &lt;c1&gt;lhs&lt;/c1&gt; and has a magnitude less than &lt;c2&gt;rhs&lt;w3&gt;.magnitude&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>剰余演算子（&lt;c0&gt;%&lt;/c0&gt;）の結果は、&lt;c1&gt;lhs&lt;/c1&gt;と同じ符号を持ち、&lt;c2&gt;rhs&lt;w3&gt;.magnitude&lt;/w3&gt;&lt;/c2&gt;より小さい規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of this operation will be the same type as its arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算の結果は、それの引数と同じ型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of this operation will have the non-optional type of the left-hand side’s &lt;c0&gt;Wrapped&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算の結果は、左手側のもつ&lt;c0&gt;Wrapped&lt;/c0&gt;型の非オプショナル型を持つことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting array consists of at most &lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt; subsequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の配列は、多くとも&lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt;の下位シーケンスから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting collection has the type of argument on the right-hand side.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるコレクションは、右手側の引数の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting collection has the type of the argument on the left-hand side.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるコレクションは、左手側の引数の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting flattened array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として生じる平たくされた配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting instance may not have the same numeric value as &lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt;—it is only guaranteed to use the same pattern of bits in its binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のインスタンスは、&lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt;と同じ数値を持たないかもしれません — それは、同じパターンのビットをそれのバイナリ表現において使うことを保証されるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting pointer must be within the bounds of the same allocation as this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のポインタは、このポインタと同じアロケーションの範囲内でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting quotient must be representable within the bounds of the type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の商は、この型の境界の内に表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting subsequence &lt;e0&gt;does not include&lt;/e0&gt; the element at the position &lt;c1&gt;end&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるシーケンスは、位置&lt;c1&gt;end&lt;/c1&gt;での要素を&lt;e0&gt;含みません&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting subsequence &lt;e0&gt;includes&lt;/e0&gt; the element at the position &lt;c1&gt;end&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるシーケンスは、位置&lt;c1&gt;end&lt;/c1&gt;での要素を&lt;e0&gt;含みます&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting value must be representable in the same type as the argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の値は、引数と同じ型で表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting value must be representable within the value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の値は、その値の持つ型の内部に表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The retrieved slice of &lt;c0&gt;text&lt;/c0&gt; is equivalent in each of these cases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取って来た&lt;c0&gt;text&lt;/c0&gt;のスライスは、それらの場合それぞれにで同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return type of functions that do not return normally, that is, a type with no values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>普通に戻らない関数の戻り型、すなわち、値なしでの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return value, if any, of the &lt;c0&gt;body&lt;/c0&gt; closure parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;クロージャパラメータの戻り値、もしあれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return value, if any, of the &lt;c0&gt;body&lt;/c0&gt; closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;クロージャの、もしあれば、戻り値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The returned &lt;c0&gt;Array&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt; instance uses the same indices for the same elements as the original array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返された&lt;c0&gt;Array&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt;インスタンスは、同じ要素に対して元のコレクションと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The returned range is &lt;e1&gt;not&lt;/e1&gt; guaranteed to be inside the bounds of &lt;c2&gt;collection&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返される範囲は、&lt;c2&gt;collection&lt;/c2&gt;の境界内であると保証され&lt;e1&gt;ません&lt;/e1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The right-hand side of the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子の右手側。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The root type for this key path.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーパスのためのルート型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The rounding rule to use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この丸め規則を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The same state is passed to all invocations of &lt;c1&gt;next&lt;/c1&gt;, so subsequent calls will see any mutations made by previous calls.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その同じ状態は、&lt;c1&gt;next&lt;/c1&gt;のすべてに呼び出しに対して渡されます、なので続いて起こる呼び出しは前の呼び出しによって為される何らかの変化を見ることになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second call to &lt;c0&gt;appending(path:)&lt;/c0&gt; returns &lt;c1&gt;nil&lt;/c1&gt; because the root type of &lt;c2&gt;array&lt;w3&gt;Description&lt;/w3&gt;&lt;/c2&gt;, &lt;c4&gt;Array&lt;Int&gt;&lt;/c4&gt;, does not match the value type of &lt;c5&gt;string&lt;w6&gt;Length&lt;/w6&gt;&lt;/c5&gt;, &lt;c7&gt;Int&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の&lt;c0&gt;appending(path:)&lt;/c0&gt;への呼び出しは&lt;c1&gt;nil&lt;/c1&gt;を返します、なぜなら&lt;c2&gt;array&lt;w3&gt;Description&lt;/w3&gt;&lt;/c2&gt;のルート型、&lt;c4&gt;Array&lt;Int&gt;&lt;/c4&gt;は、&lt;c5&gt;string&lt;w6&gt;Length&lt;/w6&gt;&lt;/c5&gt;の値型、&lt;c7&gt;Int&lt;/c7&gt;と合致しないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second call to &lt;c0&gt;appending(path:)&lt;/c0&gt; returns &lt;c1&gt;nil&lt;/c1&gt; because the root type of the &lt;c2&gt;path&lt;/c2&gt; parameter, &lt;c3&gt;Double&lt;/c3&gt;, does not match the value type of &lt;c4&gt;array&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt;, &lt;c6&gt;String&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の&lt;c0&gt;appending(path:)&lt;/c0&gt;への呼び出しは&lt;c1&gt;nil&lt;/c1&gt;を返します、なぜなら&lt;c2&gt;path&lt;/c2&gt;パラメータのルート型、&lt;c3&gt;Double&lt;/c3&gt;は、&lt;c4&gt;array&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt;の値型、&lt;c6&gt;String&lt;/c6&gt;と合致しないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second example passes &lt;c0&gt;1&lt;/c0&gt; for the &lt;c1&gt;max&lt;w2&gt;Splits&lt;/w2&gt;&lt;/c1&gt; parameter, so the original string is split just once, into two new strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の例は&lt;c0&gt;1&lt;/c0&gt;を&lt;c1&gt;max&lt;w2&gt;Splits&lt;/w2&gt;&lt;/c1&gt;パラメータに渡します、それで元の文字列は一度だけ分割されて、２つの新しい文字列になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second partition, &lt;c2&gt;numbers[p...]&lt;/c2&gt;, is made up of the elements that &lt;e3&gt;are&lt;/e3&gt; greater than 30.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の区画、&lt;c2&gt;numbers[p...]&lt;/c2&gt;は、30より大きなもの&lt;e3&gt;である&lt;/e3&gt;要素から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second sequence or collection to zip.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>組み合わされる第２のシーケンスまたはコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second value to add.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算する第２の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second value to multiply.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>掛け合わされる第２の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second value to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する２つ目の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second version of &lt;c7&gt;all&lt;w8&gt;Values(in:&lt;w9&gt;match:)&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; compiles without error, with the compiler guaranteeing that the &lt;c10&gt;escapable&lt;w11&gt;Predicate&lt;/w11&gt;&lt;/c10&gt; closure doesn’t last beyond the call to &lt;c12&gt;without&lt;w13&gt;Actually&lt;w14&gt;Escaping(_:&lt;w15&gt;do:)&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目のバージョンの&lt;c7&gt;all&lt;w8&gt;Values(in:&lt;w9&gt;match:)&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;は、&lt;c10&gt;escapable&lt;w11&gt;Predicate&lt;/w11&gt;&lt;/c10&gt;クロージャが&lt;c12&gt;without&lt;w13&gt;Actually&lt;w14&gt;Escaping(_:&lt;w15&gt;do:)&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt;の呼び出しを越えて持ちこたえないことをコンパイラが保証して、エラーなしでコンパイルします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second version, &lt;c2&gt;present()&lt;/c2&gt;, returns a Boolean value and is an asynchronous method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目のバージョン、&lt;c2&gt;present()&lt;/c2&gt;は、ブール値を返します、そして非同期メソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The selector piece for the completion handler is removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完了ハンドラのセレクタ部分は、取り除かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence ends either when the base sequence ends or when &lt;c2&gt;transform&lt;/c2&gt; throws an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスは、基底シーケンスが終わる時かまたは&lt;c2&gt;transform&lt;/c2&gt;がエラーをスローする時に終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence ends either when the the last sequence created from the last element from base sequence ends, or when &lt;c1&gt;transform&lt;/c1&gt; throws an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスは、基底シーケンスからの最後の要素から作成された最後のシーケンスが終わる時、または&lt;c1&gt;transform&lt;/c1&gt;がエラーをスローする時のどちらかに終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence ends when &lt;c2&gt;next&lt;/c2&gt; returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスは、&lt;c2&gt;next&lt;/c2&gt;が&lt;c3&gt;nil&lt;/c3&gt;を返す時に終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence of elements for the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいコレクションのための要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence of elements to turn into an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列になることになる、いくらかの要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s maximum element if the sequence is not empty; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが空でないならばシーケンスの最大の要素；そうでなければ&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s maximum element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最大の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s minimum element, according to &lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最小の要素、&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;による。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s minimum element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最小の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of characters that have an &lt;c0&gt;is&lt;w1&gt;Math&lt;w2&gt;Symbol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; value of &lt;c3&gt;true&lt;/c3&gt; is not a strict subset of those for which &lt;c4&gt;is&lt;w5&gt;Symbol&lt;/w5&gt;&lt;/c4&gt; is &lt;c6&gt;true&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Math&lt;w2&gt;Symbol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;の値に&lt;c3&gt;true&lt;/c3&gt;を持つ文字の集合は、それらに対して&lt;c4&gt;is&lt;w5&gt;Symbol&lt;/w5&gt;&lt;/c4&gt;が&lt;c6&gt;true&lt;/c6&gt;であるものの狭義の部分集合ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The shared actor instance that will be used to provide mutually-exclusive access to declarations annotated with the given global actor type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>共有アクターインスタンス、それは与えられたグローバルアクター型で注釈を付けられた宣言への相互排他アクセスを提供するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The shared executor instance that will be used to provide mutually-exclusive access for the global actor.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>共有エグゼキュータ（遂行者）インスタンス、それはグローバルアクターに対する相互排他アクセスを提供するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The shift is performed using this masked value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトは、このマスクされた値を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign for a negative value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の値に対する符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign for a positive value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の値に対する符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign of a floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある浮動小数点値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign of the floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign of the new value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign of this number, expressed as an integer of the same type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この数の符号、同じ型の整数として表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign to use for the new value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値に対して使うための符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The significand is frequently also called the &lt;e0&gt;mantissa&lt;/e0&gt;, but significand is the preferred terminology in the &lt;a1&gt;IEEE 754 specification&lt;/a1&gt;, to allay confusion with the use of mantissa for the fractional part of a logarithm.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>仮数（significand）はしばしば&lt;e0&gt;mantissa&lt;/e0&gt;とも呼ばれます、しかし仮数が&lt;a1&gt;IEEE 754仕様&lt;/a1&gt;において推奨される用語です、対数の小数部分に対する仮数（mantissa）の使用との混同を静めるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The significand may include a decimal point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>仮数は、小数点を含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The significand of &lt;c5&gt;y&lt;/c5&gt; is therefore 1.34375.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;y&lt;/c5&gt;の仮数はしたがって1.34375です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The significand of the floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値の仮数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The single &lt;c4&gt;Bool&lt;/c4&gt; type in Swift guarantees that functions, methods, and properties imported from C and Objective-C have a consistent type interface.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift保証の単一&lt;c4&gt;Bool&lt;/c4&gt;型で、関数、メソッド、そしてプロパティがCおよびObjective-Cからインポートしたものは、首尾一貫した型インターフェイスを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The single-character string to convert to a &lt;c0&gt;Character&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Character&lt;/c0&gt;インスタンスへと変換される単一文字文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sorting algorithm is not guaranteed to be stable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このソートアルゴリズムは、安定であることを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The square root of the value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の平方根。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The stable identity of the entity associated with this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスと結び付けられた登録項目の安定した同一性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library floating-point types—&lt;c0&gt;Float&lt;/c0&gt;, &lt;c1&gt;Double&lt;/c1&gt;, and &lt;c2&gt;Float80&lt;/c2&gt; where available—all conform to the &lt;c3&gt;Expressible&lt;w4&gt;By&lt;w5&gt;Float&lt;w6&gt;Literal&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリ浮動小数点型—&lt;c0&gt;Float&lt;/c0&gt;、&lt;c1&gt;Double&lt;/c1&gt;、そして利用可能なところでは&lt;c2&gt;Float80&lt;/c2&gt;—は、すべて&lt;c3&gt;Expressible&lt;w4&gt;By&lt;w5&gt;Float&lt;w6&gt;Literal&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library integer and floating-point types are all valid types for &lt;c0&gt;Integer&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの整数および浮動小数点型は、&lt;c0&gt;Integer&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に対する有効な型のすべてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library integer and floating-point types, such as &lt;c0&gt;Int&lt;/c0&gt; and &lt;c1&gt;Double&lt;/c1&gt;, conform to the &lt;c2&gt;Expressible&lt;w3&gt;By&lt;w4&gt;Integer&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの整数および浮動小数点型、例えば&lt;c0&gt;Int&lt;/c0&gt;および&lt;c1&gt;Double&lt;/c1&gt;は、&lt;c2&gt;Expressible&lt;w3&gt;By&lt;w4&gt;Integer&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library provides an implementation for the not-equal-to operator (&lt;c4&gt;!=&lt;/c4&gt;) for any &lt;c5&gt;Equatable&lt;/c5&gt; type, which calls the custom &lt;c6&gt;==&lt;/c6&gt; function and negates its result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリは、不等演算子（&lt;c4&gt;!=&lt;/c4&gt;）のある実装をあらゆる&lt;c5&gt;Equatable&lt;/c5&gt;型に対して実装します、それはあつらえの&lt;c6&gt;==&lt;/c6&gt;関数を呼び出してそれの結果を逆にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The start and end of a subrange must be valid indices of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位範囲の始まりと終わりは、配列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The starting value to use for the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスに使うための開始値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The stream to use for writing the contents of &lt;c0&gt;value&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;の内容を書き出すために使うことになるストリーム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The stream was cancelled</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストリームは取り消されました</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The stream was finished via the &lt;c0&gt;finish&lt;/c0&gt; method</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストリームは&lt;c0&gt;finish&lt;/c0&gt;メソッド経由で終了されました</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string of characters read from standard input.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準入力から読み込まれた一続きの文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string passed as &lt;c0&gt;description&lt;/c0&gt; may begin with a plus or minus sign character (&lt;c1&gt;+&lt;/c1&gt; or &lt;c2&gt;-&lt;/c2&gt;), followed by one or more numeric digits (&lt;c3&gt;0-9&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;description&lt;/c0&gt;として渡される文字列は、プラスまたはマイナス符号文字（&lt;c1&gt;+&lt;/c1&gt;または&lt;c2&gt;-&lt;/c2&gt;）で始まり、１つ以上の数値のアラビア数字（&lt;c3&gt;0-9&lt;/c3&gt;）が続くことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string passed as &lt;c0&gt;text&lt;/c0&gt; can represent a real number in decimal or hexadecimal format or special floating-point values for infinity and NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;text&lt;/c0&gt;として渡される文字列は、10進または16進数形式における実数、または無限大とNaN（「非数」）に対する特別な浮動小数点値を表せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string passed as &lt;c0&gt;text&lt;/c0&gt; may begin with a plus or minus sign character (&lt;c1&gt;+&lt;/c1&gt; or &lt;c2&gt;-&lt;/c2&gt;), followed by one or more numeric digits (&lt;c3&gt;0-9&lt;/c3&gt;) or letters (&lt;c4&gt;a-z&lt;/c4&gt; or &lt;c5&gt;A-Z&lt;/c5&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;text&lt;/c0&gt;として渡される文字列は、プラスまたはマイナス符号文字（&lt;c1&gt;+&lt;/c1&gt;または&lt;c2&gt;-&lt;/c2&gt;）で始まり、１つ以上の数値のアラビア数字（&lt;c3&gt;0-9&lt;/c3&gt;）または文字（&lt;c4&gt;a-z&lt;/c4&gt; or &lt;c5&gt;A-Z&lt;/c5&gt;）が続くことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string to print after all items have been printed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべての項目が出力された後に出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string to print.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>出力するメッセージ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string to use in a named collection (e.g. a string-keyed dictionary).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を名前付きコレクションで使います（例えば、名前キー付き辞書）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string value of the desired key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>望むキーの文字列値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subrange of the array to replace.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>置き換えられることになる配列の下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subrange of the collection to replace.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>置き換えることになるコレクションの下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subscript notation is preferred over &lt;c1&gt;prefix(through:)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字表記法は、&lt;c1&gt;prefix(through:)&lt;/c1&gt;よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subscript notation is preferred over &lt;c1&gt;suffix(from:)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字表記法は、&lt;c1&gt;suffix(from:)&lt;/c1&gt;よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subscript notation is preferred over &lt;c2&gt;prefix(up&lt;w3&gt;To:)&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字表記法は、&lt;c2&gt;prefix(up&lt;w3&gt;To:)&lt;/w3&gt;&lt;/c2&gt;よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subtraction operator (&lt;c0&gt;-&lt;/c0&gt;) calculates the difference of its two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算演算子（&lt;c0&gt;-&lt;/c0&gt;）は、それの２つの引数の差を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The successor of an index must be well defined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるインデックスの後に続くものは、よく定義されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sum of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の合計は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sum of types that can be used as a Quick Look representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「クイックルック」表現として使われることのできる型の総和。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The synthesized &lt;c3&gt;all&lt;w4&gt;Cases&lt;/w4&gt;&lt;/c3&gt; collection provides the cases in order of their declaration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>合成された&lt;c3&gt;all&lt;w4&gt;Cases&lt;/w4&gt;&lt;/c3&gt;コレクションは、ケース節をそれらの宣言の順に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The task continues executing when its executor is able to reschedule it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクは、それの遂行者（executor）がそれを予定変更可能である時に遂行を継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tasks are canceled only if &lt;c0&gt;cancel&lt;w1&gt;All()&lt;/w1&gt;&lt;/c0&gt; was invoked before returning, if the group’s task was canceled, or if the group’s body throws an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクそれらが取り消されるのは、復帰する前に&lt;c0&gt;cancel&lt;w1&gt;All()&lt;/w1&gt;&lt;/c0&gt;が発動された場合にのみです、グループのもつタスクが取り消されたとしても、またはグループのもつ本体がエラーをスローするとしても。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tasks are canceled only if &lt;c0&gt;cancel&lt;w1&gt;All()&lt;/w1&gt;&lt;/c0&gt; was invoked before returning, if the group’s task was canceled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクそれらが取り消されるのは、復帰する前に&lt;c0&gt;cancel&lt;w1&gt;All()&lt;/w1&gt;&lt;/c0&gt;が発動された場合にのみです、グループのもつタスクが取り消されたとしても。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tasks must handle cancellation in some other way, such as returning the work completed so far, returning an empty result, or returning &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タスクは取り消しを何らかの他の方法で取り扱わなければなりません、たとえばそれまでに完了された仕事を返す、空の結果を返す、または&lt;c2&gt;nil&lt;/c2&gt;を返すなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The textual representation for each item is the same as that obtained by calling &lt;c3&gt;String(item)&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各項目のテキスト表現は、&lt;c3&gt;String(item)&lt;/c3&gt;を呼び出すことで得られるものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The textual representation for each item is the same as that obtained by calling &lt;c4&gt;String(item)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各項目のテキスト表現は、&lt;c4&gt;String(item)&lt;/c4&gt;を呼び出すことで得られるものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The textual representation for each item is the same as that obtained by calling &lt;c4&gt;String(reflecting: item)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各項目のテキスト表現は、&lt;c4&gt;String(reflecting: item)&lt;/c4&gt;を呼び出すことで得られるものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The textual representation for each item is the same as that obtained by calling &lt;c5&gt;String(reflecting: item)&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各項目のテキスト表現は、&lt;c5&gt;String(reflecting: item)&lt;/c5&gt;を呼び出すことで得られるものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The total number of elements that the array can contain without allocating new storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その配列が新しいストレージを割り当てることなく含むことができる要素の総数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The total number of key-value pairs that the dictionary can contain without allocating new storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その辞書が新しいストレージをアロケートすることなく含むことが可能なキー値ペアの総数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The transforming closure takes the received &lt;c4&gt;Int&lt;/c4&gt; and returns a new &lt;c5&gt;Counter&lt;/c5&gt; that counts that high.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換クロージャは、その受け取った&lt;c4&gt;Int&lt;/c4&gt;をとり、そしてその高さを数える新しい&lt;c5&gt;Counter&lt;/c5&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two arguments must have the same &lt;c0&gt;Element&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数は、同じ&lt;c0&gt;Element&lt;/c0&gt;型を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two arguments must not alias each other.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値は、互いのエイリアスであってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two loops in the following example produce the same output:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例における２つのループは、同じ出力を生み出します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type &lt;c0&gt;T&lt;/c0&gt; to which &lt;c1&gt;x&lt;/c1&gt; is cast.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;T&lt;/c0&gt;、それへと&lt;c1&gt;x&lt;/c1&gt;がキャストされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type aliased by &lt;c0&gt;Boolean&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; must conform to the &lt;c3&gt;Expressible&lt;w4&gt;By&lt;w5&gt;Boolean&lt;w6&gt;Literal&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Boolean&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;によってエイリアス（別名）を付けられる型は、&lt;c3&gt;Expressible&lt;w4&gt;By&lt;w5&gt;Boolean&lt;w6&gt;Literal&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;プロトコルに準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type doesn't meet the criteria listed in the previous section.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その型が以前の節においてリストされる基準に合わない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type each segment of a string literal containing interpolations should be appended to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えられるべき補間を含んでいる文字列リテラルの各文節の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of asynchronous iterator that produces elements of this asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この非同期シーケンスの要素それらを取り出す非同期イテレータの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of element produced by this asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この非同期シーケンスによって取り出される要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of element returned by &lt;c0&gt;next()&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next()&lt;/c0&gt;によって返される要素のもつ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of element traversed by the iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータによって辿っていかれる要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of elements produced by this iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータによって取り出される要素それらの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of iterator that produces elements of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素それらを生み出すイテレータの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of scalars in the vector space.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクタースペースの中のスカラーそれらの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of the elements of an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルの要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of the shared actor instance that will be used to provide mutually-exclusive access to declarations annotated with the given global actor type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>共有アクターインスタンスの型、それは与えられたグローバルアクター型で注釈を付けられた宣言への相互排他アクセスを提供するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type that allows iteration over an array’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の持つ要素のすべてにわたる反復を許可する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type that represents the indices that are valid for subscripting an array, in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>昇順での、配列の添え字として有効なインデックスを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type that should be used for literal segments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リテラル文節に対して使われるべき型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type the AsyncStream will produce.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AsyncStreamが生み出すだろう型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to cast &lt;c0&gt;x&lt;/c0&gt; to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;をこれにキャストすることになる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The typed pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The types of the two underlying indices must be identical.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの基礎をなすインデックスの型は同一でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The unary minus operator (prefix &lt;c0&gt;-&lt;/c0&gt;) calculates the negation of its operand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単項マイナス演算子（前置&lt;c0&gt;-&lt;/c0&gt;）は、それの演算数の否定を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying error which caused this error, if any.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このエラーの元となった基礎をなすエラー、もしあれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying iterator’s sequence may be infinite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基礎をなすイテレータのもつシーケンスは、無限であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying type a Boolean uses when it wraps itself in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブールが、それがそれ自身をあるデータ値の中にラップする時に使う、基礎をなす型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying type a dictionary uses when it wraps itself in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書が、それがそれ自身をあるデータ値の中にラップする時に使う、基礎をなす型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying type a double uses when it wraps itself in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるdoubleが、それがそれ自身をあるデータ値の中にラップする時に使う、基礎をなす型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying type an array uses when it wraps itself in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある配列が、それがそれ自身をあるデータ値の中にラップする時に使う、基礎をなす型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying type an integer uses when it wraps itself in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数が、それがそれ自身をあるデータ値の中にラップする時に使う、基礎をなす型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The unit in the last place of 1.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>1.0の最終桁単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The unit in the last place of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の最終桁単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The universal hash function used by &lt;c0&gt;Set&lt;/c0&gt; and &lt;c1&gt;Dictionary&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Set&lt;/c0&gt;と&lt;c1&gt;Dictionary&lt;/c1&gt;によって使われる普遍的なハッシュ関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper bound for the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の上側の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value associated with &lt;c0&gt;key&lt;/c0&gt; if &lt;c1&gt;key&lt;/c1&gt; is in the dictionary; otherwise, &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;key&lt;/c0&gt;と結び付けられた値、&lt;c1&gt;key&lt;/c1&gt;が辞書の中にあるならば；そうでなければ、&lt;c2&gt;nil&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value associated with &lt;c0&gt;key&lt;/c0&gt; in the dictionary; otherwise, &lt;c1&gt;default&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;key&lt;/c0&gt;と辞書の中で結びつけられる値；そうでなければ&lt;c1&gt;default&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value for which to find the dynamic type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対して動的型を見つける値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c0&gt;count&lt;/c0&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;count&lt;/c0&gt;の値は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt;の値は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c0&gt;other&lt;/c0&gt; is represented exactly by the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;の値は、新しいインスタンスによって正確に表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c0&gt;other&lt;/c0&gt; is rounded to a representable value, if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;の値は、必要ならば、表現可能な値へと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c0&gt;value&lt;/c0&gt; is rounded to a representable value, if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;の値は、必要ならば、表現可能な値へと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c0&gt;x&lt;/c0&gt; converted to type &lt;c1&gt;U&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;U&lt;/c0&gt;に変換された&lt;c1&gt;x&lt;/c1&gt;の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c5&gt;significand&lt;w6&gt;Width&lt;/w6&gt;&lt;/c5&gt; is always -1 or between zero and &lt;c7&gt;significand&lt;w8&gt;Bit&lt;w9&gt;Count&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;significand&lt;w6&gt;Width&lt;/w6&gt;&lt;/c5&gt;の値は、常に-1、もしくはゼロと&lt;c7&gt;significand&lt;w8&gt;Bit&lt;w9&gt;Count&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;の間です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of the key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーの値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of this property must always evaluate to the same actor instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティの値は、同じアクターインスタンスと常に等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of this property must be equivalent to &lt;c0&gt;shared&lt;w1&gt;.unowned&lt;w2&gt;Executor&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティの値は、&lt;c0&gt;shared&lt;w1&gt;.unowned&lt;w2&gt;Executor&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt; is interpreted in the binary interchange format defined by the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt;として渡される値は、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;で定義されるバイナリ交換フォーマットにおいて解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;distance&lt;/c0&gt; must not offset &lt;c1&gt;i&lt;/c1&gt; beyond the bounds of the collection, unless the index passed as &lt;c2&gt;limit&lt;/c2&gt; prevents offsetting beyond those bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance&lt;/c0&gt;として渡される値は、このコレクションの境界を越えて&lt;c1&gt;i&lt;/c1&gt;を補ってはなりません、&lt;c2&gt;limit&lt;/c2&gt;として渡されるインデックスがそれら境界を越えて補うのを防止するのでない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;distance&lt;/c0&gt; must not offset &lt;c1&gt;i&lt;/c1&gt; beyond the bounds of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance&lt;/c0&gt;として渡される値は、このコレクションの境界を越えて&lt;c1&gt;i&lt;/c1&gt;を補ってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;n&lt;/c0&gt; must not offset &lt;c1&gt;i&lt;/c1&gt; beyond the bounds of the collection, unless the index passed as &lt;c2&gt;limit&lt;/c2&gt; prevents offsetting beyond those bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;n&lt;/c0&gt;として渡される値は、このコレクションの境界を越えて&lt;c1&gt;i&lt;/c1&gt;を補ってはなりません、&lt;c2&gt;limit&lt;/c2&gt;として渡されるインデックスがそれら境界を越えて補うのを防止するのでない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;n&lt;/c0&gt; must not offset &lt;c1&gt;i&lt;/c1&gt; beyond the bounds of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;n&lt;/c0&gt;として渡される値は、このコレクションの境界を越えて&lt;c1&gt;i&lt;/c1&gt;を補ってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;source&lt;/c0&gt; must be representable in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡される値は、この型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed to the continuation by the closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャによって継続へと渡される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value that was removed, or &lt;c0&gt;nil&lt;/c0&gt; if the key was not present in the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除された値、またはキーがこの辞書の中に存在しなかったならば&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value that was replaced, or &lt;c0&gt;nil&lt;/c0&gt; if a new key-value pair was added.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取って代わられた値、または新しいキー値ペアが加えられたならば&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to add to this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値に加える値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to calculate the distance to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それへの隔たりを計算される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to compare with this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と比較するための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to create.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>作成されることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to divide &lt;c0&gt;lhs&lt;/c0&gt; by.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値で&lt;c0&gt;lhs&lt;/c0&gt;を除算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to divide this value by.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を除算するための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to divide.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算することになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to multiply by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と掛け合わせられることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to multiply this value by.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値に掛ける値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to negate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負にする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to output to the &lt;c0&gt;target&lt;/c0&gt; stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;target&lt;/c0&gt;ストリームに出力することになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to return from the continuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その継続から返す値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to shift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to subtract from &lt;c0&gt;lhs&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;lhs&lt;/c0&gt;から減じる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to subtract from this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値から減じる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テストする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to use as the initial accumulating value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初から蓄積されている値として使われる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to use for the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのために使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to use in an integer-indexed collection (e.g. an int-keyed dictionary).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数インデックスのコレクション（例えば、intキー付き辞書）において使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to use when dividing this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を除算するときに使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to yield from the continuation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その継続から生み出す値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value type for this key path.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーパスのための値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value type of a dictionary literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書リテラルの値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value types in the table below have the same functionality as their corresponding reference types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の表の値型は、それらの対応する参照型と同じ機能性を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value wrapped by this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスによってラップされる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value you pass as &lt;c0&gt;end&lt;/c0&gt; is not guaranteed to be included in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;end&lt;/c0&gt;として渡す値は、シーケンスに含まれることを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The values passed as &lt;c0&gt;exponent&lt;w1&gt;Bit&lt;w2&gt;Pattern&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c3&gt;significand&lt;w4&gt;Bit&lt;w5&gt;Pattern&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; are interpreted in the binary interchange format defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;exponent&lt;w1&gt;Bit&lt;w2&gt;Pattern&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と&lt;c3&gt;significand&lt;w4&gt;Bit&lt;w5&gt;Pattern&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に渡される値は、&lt;a6&gt;IEEE 754 specification&lt;/a6&gt;で定義されるバイナリ交換フォーマットにおいて解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The way these scalar values are grouped is defined by a canonical, localized, or otherwise tailored Unicode segmentation algorithm.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラー値が一群にされる方法は、ある正準の、ローカライズされた、ないしは別の方法で仕立てられたユニコード分節アルゴリズムによって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The work associated with yielding values to the AsyncStream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>AsyncStreamへと生み出している値と結びつけられた仕事。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The zero value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The “past the end” index of the resulting subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のシーケンスの「終わりを過ぎた」インデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are some edge cases to be aware of:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>知られているいくつかの境界事例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are two categories of methods: those that return a single value, and those that return another &lt;c3&gt;Async&lt;w4&gt;Sequence&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのカテゴリのメソッドがあります：ある単一の値を返すもの、そして別の&lt;c3&gt;Async&lt;w4&gt;Sequence&lt;/w4&gt;&lt;/c3&gt;を返すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There may be smaller positive numbers, but they are &lt;e0&gt;subnormal&lt;/e0&gt;, meaning that they are represented with less precision than normal numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より小さい正の数があるでしょう、しかしそれらは&lt;e0&gt;サブノーマル&lt;/e0&gt;であり、それらがノーマル数よりより少ない精密さで表現されることを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Therefore, &lt;c6&gt;x&lt;w7&gt;.binade&lt;/w7&gt;&lt;/c6&gt; is equal to &lt;c8&gt;1&lt;w9&gt;.0 * 2**4&lt;/w9&gt;&lt;/c8&gt;, or &lt;c10&gt;16&lt;w11&gt;.0&lt;/w11&gt;&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それゆえに、&lt;c6&gt;x&lt;w7&gt;.binade&lt;/w7&gt;&lt;/c6&gt;は&lt;c8&gt;1&lt;w9&gt;.0 * 2**4&lt;/w9&gt;&lt;/c8&gt;、または&lt;c10&gt;16&lt;w11&gt;.0&lt;/w11&gt;&lt;/c10&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Therefore, a &lt;c0&gt;Closed&lt;w1&gt;Range&lt;/w1&gt;&lt;/c0&gt; instance cannot represent an empty range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それゆえに、&lt;c0&gt;Closed&lt;w1&gt;Range&lt;/w1&gt;&lt;/c0&gt;インスタンスは空の範囲として表すことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Therefore, you must only call this function from mutating methods with appropriate thread synchronization.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>したがって、あなたはこの関数を変更メソッドから適切なスレッド同期で呼ぶだけにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These accesses may be merged, eliminated, and rearranged with other work, and they may even be introduced when not strictly required.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのアクセスは、他の仕事によって合併、排除、そして再配列されるかもしれません、そしてそれらは厳密には必要とされない時に始められさえするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These code points are combined by Unicode’s boundary algorithms into extended grapheme clusters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのコード点は、ユニコードの境界アルゴリズムによって拡張書記素クラスタへと組み合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as &lt;c0&gt;Array&lt;/c0&gt; and &lt;c1&gt;Contiguous&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのカウンタはインデックスとして使われることが、ゼロ基盤の、整数インデックスでのコレクション、例えば&lt;c0&gt;Array&lt;/c0&gt;そして&lt;c1&gt;Contiguous&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;などのインスタンスにおいてのみ可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These initializers create an integer with the bit pattern of the memory address of a pointer or class instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのイニシャライザは、あるポインタまたはクラスインスタンスのメモリアドレスのビットパターンで整数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These initializers result in &lt;c0&gt;nil&lt;/c0&gt; if the value passed can't be represented without any loss of precision.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのイニシャライザは、渡された値が何ら精度の損失なしに表現できないならば&lt;c0&gt;nil&lt;/c0&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These initializers result in &lt;c0&gt;nil&lt;/c0&gt; if the value passed can’t be represented without any loss of precision.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのイニシャライザは、渡された値が何ら精度の損失なしに表現できないならば&lt;c0&gt;nil&lt;/c0&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These methods return the result of an operation, and a flag indicating whether the operation overflowed the bounds of the type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのメソッドは演算の結果、そしてその演算がその型の境界をオーバーフローしたかどうかを示すフラグを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These properties are the same ones used to test for equality in the &lt;c3&gt;==&lt;/c3&gt; operator function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらプロパティは、&lt;c3&gt;==&lt;/c3&gt;演算子関数において同等性についてテストするために使われるのと同じものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These returned sequences don’t eagerly await the next member of the sequence, which allows the caller to decide when to start work.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら返されるシーケンスは、そのシーケンスの次のメンバーを熱心には待ちません、それは呼び出し側にいつ仕事を開始するのか決定するのを許可します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These two operations impose a strict total order on the values of a type, in which exactly one of the following must be true for any two values &lt;c2&gt;a&lt;/c2&gt; and &lt;c3&gt;b&lt;/c3&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これら２つの演算子は、ある型の値に全順序を課します、そこにおいて任意の２つの値&lt;c2&gt;a&lt;/c2&gt;と&lt;c3&gt;b&lt;/c3&gt;に対して、厳密に以下のうちの１つが真でなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These types and protocols drop their &lt;c1&gt;NS&lt;/c1&gt; prefix, with the following exceptions:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これら型およびプロトコルは、それらの&lt;c1&gt;NS&lt;/c1&gt;接頭辞を外します、以下の例外を除いては：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This &lt;e0&gt;key-based&lt;/e0&gt; subscript returns the value for the given key if the key is found in the dictionary, or &lt;c1&gt;nil&lt;/c1&gt; if the key is not found.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この&lt;e0&gt;キー基盤&lt;/e0&gt;の添え字は、そのキーが辞書において見つけられるならば指定されたキーに対する値を、またはキーが見つからないならば&lt;c1&gt;nil&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This associated type appears as a requirement in the &lt;c0&gt;Sequence&lt;/c0&gt; protocol, but it is restated here with stricter constraints.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関連型は、&lt;c0&gt;Sequence&lt;/c0&gt;プロトコルの中のある要件として現れます、しかしここでより厳格な制約で言い直されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This avoids over-allocation, but can result in insertion not having amortized constant-time performance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは過度のアロケーションを防ぎます、しかし挿入においてならし定数時間性能を持たない結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This can be called more than once and returns to the caller immediately without blocking for any awaiting consumption from the iteration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは一回以上呼び出されることが可能です、そして呼び出し側にすぐに復帰します、その反復からの何らかの待ち受けている消費ために遮断することなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This can be called more than once and returns to the caller immediately without blocking for any awaiting consuption from the iteration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは一回以上呼び出されることが可能です、そして呼び出し側にすぐに復帰します、その反復からの何らかの待ち受けている消費ために遮断することなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This capability, as well as the ability to store values in a set or use them as keys in a dictionary, are governed by two related standard library protocols, &lt;a0&gt;&lt;c1&gt;Equatable&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;Hashable&lt;/c3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これができる力、それだけでなくいくらかの値を集合の中に格納するまたはそれらを辞書においてキーとして使う能力は、２つの関連する標準ライブラリプロトコル、&lt;a0&gt;&lt;c1&gt;Equatable&lt;/c1&gt;&lt;/a0&gt;と&lt;a2&gt;&lt;c3&gt;Hashable&lt;/c3&gt;&lt;/a2&gt;によって管理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter describes the global functions defined in the Swift standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この章は、Swift標準ライブラリにおいて定義されるグローバル関数を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This contrasts with &lt;c2&gt;Array&lt;/c2&gt;, which can store its elements in either a contiguous region of memory or an &lt;c3&gt;NSArray&lt;/c3&gt; instance if its &lt;c4&gt;Element&lt;/c4&gt; type is a class or &lt;c5&gt;@objc&lt;/c5&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは&lt;c2&gt;Array&lt;/c2&gt;とは対照的です、それはそれの要素をメモリの隣接領域かもしくは、それの&lt;c3&gt;Element&lt;/c3&gt;型がクラスまたは&lt;c4&gt;@objc&lt;/c4&gt;プロトコルならば&lt;c5&gt;NSArray&lt;/c5&gt;インスタンスのどちらかに格納することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This differs from the operation cooperatively checking for cancellation and reacting to it in that the cancellation handler is &lt;e0&gt;always&lt;/e0&gt; and &lt;e1&gt;immediately&lt;/e1&gt; invoked when the task is canceled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、協力して取り消しを調べるそしてそれに反応する演算とは異なります、タスクが取り消される時にある取り消しハンドラが&lt;e0&gt;常に&lt;/e0&gt;そして&lt;e1&gt;直ぐに&lt;/e1&gt;発動される点において。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Additive&lt;w1&gt;Arithmetic&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Additive&lt;w1&gt;Arithmetic&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Async&lt;w1&gt;Iterator&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Async&lt;w1&gt;Iterator&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Bidirectional&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Bidirectional&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Binary&lt;w1&gt;Floating&lt;w2&gt;Point&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Binary&lt;w1&gt;Floating&lt;w2&gt;Point&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Collection&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Collection&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Comparable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Comparable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Custom&lt;w1&gt;Debug&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Custom&lt;w1&gt;Debug&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Custom&lt;w1&gt;Reflectable&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Custom&lt;w1&gt;Reflectable&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Custom&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Custom&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Decodable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Decodable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Encodable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Encodable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Equatable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Equatable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Array&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Array&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Boolean&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Boolean&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Extended&lt;w3&gt;Grapheme&lt;w4&gt;Cluster&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Extended&lt;w3&gt;Grapheme&lt;w4&gt;Cluster&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Float&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Float&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Integer&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Integer&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Unicode&lt;w3&gt;Scalar&lt;w4&gt;Literal&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Unicode&lt;w3&gt;Scalar&lt;w4&gt;Literal&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Global&lt;w1&gt;Actor&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Global&lt;w1&gt;Actor&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Hashable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Hashable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Identifiable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Identifiable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Iterator&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Iterator&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Numeric&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Numeric&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Range&lt;w1&gt;Expression&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Range&lt;w1&gt;Expression&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;SIMDStorage&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;SIMDStorage&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Sequence&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Sequence&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Strideable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Strideable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;String&lt;w1&gt;Interpolation&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;String&lt;w1&gt;Interpolation&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Stream&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Stream&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Streamable&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Streamable&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation contains preliminary information about an API or technology in development.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書は、開発でのテクノロジーまたはAPIのための事前の情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This enforces keeping the specified amount of newest values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、指定量の最新の値それらを保つことを強要します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This enforces keeping the specified amount of oldest values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、指定量の最古の値それらを保つことを強要します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This error is also thrown automatically by &lt;c0&gt;Task&lt;w1&gt;.check&lt;w2&gt;Cancellation()&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, if the current task has been cancelled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このエラーはまた自動的に&lt;c0&gt;Task&lt;w1&gt;.check&lt;w2&gt;Cancellation()&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;によってスローされます、もし現在のタスクがキャンセルされたならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example appends the elements of a &lt;c0&gt;Range&lt;Int&gt;&lt;/c0&gt; instance to an array of integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;Range&lt;Int&gt;&lt;/c0&gt;インスタンスの要素を整数からなる配列に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example appends the elements of a &lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt; instance to an array of integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある&lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt;インスタンスに属する複数要素を整数の配列に追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example checks to see whether a favorite actor is in an array storing a movie’s cast.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、映画出演者を格納する配列の中にお気に入りの俳優がいるかどうか確認するために調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a &lt;c2&gt;Closed&lt;w3&gt;Range&lt;Character&gt;&lt;/w3&gt;&lt;/c2&gt; from “a” up to, and including, “z”.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、「a」から「z」までの、そしてそれを含む&lt;c2&gt;Closed&lt;w3&gt;Range&lt;Character&gt;&lt;/w3&gt;&lt;/c2&gt;を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a &lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;From&lt;Double&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance that includes any value greater than or equal to &lt;c5&gt;5&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;From&lt;Double&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスで&lt;c5&gt;5&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt;より大きいか等しい何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a &lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;Through&lt;Double&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance that includes any value less than or equal to &lt;c5&gt;5&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;Through&lt;Double&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスで&lt;c5&gt;5&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt;より少ないか等しい何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a &lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;Up&lt;w5&gt;To&lt;Double&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance that includes any value less than &lt;c6&gt;5&lt;w7&gt;.0&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;Up&lt;w5&gt;To&lt;Double&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスで&lt;c6&gt;5&lt;w7&gt;.0&lt;/w7&gt;&lt;/c6&gt;より少ない何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a &lt;c2&gt;Range&lt;Double&gt;&lt;/c2&gt; from zero up to, but not including, 5.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ゼロから5.0までの、しかしそれを含めない&lt;c2&gt;Range&lt;Double&gt;&lt;/c2&gt;を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a key path from &lt;c2&gt;Array&lt;Int&gt;&lt;/c2&gt; to &lt;c3&gt;String&lt;/c3&gt;, and then tries appending compatible and incompatible key paths:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Array&lt;Int&gt;&lt;/c2&gt;から&lt;c3&gt;String&lt;/c3&gt;へのキーパスを作成して、それから互換および非互換のキーパスをくっつけることを試みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates key paths from &lt;c2&gt;Array&lt;Int&gt;&lt;/c2&gt; to &lt;c3&gt;String&lt;/c3&gt; and from &lt;c4&gt;String&lt;/c4&gt; to &lt;c5&gt;Int&lt;/c5&gt;, and then tries appending each to the other:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Array&lt;Int&gt;&lt;/c2&gt;から&lt;c3&gt;String&lt;/c3&gt;までの、そして&lt;c4&gt;String&lt;/c4&gt;から&lt;c5&gt;Int&lt;/c5&gt;までのキーパスを作成して、それからそれぞれを他とくっつけることを試みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates three new values in the range &lt;c0&gt;1...100&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、３つの新しい値を範囲&lt;c0&gt;1...100&lt;/c0&gt;において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates three new values in the range &lt;c0&gt;1..&lt;100&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、３つの新しい値を範囲&lt;c0&gt;1..&lt;100&lt;/c0&gt;において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates three new values in the range &lt;c0&gt;10&lt;w1&gt;.0 ... 20&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、３つの新しい値を範囲&lt;c0&gt;10&lt;w1&gt;.0 ... 20&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates three new values in the range &lt;c0&gt;10&lt;w1&gt;.0 ..&lt; 20&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、３つの新しい値を範囲&lt;c0&gt;10&lt;w1&gt;.0 ..&lt; 20&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example defines an &lt;c0&gt;Integer&lt;w1&gt;Ref&lt;/w1&gt;&lt;/c0&gt; type with an &lt;c2&gt;@objc&lt;/c2&gt; method named &lt;c3&gt;get&lt;w4&gt;Integer&lt;w5&gt;Value()&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は&lt;c0&gt;Integer&lt;w1&gt;Ref&lt;/w1&gt;&lt;/c0&gt;型を、&lt;c2&gt;@objc&lt;/c2&gt;メソッドで&lt;c3&gt;get&lt;w4&gt;Integer&lt;w5&gt;Value()&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;と名付けられるものと共に定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example defines some simple macros in a C header:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、いくつかの単純なマクロをCヘッダにおいて定義します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は文字列からなる配列のあるスライスの取得を実演します、スライスの中の文字列の１つのインデックスを見つけて、それからそのインデックスを元の配列において使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example demonstrates that the &lt;c0&gt;characters&lt;/c0&gt; view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある文字列の&lt;c0&gt;characters&lt;/c0&gt;ビューが、そのビューのインデックスであろうとビューそれ自体が反復されていようと同じ文字を同じ順序で返すのを実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example enumerates the characters of the string “Swift” and prints each character along with its place in the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は文字列「Swift」の文字を列挙します、そして各文字をその文字列でのそれの場所とともに出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example finds the index of the last name that begins with the letter &lt;e1&gt;A:&lt;/e1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、文字&lt;e1&gt;A:&lt;/e1&gt;で始まる、最後の名前のインデックスを見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example finds the largest value in an array of height measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、身長計測の配列の中で最も大きな値を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example finds the smallest value in an array of height measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、身長計測の配列の中で最も小さな値を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある集合のインデックスと要素のすべてにわたって反復します、５つまたはより少ない文字を持つ名前のインデックスから成るリストを作ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example picks a name at random from an array:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある名前を無作為に配列から選出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example prints the characters of a string in reverse order:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある文字列に属する文字を逆順で出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes all the vowels from a string:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、全ての母音を文字列から除去します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes three elements from the middle of an array of measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、測定結果からなる配列の真ん中から３つの要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example searches &lt;c0&gt;streets&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt; for one of the strings in the slice, and then uses that index in the original array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;streets&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt;をスライスの中の文字列の１つについて検索して、それからそのインデックスを元々の配列において使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how a &lt;c8&gt;Collection&lt;w9&gt;Of&lt;w10&gt;Two&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; instance can be created holding the values of a point, and then iterated over using a &lt;c11&gt;for&lt;/c11&gt;-&lt;c12&gt;in&lt;/c12&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのように&lt;c8&gt;Collection&lt;w9&gt;Of&lt;w10&gt;Two&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;インスタンスがある地点の値を保持して作成されるか、そしてそれから&lt;c11&gt;for&lt;/c11&gt;-&lt;c12&gt;in&lt;/c12&gt;ループを使って全体にわたって繰り返されるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how an array of &lt;c0&gt;[Int]&lt;/c0&gt; instances can be joined, using another &lt;c1&gt;[Int]&lt;/c1&gt; instance as the separator:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのようにいくつかの&lt;c0&gt;[Int]&lt;/c0&gt;インスタンスからなる配列が別の&lt;c1&gt;[Int]&lt;/c1&gt;インスタンスを分離子として使ってつなぎ合わされるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how an iterator can be used explicitly to emulate a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、イテレータが明示的に使われて&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループの機能を真似る方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to build a dictionary of letter frequencies of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある文字列の文字頻度の辞書を作り上げる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to catch errors from a particular error domain and bring attention to unhandled errors from other error domains:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、特定のエラー領域からのエラーをキャッチする、そして他のエラー領域からの処理できないエラーへの注意をもたらす方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to choose the current or new values for any duplicate keys:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、あらゆる重複キーに対して現在および新規の値を選択する方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to find the sum of an array of numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのように数からなる配列の合計を見出すかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to throw errors using that custom error type in Swift:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、そのあつらえのエラー型をSwiftで使って、エラーをスローする方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to use the &lt;c0&gt;max(by:)&lt;/c0&gt; method on a dictionary to find the key-value pair with the highest value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;max(by:)&lt;/c0&gt;メソッドを辞書上で使って、最も高い値を持つキー値ペアを見つける方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to use the &lt;c0&gt;min(by:)&lt;/c0&gt; method on a dictionary to find the key-value pair with the lowest value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;min(by:)&lt;/c0&gt;メソッドを辞書上で使って、最も低い値を持つキー値ペアを見つける方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how you can check an array for an expense greater than $100.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのようにあなたが$100より大きい出費についてある配列を調べるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how you can modify one of the names in an array of students.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例が示すのは、どうやってあなたが学生らの配列の中の名前の１つを修正できるかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows several extending conversions of a negative value—note that negative values are sign-extended even when converting to an unsigned type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある負の値のいくつかの拡張変換を示します — 符号なし型へ変換する時でさえ、負の値が符号拡張されることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows the behavior on a little-endian platform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、リトルエンディアンプラットホーム上での挙動を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows two overlapping ranges:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は２つの重なった範囲を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example tests whether one countable range begins with the elements of another countable range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある可付番範囲が別の可付番範囲の要素で始まるかどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example tests whether one countable range shares the same elements as another countable range and an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある可付番範囲が同じ要素を別の可付番範囲とそしてある配列と共有するかどうかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the &lt;c0&gt;last(where:)&lt;/c0&gt; method to find the last negative number in an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;last(where:)&lt;/c0&gt;メソッドを使って、整数の配列において最後の負数を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the &lt;c0&gt;lexicographically&lt;w1&gt;Precedes&lt;/w1&gt;&lt;/c0&gt; method to test which array of integers comes first in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は&lt;c0&gt;lexicographically&lt;w1&gt;Precedes&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、どの整数配列がある語彙筆記的順序において最初に来るかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the &lt;c0&gt;negate()&lt;/c0&gt; method to negate the value of the variable &lt;c1&gt;x&lt;/c1&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は&lt;c0&gt;negate()&lt;/c0&gt;メソッドを使って、変数&lt;c1&gt;x&lt;/c1&gt;の値を負にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the conditional downcast operator (&lt;c0&gt;as?&lt;/c0&gt;) to conditionally cast the &lt;c1&gt;s&lt;/c1&gt; constant declared above to an instance of Swift’s &lt;c2&gt;String&lt;/c2&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、条件ダウンキャスト演算子（&lt;c0&gt;as?&lt;/c0&gt;）を使って、上で定義される&lt;c1&gt;s&lt;/c1&gt;定数をSwiftの&lt;c2&gt;String&lt;/c2&gt;型へ条件付きでキャストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the subscript with a message to use in case an HTTP response code isn’t recognized:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、添え字を、HTTP応答コードが識別されない場合に使うあるメッセージとともに使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この指数成長戦略は、ある要素を加えることは、多くの追加操作の遂行を平均すると、定数時間に起こることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This file is an Objective-C header that declares the Swift interfaces in your target, and you can think of it as an umbrella header for your Swift code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このファイルは、Swiftインターフェイスをあなたのターゲットにおいて宣言するObjective-Cヘッダです、そしてあなたはそれをあなたのSwiftコードのためのアンブレラファイルとみなせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function can be used to replace many cases that were previously handled using C-style &lt;c0&gt;for&lt;/c0&gt; loops.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、C形式の&lt;c0&gt;for&lt;/c0&gt;ループを使用して前もって取り扱われたケースの多くを置き換えるのに使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function can be used to replace many instances of &lt;c0&gt;Any&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt; that wrap a closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、クロージャをラップする&lt;c0&gt;Any&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt;の多くのインスタンスを置き換えるのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function does &lt;e0&gt;not&lt;/e0&gt; modify &lt;c1&gt;object&lt;/c1&gt;; the use of &lt;c2&gt;inout&lt;/c2&gt; is an implementation artifact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は&lt;c1&gt;object&lt;/c1&gt;を修正&lt;e0&gt;しません&lt;/e0&gt;；&lt;c2&gt;inout&lt;/c2&gt;の使用は、技巧上の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function does not infer element moves.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、要素が移動することを推測しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function is the only requirement of the &lt;c0&gt;Comparable&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルのただ１つの要件です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function returns immediately and never suspends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、直ぐに返ります、そして決して中断しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function throws an error if any values are invalid for the given encoder’s format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、与えられたエンコーダの形式に対して何らかの値が無効であるならばエラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function trades safety for performance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は性能と安全を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function uses the least specific nonmatching property of the date to determine the result of the comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、比較の結果を判定するのに、最小量となる特定の不一致日付プロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function’s effects vary depending on the build flag used:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数の効果は使用されるビルドフラグに依存して多様に異なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This includes characters used both as letters and commonly in mathematical formulas.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、表音文字としてそして一般に数学公式においての両方で使われる表意文字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この情報は変更される場合があり、この文書に沿って実装されるソフトウェアは最終的なオペレーティングシステム・ソフトウェアでテストされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer does not perform any range or overflow checking.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、全く範囲またはオーバーフロー検査を実行しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer implements the &lt;c0&gt;scale&lt;w1&gt;B&lt;/w1&gt;&lt;/c0&gt; operation defined by the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;で定義される&lt;c0&gt;scale&lt;w1&gt;B&lt;/w1&gt;&lt;/c0&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer implements the IEEE 754 &lt;c0&gt;copysign&lt;/c0&gt; operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、IEEE 754 &lt;c0&gt;copysign&lt;/c0&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer is case sensitive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、大文字小文字を区別します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer is equivalent to &lt;a0&gt;&lt;c1&gt;init(from:)&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、&lt;a0&gt;&lt;c1&gt;init(from:)&lt;/c1&gt;&lt;/a0&gt;に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer is equivalent to &lt;a5&gt;&lt;c6&gt;init(from:)&lt;/c6&gt;&lt;/a5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、&lt;a5&gt;&lt;c6&gt;init(from:)&lt;/c6&gt;&lt;/a5&gt;に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer is equivalent to the following calculation, where &lt;c0&gt;**&lt;/c0&gt; is exponentiation, computed as if by a single, correctly rounded, floating-point operation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは次の計算に相当し、そこで&lt;c0&gt;**&lt;/c0&gt;は乗算で、まるで単精度の、正しく丸められた、浮動小数点演算のように計算されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、デコーダからの読み出しが失敗するならば、または読み込んだデータが不正またはそうでなくとも無効ならば、エラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer works with any type, and uses the custom &lt;c1&gt;debug&lt;w2&gt;Description&lt;/w2&gt;&lt;/c1&gt; property for types that conform to &lt;c3&gt;Custom&lt;w4&gt;Debug&lt;w5&gt;String&lt;w6&gt;Convertible&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザはどんな型とでも働きます、そしてあつらえの&lt;c1&gt;debug&lt;w2&gt;Description&lt;/w2&gt;&lt;/c1&gt;プロパティを&lt;c3&gt;Custom&lt;w4&gt;Debug&lt;w5&gt;String&lt;w6&gt;Convertible&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に準拠する型に対して使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer works with any type, and uses the custom &lt;c1&gt;description&lt;/c1&gt; property for types that conform to &lt;c2&gt;Custom&lt;w3&gt;String&lt;w4&gt;Convertible&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザはどんな型とでも働きます、そしてあつらえの&lt;c1&gt;description&lt;/c1&gt;プロパティを&lt;c2&gt;Custom&lt;w3&gt;String&lt;w4&gt;Convertible&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に準拠する型に対して使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is almost certainly not what you want.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはほとんど疑いなくあなたが望むことではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is distinct from the Cocoa pattern—described above—that uses a trailing &lt;s3&gt;&lt;c4&gt;NSError&lt;/c4&gt;&lt;/s3&gt; parameter to indicate recoverable errors that you plan for during development.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、— 上で記述される — Cocoaパターンとは別個のものです、それは後に続く&lt;s3&gt;&lt;c4&gt;NSError&lt;/c4&gt;&lt;/s3&gt;パラメータを使って、あなたが開発の間に対策を立てる解決可能なエラーを指し示します、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is equivalent to initializing with an empty array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは空の配列リテラルで初期化するのに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is equivalent to the inverse of a set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはある集合の逆と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is inherently unsafe; UnsafeMutablePointer assumes the referenced memory has +1 strong ownership semantics, whereas AutoreleasingUnsafeMutablePointer implies +0 semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、本質的に安全ではありません；UnsafeMutablePointerは参照されるメモリが+1の強力な所有権意味論を持つことを仮定します、そういうわけでAutoreleasingUnsafeMutablePointerは必然的に+0意味論です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is itended to be used to allow callback or delegation based APIs to participate with async/await.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、API基盤のコールバックまた委任が非同期／待機で参加するのを許可するために使われることを意図されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the greater-than operator (&lt;c0&gt;&gt;&lt;/c0&gt;) for any type that conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Comparable&lt;/c1&gt;に準拠するあらゆる型に対して、より大きい演算子（&lt;c0&gt;&gt;&lt;/c0&gt;）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the greater-than-or-equal-to operator (&lt;c0&gt;&gt;=&lt;/c0&gt;) for any type that conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Comparable&lt;/c1&gt;に準拠するあらゆる型に対して、より大きいか等しい演算子（&lt;c0&gt;&gt;=&lt;/c0&gt;）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the less-than-or-equal-to operator (&lt;c0&gt;&lt;=&lt;/c0&gt;) for any type that conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Comparable&lt;/c1&gt;に準拠するあらゆる型に対して、より少ないか等しい演算子（&lt;c0&gt;&lt;=&lt;/c0&gt;）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the not-equal-to operator (&lt;c0&gt;!=&lt;/c0&gt;) for any type that conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するあらゆる型に対して、不等演算子（&lt;c0&gt;!=&lt;/c0&gt;）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the unit of the least significant digit in this value’s significand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはこの値の仮数の中の最下位数の単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This iterator calls &lt;c0&gt;next()&lt;/c0&gt; on its base iterator and evaluates the result with the &lt;c1&gt;predicate&lt;/c1&gt; closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータは、&lt;c0&gt;next()&lt;/c0&gt;をそれの基底イテレータ上で呼び出します、そして結果を&lt;c1&gt;predicate&lt;/c1&gt;クロージャで評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This iterator calls &lt;c0&gt;next()&lt;/c0&gt; on its base iterator; if this call returns &lt;c1&gt;nil&lt;/c1&gt;, &lt;c2&gt;next()&lt;/c2&gt; returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータは、&lt;c0&gt;next()&lt;/c0&gt;をそれの基底イテレータ上で呼び出します；この呼び出しが&lt;c1&gt;nil&lt;/c1&gt;を返すならば、&lt;c2&gt;next()&lt;/c2&gt;は&lt;c3&gt;nil&lt;/c3&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This iterator calls &lt;c0&gt;next()&lt;/c0&gt; on its base iterator; if this call returns &lt;c1&gt;nil&lt;/c1&gt;, &lt;c2&gt;next()&lt;/c2&gt; returns nil.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータは、&lt;c0&gt;next()&lt;/c0&gt;をそれの基底イテレータ上で呼び出します；この呼び出しが&lt;c1&gt;nil&lt;/c1&gt;を返すならば、&lt;c2&gt;next()&lt;/c2&gt;はnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This iterator forwards its &lt;c0&gt;next()&lt;/c0&gt; method to an arbitrary underlying iterator having the same &lt;c1&gt;Element&lt;/c1&gt; type, hiding the specifics of the underlying &lt;c2&gt;Iterator&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータは、それの&lt;c0&gt;next()&lt;/c0&gt;メソッドを同じ&lt;c1&gt;Element&lt;/c1&gt;型を持っている随意の基盤をなすイテレータに転送して、特定の基盤をなす&lt;c2&gt;Iterator&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/c2&gt;を隠しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This magnitude calculation takes the following form for a floating-point value &lt;c5&gt;x&lt;/c5&gt; of type &lt;c6&gt;F&lt;/c6&gt;, where &lt;c7&gt;**&lt;/c7&gt; is exponentiation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規模計算は、型&lt;c6&gt;F&lt;/c6&gt;の浮動小数点値&lt;c5&gt;x&lt;/c5&gt;に対して以下の形式をとります、そこで&lt;c7&gt;**&lt;/c7&gt;は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This makes creating mixed-language app and framework targets as straightforward as creating an app or framework target written in a single language.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、混合言語のアプリとフレームワーク・ターゲットを作成することを、単一の言語で書かれるアプリまたはフレームワーク・ターゲットをつくるのと同じくらいわかりやすいものにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means that any cleanup state can be emitted accordingly in the cancellation handler</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、あらゆるクリーンアップ状態が取り消しハンドラの中でふさわしく発布されることが可能なことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means that any cleanup state can be emitted accordingly in the cancellation handler.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、あらゆるクリーンアップ状態が取り消しハンドラの中でふさわしく発布されることが可能なことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means that if an array is sharing storage with other copies, the first mutating operation on that array incurs the cost of copying the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これが意味するのは、ある配列がストレージを他のコピーと共有するならば、その配列上での最初の変更操作は、配列をコピーするコストを招くということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means that when two different class instances have the same value for each of their stored properties, they're still considered to be different by the identity operator (&lt;c0&gt;===&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、２つの異なるクラスインスタンスが同じ値をそれらの格納プロパティの各々に対して持つ場合に、それらはまだ異なっていると同一性演算子（&lt;c0&gt;===&lt;/c0&gt;）によってみなされることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means the outer &lt;c10&gt;for await in&lt;/c10&gt; loop iterates over &lt;c11&gt;String&lt;/c11&gt; instances instead of the underlying &lt;c12&gt;Int&lt;/c12&gt; values that &lt;c13&gt;Counter&lt;/c13&gt; produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、外側の&lt;c10&gt;for await in&lt;/c10&gt;ループが&lt;c11&gt;String&lt;/c11&gt;インスタンスそれらのすべてにわたって反復することを意味します、&lt;c13&gt;Counter&lt;/c13&gt;が生み出す基礎をなす&lt;c12&gt;Int&lt;/c12&gt;それらではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means the outer &lt;c10&gt;for await in&lt;/c10&gt; loop iterates over &lt;c11&gt;String&lt;/c11&gt; instances instead of the underlying &lt;c12&gt;Int&lt;/c12&gt; values that &lt;c13&gt;Counter&lt;/c13&gt; produces:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、外側の&lt;c10&gt;for await in&lt;/c10&gt;ループが&lt;c11&gt;String&lt;/c11&gt;インスタンスそれらのすべてにわたって反復することを意味します、&lt;c13&gt;Counter&lt;/c13&gt;が生み出す基礎をなす&lt;c12&gt;Int&lt;/c12&gt;それらではなく：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method ensures that the array has unique, mutable, contiguous storage, with space allocated for at least the requested number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、配列が、少なくとも要請された数の要素に割り当てられた空間とともに、固有な、可変の、隣接するストレージを持つことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method ensures that the dictionary has unique, mutable, contiguous storage, with space allocated for at least the requested number of key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、辞書が、少なくとも要請された数のキー値ペアに割り当てられた空間とともに、固有な、可変の、隣接するストレージを持つことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method has the effect of removing the specified range of elements from the array and inserting the new elements at the same location.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、指定された範囲の要素を配列から取り除き、そして新しい要素を同じ場所に挿入する効果を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、指定された範囲の要素をコレクションから取り除き、そして新しい要素を同じ場所に挿入する効果を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、語彙筆記的順序の数学的概念を実装します、それはユニコードに関係はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method implements the remainder operation defined by the &lt;a4&gt;IEEE 754 specification&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;a4&gt;IEEE 754 仕様&lt;/a4&gt;によって定義される剰余演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling &lt;c0&gt;Bool&lt;w1&gt;.random(using:)&lt;/w1&gt;&lt;/c0&gt;, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;Bool&lt;w1&gt;.random(using:)&lt;/w1&gt;&lt;/c0&gt;を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling &lt;c0&gt;random(in:&lt;w1&gt;using:)&lt;/w1&gt;&lt;/c0&gt;, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;random(in:&lt;w1&gt;using:)&lt;/w1&gt;&lt;/c0&gt;を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling &lt;c0&gt;random&lt;w1&gt;Element(using:)&lt;/w1&gt;&lt;/c0&gt;, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;random&lt;w1&gt;Element(using:)&lt;/w1&gt;&lt;/c0&gt;を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling &lt;c0&gt;shuffle(using:)&lt;/c0&gt;, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;shuffle(using:)&lt;/c0&gt;を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling &lt;c0&gt;shuffled(using:)&lt;/c0&gt;, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;shuffled(using:)&lt;/c0&gt;を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling the version that takes a generator, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、ある生成子をとるバージョンを、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to the C &lt;c0&gt;fma&lt;/c0&gt; function and implements the &lt;c1&gt;fused&lt;w2&gt;Multiply&lt;w3&gt;Add&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a4&gt;IEEE 754 specification&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、C &lt;c0&gt;fma&lt;/c0&gt;関数の等価物です、そして&lt;c1&gt;fused&lt;w2&gt;Multiply&lt;w3&gt;Add&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;演算を実装し、それは&lt;a4&gt;IEEE 754仕様&lt;/a4&gt;によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is preferred over &lt;c0&gt;reduce(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt; for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、効率のために&lt;c0&gt;reduce(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt;より好まれます、その結果がコピーオンライト型である場合、例えばArrayまたは辞書に対しては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method must not be called after a call to &lt;c0&gt;container(keyed&lt;w1&gt;By:)&lt;/w1&gt;&lt;/c0&gt; or after encoding a value through a call to &lt;c2&gt;single&lt;w3&gt;Value&lt;w4&gt;Container()&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;container(keyed&lt;w1&gt;By:)&lt;/w1&gt;&lt;/c0&gt;への呼び出しの後、または&lt;c2&gt;single&lt;w3&gt;Value&lt;w4&gt;Container()&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;への呼び出しを通して値をエンコードする後に呼び出されてはなりません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method must not be called after a call to &lt;c0&gt;unkeyed&lt;w1&gt;Container()&lt;/w1&gt;&lt;/c0&gt; or &lt;c2&gt;container(keyed&lt;w3&gt;By:)&lt;/w3&gt;&lt;/c2&gt;, or after encoding a value through a call to &lt;c4&gt;single&lt;w5&gt;Value&lt;w6&gt;Container()&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;unkeyed&lt;w1&gt;Container()&lt;/w1&gt;&lt;/c0&gt;や&lt;c2&gt;container(keyed&lt;w3&gt;By:)&lt;/w3&gt;&lt;/c2&gt;への呼び出しの後、または&lt;c4&gt;single&lt;w5&gt;Value&lt;w6&gt;Container()&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;への呼び出しを通して値をエンコードする後に呼び出されてはなりません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method must not be called after a call to &lt;c0&gt;unkeyed&lt;w1&gt;Container()&lt;/w1&gt;&lt;/c0&gt; or after encoding a value through a call to &lt;c2&gt;single&lt;w3&gt;Value&lt;w4&gt;Container()&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;unkeyed&lt;w1&gt;Container()&lt;/w1&gt;&lt;/c0&gt;への呼び出しの後、または&lt;c2&gt;single&lt;w3&gt;Value&lt;w4&gt;Container()&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;への呼び出しを通して値をエンコードする後に呼び出されてはなりません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns &lt;c0&gt;true&lt;/c0&gt; and &lt;c1&gt;false&lt;/c1&gt; with equal probability.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;true&lt;/c0&gt;と&lt;c1&gt;false&lt;/c1&gt;を等しい確率で返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns the maximum of two values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの値のうち最大を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns the minimum of two values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの値のうち最小を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns the value with greater magnitude of the two given values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの与えられた値のうちより大きい規模を持つ値を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns the value with lesser magnitude of the two given values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの与えられた値のうちより小さい規模を持つ値を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method serves as the basis for the equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) for floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、浮動小数点値のための同等演算子（&lt;c0&gt;==&lt;/c0&gt;）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method serves as the basis for the less-than operator (&lt;c0&gt;&lt;&lt;/c0&gt;) for floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、浮動小数点値のためのより少ない演算子（&lt;c0&gt;&lt;&lt;/c0&gt;）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method serves as the basis for the less-than-or-equal-to operator (&lt;c0&gt;&lt;=&lt;/c0&gt;) for floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、浮動小数点値のためのより少ないか等しい演算子（&lt;c0&gt;&lt;=&lt;/c0&gt;）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This operator tests whether two instances have different identities, not different values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算子は、２つのインスタンスが異なる正体を持つ（異なる同一性を持つ）かどうかをテストします、異なる値をではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This operator tests whether two instances have the same identity, not the same value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算子は、２つのインスタンスが同じ正体を持つ（同一性を持つ）かどうかをテストします、同じ値をではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This operator uses short-circuit evaluation: &lt;c0&gt;optional&lt;/c0&gt; is checked first, and &lt;c1&gt;default&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt; is evaluated only if &lt;c3&gt;optional&lt;/c3&gt; is &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算子は、短絡評価を使います：&lt;c0&gt;optional&lt;/c0&gt;が最初に調べられます、そして&lt;c1&gt;default&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;は&lt;c3&gt;optional&lt;/c3&gt;が&lt;c4&gt;nil&lt;/c4&gt;である場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This operator uses short-circuit evaluation: The left-hand side (&lt;c0&gt;lhs&lt;/c0&gt;) is evaluated first, and the right-hand side (&lt;c1&gt;rhs&lt;/c1&gt;) is evaluated only if &lt;c2&gt;lhs&lt;/c2&gt; evaluates to &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算子は、短絡評価を使います：左手側（&lt;c0&gt;lhs&lt;/c0&gt;）が最初に評価されます、そして右手側（&lt;c1&gt;rhs&lt;/c1&gt;）は&lt;c2&gt;lhs&lt;/c2&gt;が&lt;c3&gt;false&lt;/c3&gt;に評価する場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This operator uses short-circuit evaluation: The left-hand side (&lt;c0&gt;lhs&lt;/c0&gt;) is evaluated first, and the right-hand side (&lt;c1&gt;rhs&lt;/c1&gt;) is evaluated only if &lt;c2&gt;lhs&lt;/c2&gt; evaluates to &lt;c3&gt;true&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算子は、短絡評価を使います：左手側（&lt;c0&gt;lhs&lt;/c0&gt;）が最初に評価されます、そして右手側（&lt;c1&gt;rhs&lt;/c1&gt;）は&lt;c2&gt;lhs&lt;/c2&gt;が&lt;c3&gt;true&lt;/c3&gt;に評価する場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This postcondition must hold even if the &lt;c6&gt;initializer&lt;/c6&gt; closure throws an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この事後条件は、たとえ&lt;c6&gt;initializer&lt;/c6&gt;クロージャがエラーをスローするとしても保持されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Math” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Math” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property has the same value as the &lt;c0&gt;description&lt;/c0&gt; property, except that NaN values are printed in an extended format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;c0&gt;description&lt;/c0&gt;プロパティと同じ値を持ちます、NaN値が拡張フォーマットにおいて出力されることを除いて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property implements the &lt;c0&gt;log&lt;w1&gt;B&lt;/w1&gt;&lt;/c0&gt; operation defined by the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;で定義される&lt;c0&gt;log&lt;w1&gt;B&lt;/w1&gt;&lt;/c0&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is &lt;c0&gt;true&lt;/c0&gt; for both quiet and signaling NaNs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、クワイエットおよびシグナルNaNの両方に対して&lt;c0&gt;true&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is &lt;c0&gt;true&lt;/c0&gt; only for characters composed of scalars in the “Math_Symbol”, “Currency_Symbol”, “Modifier_Symbol”, or “Other_Symbol” categories in the &lt;a1&gt;Unicode Standard&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティが&lt;c0&gt;true&lt;/c0&gt;であるのは、&lt;a1&gt;Unicode Standard&lt;/a1&gt;における “Math_Symbol”、“Currency_Symbol”、“Modifier_Symbol”、または“Other_Symbol” カテゴリの中のスカラーから構成される文字に対してのみです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is a constant for instances of fixed-width integer types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、固定長整数型のインスタンスのための定数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is a “past the end” index that does not correspond with any element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは「終わりを過ぎた」インデックスで、それはコレクションのどの要素にも対応しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is always &lt;c0&gt;true&lt;/c0&gt; for signed integer types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、符号付き整数型に対して常に&lt;c0&gt;true&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property must always evaluate to the same executor for a given actor instance, and holding on to the actor must keep the executor alive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、与えられたアクターインスタンスに対して常に同じエグゼキュータに評価されなければなりません、そしてアクターを手放さないことはエグゼキュータを存続させる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property will be implicitly accessed when work needs to be scheduled onto this actor.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、仕事がこのアクター上に予定を組まれる必要がある時に、暗黙的にアクセスされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This relation is a refinement of the less-than-or-equal-to operator (&lt;c0&gt;&lt;=&lt;/c0&gt;) that provides a total order on all values of the type, including signed zeros and NaNs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関係は、より少ないか等しい演算子（&lt;c0&gt;&lt;=&lt;/c0&gt;の改良版です、それは、符号付きゼロとNaNを含む、その型のすべての値に関する全順序を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This returns an instance of type &lt;c8&gt;Async&lt;w9&gt;Iterator&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、型&lt;c8&gt;Async&lt;w9&gt;Iterator&lt;/w9&gt;&lt;/c8&gt;のあるインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rounding rule is also known as “bankers rounding,” and is the default IEEE 754 rounding mode for arithmetic.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この丸め規則はまた「銀行家の丸め」としても知られます、そして算術に対する省略時のIEEE 754丸め方式です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rounding rule is also known as “schoolbook rounding.” The following example shows the results of rounding numbers using this rule:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この丸め規則はまた「教科書丸め」としても知られます。以下の例は、この規則を使っての数の丸めの結果を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule implements the &lt;c0&gt;round&lt;w1&gt;To&lt;w2&gt;Integral&lt;w3&gt;Ties&lt;w4&gt;To&lt;w5&gt;Even&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; operation defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規則は、&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;で定義される&lt;c0&gt;round&lt;w1&gt;To&lt;w2&gt;Integral&lt;w3&gt;Ties&lt;w4&gt;To&lt;w5&gt;Even&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule is equivalent to the C &lt;c0&gt;ceil&lt;/c0&gt; function and implements the &lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Positive&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規則は、C &lt;c0&gt;ceil&lt;/c0&gt;関数の等価物です、そして&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;によって定義される&lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Positive&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule is equivalent to the C &lt;c0&gt;floor&lt;/c0&gt; function and implements the &lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Negative&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規則は、C &lt;c0&gt;floor&lt;/c0&gt;関数の等価物です、そして&lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Negative&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;演算を実装し、それは&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule is equivalent to the C &lt;c0&gt;round&lt;/c0&gt; function and implements the &lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Ties&lt;w5&gt;To&lt;w6&gt;Away&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a7&gt;IEEE 754 specification&lt;/a7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規則は、C &lt;c0&gt;round&lt;/c0&gt;関数の等価物です、そして&lt;a7&gt;IEEE 754仕様&lt;/a7&gt;によって定義される&lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Ties&lt;w5&gt;To&lt;w6&gt;Away&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule is equivalent to the C &lt;c0&gt;trunc&lt;/c0&gt; function and implements the &lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Zero&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規則は、C &lt;c0&gt;trunc&lt;/c0&gt;関数の等価物です、そして&lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Zero&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;演算を実装し、それは&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This subscript takes an index into the dictionary, instead of a key, and returns the corresponding key-value pair as a tuple.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この添え字は辞書に対してのインデックスをとります、キーではなく、そして該当するキー値ペアをタプルとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This type does not carry an owner pointer unlike the other C*Pointer types because it only needs to reference the results of inout conversions, which already have writeback-scoped lifetime.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型は、他のC*Pointer型と違って所有ポインタを持ち運びません、なぜならそれはただインアウト変換の結果を参照する必要があるだけだからです、そしてそれは既にライトバックスコープの寿命を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This type has implicit conversions to allow passing any of the following to a C or ObjC API:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型は暗黙的な変換を持ち、それによって以下のことをCまたはObjC APIへ渡すことを可能にされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This type is specificially not Sendable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型は、はっきりとSendableではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This type must conform to &lt;c4&gt;String&lt;w5&gt;Interpolation&lt;w6&gt;Protocol&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; and have a matching &lt;c7&gt;String&lt;w8&gt;Literal&lt;w9&gt;Type&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型は、&lt;c4&gt;String&lt;w5&gt;Interpolation&lt;w6&gt;Protocol&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;に準拠する、そして適合する&lt;c7&gt;String&lt;w8&gt;Literal&lt;w9&gt;Type&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;を持つ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This unexpected result occurs because the call to &lt;c0&gt;type(of: value)&lt;/c0&gt; inside &lt;c1&gt;print&lt;w2&gt;Generic&lt;w3&gt;Info(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; must return a metatype that is an instance of &lt;c4&gt;T&lt;w5&gt;.Type&lt;/w5&gt;&lt;/c4&gt;, but &lt;c6&gt;String&lt;w7&gt;.self&lt;/w7&gt;&lt;/c6&gt; (the expected dynamic type) is not an instance of &lt;c8&gt;P&lt;w9&gt;.Type&lt;/w9&gt;&lt;/c8&gt; (the concrete metatype of &lt;c10&gt;value&lt;/c10&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この予期しない結果は、&lt;c0&gt;type(of: value)&lt;/c0&gt;への呼び出しが&lt;c1&gt;print&lt;w2&gt;Generic&lt;w3&gt;Info(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;内部において、&lt;c4&gt;T&lt;w5&gt;.Type&lt;/w5&gt;&lt;/c4&gt;のインスタンスであるメタタイプを返さなければならない、しかし&lt;c6&gt;String&lt;w7&gt;.self&lt;/w7&gt;&lt;/c6&gt;（期待された動的型）は&lt;c8&gt;P&lt;w9&gt;.Type&lt;/w9&gt;&lt;/c8&gt;（&lt;c10&gt;value&lt;/c10&gt;の具象メタタイプ）のインスタンスでないことから起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value compares greater than or equal to all finite numbers, but less than &lt;c0&gt;infinity&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、すべての有限数、しかし&lt;c0&gt;無限大&lt;/c0&gt;より少ないものに対してより大きいか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value compares less than or equal to all positive normal numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、すべての正のノーマル数に対してより少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value compares less than or equal to all positive numbers, but greater than zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、すべての正の数、しかしゼロより大きいものに対してより少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to type-specific C macros such as &lt;c0&gt;FLT&lt;w1&gt;_MAX&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;DBL&lt;w3&gt;_MAX&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、型固有のCマクロ、例えば&lt;c0&gt;FLT&lt;w1&gt;_MAX&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;DBL&lt;w3&gt;_MAX&lt;/w3&gt;&lt;/c2&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to type-specific C macros such as &lt;c0&gt;FLT&lt;w1&gt;_MIN&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;DBL&lt;w3&gt;_MIN&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、型固有のCマクロ、例えば&lt;c0&gt;FLT&lt;w1&gt;_MIN&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;DBL&lt;w3&gt;_MIN&lt;/w3&gt;&lt;/c2&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value is unadjusted by the type’s exponent bias.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、この型のもつ指数バイアスによって未調整のものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value should be rounded toward zero to keep user computations with angles from inadvertently ending up in the wrong quadrant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、角度を伴うユーザ計算がうっかりして間違った象限に終わらないようにゼロへと丸められるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This will be the same as either &lt;c0&gt;CSigned&lt;w1&gt;Char&lt;/w1&gt;&lt;/c0&gt; (in the common case) or &lt;c2&gt;CUnsigned&lt;w3&gt;Char&lt;/w3&gt;&lt;/c2&gt;, depending on the platform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、プラットホーム次第で、&lt;c0&gt;CSigned&lt;w1&gt;Char&lt;/w1&gt;&lt;/c0&gt;（一般的な場合）または&lt;c2&gt;CUnsigned&lt;w3&gt;Char&lt;/w3&gt;&lt;/c2&gt;のどちらかに同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Throw Errors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラーをスローする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Throw and Catch Errors from Custom Error Domains</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえのエラー領域からエラーをスローおよびキャッチする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Throw and catch errors that use Cocoa's error types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cocoaのエラー型を使うエラーをスローおよびキャッチします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Throwing an error in one of the tasks of a task group doesn’t immediately cancel the other tasks in that group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるエラーをタスクグループのタスクそれらの１つにおいてスローすることは、直ぐにそのグループの中の他のタスクを取り消しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access a slice of a collection using a range expression, use the collection’s generic subscript that uses a range expression as its parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式を使ってコレクションのスライスにアクセスするには、そのコレクションの持つ総称体添え字で、範囲式をそれのパラメータとして使うものを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access the stride, use &lt;c1&gt;Memory&lt;w2&gt;Layout&lt;Pointee&gt;.stride&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストライドにアクセスするには、&lt;c1&gt;Memory&lt;w2&gt;Layout&lt;Pointee&gt;.stride&lt;/w2&gt;&lt;/c1&gt;を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access the stride, use &lt;c2&gt;Memory&lt;w3&gt;Layout&lt;Pointee&gt;.stride&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストライドにアクセスするには、&lt;c2&gt;Memory&lt;w3&gt;Layout&lt;Pointee&gt;.stride&lt;/w3&gt;&lt;/c2&gt;を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Additive&lt;w1&gt;Arithmetic&lt;/w1&gt;&lt;/c0&gt; protocol conformance to your own custom type, implement the required operators, and provide a static &lt;c2&gt;zero&lt;/c2&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Additive&lt;w1&gt;Arithmetic&lt;/w1&gt;&lt;/c0&gt;プロトコル準拠をあなた自身のあつらえの型に加えるには、必要とされる演算子を実装してください、そしてある静的&lt;c2&gt;zero&lt;/c2&gt;プロパティを提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Bidirectional&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt; conformance to your custom types, implement the &lt;c2&gt;index(before:)&lt;/c2&gt; method in addition to the requirements of the &lt;c3&gt;Collection&lt;/c3&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bidirectional&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえの型に加えるには、&lt;c2&gt;index(before:)&lt;/c2&gt;メソッドを、&lt;c3&gt;Collection&lt;/c3&gt;プロトコルの要件に加えて実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Comparable&lt;/c0&gt; conformance to &lt;c1&gt;Date&lt;/c1&gt;, first declare conformance to &lt;c2&gt;Comparable&lt;/c2&gt; and implement the &lt;c3&gt;&lt;&lt;/c3&gt; operator function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Comparable&lt;/c0&gt;準拠を&lt;c1&gt;Date&lt;/c1&gt;に加えるには、最初に&lt;c2&gt;Comparable&lt;/c2&gt;への準拠を宣言して、&lt;c3&gt;&lt;&lt;/c3&gt;演算子関数を実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Comparable&lt;/c0&gt; conformance to your custom types, define the &lt;c1&gt;&lt;&lt;/c1&gt; and &lt;c2&gt;==&lt;/c2&gt; operators as static methods of your types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Comparable&lt;/c0&gt;準拠をあなたのあつらえの型に加えるには、&lt;c1&gt;&lt;&lt;/c1&gt;および&lt;c2&gt;==&lt;/c2&gt;演算子をあなたの型の静的メソッドとして定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Custom&lt;w1&gt;Playground&lt;w2&gt;Display&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to your custom type, implement the &lt;c4&gt;playground&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Custom&lt;w1&gt;Playground&lt;w2&gt;Display&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえの型に加えるには、&lt;c4&gt;playground&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt;プロパティを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Boolean&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to your custom type, implement the &lt;c4&gt;init(boolean&lt;w5&gt;Literal:)&lt;/w5&gt;&lt;/c4&gt; initializer that creates an instance of your type with the given Boolean value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Boolean&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえの型に加えるには&lt;c4&gt;init(boolean&lt;w5&gt;Literal:)&lt;/w5&gt;&lt;/c4&gt;イニシャライザを加えてください、それはあなたの型のインスタンスを、与えられたブール値とともに作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Extended&lt;w3&gt;Grapheme&lt;w4&gt;Cluster&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Extended&lt;w3&gt;Grapheme&lt;w4&gt;Cluster&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Float&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Float&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Integer&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Integer&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Unicode&lt;w3&gt;Scalar&lt;w4&gt;Literal&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Unicode&lt;w3&gt;Scalar&lt;w4&gt;Literal&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c1&gt;Collection&lt;/c1&gt; conformance to your type, you must declare at least the following requirements:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Collection&lt;/c1&gt;準拠をあなたの型に加えるには、あなたは少なくとも以下の要件を宣言しなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c2&gt;Hashable&lt;/c2&gt; conformance, provide an &lt;c3&gt;==&lt;/c3&gt; operator function and implement the &lt;c4&gt;hash(into:)&lt;/c4&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Hashable&lt;/c2&gt;準拠を加えるには、&lt;c3&gt;==&lt;/c3&gt;演算子関数を提供して、&lt;c4&gt;hash(into:)&lt;/c4&gt;メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add a new key-value pair, assign a value to a key that isn’t yet a part of the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいキー値ペアを加えるには、ある値を、まだ辞書の一部ではないキーに対して割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add single elements to the end of an array, use the &lt;c0&gt;append(_:)&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一の要素を配列に加えるには、&lt;c0&gt;append(_:)&lt;/c0&gt;メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add the capability to be initialized with a dictionary literal to your own custom types, declare an &lt;c0&gt;init(dictionary&lt;w1&gt;Literal:)&lt;/w1&gt;&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書リテラルで初期化される能力をあなた独自のあつらえの型に加えるには、&lt;c0&gt;init(dictionary&lt;w1&gt;Literal:)&lt;/w1&gt;&lt;/c0&gt;イニシャライザを宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なる型の値を加算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To avoid the unexpected copy, use the &lt;c1&gt;index(after:)&lt;/c1&gt; method starting with &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt; to produce indices instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>予期されないコピーを避けるために、代わりに&lt;c1&gt;index(after:)&lt;/c1&gt;メソッドを使って&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;で始めることで、インデックスを生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To avoid this behavior, swap the call &lt;c0&gt;is&lt;w1&gt;Known&lt;w2&gt;Uniquely&lt;w3&gt;Referenced(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; to the left-hand side or store the result of the first expression in a local constant:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この挙動を防ぐために、左手側への呼び出し&lt;c0&gt;is&lt;w1&gt;Known&lt;w2&gt;Uniquely&lt;w3&gt;Referenced(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を交換するか、最初の式の結果をローカル定数の中に格納してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To avoid this, use a forward declaration of the Swift class or protocol to reference it in an Objective-C interface.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これを防ぐために、Swiftクラスまたはプロトコルの前方宣言を使うことで、それをObjective-Cインターフェイスにおいて参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To check for invalid usage in Release builds, see &lt;c0&gt;precondition(_:&lt;w1&gt;_:&lt;w2&gt;file:&lt;w3&gt;line:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「リリース」ビルドにおける無効な使用法を調べるには、&lt;c0&gt;precondition(_:&lt;w1&gt;_:&lt;w2&gt;file:&lt;w3&gt;line:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To check whether a collection is empty, use its &lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt; property instead of comparing &lt;c2&gt;count&lt;/c2&gt; to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションが空かどうか調べるには、それの&lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt;プロパティを使ってください、&lt;c2&gt;count&lt;/c2&gt;をゼロと比較するのでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To collect the results of tasks that were added to the group, you can use the following pattern:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グループに追加されたいくつかのタスクの結果それらを収集するには、あなたは以下の手本を使用できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To conform to &lt;c3&gt;Hashable&lt;/c3&gt;, implement the &lt;c4&gt;hash(into:)&lt;/c4&gt; requirement instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;Hashable&lt;/c3&gt;に準拠するには、&lt;c4&gt;hash(into:)&lt;/c4&gt;要件を代わりに実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create a continuation in asynchronous code, call the &lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Continuation(function:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; or &lt;c5&gt;with&lt;w6&gt;Unsafe&lt;w7&gt;Throwing&lt;w8&gt;Continuation(function:&lt;w9&gt;_:)&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある継続を非同期コードにおいて作成するには、&lt;c1&gt;with&lt;w2&gt;Unsafe&lt;w3&gt;Continuation(function:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;または&lt;c5&gt;with&lt;w6&gt;Unsafe&lt;w7&gt;Throwing&lt;w8&gt;Continuation(function:&lt;w9&gt;_:)&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;関数を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create a dictionary with no key-value pairs, use an empty dictionary literal (&lt;c0&gt;[:]&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値ペアを持たない辞書を作成するには、空の辞書リテラル（&lt;c0&gt;[:]&lt;/c0&gt;）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create a new type that supports string literals and interpolation, but that doesn’t need any custom behavior, conform the type to &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and implement the &lt;c4&gt;init(string&lt;w5&gt;Literal: String)&lt;/w5&gt;&lt;/c4&gt; initializer declared by the &lt;c6&gt;Expressible&lt;w7&gt;By&lt;w8&gt;String&lt;w9&gt;Literal&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列リテラルと補間をサポートする、しかし何らかのあつらえの挙動を必要としない新しい型を作成するには、その型を&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠させて、そして&lt;c6&gt;Expressible&lt;w7&gt;By&lt;w8&gt;String&lt;w9&gt;Literal&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;プロトコルによって宣言される&lt;c4&gt;init(string&lt;w5&gt;Literal: String)&lt;/w5&gt;&lt;/c4&gt;イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create a wrapper for the &lt;c0&gt;c&lt;w1&gt;_api&lt;/w1&gt;&lt;/c0&gt; function, write a function that takes &lt;c2&gt;CVar&lt;w3&gt;Arg&lt;/w3&gt;&lt;/c2&gt; arguments, and then call the imported C function using the &lt;c4&gt;with&lt;w5&gt;Va&lt;w6&gt;List(_:&lt;w7&gt;_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; function:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;c&lt;w1&gt;_api&lt;/w1&gt;&lt;/c0&gt;関数に対するラッパーを作成するには、&lt;c2&gt;CVar&lt;w3&gt;Arg&lt;/w3&gt;&lt;/c2&gt;引数をとる関数を書いて、それからインポートされたC関数を&lt;c4&gt;with&lt;w5&gt;Va&lt;w6&gt;List(_:&lt;w7&gt;_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;関数を使って呼び出してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create an instance of &lt;c0&gt;Enumerated&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;, call &lt;c2&gt;enumerated()&lt;/c2&gt; on a sequence or collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Enumerated&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;のインスタンスを作成するには、&lt;c2&gt;enumerated()&lt;/c2&gt;をシーケンスまたはコレクション上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create an instance, call &lt;c0&gt;enumerated().make&lt;w1&gt;Iterator()&lt;/w1&gt;&lt;/c0&gt; on a sequence or collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスを作成するには、&lt;c0&gt;enumerated().make&lt;w1&gt;Iterator()&lt;/w1&gt;&lt;/c0&gt;をシーケンスまたはコレクション上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To customize that representation, make your type conform to the &lt;c3&gt;Custom&lt;w4&gt;Debug&lt;w5&gt;String&lt;w6&gt;Convertible&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この表現をカスタマイズするには、あなたの型を&lt;c3&gt;Custom&lt;w4&gt;Debug&lt;w5&gt;String&lt;w6&gt;Convertible&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;プロトコルに準拠させてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To customize your type’s &lt;c0&gt;Equatable&lt;/c0&gt; conformance, to adopt &lt;c1&gt;Equatable&lt;/c1&gt; in a type that doesn’t meet the criteria listed above, or to extend an existing type to conform to &lt;c2&gt;Equatable&lt;/c2&gt;, implement the equal-to operator (&lt;c3&gt;==&lt;/c3&gt;) as a static method of your type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のもつ&lt;c0&gt;Equatableable&lt;/c0&gt;準拠をカスタマイズするため、&lt;c1&gt;Equatable&lt;/c1&gt;を上でリストされる基準に沿わない型において採用するため、または既存の型を拡張して&lt;c2&gt;Equatable&lt;/c2&gt;に準拠するためには、同等演算子（&lt;c3&gt;==&lt;/c3&gt;）をあなたの型の静的メソッドとして実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To customize your type’s &lt;c0&gt;Hashable&lt;/c0&gt; conformance, to adopt &lt;c1&gt;Hashable&lt;/c1&gt; in a type that doesn’t meet the criteria listed above, or to extend an existing type to conform to &lt;c2&gt;Hashable&lt;/c2&gt;, implement the &lt;c3&gt;hash(into:)&lt;/c3&gt; method in your custom type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のもつ&lt;c0&gt;Hashable&lt;/c0&gt;準拠をカスタマイズするために、&lt;c1&gt;Hashable&lt;/c1&gt;を上でリストされる基準に沿わない型において採用するために、または既存の型を拡張して&lt;c2&gt;Hashable&lt;/c2&gt;に準拠するためには、&lt;c3&gt;hash(into:)&lt;/c3&gt;メソッドをあなたのあつらえの型において実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To declare a dictionary, assign a dictionary literal to a variable or constant:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書を宣言するには、辞書リテラルを変数または定数に割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To do so, start by creating two slices of the &lt;c0&gt;absences&lt;/c0&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それをするには、&lt;c0&gt;absences&lt;/c0&gt;配列の２つのスライスを作成することで始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To do this, enclose a comma-separated list of values in square brackets.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これをするには、コンマ区切りの値のリストを角括弧で囲んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To ensure that your type meets the semantic requirements of the &lt;c3&gt;Hashable&lt;/c3&gt; and &lt;c4&gt;Equatable&lt;/c4&gt; protocols, it’s a good idea to also customize your type’s &lt;c5&gt;Equatable&lt;/c5&gt; conformance to match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型が&lt;c3&gt;Hashable&lt;/c3&gt;と&lt;c4&gt;Equatable&lt;/c4&gt;プロトコルの意味論的要件に沿うことを確実にするために、あなたの型のもつ&lt;c5&gt;Equatable&lt;/c5&gt;準拠が合致するように同様にカスタマイズすることは良い考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find the difference between two collections, use the &lt;c0&gt;difference(from:)&lt;/c0&gt; method declared on the &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのコレクションの間の差異を見つけるには、&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;プロトコル上で宣言される&lt;c0&gt;difference(from:)&lt;/c0&gt;メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find the distance in bytes between two pointers, convert them to &lt;c3&gt;Unsafe&lt;w4&gt;Raw&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; instances before calling &lt;c6&gt;distance(to:)&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのポインタの間の隔たりをバイトで知るには、それらを&lt;c3&gt;Unsafe&lt;w4&gt;Raw&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;インスタンスに、&lt;c6&gt;distance(to:)&lt;/c6&gt;を呼ぶ前に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find the index of the day in question, follow these steps:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>質問の日付のインデックスを見つけるには、これらの手順に従ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find the indices of the two days in question, follow these steps:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>当該の２つの日付のインデックスを見つけるには、これらの手順を踏んでください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To get the character’s value, use the &lt;c0&gt;hex&lt;w1&gt;Digit&lt;w2&gt;Value&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字のもつ値を取得するには、&lt;c0&gt;hex&lt;w1&gt;Digit&lt;w2&gt;Value&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To get the dynamic type inside &lt;c11&gt;value&lt;/c11&gt; in this generic context, cast the parameter to &lt;c12&gt;Any&lt;/c12&gt; when calling &lt;c13&gt;type(of:)&lt;/c13&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c11&gt;value&lt;/c11&gt;内部の動的型をこの総称体の文脈において得るには、このパラメータを&lt;c12&gt;Any&lt;/c12&gt;へと&lt;c13&gt;type(of:)&lt;/c13&gt;を呼び出す時にキャストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To handle Objective-C exceptions, write Objective-C code that catches exceptions before they reach any Swift code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C例外を取り扱うには、それら例外をそれらが何らかのスウィフトコードに届く前に捕まえるObjective-Cコードを書いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To implement your own &lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;, implement a wrapped type that conforms to &lt;c2&gt;Async&lt;w3&gt;Iterator&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自の&lt;c0&gt;Async&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;を実装するには、&lt;c2&gt;Async&lt;w3&gt;Iterator&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に準拠するあるラップ型を実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To import a set of Objective-C files into Swift code within the same app target, you rely on an Objective-C bridging header file to expose those files to Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一揃いのObjective-CファイルをSwiftコードへと同じアプリターゲット内でインポートするには、あなたはObjective-Cブリッジヘッダファイルを頼ることで、それらファイルをSwiftへと露出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To import a set of Swift files in the same framework target as your Objective-C code, import the Xcode-generated header for your Swift code into any Objective-C &lt;c0&gt;.m&lt;/c0&gt; file where you want to use your Swift code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一揃いのSwiftファイルをあなたのObjective-Cコードと同じフレームワークターゲットの中でインポートするために、あなたのSwiftコードに対するXcode生成のヘッダを、そこにおいてあなたがあなたのSwiftコードを使うことを望む何らかのObjective-C &lt;c0&gt;.m&lt;/c0&gt;ファイルの中へとインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To iterate over the elements of a collection with its indices, use the &lt;c3&gt;zip(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/c3&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションの要素すべてにわたってそれのインデックスで反復するには、&lt;c3&gt;zip(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/c3&gt;関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To learn more about the open source Swift project and community, visit &lt;a0&gt;Swift.org&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オープンソースSwiftプロジェクトおよびコミュニティについてもっと知るには、&lt;a0&gt;Swift.org&lt;/a0&gt;を訪れてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To learn which half had more absences, use the &lt;c1&gt;reduce(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/c1&gt; method to calculate each sum.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前半後半のどちらがより多くの欠席者がいるか突き止めるには、&lt;c1&gt;reduce(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/c1&gt;メソッドを使ってそれぞれ総計を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To maintain substitutability, the &lt;c0&gt;==&lt;/c0&gt; operator should take into account all visible aspects of an &lt;c1&gt;Equatable&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代替可能性を維持するために、&lt;c0&gt;==&lt;/c0&gt;演算子はある&lt;c1&gt;Equatable&lt;/c1&gt;型の全ての目に見える面を考慮しなければならないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make &lt;c0&gt;Player&lt;/c0&gt; conform to the &lt;c1&gt;Hashable&lt;/c1&gt; protocol, declare conformance in another extension and implement the &lt;c2&gt;hash(into:)&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Player&lt;/c0&gt;を&lt;c1&gt;Hashable&lt;/c1&gt;プロトコルに準拠させるには、準拠を別の拡張において宣言して、&lt;c2&gt;hash(into:)&lt;/c2&gt;メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make this class conform to the &lt;c3&gt;Equatable&lt;/c3&gt; protocol, declare conformance in an extension and implement the  static &lt;c4&gt;==&lt;/c4&gt; operator method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このクラスを&lt;c3&gt;Equatable&lt;/c3&gt;プロトコルに準拠させるには、準拠をある拡張において宣言して、静的&lt;c4&gt;==&lt;/c4&gt;演算子メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make your own custom type conform to the &lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol, declare the required initializers, properties, and methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自のあつらえの型を&lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠させるには、必須イニシャライザ、プロパティ、そしてメソッドを宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To multiply values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なる型の値を乗算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To prevent infinite loops, playground logging implementations can place a reasonable limit on this kind of chaining.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限ループを防ぐには、プレイグラウンドログ実装はこの種の連鎖に関して妥当な制限を置くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To print the items separated by something other than a space, pass a string as &lt;c0&gt;separator&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空白以外の何かによって区切られる項目を出力するには、ある文字列を&lt;c0&gt;separator&lt;/c0&gt;として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To print the items without a trailing newline, pass an empty string as &lt;c3&gt;terminator&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>後に続く改行なしで項目を出力するには、空の文字列を&lt;c3&gt;terminator&lt;/c3&gt;として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To print the items without a trailing newline, pass an empty string as &lt;c4&gt;terminator&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>後に続く改行なしで項目を出力するには、空の文字列を&lt;c4&gt;terminator&lt;/c4&gt;として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To print the items without a trailing newline, pass an empty string as &lt;c5&gt;terminator&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>後に続く改行なしで項目を出力するには、空の文字列を&lt;c5&gt;terminator&lt;/c5&gt;として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To protect code from invalid usage in Release builds, see &lt;c2&gt;precondition&lt;w3&gt;Failure(_:&lt;w4&gt;file:&lt;w5&gt;line:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「リリース」ビルドにおける無効な使用法を調べるには、&lt;c2&gt;precondition&lt;w3&gt;Failure(_:&lt;w4&gt;file:&lt;w5&gt;line:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To remove elements from an array, use the &lt;c0&gt;remove(at:)&lt;/c0&gt;, &lt;c1&gt;remove&lt;w2&gt;Subrange(_:)&lt;/w2&gt;&lt;/c1&gt;, and &lt;c3&gt;remove&lt;w4&gt;Last()&lt;/w4&gt;&lt;/c3&gt; methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列から要素を取り除くには、&lt;c0&gt;remove(at:)&lt;/c0&gt;、&lt;c1&gt;remove&lt;w2&gt;Subrange(_:)&lt;/w2&gt;&lt;/c1&gt;、そして&lt;c3&gt;remove&lt;w4&gt;Last()&lt;/w4&gt;&lt;/c3&gt;メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To remove the last element of a collection that might be empty, use the &lt;c0&gt;pop&lt;w1&gt;Last()&lt;/w1&gt;&lt;/c0&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空であるかもしれないあるコレクションの最後の要素を削除するには、&lt;c0&gt;pop&lt;w1&gt;Last()&lt;/w1&gt;&lt;/c0&gt;関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To resolve these errors, you can use &lt;c8&gt;without&lt;w9&gt;Actually&lt;w10&gt;Escaping(_:&lt;w11&gt;do:)&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; to get copies of &lt;c12&gt;f&lt;/c12&gt; and &lt;c13&gt;g&lt;/c13&gt; that can be passed to &lt;c14&gt;async(execute:)&lt;/c14&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのエラーを解決するために、あなたは&lt;c8&gt;without&lt;w9&gt;Actually&lt;w10&gt;Escaping(_:&lt;w11&gt;do:)&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;を使って、&lt;c12&gt;f&lt;/c12&gt;と&lt;c13&gt;g&lt;/c13&gt;のコピーを取得します、それは&lt;c14&gt;async(execute:)&lt;/c14&gt;に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To resume the asynchronous task, call the &lt;c10&gt;resume(returning:)&lt;/c10&gt;, &lt;c11&gt;resume(throwing:)&lt;/c11&gt;, &lt;c12&gt;resume(with:)&lt;/c12&gt;, or &lt;c13&gt;resume()&lt;/c13&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期タスクを再開するには、&lt;c10&gt;resume(returning:)&lt;/c10&gt;、&lt;c11&gt;resume(throwing:)&lt;/c11&gt;、&lt;c12&gt;resume(with:)&lt;/c12&gt;、または&lt;c13&gt;resume()&lt;/c13&gt;メソッドを呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To round a value using the default “schoolbook rounding”, you can use the shorter &lt;c4&gt;round()&lt;/c4&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の「教科書丸め」を使って値を丸めるには、あなたはより短い&lt;c4&gt;round()&lt;/c4&gt;メソッドを代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To round a value using the default “schoolbook rounding”, you can use the shorter &lt;c4&gt;rounded()&lt;/c4&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の「教科書丸め」を使って値を丸めるには、あなたはより短い&lt;c4&gt;rounded()&lt;/c4&gt;メソッドを代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To safely reference the starting and ending indices of a slice, always use the &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt; properties instead of specific values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライスの最初と最後のインデックスを安全に参照するために、常に&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;プロパティを特定の値の代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To sort the elements of your collection in descending order, pass the greater-than operator (&lt;c0&gt;&gt;&lt;/c0&gt;) to the &lt;c1&gt;sort(by:)&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコレクションの要素を降順にソートするには、より大きい演算子（&lt;c0&gt;&gt;&lt;/c0&gt;）を&lt;c1&gt;sort(by:)&lt;/c1&gt;メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To sort the elements of your sequence in descending order, pass the greater-than operator (&lt;c0&gt;&gt;&lt;/c0&gt;) to the &lt;c1&gt;sorted(by:)&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのシーケンスの要素を降順にソートするには、より大きい演算子（&lt;c0&gt;&gt;&lt;/c0&gt;）を&lt;c1&gt;sorted(by:)&lt;/c1&gt;メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To sort your sequence in descending order, pass the greater-than operator (&lt;c1&gt;&gt;&lt;/c1&gt;) as the &lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのシーケンスを降順にソートするには、より大きい演算子（&lt;c1&gt;&gt;&lt;/c1&gt;）を&lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;パラメータとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To specify an alternative rule for rounding, use the &lt;c0&gt;round(_:)&lt;/c0&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>丸めのための代替の規則を指定するには、&lt;c0&gt;round(_:)&lt;/c0&gt;メソッドを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To specify an alternative rule for rounding, use the &lt;c0&gt;rounded(_:)&lt;/c0&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>丸めのための代替の規則を指定するには、&lt;c0&gt;rounded(_:)&lt;/c0&gt;メソッドを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To start using the object, you use the &lt;c1&gt;take&lt;w2&gt;Unretained&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのオブジェクトの使用を開始するには、あなたは&lt;c1&gt;take&lt;w2&gt;Unretained&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;関数を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To subtract values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なる型の値を減算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To swap two elements of a mutable collection, use the &lt;c0&gt;swap&lt;w1&gt;At(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method of that collection instead of this function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある可変のコレクションの２つの要素を交換するには、そのコレクションの&lt;c0&gt;swap&lt;w1&gt;At(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドを、この関数の代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use a dictionary literal as the initial value of a dictionary, enclose a comma-separated list of key-value pairs in square brackets.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書リテラルをある辞書の初期値として使うには、キー値ペアのコンマ区切りリストを角括弧で囲んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the &lt;c0&gt;contains(_:)&lt;/c0&gt; method without including a closure in each call, extend the &lt;c1&gt;Street&lt;w2&gt;Address&lt;/w2&gt;&lt;/c1&gt; type to conform to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;contains(_:)&lt;/c0&gt;メソッドを各呼び出しにクロージャを含めることなく使うには、&lt;c1&gt;Street&lt;w2&gt;Address&lt;/w2&gt;&lt;/c1&gt;型を&lt;c3&gt;Equatable&lt;/c3&gt;に準拠するように拡張してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Objective-C declarations in files in the same framework target as your Swift code, configure an umbrella header as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C宣言をあなたのSwiftコードと同じフレームワークターゲットの中のファイルにおいて使うには、アンブレラヘッダを以下のように構成設定してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use your own custom type in a set or as the key type of a dictionary, add &lt;c0&gt;Hashable&lt;/c0&gt; conformance to your type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自のあつらえの型を集合でまたは辞書のキー型として使うには、&lt;c0&gt;Hashable&lt;/c0&gt;準拠をあなたの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Toggles the Boolean variable’s value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブール変数の持つ値を切り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Topics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>話題</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tranforming a Range's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲の持つ要素を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming a Boolean</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブールを変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming a Dictionary</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の変形</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming a Dictionary's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の要素の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming a Sequence</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスを変形する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming an Array</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の変形</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Translates the given input from one Unicode encoding to another by calling the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された入力をあるユニコード符号化から別のものへと指定されたクロージャを呼び出すことによって翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Traversing a Collection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションを辿っていく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Treat identity with care.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一性を注意して取り扱ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>True if any lane of mask is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスクのどんなレーンもtrueならば、true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>True if every lane of mask is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスクのあらゆるレーンがtrueならば、true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tuple Comparison</seg>
      </tuv>
      <tuv lang="ja">
        <seg>タプル比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two &lt;c0&gt;Date&lt;/c0&gt; instances are equal if each of their corresponding properties is equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの&lt;c0&gt;Date&lt;/c0&gt;インスタンスは、それらの対応するプロパティの各々が等しいならば等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two edge cases are worth particular attention:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの境界事例は特別な注意を払う価値があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two elements are &lt;e0&gt;incomparable&lt;/e0&gt; if neither is ordered before the other according to the predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの要素は、述部によるとどちらもが他の前に並べられるならば&lt;e0&gt;比較できない&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two instances that are equal must feed the same values to &lt;c2&gt;Hasher&lt;/c2&gt; in &lt;c3&gt;hash(into:)&lt;/c3&gt;, in the same order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>等しい２つのインスタンスは、同じ値を&lt;c2&gt;Hasher&lt;/c2&gt;へと&lt;c3&gt;hash(into:)&lt;/c3&gt;において、同じ順序で与えなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two ranges are equal when they have the same lower and upper bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの範囲は、それらが同じ下方および上方境界を持つとき等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Aliases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Casting and Existential Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型キャストと存在型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Inference of Array Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルの型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Method</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Methods</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型プロパティ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Property</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型プロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type-Erasing Wrappers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去ラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typed pointers are required to be properly aligned for their &lt;c0&gt;Pointee&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタは、適切にそれらの&lt;c0&gt;Pointee&lt;/c0&gt;型にアラインされることを要求されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types conforming to &lt;c0&gt;Async&lt;w1&gt;Iterator&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; should use the cancellation primitives provided by Swift’s &lt;c3&gt;Task&lt;/c3&gt; API.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Async&lt;w1&gt;Iterator&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠する型は、Swiftのもつ&lt;c3&gt;Task&lt;/c3&gt; APIによって提供される取り消し原始関数を使うべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この性能を保証することが可能でない型は、その逸脱を文書化されなければなりません、なぜなら多くのコレクション演算はそれら自身の性能保証としてO(1)添え字操作性能に依存するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that conform to &lt;c0&gt;Collection&lt;/c0&gt; are expected to provide the &lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;end&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; properties and subscript access to elements as O(1) operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Collection&lt;/c0&gt;に準拠する型は、&lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;および&lt;c3&gt;end&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;プロパティと要素への添え字アクセスをO(1)演算として提供することを期待されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that conform to the &lt;c0&gt;Case&lt;w1&gt;Iterable&lt;/w1&gt;&lt;/c0&gt; protocol are typically enumerations without associated values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Case&lt;w1&gt;Iterable&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する型は、概して関連値を持たない列挙です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that conform to the &lt;c0&gt;Custom&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol can provide their own representation to be used when converting an instance to a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Custom&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する型は、それら独自の表現を提供して、インスタンスが文字列に変換されるときに使われるようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that conform to the &lt;c0&gt;Equatable&lt;/c0&gt; protocol can be compared for equality using the equal-to operator (&lt;c1&gt;==&lt;/c1&gt;) or inequality using the not-equal-to operator (&lt;c2&gt;!=&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Equatable&lt;/c0&gt;プロトコルに準拠する型は、同等性を同等演算子（&lt;c1&gt;==&lt;/c1&gt;）を使って、または不等性を不等演算子（&lt;c2&gt;!=&lt;/c2&gt;）を使って比較されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that conform to the &lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; protocol provide most basic (clause 5) operations of the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する型は、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;の最も基本的な演算（５項）を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that implement alternative behaviors for a signaling NaN must document the departure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaNに対する代替の挙動を実装する型は、その逸脱を文書化しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types with Comparable conformance implement the less-than operator (&lt;c0&gt;&lt;&lt;/c0&gt;) and the equal-to operator (&lt;c1&gt;==&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Comparable準拠を持つ型は、より少ない演算子（&lt;c0&gt;&lt;&lt;/c0&gt;）と同等演算子（&lt;c1&gt;==&lt;/c1&gt;）を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typically, you use this to transform from one type of element to another.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>概して、あなたはこれを使ってある型の要素から別のものへと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typically, you’ll iterate over these sequences with &lt;c11&gt;for await&lt;/c11&gt;-&lt;c12&gt;in&lt;/c12&gt;, like the base &lt;c13&gt;Async&lt;w14&gt;Sequence&lt;/w14&gt;&lt;/c13&gt; you started with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>概して、あなたはそれらシーケンスのすべてにわたって&lt;c11&gt;for await&lt;/c11&gt;-&lt;c12&gt;in&lt;/c12&gt;で反復処理をするでしょう、あなたがそれで始めた基本的な&lt;c13&gt;Async&lt;w14&gt;Sequence&lt;/w14&gt;&lt;/c13&gt;のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unconditionally prints a given message and stops execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無条件に与えられたメッセージを出力して実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Under Build Settings, in Packaging, make sure the Defines Module setting for that framework target is set to Yes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「Build Settings」の下、「Packaging」の中で、そのフレームワークターゲットのための「Defines Module」設定が「Yes」に設定されることを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Under Build Settings, in Packaging, make sure the Defines Module setting for the framework target is set to Yes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Build Settingsの下、Packagingにおいて、フレームワークターゲットに対するDefines Module設定がYesに設定されることを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understand How Error Parameters Are Imported</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのようにエラーパラメータがインポートされるか理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understand How Swift Imports Completion Handlers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのようにSwiftが完了ハンドラをインポートするか理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understand how different API calls to your closures can affect your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのクロージャに対する異なるAPI呼び出しがどのようにあなたのアプリに影響を与えられるかを理解します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understand the Conversion Rules</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換規則を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understand the constraints of imported Obj-C lightweight generic type declarations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたObj-C軽量総称体型宣言の制約を理解します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>共用体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unique for the lifetime of a process (e.g. global incrementing integers).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるプロセスの存続期間に対して特有（たとえば、グローバルに漸増している整数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unique for the lifetime of an object (e.g. object identifiers).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるオブジェクトの存続期間に対して特有（たとえば、オブジェクト識別子）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unique within the current collection (e.g. collection index).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のコレクション内で特有（たとえば、コレクションインデックス）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uniqueness Checking</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特有性の検査</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless the collection conforms to the &lt;c0&gt;Bidirectional&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt; protocol, &lt;c2&gt;start&lt;/c2&gt; must be less than or equal to &lt;c3&gt;end&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが&lt;c0&gt;Bidirectional&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠しない場合は、&lt;c2&gt;start&lt;/c2&gt;は&lt;c3&gt;end&lt;/c3&gt;より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless the collection guarantees random-access performance, calculating &lt;c3&gt;count&lt;/c3&gt; can be an O(&lt;e4&gt;n&lt;/e4&gt;) operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションが無作為アクセス性能を保証しない限り、&lt;c3&gt;count&lt;/c3&gt;の算出は、O(&lt;e4&gt;n&lt;/e4&gt;)演算であるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike &lt;c0&gt;Array&lt;/c0&gt; and &lt;c1&gt;Contiguous&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;, the starting index for an &lt;c3&gt;Array&lt;w4&gt;Slice&lt;/w4&gt;&lt;/c3&gt; instance isn’t always zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Array&lt;/c0&gt;および&lt;c1&gt;Contiguous&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;とは違い、&lt;c3&gt;Array&lt;w4&gt;Slice&lt;/w4&gt;&lt;/c3&gt;インスタンスのインデックスの始まりは必ずしもゼロではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;Pointee&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, &lt;c3&gt;Autoreleasing&lt;w4&gt;Unsafe&lt;w5&gt;Mutable&lt;w6&gt;Pointer&lt;Pointee&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; must reference storage that does not own a reference count to the referenced value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;Pointee&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;とは違い、&lt;c3&gt;Autoreleasing&lt;w4&gt;Unsafe&lt;w5&gt;Mutable&lt;w6&gt;Pointer&lt;Pointee&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;は、参照される値への参照カウントを保有しないストレージを参照しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike in other programming languages, in Swift, integers and strings cannot be used where a Boolean value is required.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他のプログラミング言語とは違い、Swiftではブール値が必要とされるところで整数と文字列は使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike the key-based subscript, the index-based subscript returns the corresponding key-value pair as a non-optional tuple.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー基盤の添え字と違い、インデックス基盤の添え字は該当するキー値ペアを非オプショナルのタプルとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike traditional truncating multiplication, the &lt;c0&gt;multiplied&lt;w1&gt;Full&lt;w2&gt;Width(by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method returns a tuple containing both the &lt;c3&gt;high&lt;/c3&gt; and &lt;c4&gt;low&lt;/c4&gt; parts of the product of this value and &lt;c5&gt;other&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>従来的な切り詰め乗算と違って、&lt;c0&gt;multiplied&lt;w1&gt;Full&lt;w2&gt;Width(by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドは、この値と&lt;c3&gt;other&lt;/c3&gt;の積の&lt;c4&gt;high&lt;/c4&gt;および&lt;c5&gt;low&lt;/c5&gt;部分の両方を含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unnamed Structure and Union Fields</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無名の構造体および共用体のフィールド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unnamed fields consist of a nested &lt;c2&gt;struct&lt;/c2&gt; or &lt;c3&gt;union&lt;/c3&gt; type with named fields.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無名フィールドは、入れ子にされた&lt;c2&gt;struct&lt;/c2&gt;または&lt;c3&gt;union&lt;/c3&gt;で名前付きフィールドを持つものから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeMutablePointer’s operations, by contrast, assume that the referenced storage owns values loaded from or stored to it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutablePointerの行う操作は、対照的に、参照されるストレージがそれからロードされたりそれへと格納される値を所有すると仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unsigned&lt;w0&gt;Integer Implementations &lt;/w0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし&lt;w0&gt;整数実装&lt;/w0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unstructured Concurrency</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造化されない並行性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Until reaching the number of elements to drop, this iterator calls &lt;c0&gt;next()&lt;/c0&gt; on its base iterator and discards the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>抜かす要素の数に到達するまで、このイテレータは、&lt;c0&gt;next()&lt;/c0&gt;をそれの基底イテレータ上で呼び出します、そして結果を廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Until reaching the number of elements to include, this iterator calls &lt;c0&gt;next()&lt;/c0&gt; on its base iterator and passes through the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>抜かす要素の数に到達するまで、このイテレータは、&lt;c0&gt;next()&lt;/c0&gt;をそれの基底イテレータ上で呼び出します、そして結果を廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Update an existing value by assigning a new value to a key that already exists in the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すでに辞書に存在するキーに新しい値を割り当てることで、既存の値を更新してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Updates the value stored in the dictionary for the given key, or adds a new key-value pair if the key does not exist.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書に格納される値を指定されたキーに対して更新します、またはそのキーが存在しないならば新しいキー値ペアを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Upon reaching &lt;c7&gt;6&lt;/c7&gt;, the sequence ends:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c7&gt;6&lt;/c7&gt;に到達することで、そのシーケンスは終わります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uppercase characters vary under case-conversion to lowercase, but not when converted to uppercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アッパーケース文字は、ローワーケースへのケース変換のもとでは変動します、しかしアッパーケースに変換される時はそうではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c0&gt;drop(while:)&lt;/c0&gt; to omit elements from an asynchronous sequence until the element received meets a condition you specify.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;drop(while:)&lt;/c0&gt;を使うことで要素を非同期シーケンスから、その受け取った要素があなたが指定する条件に合うまで省いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c0&gt;drop&lt;w1&gt;First(_:)&lt;/w1&gt;&lt;/c0&gt; when you want to drop the first &lt;e2&gt;n&lt;/e2&gt; elements from the base sequence and pass through the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;drop&lt;w1&gt;First(_:)&lt;/w1&gt;&lt;/c0&gt;を使ってください、あなたが最初の&lt;e2&gt;n&lt;/e2&gt;要素を基底シーケンスから抜かす、そして残っている要素をずっと渡したい場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c0&gt;prefix(_:)&lt;/c0&gt; to reduce the number of elements produced by the asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;prefix(_:)&lt;/c0&gt;を使って非同期シーケンスによって生み出された要素の数を減らしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c0&gt;prefix(while:)&lt;/c0&gt; to produce values while elements from the base sequence meet a condition you specify.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;prefix(while:)&lt;/c0&gt;を使うことで、基底シーケンスからの要素があなたが指定する条件に合う間ずっと値を生み出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c0&gt;unsafe&lt;w1&gt;Downcast(_:&lt;w2&gt;to:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; only when you are confident that &lt;c3&gt;x is T&lt;/c3&gt; always evaluates to &lt;c4&gt;true&lt;/c4&gt;, and only after &lt;c5&gt;x as! T&lt;/c5&gt; has proven to be a performance problem.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;unsafe&lt;w1&gt;Downcast(_:&lt;w2&gt;to:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、あなたが&lt;c3&gt;x is T&lt;/c3&gt;は常に&lt;c4&gt;true&lt;/c4&gt;に評価されることを確信している場合にのみ、そして&lt;c5&gt;x as! T&lt;/c5&gt;が性能問題をもつと証明された後にのみ使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt; and &lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt; as the bounds for any element access, instead of &lt;c6&gt;0&lt;/c6&gt; and &lt;c7&gt;count&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;および&lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;をその境界としてあらゆる要素アクセスのために使ってください、&lt;c6&gt;0&lt;/c6&gt;および&lt;c7&gt;count&lt;/c7&gt;ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use All Significant Properties for Equatable and Hashable</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべての重要プロパティをequatableとhashableに対して使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Classes When You Need Objective-C Interoperability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラスをあなたがObjective-C互換性を必要とする場合に使ってください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Classes When You Need to Control Identity</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが同一性を制御する必要がある場合はクラスを使ってください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Functions and Generics Instead of Complex Macros</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数と総称体を複雑なマクロの代わりに使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Memory Managed Objects</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ管理オブジェクトを使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Structures When You Don't Control Identity</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが同一性を制御しない場合は構造体を使ってください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Structures and Protocols to Model Inheritance and Share Behavior</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体とプロトコルを使って挙動の継承と共有をモデル化してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use a CVaListPointer to Call Variadic Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CVaListPointerを使って可変長引数関数を呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use bridged Foundation types in your Swift codebase to work with dates, times, and other values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジされたFoundation型をあなたのSwiftコード基盤において使って、日付、時刻、および他の値を扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use bridged reference types when you need reference semantics or Foundation-specific behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジされた参照型を、あなたが参照意味論またはFoundation特有の挙動を必要とする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use care when calling &lt;c0&gt;is&lt;w1&gt;Known&lt;w2&gt;Uniquely&lt;w3&gt;Referenced(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; from within a Boolean expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Known&lt;w2&gt;Uniquely&lt;w3&gt;Referenced(_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;をブール式の内部から呼び出すとき注意を払ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use classes and other declarations from your Objective-C code with the same Swift syntax you use for system classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラスと他の宣言をあなたのObjective-Cコードからあなたがシステムクラスに使うのと同じSwift構文で使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use classes and other declarations from your custom Objective-C code with the same Swift syntax you use for system classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラスと他の宣言をあなたのあつらえのObjective-Cコードからあなたがシステムクラスに使うのと同じSwift構文で使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use classes when you need Objective-C interoperability.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラスを、あなたがObjective-C互換性を必要とする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use classes when you need to control the identity of the data you're modeling.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラスを、あなたがモデル化しているデータの同一性を制御する必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use classes when you need your instances to have this kind of identity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのインスタンスがその種の同一性を持つことをあなたが必要とする場合は、クラスを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use enumerations to capture and track the state of your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙を使ってあなたのアプリの状態をキャプチャおよび追跡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use imported C-defined macros as constants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC定義のマクロを定数として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use native Swift syntax to interoperate with types and functions in C and Objective-C.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>本来のSwift構文を使ってCおよびObjective-Cでの型および関数と相互作用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use selectors and key paths to interact with dynamic Objective-C APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>セレクタとキーパスを使って動的Objective-C APIと相互作用してます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use string interpolation to include one or more expressions in a string literal, wrapped in a set of parentheses and prefixed by a backslash.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列補間を使って文字列リテラルの中に１つ以上の式を、一組の丸括弧に包んでひとつのバックスラッシュを前に置いて、含めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use structures along with protocols to adopt behavior by sharing implementations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体をそれだけでなくプロトコルと一緒に使うことで、実装を共有することによる挙動を取り入れてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use structures by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体を、通常は使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use structures to represent common kinds of data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体を使って、通常の種類のデータを表してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use structures when you're modeling data that contains information about an entity with an identity that you don't control.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが制御を行わない同一性をもつある存在についての情報を含むデータをあなたがモデル化する場合は、構造体を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol as a constraint or extension point when writing operations that depend on bit shifting, performing bitwise operations, catching overflows, or having access to the maximum or minimum representable value of a type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビットシフト、ビット単位演算の実行、オーバーフローのキャッチ、またはある型の最大限または最小限表現可能な値へのアクセスに依存する演算を記述する場合に、&lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルを制約または拡張ポイントとして使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;Identifiable&lt;/c0&gt; protocol to provide a stable notion of identity to a class or value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Identifiable&lt;/c0&gt;プロトコルを使って、ある安定した同一性の概念をあるクラスまたは値型に提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;advanced(by:)&lt;/c0&gt; method in generic code to offset a value by a specified distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;advanced(by:)&lt;/c0&gt;メソッドを総称体コードにおいて使用して、ある値を指定された隔たりだけオフセットしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;combine&lt;/c0&gt; closure to select a value to use in the returned dictionary, or to combine existing and new values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;combine&lt;/c0&gt;クロージャを使ってある値を選択することで、返される辞書において使ってください、または既存および新規の値を結合してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;combine&lt;/c0&gt; closure to select a value to use in the updated dictionary, or to combine existing and new values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;combine&lt;/c0&gt;クロージャを使ってある値を選択することで更新された辞書において使ってください、または既存のものと新しい値を結合してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;compact&lt;w1&gt;Map(_:)&lt;/w1&gt;&lt;/c0&gt; method to transform every element received from a base asynchronous sequence, while also discarding any &lt;c2&gt;nil&lt;/c2&gt; results from the closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;compact&lt;w1&gt;Map(_:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使うことで、基底非同期シーケンスから受け取ったあらゆる要素を変換してください、そして一方でまたあらゆる&lt;c2&gt;nil&lt;/c2&gt;結果をクロージャから廃棄して。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;first&lt;/c0&gt; and &lt;c1&gt;last&lt;/c1&gt; properties for safe access to the value of the array’s first and last elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の最初と最後の要素の値に対する安全なアクセスのために&lt;c0&gt;first&lt;/c0&gt;および&lt;c1&gt;last&lt;/c1&gt;プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;init(bit&lt;w1&gt;Pattern:)&lt;/w1&gt;&lt;/c0&gt; initializer for the destination type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行き先の型のための&lt;c0&gt;init(bit&lt;w1&gt;Pattern:)&lt;/w1&gt;&lt;/c0&gt;イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;init(clamping:)&lt;/c0&gt; initializer to create a new instance of a binary integer type where out-of-range values are clamped to the representable range of the type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;init(clamping:)&lt;/c0&gt;イニシャライザを使って、バイナリ整数型の新しいインスタンスを作成してください、そこにおいて範囲外の値はその型の表現可能な範囲に固定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;init(truncating&lt;w1&gt;If&lt;w2&gt;Needed:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; initializer to create a new instance with the same bit pattern as the passed value, extending or truncating the value’s representation as necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;init(truncating&lt;w1&gt;If&lt;w2&gt;Needed:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;イニシャライザを使って、渡された値と同じビットパターンを持つ新しいインスタンスを、必要ならばその値の表現を拡張または切り詰めて作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;init?(exactly:)&lt;/c0&gt; initializer to create a new instance after checking whether the passed value is representable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;init?(exactly:)&lt;/c0&gt;イニシャライザを使うことで、その渡された値が表現可能であるかどうか調べた後に新しいインスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt; property to check quickly whether an array has any elements, or use the &lt;c2&gt;count&lt;/c2&gt; property to find the number of elements in the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt;プロパティを使って、ある配列が要素を持つかどうか素早く確認してください、または&lt;c2&gt;count&lt;/c2&gt;を使うことで配列中の要素の数を調べてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;map(_:)&lt;/c0&gt; method to transform every element received from a base asynchronous sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;map(_:)&lt;/c0&gt;メソッドを使うことで、基底非同期シーケンスから受け取ったあらゆる要素を変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;max(by:)&lt;/c0&gt; method to determine the index of the day with the most absences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;max(by:)&lt;/c0&gt;メソッドを使って最も欠席者の多い日付のインデックスを判定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;reduce(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt; method to produce a single value from the elements of an entire sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;reduce(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、あるシーケンス全体の要素それらからある単一の値を生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;reduce(into:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt; method to produce a single value from the elements of an entire sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;reduce(into:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、あるシーケンス全体の要素それらからある単一の値を生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;shuffle()&lt;/c0&gt; method to randomly reorder the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;shuffle()&lt;/c0&gt;メソッドを使って、配列の要素を無作為に再配列してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c2&gt;capacity&lt;/c2&gt; and &lt;c3&gt;count&lt;/c3&gt; properties to determine how many more elements the array can store without allocating larger storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;capacity&lt;/c2&gt;や&lt;c3&gt;count&lt;/c3&gt;プロパティを使って、より大きなストレージに割り当てることなく更にどのくらいの要素をその配列が格納できるか判定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the array’s &lt;c0&gt;capacity&lt;/c0&gt; property to determine the size of the new storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の&lt;c0&gt;capacity&lt;/c0&gt;プロパティを使って新しいストレージの大きさを特定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the casting operators (&lt;c0&gt;as&lt;/c0&gt;, &lt;c1&gt;as!&lt;/c1&gt;, or &lt;c2&gt;as?&lt;/c2&gt;) or the &lt;c3&gt;unsafe&lt;w4&gt;Downcast(_:&lt;w5&gt;to:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キャスト演算子（&lt;c0&gt;as&lt;/c0&gt;、&lt;c1&gt;as!&lt;/c1&gt;、または&lt;c2&gt;as?&lt;/c2&gt;）または&lt;c3&gt;unsafe&lt;w4&gt;Downcast(_:&lt;w5&gt;to:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the closed range operator (&lt;c0&gt;...&lt;/c0&gt;) to create a closed range of any type that conforms to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結範囲演算子（&lt;c0&gt;...&lt;/c0&gt;）を使って&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠する何らかの型の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the destination type’s &lt;c0&gt;init(truncating&lt;w1&gt;If&lt;w2&gt;Needed:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; or &lt;c3&gt;init(bit&lt;w4&gt;Pattern:)&lt;/w4&gt;&lt;/c3&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行き先の型のもつ&lt;c0&gt;init(truncating&lt;w1&gt;If&lt;w2&gt;Needed:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;または&lt;c3&gt;init(bit&lt;w4&gt;Pattern:)&lt;/w4&gt;&lt;/c3&gt;イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the destination type’s initializer or the &lt;c0&gt;numeric&lt;w1&gt;Cast(_:)&lt;/w1&gt;&lt;/c0&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行き先の型のもつイニシャライザまたは&lt;c0&gt;numeric&lt;w1&gt;Cast(_:)&lt;/w1&gt;&lt;/c0&gt;関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the half-open range operator (&lt;c0&gt;..&lt;&lt;/c0&gt;) to create a range of any type that conforms to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>半開範囲演算子（&lt;c0&gt;..&lt;&lt;/c0&gt;）を使って&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠する何らかの型の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the masking left shift operator (&lt;c0&gt;&amp;&lt;&lt;&lt;/c0&gt;) when you need to perform a shift and are sure that the shift amount is in the range &lt;c1&gt;0..&lt;lhs&lt;w2&gt;.bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク左シフト演算子（&lt;c0&gt;&amp;&lt;&lt;&lt;/c0&gt;）を、あなたがあるシフトを実行する、そしてシフト量が範囲&lt;c1&gt;0..&lt;lhs&lt;w2&gt;.bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の中であるのを確実にする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the masking right shift operator (&lt;c0&gt;&amp;&gt;&gt;&lt;/c0&gt;) when you need to perform a shift and are sure that the shift amount is in the range &lt;c1&gt;0..&lt;lhs&lt;w2&gt;.bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク右シフト演算子（&lt;c0&gt;&amp;&gt;&gt;&lt;/c0&gt;）を、あなたがあるシフトを実行する、そしてシフト量が範囲&lt;c1&gt;0..&lt;lhs&lt;w2&gt;.bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の中であるのを確実にする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the postfix range operator (postfix &lt;c0&gt;...&lt;/c0&gt;) to create a partial range of any type that conforms to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>後置完結範囲演算子（後置&lt;c0&gt;...&lt;/c0&gt;）を使うことで何らかの型の部分的な範囲で&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the prefix closed range operator (prefix &lt;c0&gt;...&lt;/c0&gt;) to create a partial range of any type that conforms to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前置完結範囲演算子（前置&lt;c0&gt;...&lt;/c0&gt;）を使うことで何らかの型の部分的な範囲で&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the prefix half-open range operator (prefix &lt;c0&gt;..&lt;&lt;/c0&gt;) to create a partial range of any type that conforms to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前置半開範囲演算子（前置&lt;c0&gt;..&lt;&lt;/c0&gt;）を使うことで何らかの型の部分的な範囲で&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this function for internal sanity checks that are active during testing but do not impact performance of shipping code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数を本質的な正常性確認のために使ってください、それはテストの間は活動的ですが出荷コードの性能に影響はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this function instead of &lt;c0&gt;unsafe&lt;w1&gt;Bitcast(_:&lt;w2&gt;to:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; because this function is more restrictive and still performs a check in debug builds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数を&lt;c0&gt;unsafe&lt;w1&gt;Bitcast(_:&lt;w2&gt;to:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;の代わりに使ってください、なぜならこの関数はより制限的で依然としてデバッグビルドにおいて検査を実行するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this function only to convert the instance passed as &lt;c0&gt;x&lt;/c0&gt; to a layout-compatible type when conversion through other means is not possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数を&lt;c0&gt;x&lt;/c0&gt;として渡されるインスタンスをレイアウト互換の型へと、その変換が他の手段では可能でない場合に、変換するのにだけ使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this function to detect conditions that must prevent the program from proceeding, even in shipping code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数を使って、続行することからプログラムを妨げなければならない条件を突き止めてください、出荷コードにおいてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this function to stop the program when control flow can only reach the call if your API was improperly used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのAPIが誤って使われた場合にその呼び出しに制御の流れが届く時にだけこの関数を使ってプログラムを停止してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this function to stop the program, without impacting the performance of shipping code, when control flow is not expected to reach the call—for example, in the &lt;c0&gt;default&lt;/c0&gt; case of a &lt;c1&gt;switch&lt;/c1&gt; where you have knowledge that one of the other cases must be satisfied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数を使って、制御の流れが呼び出しに届くと予想されない場合に、出荷コードの性能に影響を与えることなく、プログラムを停止してください—例えば、&lt;c1&gt;switch&lt;/c1&gt;の&lt;c0&gt;default&lt;/c0&gt;ケース節において、そこにおいてあなたはそれ以前のケース節の１つが満たされなければならないことがわかっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer around a range instead of typing all those numbers in an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらの数をすべて配列リテラルの中にタイプするの代わりに、ある範囲を取り囲むようにこのイニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to avoid intermediate reallocations of a dictionary’s storage buffer when you know how many key-value pairs you are adding to a dictionary after creation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのくらい多くのキー値ペアをあなたが辞書に加えることになるかあなたが知っている場合は、このイニシャライザを使ってある辞書の持つストレージバッファの幾度もの中間的な再割り当てを回避してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to convert from another integer type when you know the value is within the bounds of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って別の整数型から変換してください、値がこの型の境界の内部であるのをあなたが知っている場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create a Boolean by converting an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; with an underlying type of &lt;a3&gt;&lt;c4&gt;Int&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使ってブールを作成してください、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;をある基礎をなす型の&lt;a3&gt;&lt;c4&gt;Int&lt;/c4&gt;&lt;/a3&gt;で変換することによって</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create a double by converting an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; with an underlying type of &lt;a3&gt;&lt;c4&gt;Double&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使ってdoubleを作成してください、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;をある基礎をなす型の&lt;a3&gt;&lt;c4&gt;Double&lt;/c4&gt;&lt;/a3&gt;で変換することによって</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create an array by converting an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; with an underlying type of &lt;a3&gt;&lt;c4&gt;MLData&lt;w5&gt;Value&lt;w6&gt;.Dictionary&lt;w7&gt;Type&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って配列を作成してください、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;をある基礎をなす型の&lt;a3&gt;&lt;c4&gt;MLData&lt;w5&gt;Value&lt;w6&gt;.Dictionary&lt;w7&gt;Type&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;で変換することによって。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create an array by converting an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; with an underlying type of &lt;a3&gt;&lt;c4&gt;MLData&lt;w5&gt;Value&lt;w6&gt;.Sequence&lt;w7&gt;Type&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って配列を作成してください、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;をある基礎をなす型の&lt;a3&gt;&lt;c4&gt;MLData&lt;w5&gt;Value&lt;w6&gt;.Sequence&lt;w7&gt;Type&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;で変換することによって</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create an array by converting an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Dictionary&lt;w4&gt;Type&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って配列を作成してください、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Dictionary&lt;w4&gt;Type&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;を変換することによって。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create an integer by converting an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; with an underlying type of &lt;a3&gt;&lt;c4&gt;Int&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って整数を作成してください、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;をある基礎をなす型の&lt;a3&gt;&lt;c4&gt;Int&lt;/c4&gt;&lt;/a3&gt;で変換することによって</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method instead of key-based subscripting when you need to know whether the new value supplants the value of an existing key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値が既存のキーの値に取って代わるかどうかをあなたが知る必要がある場合は、キーに基づく添え字を使うのではなくこのメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method only if you need the concrete range it produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それが生成する具体的な範囲をあなたが必要とする場合にのみ、このメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to append a single element to the end of a mutable array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使ってある単一の要素を可変の配列の終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to append the elements of a sequence to the end of this array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで、あるシーケンスに属する要素をこの配列の終わりに追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to calculate the full result of a product that would otherwise overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで、そうしなければオーバーフローするであろう積の完全な結果を計算してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to calculate the quotient and remainder of a division at the same time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、除算の商と余りを同時に計算してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to extend this key path to the value type of another key path.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで、このキーパスを別のキーパスの値型にまで広げてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate a floating-point value within a specific range when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、特定の範囲の内のある浮動小数点値を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate a floating-point value within a specific range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、特定の範囲の内のある浮動小数点値を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate a random Boolean value when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、無作為なブール値を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate an integer within a specific range when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、特定の範囲の内のある整数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate an integer within a specific range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、特定の範囲の内のある整数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive a dictionary with non-optional values when your transformation produces optional values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで非オプショナル値での辞書を受け取ってください、あなたの変換がオプショナル値を生成する時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、単一階層の非同期シーケンスを受け取ってください、あなたの変換が各要素に対してひとつの非同期シーケンスを生み出す時は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive a single-level collection when your transformation produces a sequence or collection for each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの変換が各要素に対してひとつのシーケンスまたはコレクションを生成する場合に、このメソッドを使って単一水準コレクションを受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive an array of non-optional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで非オプショナル値の配列を受け取ってください、あなたの変換がオプショナル値を生成する時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive an array of nonoptional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの変換がオプショナル値を生成する場合に、このメソッドを使って非オプショナル値からなる配列を受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to remove every element in a collection that meets particular criteria.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、コレクションの中の、特定の基準に合うすべての要素を除去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to toggle a Boolean value from &lt;c0&gt;true&lt;/c0&gt; to &lt;c1&gt;false&lt;/c1&gt; or from &lt;c2&gt;false&lt;/c2&gt; to &lt;c3&gt;true&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、ブール値を&lt;c0&gt;true&lt;/c0&gt;から&lt;c1&gt;false&lt;/c1&gt;へとまたは&lt;c2&gt;false&lt;/c2&gt;から&lt;c3&gt;true&lt;/c3&gt;へと切り替えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when the asynchronous sequence’s values don’t conform to &lt;c0&gt;Comparable&lt;/c0&gt;, or when you want to apply a custom ordering to the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを、非同期シーケンスのもつ値それらが&lt;c0&gt;Comparable&lt;/c0&gt;に準拠しない時に、またはあなたがあるあつらえの順序付けをそのシーケンスに適用したい時に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this operator to append the elements of a sequence to the end of range-replaceable collection with same &lt;c0&gt;Element&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算子を使って、あるシーケンスに属するいくらかの要素を同じ&lt;c0&gt;Element&lt;/c0&gt;型を持つ範囲置換可能なコレクションの終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this subscript when you want either the value for a particular key or, when that key is not present in the dictionary, a default value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが特定のキーに対する値または、そのキーが辞書の中に存在しない時、省略時の値のどちらかを望む場合は、この添え字を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>User-Relevant Errors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユーザ関連のエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Delegates to Customize Object Behavior</seg>
      </tuv>
      <tuv lang="ja">
        <seg>委任先を使ってオブジェクト挙動をカスタマイズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Enumerations as Errors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙をエラーとして使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported Boolean values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたブール値を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported C Functions in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC関数をSwiftで使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported C Macros in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたCマクロをSwiftで使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported C Structs and Unions in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC構造体と共用体をSwiftで使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported Lightweight Generics in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされた軽量総称体をSwiftにおいて使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported Protocol-Qualified Classes in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたプロトコル適格クラスをSwiftにおいて使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Key-Value Observing in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftにおいてキー値監視を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Objective-C Runtime Features in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cランタイム機能をSwiftで使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a Boolean as a Data Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブール値をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a Closed Range as a Collection of Consecutive Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結範囲を隣接値のコレクションとして使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a Dictionary as a Data Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a Double as a Data Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不動小数点数をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative number or an index equal to or greater than &lt;c0&gt;count&lt;/c0&gt; triggers a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負数をまたは&lt;c0&gt;count&lt;/c0&gt;と等しいかより大きいインデックスを使うことは、実行時エラーを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value as &lt;c0&gt;rhs&lt;/c0&gt; is the same as performing a left shift using &lt;c1&gt;abs(rhs)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;として負の値を使うことは、&lt;c1&gt;abs(rhs)&lt;/c1&gt;を使って左シフトを実行するのと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value as &lt;c0&gt;rhs&lt;/c0&gt; is the same as performing a right shift with &lt;c1&gt;abs(rhs)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の値を&lt;c0&gt;rhs&lt;/c0&gt;として使うことは、&lt;c1&gt;abs(rhs)&lt;/c1&gt;を使って右シフトを実行するのと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value for &lt;c0&gt;rhs&lt;/c0&gt; performs a left shift using &lt;c1&gt;abs(rhs)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に負の値を使うことは、&lt;c1&gt;abs(rhs)&lt;/c1&gt;を使って左シフトを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value for &lt;c0&gt;rhs&lt;/c0&gt; performs a right shift using &lt;c1&gt;abs(rhs)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に負の値を使うことは、&lt;c1&gt;abs(rhs)&lt;/c1&gt;を使って右シフトを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a value for &lt;c0&gt;rhs&lt;/c0&gt; that is greater than or equal to the bit width of &lt;c1&gt;lhs&lt;/c1&gt; is an &lt;e2&gt;overshift&lt;/e2&gt;, resulting in zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に&lt;c1&gt;lhs&lt;/c1&gt;のビット幅より大きいか等しい値を使うことは、&lt;e2&gt;オーバーシフト&lt;/e2&gt;、ゼロという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a value for &lt;c0&gt;rhs&lt;/c0&gt; that is greater than or equal to the bit width of &lt;c1&gt;lhs&lt;/c1&gt; is an &lt;e2&gt;overshift&lt;/e2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に&lt;c1&gt;lhs&lt;/c1&gt;のビット幅より大きいか等しい値を使うことは、&lt;e2&gt;オーバーシフト&lt;/e2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using an Integer as a Data Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using any other value for &lt;c0&gt;rhs&lt;/c0&gt; performs a left shift on &lt;c1&gt;lhs&lt;/c1&gt; by that amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に何か他の値を使うことは、左シフトを&lt;c1&gt;lhs&lt;/c1&gt;上でその量だけ行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using any other value for &lt;c0&gt;rhs&lt;/c0&gt; performs a right shift on &lt;c1&gt;lhs&lt;/c1&gt; by that amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に何か他の値を使うことは、右シフトを&lt;c1&gt;lhs&lt;/c1&gt;上でその量だけ行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using different groups of properties in the two methods can lead to unexpected behavior or performance when using your custom type in sets and dictionaries.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なるプロパティのグループを２つのメソッドにおいて使うことは、あなたのカスタム型を集合および辞書で使う場合に、予期しない挙動または性能に導きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using structures makes it easier to reason about a portion of your code without needing to consider the whole state of your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体を使うことは、あなたのアプリの全体の状態を考える必要なしに、あなたのコードの一部について結論を下すことを簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;for&lt;w1&gt;Each&lt;/w1&gt;&lt;/c0&gt; method is distinct from a &lt;c2&gt;for&lt;/c2&gt;-&lt;c3&gt;in&lt;/c3&gt; loop in two important ways:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;for&lt;w1&gt;Each&lt;/w1&gt;&lt;/c0&gt;メソッドを使うことは、&lt;c2&gt;for&lt;/c2&gt;-&lt;c3&gt;in&lt;/c3&gt;ループとは２つの重要なやり方においてまったく異なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;prefix(through:)&lt;/c0&gt; method is equivalent to using a partial closed range as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;prefix(through:)&lt;/c0&gt;メソッドを使うことは、部分的な完結範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;prefix(up&lt;w1&gt;To:)&lt;/w1&gt;&lt;/c0&gt; method is equivalent to using a partial half-open range as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;prefix(up&lt;w1&gt;To:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使うことは、部分的な半開範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;return&lt;/c0&gt; statement in the &lt;c1&gt;body&lt;/c1&gt; closure will exit only from the current call to &lt;c2&gt;body&lt;/c2&gt;, not from any outer scope, and won’t skip subsequent calls.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;return&lt;/c0&gt;文を&lt;c1&gt;body&lt;/c1&gt;クロージャにおいて使うことは、ただ現在の&lt;c2&gt;body&lt;/c2&gt;への呼び出しから抜け出すだけです、全く外側のスコープからではなくて、そして続いて起こる呼び出しを飛ばしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;suffix(from:)&lt;/c0&gt; method is equivalent to using a partial range from the index as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;suffix(from:)&lt;/c0&gt;メソッドを使うことは、インデックスからの部分的範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the closed range operator (&lt;c2&gt;...&lt;/c2&gt;) to form &lt;c3&gt;Closed&lt;w4&gt;Range&lt;/w4&gt;&lt;/c3&gt; instances is preferred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結範囲演算子（&lt;c2&gt;...&lt;/c2&gt;）を使って&lt;c3&gt;Closed&lt;w4&gt;Range&lt;/w4&gt;&lt;/c3&gt;インスタンスを形成することが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using this method with types that have a noninteger &lt;c9&gt;Stride&lt;/c9&gt; may result in an approximation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを非整数&lt;c9&gt;Stride&lt;/c9&gt;を持つ型とともに使うことは、近似値という結果になるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>有効なインデックスは、各要素の位置、および添え字引数として使うのに有効でない“終わりを過ぎた”位置から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>有効なインデックスは、各要素の位置、および添え字として使うのに有効でない“終わりを過ぎた”位置から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for &lt;c0&gt;Extended&lt;w1&gt;Grapheme&lt;w2&gt;Cluster&lt;w3&gt;Literal&lt;w4&gt;Type&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; are &lt;c5&gt;Character&lt;/c5&gt;, &lt;c6&gt;String&lt;/c6&gt;, and &lt;c7&gt;Static&lt;w8&gt;String&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Extended&lt;w1&gt;Grapheme&lt;w2&gt;Cluster&lt;w3&gt;Literal&lt;w4&gt;Type&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に対して有効な型は、&lt;c5&gt;Character&lt;/c5&gt;、&lt;c6&gt;String&lt;/c6&gt;、そして&lt;c7&gt;Static&lt;w8&gt;String&lt;/w8&gt;&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for &lt;c0&gt;Float&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; are &lt;c3&gt;Float&lt;/c3&gt;, &lt;c4&gt;Double&lt;/c4&gt;, and &lt;c5&gt;Float80&lt;/c5&gt; where available.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に対して有効な型は、&lt;c3&gt;Float&lt;/c3&gt;、&lt;c4&gt;Double&lt;/c4&gt;、そして利用可能なところでは&lt;c5&gt;Float80&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for &lt;c0&gt;String&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; are &lt;c3&gt;String&lt;/c3&gt; and &lt;c4&gt;Static&lt;w5&gt;String&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に対する有効な型は、&lt;c3&gt;String&lt;/c3&gt;と&lt;c4&gt;Static&lt;w5&gt;String&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for &lt;c0&gt;Unicode&lt;w1&gt;Scalar&lt;w2&gt;Literal&lt;w3&gt;Type&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; are &lt;c4&gt;Unicode&lt;w5&gt;.Scalar&lt;/w5&gt;&lt;/c4&gt;, &lt;c6&gt;Character&lt;/c6&gt;, &lt;c7&gt;String&lt;/c7&gt;, and &lt;c8&gt;Static&lt;w9&gt;String&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unicode&lt;w1&gt;Scalar&lt;w2&gt;Literal&lt;w3&gt;Type&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に対する有効な型は、&lt;c4&gt;Unicode&lt;w5&gt;.Scalar&lt;/w5&gt;&lt;/c4&gt;、&lt;c6&gt;Character&lt;/c6&gt;、&lt;c7&gt;String&lt;/c7&gt;、そして&lt;c8&gt;Static&lt;w9&gt;String&lt;/w9&gt;&lt;/c8&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Value Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Value conversion from one integer type to another.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数型から別のものへの値変換。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Values can be yielded in case to the continuation passed into the build closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値それらは、ビルドクロージャに渡される継続に備えて生み出されることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Visible side effects are therefore strongly discouraged within this property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>目に見える副作用は、それゆえにこのプロパティ内では強く反対されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Warning</seg>
      </tuv>
      <tuv lang="ja">
        <seg>警告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;error&lt;/c0&gt; is an empty string, &lt;c1&gt;lhs&lt;/c1&gt; evaluates to &lt;c2&gt;true&lt;/c2&gt; and &lt;c3&gt;rhs&lt;/c3&gt; is not evaluated, skipping the call to &lt;c4&gt;major&lt;w5&gt;Errors&lt;w6&gt;.contains(_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;error&lt;/c0&gt;が空の文字列である時、&lt;c1&gt;lhs&lt;/c1&gt;が&lt;c2&gt;true&lt;/c2&gt;に評価して、&lt;c3&gt;rhs&lt;/c3&gt;は評価されず、&lt;c4&gt;major&lt;w5&gt;Errors&lt;w6&gt;.contains(_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;への呼び出しを省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;error&lt;/c0&gt; is not an empty string, &lt;c1&gt;lhs&lt;/c1&gt; evaluates to &lt;c2&gt;false&lt;/c2&gt; and &lt;c3&gt;rhs&lt;/c3&gt; is evaluated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;error&lt;/c0&gt;が空の文字列ではない時、&lt;c1&gt;lhs&lt;/c1&gt;が&lt;c2&gt;false&lt;/c2&gt;に評価して、&lt;c3&gt;rhs&lt;/c3&gt;は評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;letter&lt;w1&gt;Counts[letter, default: 0] += 1&lt;/w1&gt;&lt;/c0&gt; is executed with a value of &lt;c2&gt;letter&lt;/c2&gt; that isn’t already a key in &lt;c3&gt;letter&lt;w4&gt;Counts&lt;/w4&gt;&lt;/c3&gt;, the specified default value (&lt;c5&gt;0&lt;/c5&gt;) is returned from the subscript, incremented, and then added to the dictionary under that key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;letter&lt;w1&gt;Counts[letter, default: 0] += 1&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;letter&lt;/c2&gt;の値でまだ&lt;c3&gt;letter&lt;w4&gt;Counts&lt;/w4&gt;&lt;/c3&gt;の中のキーでないものと実行される場合、指定された値（&lt;c5&gt;0&lt;/c5&gt;）が添え字から返されて、漸増されて、それから辞書へとそのキーのもと追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;letters&lt;w1&gt;.reduce(into:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is called, the following steps occur:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;letters&lt;w1&gt;.reduce(into:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が呼び出される時、以下の段階が生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;measurements&lt;w1&gt;.count&lt;/w1&gt;&lt;/c0&gt; is equal to zero, &lt;c2&gt;lhs&lt;/c2&gt; evaluates to &lt;c3&gt;false&lt;/c3&gt; and &lt;c4&gt;rhs&lt;/c4&gt; is not evaluated, preventing a divide-by-zero error in the expression &lt;c5&gt;sum / Double(measurements&lt;w6&gt;.count)&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;measurements&lt;w1&gt;.count&lt;/w1&gt;&lt;/c0&gt;がゼロに等しい時、&lt;c2&gt;lhs&lt;/c2&gt;が&lt;c3&gt;false&lt;/c3&gt;に評価して、&lt;c4&gt;rhs&lt;/c4&gt;は評価されず、式&lt;c5&gt;sum / Double(measurements&lt;w6&gt;.count)&lt;/w6&gt;&lt;/c5&gt;でのゼロによる除算を防ぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;measurements&lt;w1&gt;.count&lt;/w1&gt;&lt;/c0&gt; is greater than zero, &lt;c2&gt;lhs&lt;/c2&gt; evaluates to &lt;c3&gt;true&lt;/c3&gt; and &lt;c4&gt;rhs&lt;/c4&gt; is evaluated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;measurements&lt;w1&gt;.count&lt;/w1&gt;&lt;/c0&gt;がゼロより大きい時、&lt;c2&gt;lhs&lt;/c2&gt;が&lt;c3&gt;true&lt;/c3&gt;に評価して、&lt;c4&gt;rhs&lt;/c4&gt;は評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;numbers&lt;w1&gt;.reduce(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is called, the following steps occur:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;numbers&lt;w1&gt;.reduce(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が呼び出される時、以下の段階が生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c1&gt;nil&lt;/c1&gt; is passed, the label is omitted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;nil&lt;/c1&gt;が渡される場合、ラベルは省かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c2&gt;count&lt;/c2&gt; is passed to the &lt;c3&gt;print&lt;w4&gt;Info(_:)&lt;/w4&gt;&lt;/c3&gt; function, however, the &lt;c5&gt;value&lt;/c5&gt; parameter has a static type of &lt;c6&gt;Any&lt;/c6&gt; (the type declared for the parameter) and a dynamic type of &lt;c7&gt;Int&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;count&lt;/c2&gt;が&lt;c3&gt;print&lt;w4&gt;Info(_:)&lt;/w4&gt;&lt;/c3&gt;関数に渡される場合は、しかしながら、&lt;c5&gt;value&lt;/c5&gt;パラメータは&lt;c6&gt;Any&lt;/c6&gt;の静的型（このパラメータに対して宣言された型）そして&lt;c7&gt;Int&lt;/c7&gt;の動的型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c4&gt;id&lt;/c4&gt; values are imported into Swift as &lt;c5&gt;Any&lt;/c5&gt;, the runtime automatically handles bridging back to either class references or value types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;id&lt;/c4&gt;値がスウィフトへ&lt;c5&gt;Any&lt;/c5&gt;としてインポートされる時、ランタイムはクラス参照または値型のどちらかへの逆のブリッジを自動的に取り扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c5&gt;not&lt;w6&gt;So&lt;w7&gt;Good&lt;w8&gt;Number&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; is initialized, &lt;c9&gt;Int("invalid-input")&lt;/c9&gt; fails and returns &lt;c10&gt;nil&lt;/c10&gt;, and so &lt;c11&gt;Int("42")&lt;/c11&gt; is called to supply a default value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;not&lt;w6&gt;So&lt;w7&gt;Good&lt;w8&gt;Number&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;が初期化されるとき、&lt;c9&gt;Int("invalid-input")&lt;/c9&gt;は失敗して&lt;c10&gt;nil&lt;/c10&gt;を返します、そうすると&lt;c11&gt;Int("42")&lt;/c11&gt;が呼び出されて省略時の値を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c5&gt;not&lt;w6&gt;So&lt;w7&gt;Good&lt;w8&gt;Number&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; is initialized, &lt;c9&gt;Int("invalid-input")&lt;/c9&gt; fails and returns &lt;c10&gt;nil&lt;/c10&gt;, and so the &lt;c11&gt;get&lt;w12&gt;Default()&lt;/w12&gt;&lt;/c11&gt; method is called to supply a default value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;not&lt;w6&gt;So&lt;w7&gt;Good&lt;w8&gt;Number&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;が初期化されるとき、&lt;c9&gt;Int("invalid-input")&lt;/c9&gt;は失敗して&lt;c10&gt;nil&lt;/c10&gt;を返します、そうすると&lt;c11&gt;get&lt;w12&gt;Default()&lt;/w12&gt;&lt;/c11&gt;メソッドが呼び出されて省略時の値を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c5&gt;print&lt;w6&gt;Generic&lt;w7&gt;Info(_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; is called with a string that has &lt;c8&gt;P&lt;/c8&gt; as its static type, the call to &lt;c9&gt;type(of:)&lt;/c9&gt; returns &lt;c10&gt;P&lt;w11&gt;.self&lt;/w11&gt;&lt;/c10&gt; instead of &lt;c12&gt;String&lt;w13&gt;.self&lt;/w13&gt;&lt;/c12&gt; (the dynamic type inside the parameter).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;print&lt;w6&gt;Generic&lt;w7&gt;Info(_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;が、&lt;c8&gt;P&lt;/c8&gt;をそれの静的型として持つ文字列とともに呼ばれる時、&lt;c9&gt;type(of:)&lt;/c9&gt;への呼び出しは&lt;c10&gt;P&lt;w11&gt;.self&lt;/w11&gt;&lt;/c10&gt;を返します、&lt;c12&gt;String&lt;w13&gt;.self&lt;/w13&gt;&lt;/c12&gt;（パラメータの内部の動的型）ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When Swift code imports Objective-C APIs, the importer replaces Foundation reference types with their corresponding value types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftコードがObjective-C APIをインポートする場合、インポータはFoundation参照型をそれらの対応する値型で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When Swift imports APIs that have not been annotated, the compiler cannot automatically memory-manage the returned Core Foundation objects.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注釈をつけられなかったAPIをSwiftがインポートする場合、コンパイラは返されたCore Foundationオブジェクトを自動的にメモリ管理できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When Swift imports Core Foundation types, the compiler remaps the names of these types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトがCore Foundation型をインポートするとき、コンパイラはこれらの型の名前をリマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a closed range uses integers as its lower and upper bounds, or any other type that conforms to the &lt;c0&gt;Strideable&lt;/c0&gt; protocol with an integer stride, you can use that range in a &lt;c1&gt;for&lt;/c1&gt;-&lt;c2&gt;in&lt;/c2&gt; loop or with any sequence or collection method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある完結範囲がそれの下側および上側の境界として整数を使う、または整数歩幅を使う&lt;c0&gt;Strideable&lt;/c0&gt;プロトコルに準拠する何らかの他の型を使う場合、あなたはその範囲を&lt;c1&gt;for&lt;/c1&gt;-&lt;c2&gt;in&lt;/c2&gt;ループにおいて、または何らかのシーケンスまたはコレクションのメソッドで使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a dictionary outgrows its buffer, existing indices may be invalidated without any notification.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書がそれのバッファより大きくなる時、既存のインデックスは何の通知もなしに無効にされるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a dictionary’s &lt;c0&gt;Value&lt;/c0&gt; type has value semantics, you can use this subscript to perform in-place operations on values in the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書の持つ&lt;c0&gt;Value&lt;/c0&gt;型が値意味論を持つ場合、あなたはこの添え字を使うことで、辞書の中の値の上でその場での演算を実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a value is successfully enqueued, either buffered or immediately consumed to resume a pending call to next and a count of remaining slots available in the buffer at the point in time of yielding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値が成功裏に待ち行列に入れられる時、nextへの未解決の呼び出しを再開するためにバッファしたか直ちに消費したかどちらか、そして生み出す時点でバッファにおいて利用可能な残りの投入口の総数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When accessing a computed property corresponding to a bit field, Swift automatically converts the value to and from compatible Swift types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるビットフィールドに対応している計算プロパティにアクセスするとき、スウィフトはその値を自動的に互換性のあるスウィフト型へと、またはそれから、変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When an array has additional capacity and is not sharing its storage with another instance, appending an element is O(1).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列がさらなる容量を持っていてそれのストレージを別のインスタンスと共有していない場合、ある要素を追加することはO(1)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When an array needs to reallocate storage before appending or its storage is shared with another copy, appending is O(&lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the length of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列が追加の前にストレージの際割り当てを必要とするかそれのストレージを別のコピーと共有する場合、追加作業はO(&lt;e1&gt;n&lt;/e1&gt;)です、そこで&lt;e2&gt;n&lt;/e2&gt;は配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When an event occurs—such as a user resizing a window—a class that's a delegator will detect the event and call delegate methods on the class you specify as the delegate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イベントが発生する場合 — 例えばユーザがウインドウをリサイズするなど — 委任元であるクラスはイベントを検出します、そしてあなたが委任先として指定するクラス上で委任先メソッドを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When building an app target, you can provide a custom name for the product module by changing the Product Module Name build setting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリターゲットをビルドする場合、あなたはあつらえの名前を製品モジュールに提供することがProduct Module Name build設定を変更することによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling the new &lt;c0&gt;Int&lt;/c0&gt; initializer within a &lt;c1&gt;do&lt;/c1&gt; statement, you can use pattern matching to match specific cases of your custom error type and access their associated values, as in the example below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この新しい&lt;c0&gt;Int&lt;/c0&gt;イニシャライザを&lt;c1&gt;do&lt;/c1&gt;文内部で呼び出すとき、あなたはパターンマッチを使ってあなたのあつらえのエラー型のそれぞれ詳述なケース節と照合して、それらの関連値にアクセスします、下の例でのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When comparing two values with this method, &lt;c1&gt;-0&lt;/c1&gt; is equal to &lt;c2&gt;+0&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値をこのメソッドで比較する場合、&lt;c1&gt;-0&lt;/c1&gt;は&lt;c2&gt;+0&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When converting floating-point values, the &lt;c0&gt;init?(exactly:)&lt;/c0&gt; initializer checks both that the passed value has no fractional part and that the value is representable in the resulting type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値を変換するとき、&lt;c0&gt;init?(exactly:)&lt;/c0&gt;イニシャライザは、渡された値が小数部を持たないこと、そしてその値が結果となる型の中に表現可能であることの両方を検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When creating a custom collection type, add the minimal requirements of the &lt;c4&gt;Collection&lt;/c4&gt; protocol: starting and ending indices and a subscript for accessing elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえのコレクション型を作成する場合、&lt;c4&gt;Collection&lt;/c4&gt;プロトコルの最小限の要件：始まりと終わりのインデックスおよび要素にアクセスするための添え字、を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When declarations in an Objective-C header file refer to a Swift class or protocol that comes from the same target, importing the generated header creates a cyclical reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cヘッダファイルの中の宣言がその同じターゲットからやってくるSwiftクラスまたはプロトコルを参照する場合、生成ヘッダのインポートは循環参照を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When implementing an &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance, set the &lt;c4&gt;String&lt;w5&gt;Interpolation&lt;/w5&gt;&lt;/c4&gt; associated type to &lt;c6&gt;Default&lt;w7&gt;String&lt;w8&gt;Interpolation&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; to get the same interpolation behavior as Swift’s built-in &lt;c9&gt;String&lt;/c9&gt; type and construct a &lt;c10&gt;String&lt;/c10&gt; with the results.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠を実装する場合は、&lt;c4&gt;String&lt;w5&gt;Interpolation&lt;/w5&gt;&lt;/c4&gt;関連型を&lt;c6&gt;Default&lt;w7&gt;String&lt;w8&gt;Interpolation&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;に設定することで、Swiftの組込み&lt;c9&gt;String&lt;/c9&gt;型と同じ補間挙動を取得してください、そしてある&lt;c10&gt;String&lt;/c10&gt;をその結果で組み立ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When implementing the &lt;c0&gt;==&lt;/c0&gt; method and the &lt;c1&gt;hash(into:)&lt;/c1&gt; method, use all the properties that affect whether two instances of your custom type are considered equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;==&lt;/c0&gt;メソッドと&lt;c1&gt;hash(into:)&lt;/c1&gt;メソッドを実装する場合、あなたのカスタム型の２つのインスタンスが等しいと考えられるどうかに影響するすべてのプロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When imported into Swift, the macros in the above example are equivalent to these constant declarations:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftへとインポートされる場合、上の例でのマクロは、これら定数宣言に相当します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When importing C function parameters, however, Swift maps pointer parameters to standard library pointer types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C関数パラメータをインポートする場合、しかしながら、Swiftはポインタパラメータを標準ライブラリのポインタ型へとマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When importing the Foundation framework, the Swift overlay provides value types for many bridged reference types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Foundationフレームワークをインポートする場合、Swiftオーバーレイは値型を多くのブリッジされる参照型に対して提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When importing these types, Swift moves them to be nested types of their related types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらの型をインポートするとき、スウィフトはそれらを移動して、それらの関連型の入れ子にされた型にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When iterated over, keys appear in this collection in the same order as they occur in the dictionary’s key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべてにわたって反復した場合、それらが辞書のキー値ペアにおいて現れるのと同じ順序で、キーはこのコレクションにおいて現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When iterated over, values appear in this collection in the same order as they occur in the dictionary’s key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべてにわたって反復した場合、それらが辞書のキー値ペアにおいて現れるのと同じ順序で、値はこのコレクションにおいて現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When negative integers are extended, the result is padded with ones.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負整数が拡張される時、結果は１で詰め物をされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When next returns nil this signifies the end of the AsyncStream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nextがnilを返す場合これはAsyncStreamの終わりを知らせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When nonnegative integers are extended, the result is padded with zeroes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非負整数が拡張される時、結果はゼロで詰め物をされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When performing collection-based operations that return an index into a dictionary, use this subscript with the resulting value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書に対してのコレクション基盤インデックスを返す演算を実行する時、この添え字を結果の値とともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When placed next to each other in a string literal, these two scalar values are combined into a single grapheme cluster, represented by a &lt;c2&gt;Character&lt;/c2&gt; instance in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるSwift文字列リテラルにおいて互いに隣り合わせに置かれる時、これら２つのスカラー値は、Swiftでは１つの&lt;c2&gt;Character&lt;/c2&gt;インスタンスによって表される、単一の書記素クラスタへと一体化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When that happens, the array being modified replaces its storage with a uniquely owned copy of itself, which is then modified in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それが起こる場合、修正されている配列はそれのストレージを独自な自分だけの自身のコピーと置き換え、それはそれからそこで修正されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the bit width of &lt;c0&gt;T&lt;/c0&gt; (the type of &lt;c1&gt;source&lt;/c1&gt;) is equal to or greater than this type’s bit width, the result is the truncated least-significant bits of &lt;c2&gt;source&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;（&lt;c1&gt;source&lt;/c1&gt;の型）のビット幅がこの型のもつビット幅と等しいかより大きいならば、結果は&lt;c2&gt;source&lt;/c2&gt;の先端を切った最下位ビットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the bit width of &lt;c0&gt;T&lt;/c0&gt; is less than this type’s bit width, the result is &lt;e1&gt;sign-extended&lt;/e1&gt; to fill the remaining bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;のビット幅がこの型のもつビット幅より小さいならば、結果は残りのビットを満たすように&lt;e1&gt;符号拡張&lt;/e1&gt;されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the buffer is full, discard the newly received element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファがいっぱいである時、新しく受け取った要素を廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the buffer is full, discard the oldest element in the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファがいっぱいである時、バッファにおいて最古の要素を廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the collection passed to &lt;c3&gt;relative(to:)&lt;/c3&gt; starts with a different index, that index is used as the lower bound instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;relative(to:)&lt;/c3&gt;に渡されるコレクションが異なるインデックスで始まる場合、そのインデックスは代わりに下側の境界として使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the context provides enough type information, you can use a special form of the dictionary literal, square brackets surrounding a single colon, to initialize an empty dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文脈が十分な型情報を提供する場合、あなたは特別な形式の辞書リテラル、ただ１つのコロンを囲んでいる角括弧、を使って空の辞書を初期化することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the destination array’s element type is a class or an &lt;c0&gt;@objc&lt;/c0&gt; protocol, bridging from &lt;c1&gt;NSArray&lt;/c1&gt; to &lt;c2&gt;Array&lt;/c2&gt; first calls the &lt;c3&gt;copy(with:)&lt;/c3&gt; (&lt;c4&gt;- copy&lt;w5&gt;With&lt;w6&gt;Zone:&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; in Objective-C) method on the array to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行き先配列の持つ要素型があるクラスまたはある&lt;c0&gt;@objc&lt;/c0&gt;プロトコルである場合、&lt;c1&gt;NSArray&lt;/c1&gt;から&lt;c2&gt;Array&lt;/c2&gt;へのブリッジはまず&lt;c3&gt;copy(with:)&lt;/c3&gt;（Objective-Cでの&lt;c4&gt;- copy&lt;w5&gt;With&lt;w6&gt;Zone:&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;）メソッドをその配列上で呼び出すことである不変のコピーを取得します、そしてそれから追加のSwift簿記作業を実行します、それはO(1)時間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the destination array’s element type is a nonclass type that bridges to a Foundation type, bridging from &lt;c0&gt;NSArray&lt;/c0&gt; to &lt;c1&gt;Array&lt;/c1&gt; performs a bridging copy of the elements to contiguous storage in O(&lt;e2&gt;n&lt;/e2&gt;) time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行き先配列の持つ要素型が非クラス型でFoundation型にブリッジする場合、&lt;c0&gt;NSArray&lt;/c0&gt;から&lt;c1&gt;Array&lt;/c1&gt;へのブリッジはそれら要素のコピーを隣接ストレージにブリッジすることをO(&lt;e2&gt;n&lt;/e2&gt;)時間で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the dictionary’s &lt;c2&gt;Key&lt;/c2&gt; and &lt;c3&gt;Value&lt;/c3&gt; types are neither classes nor &lt;c4&gt;@objc&lt;/c4&gt; protocols, any required bridging of elements occurs at the first access of each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の&lt;c2&gt;Key&lt;/c2&gt;と&lt;c3&gt;Value&lt;/c3&gt;型がクラスでも&lt;c4&gt;@objc&lt;/c4&gt;プロトコルでもない場合、それら要素のブリッジに必要とされるあらゆることが各要素の最初のアクセスで起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the group returns, it implicitly waits for all child tasks to complete.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グループが復帰する時、それは暗黙的に全ての子タスクが完了するのを待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the original &lt;c1&gt;numbers&lt;/c1&gt; array is modified, it makes a unique copy of its storage before making the modification.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オリジナルの&lt;c1&gt;numbers&lt;/c1&gt;配列が修正されるとき、それはそれのストレージの特有なコピーをその修正がなされる前に行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the return value is &lt;c5&gt;false&lt;/c5&gt;, the value of &lt;c6&gt;i&lt;/c6&gt; is equal to &lt;c7&gt;limit&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り値が&lt;c5&gt;false&lt;/c5&gt;の場合、&lt;c6&gt;i&lt;/c6&gt;の値は&lt;c7&gt;limit&lt;/c7&gt;に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the sequence is exhausted, the accumulating value is returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが使い尽くされる時、蓄積値が呼び出し側へ返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the sequence is exhausted, the last value returned from the closure is returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが使い尽くされる時、クロージャから返される最後の値が呼び出し側へ返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the static type of the value passed to &lt;c9&gt;type(of:)&lt;/c9&gt; is constrained to a class or protocol, you can use that metatype to access initializers or other static members of the class or protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c9&gt;type(of:)&lt;/c9&gt;に渡される値の静的型があるクラスまたはプロトコルに制約される場合、あなたはそのメタタイプを使うことでイニシャライザやそのクラスまたはプロトコルの他の静的メンバーにアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the value is &lt;c15&gt;5&lt;/c15&gt;, the closure throws &lt;c16&gt;My&lt;w17&gt;Error&lt;/w17&gt;&lt;/c16&gt;, terminating the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値が&lt;c15&gt;5&lt;/c15&gt;である場合、クロージャは&lt;c16&gt;My&lt;w17&gt;Error&lt;/w17&gt;&lt;/c16&gt;をスローして、シーケンスを終端しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When these invalid strings are parsed by the &lt;c2&gt;Double&lt;/c2&gt; failable initializer, the example uses the nil-coalescing operator (&lt;c3&gt;??&lt;/c3&gt;) to provide NaN as a fallback value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら無効な文字列が&lt;c2&gt;Double&lt;/c2&gt;の失敗できるイニシャライザによって解析される場合のため、この例はnil合体演算子（&lt;c3&gt;??&lt;/c3&gt;）を使ってNaNをフォールバック（頼みの綱の、予備の）値として提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When this initializer finds a key in &lt;c0&gt;container&lt;/c0&gt; that doesn’t exist in &lt;c1&gt;scope&lt;/c1&gt;, it casts the key to &lt;c2&gt;Any&lt;w3&gt;Object&lt;/w3&gt;&lt;/c2&gt; when adding it to the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザが、あるキーを&lt;c0&gt;container&lt;/c0&gt;の中で見つけるそれが&lt;c1&gt;scope&lt;/c1&gt;の中に存在しない時、それは、そのキーを&lt;c2&gt;Any&lt;w3&gt;Object&lt;/w3&gt;&lt;/c2&gt;へとキャストします、それを辞書へと加える時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When using a &lt;c2&gt;Case&lt;w3&gt;Iterable&lt;/w3&gt;&lt;/c2&gt; type, you can access a collection of all of the type’s cases by using the type’s &lt;c4&gt;all&lt;w5&gt;Cases&lt;/w5&gt;&lt;/c4&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Case&lt;w3&gt;Iterable&lt;/w3&gt;&lt;/c2&gt;型を使う場合、あなたはその型のもつケース節の全てからなるコレクションにアクセスすることが、その型のもつ&lt;c4&gt;all&lt;w5&gt;Cases&lt;/w5&gt;&lt;/c4&gt;プロパティを使うことで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When using an empty array literal, specify the type of the variable or constant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の配列リテラルを使う時は、変数または定数の型を指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When using custom types to model data in your programs, you may frequently need to check whether two values are the same or different, or whether a particular value is included in a list of values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえの型を使ってあなたのプログラムにおいてデータをモデル化する場合、あなたは２つの値が同じか異なるか、または特定の値が値のリストに含まれるかどうかを調べる必要がしばしばあるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When using such a declaration from another actor (or from nonisolated code), synchronization is performed through the \c shared actor instance to ensure mutually-exclusive access to the declaration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのようなある宣言を別のアクターから（または非分離コードから）使う場合、同期は共有アクターインスタンスを通して実行されることで、その宣言への相互排他アクセスを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When values are produced from a non async/await source there is a consideration that must be made on behavioral characteristics of how that production of values interacts with the iteration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値それらが非同期／待機ではないあるソースから生み出される場合は、どのように値それらの生産が反復と相互作用するかの行動的特徴の上にそれが作られなければならないというある考慮すべき点があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがいくらかの要素を配列に加えてその配列がそれの確保した容量を越え始める時、配列はより大きなメモリ領域を割り当てて、それの要素をその新しいストレージ（貯蔵場所）にコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you are operating on many values, this behavior is valuable because operations on NaN simply forward the value and don’t cause runtime errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが沢山の値に演算を行っている時、この挙動は有益です、なぜならNaNに関する演算は単にその値を次に伝えて実行時エラーを起こさないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you assign a value for a key and that key already exists, the dictionary overwrites the existing value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある値をあるキーに割り当てるそしてそのキーが既に存在する場合、辞書は既存の値を上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call &lt;c0&gt;drop&lt;w1&gt;First(_:)&lt;/w1&gt;&lt;/c0&gt; on an asynchronous sequence that is already an &lt;c2&gt;Async&lt;w3&gt;Drop&lt;w4&gt;First&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;, the returned sequence simply adds the new drop count to the current drop count.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;drop&lt;w1&gt;First(_:)&lt;/w1&gt;&lt;/c0&gt;をある非同期シーケンスで既に&lt;c2&gt;Async&lt;w3&gt;Drop&lt;w4&gt;First&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;であるものの上で呼び出す時、返されるシーケンスは単純に新しい除外総数を現在の除外総数に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that does not fully specify its parameters’ types, use the type-cast operator (&lt;c0&gt;as&lt;/c0&gt;) to specify the type of an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが完全にそれのパラメータの型を指定しない関数を呼び出す場合は、型キャスト演算子（&lt;c0&gt;as&lt;/c0&gt;）を使って配列リテラルの型を指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you create a binary integer from a floating-point value using the default initializer, the value is rounded toward zero before the range is checked.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがバイナリ整数をある浮動小数点力省略時のイニシャライザを使って作成するとき、その値は範囲が検査される前にゼロへの丸めをされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you create a constant or variable using one of the Boolean literals &lt;c0&gt;true&lt;/c0&gt; or &lt;c1&gt;false&lt;/c1&gt;, the resulting type is determined by the &lt;c2&gt;Boolean&lt;w3&gt;Literal&lt;w4&gt;Type&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; alias.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが定数や変数をブールリテラル&lt;c0&gt;true&lt;/c0&gt;または&lt;c1&gt;false&lt;/c1&gt;を使って作成するとき、結果の型は&lt;c2&gt;Boolean&lt;w3&gt;Literal&lt;w4&gt;Type&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;エイリアスによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you create an observer, you start observation by calling the &lt;c0&gt;observe(_:&lt;w1&gt;options:&lt;w2&gt;change&lt;w3&gt;Handler:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method with a key path that refers to the property you want to observe.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオブザーバを作成する場合、あなたは&lt;c0&gt;observe(_:&lt;w1&gt;options:&lt;w2&gt;change&lt;w3&gt;Handler:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドを、あなたが監視したいプロパティを参照するキーパスとともに呼び出すことによって監視を開始します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you define an enumeration without associated values, it gains &lt;c0&gt;Hashable&lt;/c0&gt; conformance automatically, and you can add &lt;c1&gt;Hashable&lt;/c1&gt; conformance to your other custom types by implementing the &lt;c2&gt;hash(into:)&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが列挙を関連値なしで定義するとき、それは&lt;c0&gt;Hashable&lt;/c0&gt;準拠を自動的に手に入れます、そしてあなたは&lt;c1&gt;Hashable&lt;/c1&gt;準拠をあなたの他のあつらえの型に加えることが、&lt;c2&gt;hash(into:)&lt;/c2&gt;メソッドを実装することによって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you do, all known &lt;c2&gt;@objc&lt;/c2&gt; class methods and properties are available as implicitly unwrapped optional methods and properties, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがそうする場合、全ての既知の&lt;c2&gt;@objc&lt;/c2&gt;クラスのメソッドおよびプロパティは、暗黙的にアンラップされるオプショナルのメソッドおよびプロパティとしてそれぞれが利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you do, use a structure to represent errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがそうする場合は、構造体を使ってエラーを表してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあるコレクションを列挙するとき、各ペアの整数部分は列挙のためのカウンタです、しかし必ずしもペアにされた値のインデックスではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you import it, here's the Swift interface:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがそれをインポートする場合、ここにSwiftインターフェイスがあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you import the Color structure, the Swift version is equivalent to the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがColor構造体をインポートする場合、Swift版は以下に相当します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you import the Core Foundation framework, its types are imported as Swift classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがCore Foundationフレームワークをインポートする場合、それの型は、Swiftクラスとしてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you import these declarations into Swift, the &lt;c0&gt;NSCopying&lt;/c0&gt; protocol qualification of the &lt;c1&gt;List&lt;/c1&gt; type and the &lt;c2&gt;NSValue&lt;/c2&gt; class qualification of the &lt;c3&gt;list&lt;w4&gt;Of&lt;w5&gt;Values&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; method are preserved.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがそれら宣言をSwiftへとインポートする場合、&lt;c0&gt;NSCopying&lt;/c0&gt;プロトコル適格が&lt;c1&gt;List&lt;/c1&gt;型に対して、そして&lt;c2&gt;NSValue&lt;/c2&gt;適格が&lt;c3&gt;list&lt;w4&gt;Of&lt;w5&gt;Values&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;メソッドに対して、保存されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you know how many new values you’re adding to a dictionary, use the &lt;c0&gt;init(minimum&lt;w1&gt;Capacity:)&lt;/w1&gt;&lt;/c0&gt; initializer to allocate the correct amount of buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのくらい多くの新しい値をあなたが辞書に加えることになるかあなたが知っている場合は、&lt;c0&gt;init(minimum&lt;w1&gt;Capacity:)&lt;/w1&gt;&lt;/c0&gt;イニシャライザを使って正確な量のバッファを割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you match against an &lt;c2&gt;Equatable&lt;/c2&gt; value in a &lt;c3&gt;case&lt;/c3&gt; statement, this operator is called behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c2&gt;Equatable&lt;/c2&gt;値に対して&lt;c3&gt;case&lt;/c3&gt;文でマッチを行うとき、この演算子が舞台裏で呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need a range that includes the last element of a collection, use the half-open range operator (&lt;c0&gt;..&lt;&lt;/c0&gt;) with &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションの最後の要素を含むある範囲を必要とする時は、半開範囲演算子（&lt;c0&gt;..&lt;&lt;/c0&gt;）を&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;とともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need a range that includes the last element of an array, use the half-open range operator (&lt;c0&gt;..&lt;&lt;/c0&gt;) with &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが配列の最後の要素を含む範囲を必要とするならば、半開範囲演算子（&lt;c0&gt;..&lt;&lt;/c0&gt;）を&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;とともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to access APIs that require data in an &lt;c0&gt;NSArray&lt;/c0&gt; instance instead of &lt;c1&gt;Array&lt;/c1&gt;, use the type-cast operator (&lt;c2&gt;as&lt;/c2&gt;) to bridge your instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NSArray&lt;/c0&gt;インスタンスでのデータを&lt;c1&gt;Array&lt;/c1&gt;の代わりに期待するAPIにあなたがアクセスする必要がある場合、型キャスト演算子（&lt;c2&gt;as&lt;/c2&gt;）を使ってあなたのインスタンスをブリッジしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to check whether your collection is empty, use the &lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt; property instead of checking that the &lt;c2&gt;count&lt;/c2&gt; property is equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコレクションが空かどうか確認する必要がある場合、&lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt;プロパティを使ってください、&lt;c2&gt;count&lt;/c2&gt;プロパティがゼロと等しいのを調べるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to perform an operation on all of an array’s elements, use a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop to iterate through the array’s contents.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある配列の要素のすべてである演算を実行することを必要とするならば、&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;を使って配列の内容の始めから終わりまで反復適用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you pass a Swift instance to an Objective-C API, it's bridged as an &lt;c3&gt;id&lt;/c3&gt; parameter so that it's usable in the API as an Objective-C object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがSwiftインスタンスをあるObjective-C APIに渡す場合、それは&lt;c3&gt;id&lt;/c3&gt;パラメータとしてブリッジされます、それでそれはそのAPIにおいてObjective-Cオブジェクトとして利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you provide just those methods, the standard library provides default implementations for all other arithmetic methods and operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが単にそれらのメソッドだけを提供する場合、標準ライブラリが省略時の実装をすべての他の算術演算メソッドと演算子に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you receive an unmanaged object from an unannotated API, immediately convert it to a memory-managed object before you work with it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが注釈をつけられないAPIから管理されないオブジェクトを受け取るとき、あなたがそれを扱う前に、直ちにそれをメモリ管理されたオブジェクトに変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you use &lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt; as a concrete type, you have at your disposal every &lt;c2&gt;@objc&lt;/c2&gt; method and property—that is, methods and properties imported from Objective-C or marked with the &lt;c3&gt;@objc&lt;/c3&gt; attribute.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt;を具体的な型として使うとき、すべての&lt;c2&gt;@objc&lt;/c2&gt;メソッドやプロパティ — すなわち、Objective-Cからインポートされるか、&lt;c3&gt;@objc&lt;/c3&gt;属性で印されるメソッドとプロパティ — があなたの自由になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you use &lt;c3&gt;Codable&lt;/c3&gt; as a type or a generic constraint, it matches any type that conforms to both protocols.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c3&gt;Codable&lt;/c3&gt;をある型またはある総称体制約として使う場合、それはプロトコル両方に準拠するあらゆる型に適合します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you use arrays, dictionaries, and other collections, you benefit from the operations that the &lt;c0&gt;Collection&lt;/c0&gt; protocol declares and implements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが配列、辞書、および他のコレクションを使うとき、あなたは&lt;c0&gt;Collection&lt;/c0&gt;プロトコルが宣言および実装する演算からの恩恵を受けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you want to sort a collection of elements that don’t conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol, pass a closure to this method that returns &lt;c1&gt;true&lt;/c1&gt; when the first element should be ordered before the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠しない要素からなるコレクションをソートしたい場合、最初の要素が２番目の前に並べられるべき場合は&lt;c1&gt;true&lt;/c1&gt;を返すクロージャをこのメソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you want to sort a sequence of elements that don’t conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol, pass a predicate to this method that returns &lt;c1&gt;true&lt;/c1&gt; when the first element should be ordered before the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠しない要素からなるシーケンスをソートしたい場合、最初の要素が２番目の前に並べられるべき時は&lt;c1&gt;true&lt;/c1&gt;を返す述部をこのメソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you work with objects of type &lt;c0&gt;Any&lt;/c0&gt; where you know the underlying type, it's often useful to downcast those objects to the underlying type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが基盤型を知っているところの型&lt;c0&gt;Any&lt;/c0&gt;のオブジェクトを扱う場合、しばしば役立つのはそれらオブジェクトを基盤型へとダウンキャストすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you're building an app target, you can import your Swift code into any Objective-C &lt;c0&gt;.m&lt;/c0&gt; file within that same target using this syntax and substituting the appropriate name:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがアプリターゲットをビルドしている場合、あなたはあなたのSwiftコードをインポートすることが、あらゆるObjective-C &lt;c0&gt;.m&lt;/c0&gt;ファイルへと、その同じターゲット内で、この構文を使ってそして適切な名前を代わりに使って、行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you're choosing how to model your data, try building the hierarchy of data types using protocol inheritance first, then adopt those protocols in your structures.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのデータをモデル化する方法をあなたが選ぶ時、データ型の階層の構築を最初にプロトコル継承を使って試みてください、それからそれらのプロトコルをあなたの構造体において採用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you’ve finished feeding the hasher, the hash value can be retrieved by calling &lt;c2&gt;finalize()&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがハーシャーに入力を完了する時、ハッシュ値は&lt;c2&gt;finalize()&lt;/c2&gt;を呼び出すことで取り出せます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whenever possible, Swift avoids giving you direct access to pointers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可能なときはいつでも、スウィフトはあなたにポインターへの直接のアクセスを与えることを避けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whenever possible, Swift’s compiler infers the full intended type of your array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可能な時はいつでも、Swiftのコンパイラはあなたの配列リテラルの完全な意図される型を推論します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Where conversion using &lt;c0&gt;as&lt;/c0&gt; or &lt;c1&gt;as?&lt;/c1&gt; is possible between two types (such as &lt;c2&gt;Int&lt;/c2&gt; and &lt;c3&gt;NSNumber&lt;/c3&gt;), &lt;c4&gt;Any&lt;w5&gt;Hashable&lt;/w5&gt;&lt;/c4&gt; uses a canonical representation of the type-erased value so that instances wrapping the same value of either type compare as equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;as&lt;/c0&gt;または&lt;c1&gt;as?&lt;/c1&gt;を使う変換が、２つの型の間（たとえば&lt;c2&gt;Int&lt;/c2&gt;と&lt;c3&gt;NSNumber&lt;/c3&gt;）で可能であるところでは、&lt;c4&gt;Any&lt;w5&gt;Hashable&lt;/w5&gt;&lt;/c4&gt;はその型消去値のある正準表現を使います、それでどちらかの型での同じ値をラップしているインスタンスそれらは等しいとみなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Where in some languages you might pass a starting index into an &lt;c2&gt;index&lt;w3&gt;Of&lt;/w3&gt;&lt;/c2&gt; method to find the second day, in Swift you perform the same operation on a slice of the original array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの言語ではあなたはある開始インデックスを&lt;c2&gt;index&lt;w3&gt;Of&lt;/w3&gt;&lt;/c2&gt;メソッドに渡して２つ目の日付を見つけるかもしれないところで、Swiftではあなたは同じ演算をオリジナル配列のスライス上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wherever memory management annotations are provided, Swift automatically manages the memory of Core Foundation objects, including Core Foundation objects that you instantiate yourself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ管理注釈が提供されるどこででも、あなた自身でインスタンス化するCore Foundationオブジェクトを含めて、スウィフトは自動的にCore Foundationオブジェクトのメモリを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whether the dictionary should keep its underlying buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書がそれの基礎をなすバッファを保つべきかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whichever of &lt;c0&gt;x&lt;/c0&gt; or &lt;c1&gt;y&lt;/c1&gt; has greater magnitude, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;のどちらがより大きい規模を持つか、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whichever of &lt;c0&gt;x&lt;/c0&gt; or &lt;c1&gt;y&lt;/c1&gt; has lesser magnitude, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;のどちらがより小さい規模を持つか、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While the resulting array may have a capacity larger than the requested amount, the buffer passed to the closure will cover exactly the requested number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果配列が要請された量より大きい収容能力を持つかもしれない一方で、クロージャに渡されるバッファは、正確に要請された数の要素に及びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While this example isn’t itself asychronous, it shows the shape of a custom sequence and iterator, and how to use it as if it were asynchronous:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例はそれ自体は非同期でない一方で、それはあるあつらえのシーケンスとイテレータの輪郭、そしてまるでそれが非同期だったかのようにそれを使う方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With &lt;c0&gt;Equatable&lt;/c0&gt; conformance, you can use the equal-to operator (&lt;c1&gt;==&lt;/c1&gt;) or the not-equal-to operator (&lt;c2&gt;!=&lt;/c2&gt;) with any two instances of the &lt;c3&gt;Position&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Equatable&lt;/c0&gt;準拠で、あなたは同等演算子（&lt;c1&gt;==&lt;/c1&gt;）または不等演算子（&lt;c2&gt;!=&lt;/c2&gt;）を&lt;c3&gt;Position&lt;/c3&gt;型の任意の２つのインスタンスで使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With either function, you pass the resulting &lt;c26&gt;CVa&lt;w27&gt;List&lt;w28&gt;Pointer&lt;/w28&gt;&lt;/w27&gt;&lt;/c26&gt; value as the &lt;c29&gt;va&lt;w30&gt;_list&lt;/w30&gt;&lt;/c29&gt; argument of the C variadic function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どちらの関数でも、あなたは結果の&lt;c26&gt;CVa&lt;w27&gt;List&lt;w28&gt;Pointer&lt;/w28&gt;&lt;/w27&gt;&lt;/c26&gt;値を、C可変長引数関数の&lt;c29&gt;va&lt;w30&gt;_list&lt;/w30&gt;&lt;/c29&gt;引数として渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With pointer &lt;c0&gt;p&lt;/c0&gt; and distance &lt;c1&gt;n&lt;/c1&gt;, the result of &lt;c2&gt;p&lt;w3&gt;.advanced(by: n)&lt;/w3&gt;&lt;/c2&gt; is equivalent to &lt;c4&gt;p + n&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタ&lt;c0&gt;p&lt;/c0&gt;と隔たり&lt;c1&gt;n&lt;/c1&gt;では、&lt;c2&gt;p&lt;w3&gt;.advanced(by: n)&lt;/w3&gt;&lt;/c2&gt;の結果は&lt;c4&gt;p + n&lt;/c4&gt;と同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With pointers &lt;c0&gt;p&lt;/c0&gt; and &lt;c1&gt;q&lt;/c1&gt;, the result of &lt;c2&gt;p&lt;w3&gt;.distance(to: q)&lt;/w3&gt;&lt;/c2&gt; is equivalent to &lt;c4&gt;q - p&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタ&lt;c0&gt;p&lt;/c0&gt;と&lt;c1&gt;q&lt;/c1&gt;では、&lt;c2&gt;p&lt;w3&gt;.distance(to: q)&lt;/w3&gt;&lt;/c2&gt;の結果は&lt;c4&gt;q - p&lt;/c4&gt;と同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With those elements defined, the inherited &lt;c5&gt;make&lt;w6&gt;Iterator()&lt;/w6&gt;&lt;/c5&gt; method satisfies the requirements of the &lt;c7&gt;Sequence&lt;/c7&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>定義されるそれらの要素とともに、継承される&lt;c5&gt;make&lt;w6&gt;Iterator()&lt;/w6&gt;&lt;/c5&gt;メソッドが&lt;c7&gt;Sequence&lt;/c7&gt;プロトコルの要件を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Within the execution of a Swift program, &lt;c0&gt;Hasher&lt;/c0&gt; guarantees that finalizing it will always produce the same hash value as long as it is fed the exact same sequence of bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるSwiftプログラムの実行の範囲内で、&lt;c0&gt;Hasher&lt;/c0&gt;は、それをファイナライズすることは常に同じハッシュ値を生成することを、それが正確に同じバイト列を供給される限り保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Without any other information, Swift creates an array that includes the specified values, automatically inferring the array’s &lt;c0&gt;Element&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの他の情報なしでは、Swiftは指定された値を含んでいる配列を、自動的にその配列の&lt;c0&gt;Element&lt;/c0&gt;型を推論して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Work directly with memory-managed Core Foundation types in your Swift code, and manually handle retains as needed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ管理されたCore Foundation型をあなたのSwiftコードにおいて直接に扱い、そして必要に応じて手動でリテインを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Binary Representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ表現を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Byte Order</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイト順を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Core Foundation Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Core Foundation型を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Foundation Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Foundation型を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Memory Addresses</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリアドレスを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with a Character’s Unicode Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字のユニコード値を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wrappers for Algorithms</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アルゴリズムに対するラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes a textual representation of this instance into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのテキスト表現を与えられた出力ストリームへ書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the character into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その文字を与えられた出力ストリームへと書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素のテキスト表現を与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items into the standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた項目のテキスト表現を標準出力に書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items most suitable for debugging into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた項目の、デバッグに最も適するテキスト表現を、与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items most suitable for debugging into the standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた項目の、デバッグに最も適するテキスト表現を、標準出力に書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing Swift code is interactive and fun in Swift Playgrounds, playgrounds in Xcode, and REPL.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftコード記述は、Swift Playgrounds、Xcodeのplaygrounds、およびREPLにおいて対話的で楽しいものとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing is O(1) unless the array’s storage is shared with another array or uses a bridged &lt;c0&gt;NSArray&lt;/c0&gt; instance as its storage, in which case writing is O(&lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the length of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書き込みはO(1)です、配列のストレージが他の配列と共有するかブリッジされた&lt;c0&gt;NSArray&lt;/c0&gt;インスタンスをそれのストレージとして使うのでない限りは、その場合には書き込みはO(&lt;e1&gt;n&lt;/e1&gt;)です、そこで&lt;e2&gt;n&lt;/e2&gt;は配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing is O(1) unless the array’s storage is shared with another array, in which case writing is O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the length of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書き込みはO(1)です、配列のストレージが他の配列と共有されない限りは、その場合には書き込みはO(&lt;e0&gt;n&lt;/e0&gt;)です、そこで&lt;e1&gt;n&lt;/e1&gt;は配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing to a Text Stream</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テキストストリームを書き出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Xcode offers to create this header when you add a Swift file to an existing Objective-C app, or an Objective-C file to an existing Swift app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Xcodeは、このヘッダファイルを作成することをあなたがSwiftファイルを既存のObjective-Cアプリに、またはObjective-Cファイルを既存のSwiftアプリに加える場合に提案します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Xcode uses this name when naming the generated header file.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Xcodeは、生成ヘッダファイルに名前を付けるときにこの名前を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Yielding resulted in not buffering an element because the buffer was full.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生み出しはある要素をバッファしないという結果になりました、バッファが一杯だったため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You access the number of cases and the cases themselves through &lt;c4&gt;Compass&lt;w5&gt;Direction&lt;w6&gt;.all&lt;w7&gt;Cases&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ケース節の数およびケース節それ自体にアクセスすることが&lt;c4&gt;Compass&lt;w5&gt;Direction&lt;w6&gt;.all&lt;w7&gt;Cases&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;を通して可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You also use this method to sort elements that conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol in descending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、このメソッドを使って&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠する要素を降順でソートすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You associate the property you want to observe with its observer by passing the object to the initializer of the observer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あなたが監視を望むプロパティをそれのオブザーバと、オブジェクトをオブザーバのイニシャライザを渡すことによって結びつけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access a slice of a collection through its ranged subscript or by calling methods like &lt;c0&gt;prefix(while:)&lt;/c0&gt; or &lt;c1&gt;suffix(_:)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのあるスライスにそれの範囲指定された添え字を通して、または&lt;c0&gt;prefix(while:)&lt;/c0&gt;または&lt;c1&gt;suffix(_:)&lt;/c1&gt;のようなメソッドを呼び出すことによってアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access an element of a collection through its subscript by using any valid index except the collection’s &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、コレクションの要素にそれの添え字を通してアクセスすることが、そのコレクションの&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティを除くあらゆる有効なインデックスを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access and use pieces of code written in C and Objective-C from within your Swift code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、CおよびObjective-Cで書かれるコードの断片にアクセスおよび利用することがあなたのSwiftコード内部から可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access individual array elements through a subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは個々の配列要素に添え字を通してアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can add new elements in the middle of an array by using the &lt;c0&gt;insert(_:&lt;w1&gt;at:)&lt;/w1&gt;&lt;/c0&gt; method for single elements and by using &lt;c2&gt;insert(contents&lt;w3&gt;Of:&lt;w4&gt;at:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; to insert multiple elements from another collection or array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、新しい要素を配列の中ほどに追加することが、単一の項目には&lt;c0&gt;insert(_:&lt;w1&gt;at:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、そして別のコレクションや配列リテラルから複数の項目を挿入するには&lt;c2&gt;insert(contents&lt;w3&gt;Of:&lt;w4&gt;at:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also bridge some toll-free bridged Core Foundation types to Swift standard library types if you cast to a bridging Foundation type first.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、いくつかのトールフリーブリッジされたCore Foundation型をSwift標準ライブラリ型にブリッジすることが、ブリッジしているFoundation型にあなたが最初にキャストするならば、可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also invoke the &lt;c0&gt;retain()&lt;/c0&gt;, &lt;c1&gt;release()&lt;/c1&gt;, and &lt;c2&gt;autorelease()&lt;/c2&gt; methods on unmanaged objects, but this approach is not recommended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、管理されないオブジェクト上で&lt;c0&gt;retain()&lt;/c0&gt;、&lt;c1&gt;release()&lt;/c1&gt;、そして&lt;c2&gt;autorelease()&lt;/c2&gt;メソッドを呼び出すことができます、しかしこの取り組みは勧められません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also update, modify, or remove keys and values from a dictionary using the key-based subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、辞書のキーと値の更新、修正、または削除をキー基盤の添え字を使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use the &lt;c0&gt;do&lt;/c0&gt;-&lt;c1&gt;catch&lt;/c1&gt; statement to match on specific Cocoa error codes to differentiate possible failure conditions:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、&lt;c0&gt;do&lt;/c0&gt;-&lt;c1&gt;catch&lt;/c1&gt;文を使って、特定のCocoaエラーコードそれらに関して照合して、可能な失敗状況を区別できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use the &lt;c7&gt;CF&lt;w8&gt;_IMPLICIT&lt;w9&gt;_BRIDGING&lt;w10&gt;_ENABLED&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; and &lt;c11&gt;CF&lt;w12&gt;_IMPLICIT&lt;w13&gt;_BRIDGING&lt;w14&gt;_DISABLED&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt; macros to enclose C function declarations that follow the policy for Core Foundation ownership naming, in order to infer memory management.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、メモリ管理を推論する目的で、&lt;c7&gt;CF&lt;w8&gt;_IMPLICIT&lt;w9&gt;_BRIDGING&lt;w10&gt;_ENABLED&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;および&lt;c11&gt;CF&lt;w12&gt;_IMPLICIT&lt;w13&gt;_BRIDGING&lt;w14&gt;_DISABLED&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt;マクロを使って、Core Foundation所有者命名の方針に従うC関数宣言を囲むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use this initializer to convert a complex sequence or collection type back to an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまたこのイニシャライザを使って、逆に複雑なシーケンスまたはコレクション型を配列へと変換することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can assign a dictionary literal to a variable or constant or pass it to a function that expects a dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、辞書リテラルを変数や定数に代入したり、それを辞書を予期する関数に渡したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can bridge between &lt;c0&gt;Dictionary&lt;/c0&gt; and &lt;c1&gt;NSDictionary&lt;/c1&gt; using the &lt;c2&gt;as&lt;/c2&gt; operator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Dictionary&lt;/c0&gt;と&lt;c1&gt;NSDictionary&lt;/c1&gt;の間をブリッジすることが&lt;c2&gt;as&lt;/c2&gt;演算子を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can call any method on the slices that you might have called on the &lt;c0&gt;absences&lt;/c0&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはどんなメソッドでもそれらスライス上で呼び出すことができます、それはあなたが&lt;c0&gt;absences&lt;/c0&gt;配列上で呼び出すであろうものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can check the equality of instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the equal-to operator (&lt;c2&gt;==&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスの同等性を同等演算子（&lt;c2&gt;==&lt;/c2&gt;）使って確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can check the inequality of instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the not-equal-to operator (&lt;c2&gt;!=&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスの不等性を不等演算子（&lt;c2&gt;!=&lt;/c2&gt;）使って確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of an &lt;e0&gt;equatable&lt;/e0&gt; type by using the equal-to (&lt;c1&gt;==&lt;/c1&gt;) and not-equal-to (&lt;c2&gt;!=&lt;/c2&gt;) operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;e0&gt;equatable&lt;/e0&gt;型のインスタンスを比較することが、同等（&lt;c1&gt;==&lt;/c1&gt;）および不等（&lt;c2&gt;!=&lt;/c2&gt;）演算子によって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the greater-than operator (&lt;c2&gt;&gt;&lt;/c2&gt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスをより大きい演算子（&lt;c2&gt;&gt;&lt;/c2&gt;）を使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the greater-than-or-equal-to operator (&lt;c2&gt;&gt;=&lt;/c2&gt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスをより大きいか等しい演算子（&lt;c2&gt;&gt;=&lt;/c2&gt;）使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the less-than operator (&lt;c2&gt;&lt;&lt;/c2&gt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスをより小さい演算子（&lt;c2&gt;&lt;&lt;/c2&gt;）を使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the less-than-or-equal-to operator (&lt;c2&gt;&lt;=&lt;/c2&gt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスをより小さいか等しい演算子（&lt;c2&gt;&lt;=&lt;/c2&gt;）使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can confirm the data value’s underlying type by retrieving a non-&lt;c5&gt;nil&lt;/c5&gt; value from &lt;a6&gt;&lt;c7&gt;double&lt;w8&gt;Value&lt;/w8&gt;&lt;/c7&gt;&lt;/a6&gt; or by inspecting the &lt;a9&gt;&lt;c10&gt;type&lt;/c10&gt;&lt;/a9&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、データ値のもつ基礎をなす型を確認することが、非&lt;c5&gt;nil&lt;/c5&gt;値を&lt;a6&gt;&lt;c7&gt;double&lt;w8&gt;Value&lt;/w8&gt;&lt;/c7&gt;&lt;/a6&gt;から回収することによって、または&lt;a9&gt;&lt;c10&gt;type&lt;/c10&gt;&lt;/a9&gt;プロパティを調査することによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can confirm the data value’s underlying type by retrieving a non-&lt;c5&gt;nil&lt;/c5&gt; value from &lt;a6&gt;&lt;c7&gt;int&lt;w8&gt;Value&lt;/w8&gt;&lt;/c7&gt;&lt;/a6&gt; or by inspecting the &lt;a9&gt;&lt;c10&gt;type&lt;/c10&gt;&lt;/a9&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、データ値のもつ基礎をなす型を確認することが、非&lt;c5&gt;nil&lt;/c5&gt;値を&lt;a6&gt;&lt;c7&gt;int&lt;w8&gt;Value&lt;/w8&gt;&lt;/c7&gt;&lt;/a6&gt;から回収することによって、または&lt;a9&gt;&lt;c10&gt;type&lt;/c10&gt;&lt;/a9&gt;プロパティを調査することによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can confirm the data value’s underlying type by retrieving a non-&lt;c8&gt;nil&lt;/c8&gt; value from &lt;a9&gt;&lt;c10&gt;dictionary&lt;w11&gt;Value&lt;/w11&gt;&lt;/c10&gt;&lt;/a9&gt; or by inspecting the &lt;a12&gt;&lt;c13&gt;type&lt;/c13&gt;&lt;/a12&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、データ値のもつ基礎をなす型を確認することが、非&lt;c8&gt;nil&lt;/c8&gt;値を&lt;a9&gt;&lt;c10&gt;dictionary&lt;w11&gt;Value&lt;/w11&gt;&lt;/c10&gt;&lt;/a9&gt;から回収することによって、または&lt;a12&gt;&lt;c13&gt;type&lt;/c13&gt;&lt;/a12&gt;プロパティを調査することによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can confirm the data value’s underlying type by retrieving a non-&lt;c8&gt;nil&lt;/c8&gt; value from &lt;a9&gt;&lt;c10&gt;sequence&lt;w11&gt;Value&lt;/w11&gt;&lt;/c10&gt;&lt;/a9&gt; or by inspecting the &lt;a12&gt;&lt;c13&gt;type&lt;/c13&gt;&lt;/a12&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、データ値のもつ基礎をなす型を確認することが、非&lt;c8&gt;nil&lt;/c8&gt;値を&lt;a9&gt;&lt;c10&gt;sequence&lt;w11&gt;Value&lt;/w11&gt;&lt;/c10&gt;&lt;/a9&gt;から回収することによって、または&lt;a12&gt;&lt;c13&gt;type&lt;/c13&gt;&lt;/a12&gt;プロパティを調査することによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create a mirror for any type using the &lt;c0&gt;Mirror(reflecting:)&lt;/c0&gt; initializer, but if you are not satisfied with the mirror supplied for your type by default, you can make it conform to &lt;c1&gt;Custom&lt;w2&gt;Reflectable&lt;/w2&gt;&lt;/c1&gt; and return a custom &lt;c3&gt;Mirror&lt;/c3&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、任意の型に対してミラーを作成することが&lt;c0&gt;Mirror(reflecting:)&lt;/c0&gt;イニシャライザを使って可能です、しかしあなたの型に対して初期状態で提供されるミラーに満足しないならば、あなたはそれを&lt;c1&gt;Custom&lt;w2&gt;Reflectable&lt;/w2&gt;&lt;/c1&gt;に準拠させてあつらえの&lt;c3&gt;Mirror&lt;/c3&gt;を返すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create an empty array by specifying the &lt;c0&gt;Element&lt;/c0&gt; type of your array in the declaration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは空の配列を、あなたの配列の&lt;c0&gt;Element&lt;/c0&gt;型をその宣言において指定することで作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create new instances of a type that conforms to the &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; protocol from a floating-point number or another binary integer of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ある型の新しいインスタンスで&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠するものを、浮動小数点数またはどんな型であれ別のバイナリ整数から作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create your own singletons as a way to provide a unified access point to a resource or service that’s shared across an app, like an audio channel to play sound effects or a network manager to make HTTP requests.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、サウンドエフェクトを再生するオーディオチャンネルやHTTPリクエストを行うネットワークマネージャのような、あるアプリ全体で共有されるリソースやサービスへの一本化されたアクセスポイントを提供する方法として、あなた自身のシングルトンを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can decompose the tuple in a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop, which calls &lt;c2&gt;make&lt;w3&gt;Iterator()&lt;/w3&gt;&lt;/c2&gt; behind the scenes, or when calling the iterator’s &lt;c4&gt;next()&lt;/c4&gt; method directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのタプルを分解することが、&lt;c2&gt;make&lt;w3&gt;Iterator()&lt;/w3&gt;&lt;/c2&gt;を各場面の裏側で呼ぶ&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; ループにおいて、またはイテレータの持つ&lt;c4&gt;next()&lt;/c4&gt;メソッドを直に呼び出すときに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can expect faster execution when the collections share many common elements, or if &lt;c6&gt;Element&lt;/c6&gt; conforms to &lt;c7&gt;Hashable&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはより速い遂行を予想できます、コレクションそれらが多くの普通の要素を共有する場合は、またはもし&lt;c6&gt;Element&lt;/c6&gt;が&lt;c7&gt;Hashable&lt;/c7&gt;に準拠するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can expect faster execution when the collections share many common elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはより速い遂行を予想できます、コレクションそれらが多くの普通の要素を共有する場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can feed data to the hasher using a series of calls to mutating &lt;c1&gt;combine&lt;/c1&gt; methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、データをハーシャーに送り込むのに、一連の変更&lt;c1&gt;combine&lt;/c1&gt;メソッド呼び出しを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can find a complete set of a collection’s valid indices by starting with the collection’s &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property and finding every successor up to, and including, the &lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはコレクションの有効なインデックスの完全な一揃いを見つけることが、そのコレクションの&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティで開始して、すべての後に続くものを&lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;プロパティまで、それを含めて、見つけ出すことによって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can initialize a variable of any of these types using a string literal that holds a single Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、これらのいずれかの型の変数を初期化することが、単一のユニコードスカラーを保持する文字列リテラルを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can initialize a variable or constant of any of these types by assigning a floating-point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、これらの型どれかの変数または定数を、浮動小数点リテラルを割り当てることによって初期化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can initialize a variable or constant of any of these types by assigning an integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、それらの型のどれかの変数や定数を初期化することが、整数リテラルを割り当てることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can initialize a variable or constant of any of these types using a string literal that holds a single character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、これらの型のどれかの変数または定数を、単一の文字を保持する文字列リテラルを使って初期化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can initialize a variable or constant of either of these types using a string literal of any length.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、それらの型のいずれかの変数や定数を初期化することが随意の長さの文字列リテラルを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can iterate over a dictionary using a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop, decomposing each key-value pair into the elements of a tuple.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは辞書全体にわたって反復適用していくことが、&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループを使うことで、各キー値ペアをタプルの要素へと分解しながら可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can make many custom types equatable and hashable by simply declaring these protocol conformances in the same file as the type's original declaration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、多くのあつらえの型をequatableおよびhashableにすることが、単にそれらプロトコル準拠をその型の原型の宣言と同じファイルにおいて宣言することによって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can only use key-value observing with classes that inherit from &lt;a0&gt;&lt;c1&gt;NSObject&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはキー値監視を、&lt;a0&gt;&lt;c1&gt;NSObject&lt;/c1&gt;&lt;/a0&gt;から継承するクラスでのみ使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can pass only valid indices to collection operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは有効なインデックスだけをコレクション演算子に渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can pass zero or more items to the &lt;c0&gt;debug&lt;w1&gt;Print(_:&lt;w2&gt;separator:&lt;w3&gt;terminator:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ゼロ個以上の項目を&lt;c0&gt;debug&lt;w1&gt;Print(_:&lt;w2&gt;separator:&lt;w3&gt;terminator:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can pass zero or more items to the &lt;c0&gt;debug&lt;w1&gt;Print(_:&lt;w2&gt;separator:&lt;w3&gt;terminator:&lt;w4&gt;to:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ゼロ個以上の項目を&lt;c0&gt;debug&lt;w1&gt;Print(_:&lt;w2&gt;separator:&lt;w3&gt;terminator:&lt;w4&gt;to:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can pass zero or more items to the &lt;c0&gt;print(_:&lt;w1&gt;separator:&lt;w2&gt;terminator:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ゼロ個以上の項目を&lt;c0&gt;print(_:&lt;w1&gt;separator:&lt;w2&gt;terminator:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can pass zero or more items to the &lt;c0&gt;print(_:&lt;w1&gt;separator:&lt;w2&gt;terminator:&lt;w3&gt;to:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ゼロ個以上の項目を&lt;c0&gt;print(_:&lt;w1&gt;separator:&lt;w2&gt;terminator:&lt;w3&gt;to:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can rely on automatic synthesis of the &lt;c0&gt;Equatable&lt;/c0&gt; protocol’s requirements for a custom type when you declare &lt;c1&gt;Equatable&lt;/c1&gt; conformance in the type’s original declaration and your type meets these criteria:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Equatable&lt;/c0&gt;プロトコルの要件の自動合成をあつらえの型のために当てにすることが、あなたが&lt;c1&gt;Equatable&lt;/c1&gt;準拠をその型のもつ元々の宣言において宣言してあなたの型がそれらの基準に沿う場合に可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can replace an existing element with a new value by assigning the new value to the subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、既存の要素を新しい値で置き換えることが、新しい値をその添え字に代入することで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、同じスライスを文字列の範囲指定された添え字を使って取って来ることができます、それは範囲式をとっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can reverse a collection without allocating new space for its elements by calling this &lt;c0&gt;reversed()&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションを逆順にすることがそれの要素に対して新しい空間を割り当てることなく&lt;c0&gt;reversed()&lt;/c0&gt;メソッドによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can search a dictionary’s contents for a particular value using the &lt;c0&gt;contains(where:)&lt;/c0&gt; or &lt;c1&gt;first&lt;w2&gt;Index(where:)&lt;/w2&gt;&lt;/c1&gt; methods supplied by default implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ある特定の値を求めて辞書の持つ内容を検索することが、省略時の実装で提供される&lt;c0&gt;contains(where:)&lt;/c0&gt;または&lt;c1&gt;first&lt;w2&gt;Index(where:)&lt;/w2&gt;&lt;/c1&gt;メソッドを使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can sort any mutable collection of elements that conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol by calling this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠する要素からなるあらゆる可変の配列をこのメソッドを呼び出すことによってソートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can sort any sequence of elements that conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol by calling this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはいくらかの要素からなる何らかのシーケンスで&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠するものをこのメソッドを呼び出すことによってソートする（並び替える）ことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのようなインデックスを変数に格納して、それらを幾つかあるコレクションアルゴリズムに渡すことや、相当する要素にアクセスするためにそれらを後で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can store mixed-type keys in dictionaries and other collections that require &lt;c0&gt;Hashable&lt;/c0&gt; conformance by wrapping mixed-type keys in &lt;c1&gt;Any&lt;w2&gt;Hashable&lt;/w2&gt;&lt;/c1&gt; instances:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは混成型のキーを様々な辞書や他のコレクションに格納できます、それらは混成型キーを&lt;c1&gt;Any&lt;w2&gt;Hashable&lt;/w2&gt;&lt;/c1&gt;インスタンスの中へのラップする&lt;c0&gt;Hashable&lt;/c0&gt;準拠を必要とします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can subscript a collection with any valid index other than the collection’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、そのコレクションの末尾インデックスの以外のあらゆる有効なインデックスで、コレクションに対して添え字を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can subscript an array with any integer from zero up to, but not including, the count of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ゼロから配列の総数まで、しかしそれを含めず、任意の整数で添え字を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can take advantage of this compiler support when defining your own custom enumeration by declaring conformance to &lt;c0&gt;Case&lt;w1&gt;Iterable&lt;/w1&gt;&lt;/c0&gt; in the enumeration’s original declaration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのコンパイラサポートを、あなた独自のあつらえの列挙を&lt;c0&gt;Case&lt;w1&gt;Iterable&lt;/w1&gt;&lt;/c0&gt;への準拠をその列挙の元の宣言において宣言することによって定義する場合に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;c0&gt;Any&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt; to hide the type signature of a more complex iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Any&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt;を使って、あるより複雑なイテレータの型シグネチャを隠すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;c0&gt;pop&lt;w1&gt;Last()&lt;/w1&gt;&lt;/c0&gt; to remove the last element of a collection that might be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;pop&lt;w1&gt;Last()&lt;/w1&gt;&lt;/c0&gt;を使って、空であるかもしれないコレクションの最後の要素を削除できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;c0&gt;stride(from:&lt;w1&gt;through:&lt;w2&gt;by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; to create a sequence that strides upward or downward.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;stride(from:&lt;w1&gt;through:&lt;w2&gt;by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使って上向きまたは下向きにまたいで越えるシーケンスを作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;c0&gt;stride(from:&lt;w1&gt;to:&lt;w2&gt;by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; to create a sequence that strides upward or downward.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;stride(from:&lt;w1&gt;to:&lt;w2&gt;by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使って上向きまたは下向きにまたいで越えるシーケンスを作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;c3&gt;==&lt;/c3&gt; to check for equality between any two instances or call the &lt;c4&gt;Equatable&lt;/c4&gt;-constrained &lt;c5&gt;contains(_:)&lt;/c5&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c3&gt;==&lt;/c3&gt;を使って何でも２つのインスタンス間の同等性を調べたり、&lt;c4&gt;Equatable&lt;/c4&gt;制約の&lt;c5&gt;contains(_:)&lt;/c5&gt;メソッドを呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use Objective-C and Swift files together in a single project, no matter which language the project used originally.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはObjective-CおよびSwiftファイルを一緒にしてある単一のプロジェクトの中で使うことができます、どちらの言語をそのプロジェクトが最初に使用しようとも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a &lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance when you need to efficiently represent a single value as a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを、あなたが単一の値をコレクションとして効率的に表す必要がある場合に使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an array literal anywhere an instance of an &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Array&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; type is expected: as a value assigned to a variable or constant, as a parameter to a method or initializer, or even as the subject of a nonmutating operation like &lt;c4&gt;map(_:)&lt;/c4&gt; or &lt;c5&gt;filter(_:)&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは配列リテラルを&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Array&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;型が予期されるところはどこででも使うことができます：変数や定数に割り当てられる値として、メソッドやイニシャライザへのパラメータとして、または&lt;c4&gt;map(_:)&lt;/c4&gt;や&lt;c5&gt;filter(_:)&lt;/c5&gt;のような非変更の操作のサブジェクトとしてさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use any type that conforms to the &lt;c0&gt;Hashable&lt;/c0&gt; protocol in a set or as a dictionary key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Hashable&lt;/c0&gt;プロトコルに準拠するあらゆる型を集合においてまたは辞書キーとして使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use optional chaining to call the &lt;c5&gt;@objc&lt;/c5&gt; method &lt;c6&gt;get&lt;w7&gt;Integer&lt;w8&gt;Value()&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; on &lt;c9&gt;obj&lt;/c9&gt; safely.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、オプショナル連鎖を使って、&lt;c5&gt;@objc&lt;/c5&gt;メソッド&lt;c6&gt;get&lt;w7&gt;Integer&lt;w8&gt;Value()&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;を&lt;c9&gt;obj&lt;/c9&gt;上で安全に呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use relational operators, such as the less-than and equal-to operators (&lt;c0&gt;&lt;&lt;/c0&gt; and &lt;c1&gt;==&lt;/c1&gt;), to compare instances of different binary integer types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、関係演算子、例えばより小さいそして同等演算子（&lt;c0&gt;&lt;&lt;/c0&gt;そして&lt;c1&gt;==&lt;/c1&gt;）などを使って、異なるバイナリ整数型のインスタンス同士を比較できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use special versions of some sequence and collection operations when working with a &lt;c0&gt;Comparable&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、特別版のなんらかのシーケンスやコレクション演算をある&lt;c0&gt;Comparable&lt;/c0&gt;型を扱うときに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;c0&gt;Any&lt;w1&gt;Class&lt;/w1&gt;&lt;/c0&gt; protocol as the concrete type for an instance of any class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Any&lt;w1&gt;Class&lt;/w1&gt;&lt;/c0&gt;プロトコルをあらゆるクラスのインスタンスに対して具象型として使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;c0&gt;relative(to:)&lt;/c0&gt; method to convert a range expression, which could be missing one or both of its endpoints, into a concrete range that is bounded on both sides.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;relative(to:)&lt;/c0&gt;メソッドを使うことによって、それの端点の両方または１つを抜かすことができる範囲式を、両方の側で閉ざされた具体的な範囲へと変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;c0&gt;type(of:)&lt;/c0&gt; function to find the dynamic type of a value, particularly when the dynamic type is different from the static type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;type(of:)&lt;/c0&gt;を使うことである値の動的型を見つけることができます、とりわけ動的型が静的型と異なる場合に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;c4&gt;magnitude&lt;/c4&gt; property in operations that are simpler to implement in terms of unsigned values, such as printing the value of an integer, which is just printing a ‘-’ character in front of an absolute value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c4&gt;magnitude&lt;/c4&gt;プロパティを、ずっと単純に符号なしの値に関して実装する演算において使用できます、例えば整数の値を印字することなど、それはちょっと「-」文字を絶対値の前に印字しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the conditional type cast operator (&lt;c0&gt;as?&lt;/c0&gt;), which returns an optional value of the type you are trying to downcast to:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、条件付き型キャスト演算子（&lt;c0&gt;as?&lt;/c0&gt;）を使うことができます、それはあなたがそれへとダウンキャストを試みる型のオプショナル値を返します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) to compare any two arrays that store the same, &lt;c1&gt;Equatable&lt;/c1&gt;-conforming element type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、同等演算子（&lt;c0&gt;==&lt;/c0&gt;）を使って同じ、&lt;c1&gt;Equatable&lt;/c1&gt;準拠の、要素型を格納する任意の２つの配列を比較できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the pattern-matching operator (&lt;c0&gt;~=&lt;/c0&gt;) to test whether a value is included in a range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このパターンマッチング演算子（&lt;c0&gt;~=&lt;/c0&gt;）を使うことで、ある値がある範囲に含まれるかどうか検査できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the predicate to check for an element of a type that doesn’t conform to the &lt;c0&gt;Equatable&lt;/c0&gt; protocol, or to find an element that satisfies a general condition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは述部を使うことで、&lt;c0&gt;Equatable&lt;/c0&gt;プロトコルに準拠しない型の要素を調べること、またはある一般的条件を満たす要素を見つけることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the predicate to check for an element of a type that doesn’t conform to the &lt;c0&gt;Equatable&lt;/c0&gt; protocol, such as the &lt;c1&gt;HTTPResponse&lt;/c1&gt; enumeration in this example.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは述部を使って、&lt;c0&gt;Equatable&lt;/c0&gt;プロトコルに準拠しない型、例えばこの例での&lt;c1&gt;HTTPResponse&lt;/c1&gt;列挙などの要素に対して調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the predicate to find an element of a type that doesn’t conform to the &lt;c0&gt;Equatable&lt;/c0&gt; protocol or to find an element that matches particular criteria.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは述部を使って、&lt;c0&gt;Equatable&lt;/c0&gt;プロトコルに準拠しない型の要素を見つける、または特定の基準に合致する要素を見つけることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the unary plus operator (&lt;c0&gt;+&lt;/c0&gt;) to provide symmetry in your code for positive numbers when also using the unary minus operator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、単行プラス演算子（&lt;c0&gt;+&lt;/c0&gt;）を使うことで、均整美をあなたのコードにおいて正の数に対して単行マイナス演算子もまた使う場合に提供できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this function to call an API that takes an escaping closure in a way that doesn’t allow the closure to escape in practice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこの関数を使うことで、クロージャが脱出するのを実際には許可されないある方法において脱出クロージャをとるAPIを呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this function to stride over values of any type that conforms to the &lt;c0&gt;Strideable&lt;/c0&gt; protocol, such as integers or floating-point types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、この関数を使って&lt;c0&gt;Strideable&lt;/c0&gt;プロトコルに準拠する任意の型、例えば整数や浮動小数点型の値いくつかをまたいで越すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this initializer to create an array from any other type that conforms to the &lt;c0&gt;Sequence&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのイニシャライザを使って、&lt;c0&gt;Sequence&lt;/c0&gt;プロトコルに準拠する何か他の型から配列を作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、その部分的な範囲の下側の境界からそのコレクションの終わりまでの範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、コレクションの始まりからその部分的な範囲の上側の境界までの、そしてそれを含んでいる範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、コレクションの始まりからその部分的な範囲の上側の境界までの、しかしそれを含んでいない範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use your own custom types as dictionary keys by making them conform to the &lt;c2&gt;Hashable&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あなた独自のあつらえの型を辞書のキーとして使うことがそれらを&lt;c2&gt;Hashable&lt;/c2&gt;プロトコルに準拠させることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can work with types declared in Swift from within the Objective-C code in your project by importing an Xcode-generated header file.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、Swiftにおいて宣言される型をあなたのプロジェクトの中のObjective-Cコード内から扱うことが、Xcode生成のヘッダファイルをインポートすることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can write generic methods that operate on any numeric type in the standard library by using the &lt;c2&gt;Additive&lt;w3&gt;Arithmetic&lt;/w3&gt;&lt;/c2&gt; protocol as a generic constraint.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c2&gt;Additive&lt;w3&gt;Arithmetic&lt;/w3&gt;&lt;/c2&gt;プロトコルを総称体制約として使うことで、標準ライブラリのあらゆる数値型上で作用する総称体メソッドを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use &lt;c0&gt;*&lt;/c0&gt; with arguments of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;*&lt;/c0&gt;をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use &lt;c0&gt;+&lt;/c0&gt; with arguments of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;+&lt;/c0&gt;をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use &lt;c0&gt;-&lt;/c0&gt; with arguments of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;-&lt;/c0&gt;をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use a &lt;c0&gt;break&lt;/c0&gt; or &lt;c1&gt;continue&lt;/c1&gt; statement to exit the current call of the &lt;c2&gt;body&lt;/c2&gt; closure or skip subsequent calls.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;break&lt;/c0&gt;または&lt;c1&gt;continue&lt;/c1&gt;文を使って、&lt;c2&gt;body&lt;/c2&gt;クロージャの現在の呼び出しを抜け出したり、または続いて起こる呼び出しを飛ばしたりできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can’t initialize a type that conforms to &lt;c1&gt;Expressible&lt;w2&gt;By&lt;w3&gt;Array&lt;w4&gt;Literal&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; simply by assigning an existing array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、既存の配列を割り当てることで&lt;c1&gt;Expressible&lt;w2&gt;By&lt;w3&gt;Array&lt;w4&gt;Literal&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する型を初期化することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can’t initialize a type that conforms to &lt;c2&gt;Expressible&lt;w3&gt;By&lt;w4&gt;Dictionary&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; simply by assigning an instance of &lt;c6&gt;Dictionary&lt;/c6&gt;, &lt;c7&gt;Key&lt;w8&gt;Value&lt;w9&gt;Pairs&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;, or similar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c2&gt;Expressible&lt;w3&gt;By&lt;w4&gt;Dictionary&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に準拠する型を単純に&lt;c6&gt;Dictionary&lt;/c6&gt;、&lt;c7&gt;Key&lt;w8&gt;Value&lt;w9&gt;Pairs&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;、または似たものを割り当てることによって初期化できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You choose which method to use based on whether the API you are invoking returns an unretained or a retained object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはどちらかのメソッドを、あなたが呼んでいるAPIが、リテイン（保有）されないまたはリテインされるオブジェクトを返すのかに基づき選択して使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You could use the &lt;c3&gt;id&lt;/c3&gt; property to identify a particular user even if other data fields change, such as the user’s name.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、その&lt;c3&gt;id&lt;/c3&gt;プロパティを使って、特定のユーザを識別できます、たとえ他のデータフィールド、たとえばそのユーザのもつ名前などが変わるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You create a &lt;c0&gt;Closed&lt;w1&gt;Range&lt;/w1&gt;&lt;/c0&gt; instance by using the closed range operator (&lt;c2&gt;...&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Closed&lt;w1&gt;Range&lt;/w1&gt;&lt;/c0&gt;インスタンスを完結範囲演算子（&lt;c2&gt;...&lt;/c2&gt;）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You create simple singletons using a static type property, which is guaranteed to be lazily initialized only once, even when accessed across multiple threads simultaneously:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは単純なシングルトンをstatic型プロパティを使って作成できます、それはただ一度だけ遅延初期化されることを保証されます、たとえ複数のスレッドから同時にアクセスされる場合でさえもです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You don’t need to do anything special to create the generated header—just import it to use its contents in your Objective-C code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、生成ヘッダを作成するために特に何もする必要はありません ― あなたは、ただ単にそれをインポートしてそれの内容をあなたのObjective-Cコードにおいて使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You might not anticipate the consequences of changing a heavily shared instance, so it's more work to write such code correctly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、重く共有されるインスタンスの変更の帰着を見越して備えられないかもしれません、それでそのようなコードを正しく書くためにさらに仕事が増えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You must call a resume method exactly once on every execution path throughout the program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ある再開メソッドをあらゆる遂行経路上でそのプログラムの間を通して厳密に一度だけ呼び出さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You must not call this method if any other copy of this iterator has been advanced with a call to its &lt;c0&gt;next()&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このイテレータの何か他のコピーがそれの&lt;c0&gt;next()&lt;/c0&gt;メソッドを呼び出すことで前に進められるならば、このメソッドを呼び出す必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You must resume the continuation exactly once.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、厳密に一度だけ継続を再開しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You must use only one kind of top-level encoding container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ある種のトップレベルのエンコーディングコンテナのみを使う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You need to manually implement &lt;c0&gt;Equatable&lt;/c0&gt; and &lt;c1&gt;Hashable&lt;/c1&gt; conformance for a type in these cases:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、手動で&lt;c0&gt;Equatable&lt;/c0&gt;と&lt;c1&gt;Hashable&lt;/c1&gt;準拠をある型に対して実装する必要がこれらの場合には必要です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You only need to initialize your own &lt;c9&gt;Checked&lt;w10&gt;Continuation&lt;T, E&gt;&lt;/w10&gt;&lt;/c9&gt; if you already have an &lt;c11&gt;Unsafe&lt;w12&gt;Continuation&lt;/w12&gt;&lt;/c11&gt; you want to impose checking on.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが唯一必要とするのはあなた独自の&lt;c9&gt;Checked&lt;w10&gt;Continuation&lt;T, E&gt;&lt;/w10&gt;&lt;/c9&gt;です、もしあなたがそれの上に検査を課したい&lt;c11&gt;Unsafe&lt;w12&gt;Continuation&lt;/w12&gt;&lt;/c11&gt;をあなたが既に持つならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You should prefer &lt;c0&gt;with&lt;w1&gt;Va&lt;w2&gt;List(_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instead of this function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこの関数よりも&lt;c0&gt;with&lt;w1&gt;Va&lt;w2&gt;List(_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を選ぶべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You throw Cocoa errors by initializing a Cocoa error type and passing in the relevant error domain and code:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、Cocoaエラーのスローを、あるCocoaエラー型を初期化して、関連エラー領域およびコードを渡すことによって行います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use &lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt; when you need the flexibility of an untyped object or when you use bridged Objective-C methods and properties that return an untyped result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが型付けされないオブジェクトの柔軟性を必要とするとき、または型付けされない結果を返すブリッジされたObjective-Cメソッドやプロパティを使用するとき、あなたは&lt;c0&gt;Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use Swift's &lt;c0&gt;throw&lt;/c0&gt; statement and &lt;c1&gt;do&lt;/c1&gt;-&lt;c2&gt;catch&lt;/c2&gt; statement to throw and catch errors from Cocoa APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、Swiftの持つ&lt;c0&gt;throw&lt;/c0&gt;文と&lt;c1&gt;do&lt;/c1&gt;-&lt;c2&gt;catch&lt;/c2&gt;文を使って、Cocoa APIからのエラーをスローおよびキャッチします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use arrays to organize your app’s data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは配列を使ってあなたのアプリのデータを整理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use complex macros in C and Objective-C to avoid type-checking constraints or to avoid retyping large amounts of boilerplate code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、複雑なマクロをCとObjective-Cにおいて型チェック制約を避けたり、常用文コードの大きな塊を繰り返しタイピングすることを避けるために使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use custom error domains in Cocoa to group related categories of errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あつらえのエラー領域をCocoaにおいて使用して、関連するエラーのカテゴリをグループにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use delegates to interact with Cocoa objects that inform you of events in an app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは委任先を使って、あるアプリの中のイベントについてあなたに告知するCocoaオブジェクトと相互作用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use singletons to provide a globally accessible, shared instance of a class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはシングルトンを使って、グローバルにアクセス可能な、あるクラスの共有インスタンスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use that key to retrieve the corresponding value, which can be any object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのキーを使ってその対応している値を取り出すことができ、その値はあらゆるオブジェクトであることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_NOTHROW&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro on Objective-C method declarations that produce an &lt;s3&gt;&lt;c4&gt;NSError&lt;/c4&gt;&lt;/s3&gt; to prevent it from being imported by Swift as a method that throws.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_NOTHROW&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを、&lt;s3&gt;&lt;c4&gt;NSError&lt;/c4&gt;&lt;/s3&gt;を生成するObjective-Cメソッド宣言上で使って、それがスローするメソッドとしてSwiftによってインポートされるのを防止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c0&gt;old&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;new&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; properties of the &lt;a4&gt;&lt;c5&gt;NSKey&lt;w6&gt;Value&lt;w7&gt;Observed&lt;w8&gt;Change&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;&lt;/a4&gt; instance to see what's changed about the property you're observing.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;a4&gt;&lt;c5&gt;NSKey&lt;w6&gt;Value&lt;w7&gt;Observed&lt;w8&gt;Change&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;&lt;/a4&gt;インスタンスの&lt;c0&gt;old&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;new&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;プロパティを使って、あなたが監視しているプロパティについて変更されるのが何か見ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the default &lt;c0&gt;init(_:)&lt;/c0&gt; initializer to create a new instance when you’re sure that the value passed is representable in the new type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、省略時の&lt;c0&gt;init(_:)&lt;/c0&gt;イニシャライザを使って新しいインスタンスを作成するのは、渡される値が新しい型において表現可能であるとあなたが確信する場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this initializer to create a dictionary when you have a sequence of key-value tuples that might have duplicate keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、重複キーを持つかもしれないキー値タプルのシーケンスをあなたが持つ場合、このイニシャライザを使って辞書を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this initializer to create a dictionary when you have a sequence of key-value tuples with unique keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特有なキーをもつキー値タプルのシーケンスをあなたが持つ場合、あなたはこのイニシャライザを使って辞書を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this method to randomize the elements of a collection when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、あるコレクションの要素を無作為化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this method to randomize the elements of a sequence when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、あるシーケンスの要素を無作為化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this protocol to present a native Swift interface to a C “varargs” API.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このプロトコルを使ってSwift固有のインターフェースをC「varags」APIに贈呈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You want to compare the absences in the first half of the session with those in the second half.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、前学期の欠席者を後半のそれと比較したいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You want to customize the type's conformance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがその型の持つ準拠をカスタマイズしたい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You want to extend a type declared in another file or module to conform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが別のファイルまたはモジュールにおいて宣言される型を拡張することで準拠したい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You write each key-value pair with a colon (&lt;c0&gt;:&lt;/c0&gt;) separating the key and the value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、各キー値ペアをコロン（&lt;c0&gt;:&lt;/c0&gt;）で区切るキーと値で書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Your own custom types can be hashable as well.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自のあつらえの型も同様にハッシュ化されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You’d like to create a set of the grid points where a user has already tapped.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ユーザがすでにタップしたところの格子点ひとそろいを作成したいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You’re tasked with finding the day with the most absences in the second half of the session.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこの学期の後半において最も多く欠席者がいる日付を見つける任務を負います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zero is a multiple of everything because &lt;e9&gt;0 = 0*x&lt;/e9&gt; for any integer &lt;e10&gt;x&lt;/e10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロはあらゆるものの倍数です、なぜなら&lt;e9&gt;0 = 0*x&lt;/e9&gt;なので、どんな整数&lt;e10&gt;x&lt;/e10&gt;に対してもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zero is neither a normal nor a subnormal number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロは、ノーマルでもサブノーマル数でもありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zero is the identity element for addition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロは加算に対する単位元です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zero or more additional values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロ以上の追加の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zero or more items to print.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>出力するゼロ個以上の項目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;Pointee&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, which is passed as-is.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;Pointee&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;、それは現品で渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>an inout argument of the referenced type, which gets passed as a pointer to a writeback temporary with autoreleasing ownership semantics,</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照される型のインアウト引数、それはオートリリース所有権意味論を持つライトバックテンポラリへのポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>param container: The container in which the corrupted data was accessed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>param container: そこで破壊されたデータがアクセスされたところのコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>param debugDescription: A description of the error to aid in debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>param debugDescription: デバッグにおいて支援する目的のエラー解説。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>param key: The key which caused the failure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>param key: 失敗を引き起こしたキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Pseudo-NaNs”, “pseudo-infinities”, and “unnormals” are interpreted as non-canonical NaN encodings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>“Pseudo-NaN”、“pseudo-infinitie”、そして“unnormal”は、非正準NaNエンコーディングとして解釈されます。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Pseudo-denormals” are interpreted as non-canonical encodings of subnormal values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>“Pseudo-denormal”は、非正規化数値の非正準エンコーディングとして解釈されます。</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
